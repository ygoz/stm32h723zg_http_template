
STM32H723_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010de4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000339c  080110b4  080110b4  000120b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014450  08014450  00015450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014458  08014458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801445c  0801445c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  24000000  08014460  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000252f4  24000090  080144ec  00016090  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24025384  080144ec  00016384  2**0
                  ALLOC
  9 .lwip_sec     00000160  30000000  30000000  00017000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001608c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005034b  00000000  00000000  000160ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000b937  00000000  00000000  00066405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002460  00000000  00000000  00071d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00003779  00000000  00000000  000741a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000487de  00000000  00000000  00077919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00057b5f  00000000  00000000  000c00f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016cf62  00000000  00000000  00117c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00284bb8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007bdc  00000000  00000000  00284bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0001e40d  00000000  00000000  0028c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  002aabe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000090 	.word	0x24000090
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801109c 	.word	0x0801109c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000094 	.word	0x24000094
 800030c:	0801109c 	.word	0x0801109c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
	* Useful for debugging issues.
	*/
   __BKPT(0);
 80003c0:	be00      	bkpt	0x0000
}
 80003c2:	4770      	bx	lr

080003c4 <lwiperf_tcp_close>:
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
  lwiperf_state_base_t *prev = NULL;
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80003c4:	4a3d      	ldr	r2, [pc, #244]	@ (80004bc <lwiperf_tcp_close+0xf8>)
 80003c6:	6813      	ldr	r3, [r2, #0]
}

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 80003c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80003cc:	4604      	mov	r4, r0
 80003ce:	b087      	sub	sp, #28
 80003d0:	460e      	mov	r6, r1
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80003d2:	b14b      	cbz	r3, 80003e8 <lwiperf_tcp_close+0x24>
    if (iter == item) {
 80003d4:	4298      	cmp	r0, r3
        lwiperf_all_connections = iter->next;
 80003d6:	681d      	ldr	r5, [r3, #0]
    if (iter == item) {
 80003d8:	d102      	bne.n	80003e0 <lwiperf_tcp_close+0x1c>
 80003da:	e04b      	b.n	8000474 <lwiperf_tcp_close+0xb0>
 80003dc:	429c      	cmp	r4, r3
 80003de:	d048      	beq.n	8000472 <lwiperf_tcp_close+0xae>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80003e0:	461a      	mov	r2, r3
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d1f9      	bne.n	80003dc <lwiperf_tcp_close+0x18>
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 80003e8:	b1cc      	cbz	r4, 800041e <lwiperf_tcp_close+0x5a>
 80003ea:	69a3      	ldr	r3, [r4, #24]
 80003ec:	b1bb      	cbz	r3, 800041e <lwiperf_tcp_close+0x5a>
    now = sys_now();
 80003ee:	f003 fce7 	bl	8003dc0 <sys_now>
    duration_ms = now - conn->time_started;
 80003f2:	6963      	ldr	r3, [r4, #20]
    if (duration_ms == 0) {
 80003f4:	1ac5      	subs	r5, r0, r3
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80003f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (duration_ms == 0) {
 80003f8:	d05e      	beq.n	80004b8 <lwiperf_tcp_close+0xf4>
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80003fa:	fbb3 f7f5 	udiv	r7, r3, r5
 80003fe:	00ff      	lsls	r7, r7, #3
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 8000400:	6922      	ldr	r2, [r4, #16]
    conn->report_fn(conn->report_arg, report_type,
 8000402:	4631      	mov	r1, r6
 8000404:	f8b2 c016 	ldrh.w	ip, [r2, #22]
 8000408:	e9d4 6006 	ldrd	r6, r0, [r4, #24]
 800040c:	9302      	str	r3, [sp, #8]
 800040e:	4663      	mov	r3, ip
 8000410:	e9cd 5703 	strd	r5, r7, [sp, #12]
 8000414:	8b15      	ldrh	r5, [r2, #24]
 8000416:	9501      	str	r5, [sp, #4]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 8000418:	1d15      	adds	r5, r2, #4
    conn->report_fn(conn->report_arg, report_type,
 800041a:	9500      	str	r5, [sp, #0]
 800041c:	47b0      	blx	r6
  err_t err;

  lwiperf_list_remove(&conn->base);
  lwip_tcp_conn_report(conn, report_type);
  if (conn->conn_pcb != NULL) {
 800041e:	6920      	ldr	r0, [r4, #16]
 8000420:	2800      	cmp	r0, #0
 8000422:	d03c      	beq.n	800049e <lwiperf_tcp_close+0xda>
    tcp_arg(conn->conn_pcb, NULL);
 8000424:	2100      	movs	r1, #0
 8000426:	f009 fd43 	bl	8009eb0 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	6920      	ldr	r0, [r4, #16]
 800042e:	4611      	mov	r1, r2
 8000430:	f009 fda0 	bl	8009f74 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 8000434:	2100      	movs	r1, #0
 8000436:	6920      	ldr	r0, [r4, #16]
 8000438:	f009 fd5c 	bl	8009ef4 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 800043c:	2100      	movs	r1, #0
 800043e:	6920      	ldr	r0, [r4, #16]
 8000440:	f009 fd3e 	bl	8009ec0 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8000444:	6920      	ldr	r0, [r4, #16]
 8000446:	2100      	movs	r1, #0
 8000448:	f009 fd6e 	bl	8009f28 <tcp_err>
    err = tcp_close(conn->conn_pcb);
 800044c:	6920      	ldr	r0, [r4, #16]
 800044e:	f00a fbd3 	bl	800abf8 <tcp_close>
    if (err != ERR_OK) {
 8000452:	b928      	cbnz	r0, 8000460 <lwiperf_tcp_close+0x9c>
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
    LWIP_ASSERT("error", err == ERR_OK);
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000454:	4620      	mov	r0, r4
}
 8000456:	b007      	add	sp, #28
 8000458:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800045c:	f008 b8c2 	b.w	80085e4 <mem_free>
      tcp_abort(conn->conn_pcb);
 8000460:	6920      	ldr	r0, [r4, #16]
 8000462:	f00a f9e9 	bl	800a838 <tcp_abort>
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000466:	4620      	mov	r0, r4
}
 8000468:	b007      	add	sp, #28
 800046a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800046e:	f008 b8b9 	b.w	80085e4 <mem_free>
        prev->next = iter->next;
 8000472:	6825      	ldr	r5, [r4, #0]
 8000474:	6015      	str	r5, [r2, #0]
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8000476:	2d00      	cmp	r5, #0
 8000478:	d0b7      	beq.n	80003ea <lwiperf_tcp_close+0x26>
        LWIP_ASSERT("duplicate entry", iter != item);
 800047a:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 80004c4 <lwiperf_tcp_close+0x100>
 800047e:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 80004cc <lwiperf_tcp_close+0x108>
 8000482:	4f0f      	ldr	r7, [pc, #60]	@ (80004c0 <lwiperf_tcp_close+0xfc>)
 8000484:	e002      	b.n	800048c <lwiperf_tcp_close+0xc8>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8000486:	682d      	ldr	r5, [r5, #0]
 8000488:	2d00      	cmp	r5, #0
 800048a:	d0ad      	beq.n	80003e8 <lwiperf_tcp_close+0x24>
        LWIP_ASSERT("duplicate entry", iter != item);
 800048c:	42ac      	cmp	r4, r5
 800048e:	d1fa      	bne.n	8000486 <lwiperf_tcp_close+0xc2>
 8000490:	464b      	mov	r3, r9
 8000492:	22d0      	movs	r2, #208	@ 0xd0
 8000494:	4641      	mov	r1, r8
 8000496:	4638      	mov	r0, r7
 8000498:	f00f fd4c 	bl	800ff34 <iprintf>
 800049c:	e7f3      	b.n	8000486 <lwiperf_tcp_close+0xc2>
    err = tcp_close(conn->server_pcb);
 800049e:	68e0      	ldr	r0, [r4, #12]
 80004a0:	f00a fbaa 	bl	800abf8 <tcp_close>
    LWIP_ASSERT("error", err == ERR_OK);
 80004a4:	2800      	cmp	r0, #0
 80004a6:	d0d5      	beq.n	8000454 <lwiperf_tcp_close+0x90>
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <lwiperf_tcp_close+0x100>)
 80004aa:	f240 120d 	movw	r2, #269	@ 0x10d
 80004ae:	4906      	ldr	r1, [pc, #24]	@ (80004c8 <lwiperf_tcp_close+0x104>)
 80004b0:	4803      	ldr	r0, [pc, #12]	@ (80004c0 <lwiperf_tcp_close+0xfc>)
 80004b2:	f00f fd3f 	bl	800ff34 <iprintf>
 80004b6:	e7cd      	b.n	8000454 <lwiperf_tcp_close+0x90>
      bandwidth_kbitpsec = 0;
 80004b8:	462f      	mov	r7, r5
 80004ba:	e7a1      	b.n	8000400 <lwiperf_tcp_close+0x3c>
 80004bc:	240000ac 	.word	0x240000ac
 80004c0:	080110dc 	.word	0x080110dc
 80004c4:	080110b4 	.word	0x080110b4
 80004c8:	08011104 	.word	0x08011104
 80004cc:	080110cc 	.word	0x080110cc

080004d0 <lwiperf_tcp_accept>:
/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 80004d0:	2800      	cmp	r0, #0
 80004d2:	bf18      	it	ne
 80004d4:	2900      	cmpne	r1, #0
 80004d6:	f000 8091 	beq.w	80005fc <lwiperf_tcp_accept+0x12c>
 80004da:	2a00      	cmp	r2, #0
 80004dc:	f040 808e 	bne.w	80005fc <lwiperf_tcp_accept+0x12c>
{
 80004e0:	b570      	push	{r4, r5, r6, lr}
    return ERR_VAL;
  }

  s = (lwiperf_state_tcp_t *)arg;
  LWIP_ASSERT("invalid session", s->base.server);
 80004e2:	7943      	ldrb	r3, [r0, #5]
 80004e4:	460e      	mov	r6, r1
 80004e6:	4604      	mov	r4, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d06a      	beq.n	80005c2 <lwiperf_tcp_accept+0xf2>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 80004ec:	68e3      	ldr	r3, [r4, #12]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d071      	beq.n	80005d6 <lwiperf_tcp_accept+0x106>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 80004f2:	6923      	ldr	r3, [r4, #16]
 80004f4:	b133      	cbz	r3, 8000504 <lwiperf_tcp_accept+0x34>
 80004f6:	4b43      	ldr	r3, [pc, #268]	@ (8000604 <lwiperf_tcp_accept+0x134>)
 80004f8:	f240 225a 	movw	r2, #602	@ 0x25a
 80004fc:	4942      	ldr	r1, [pc, #264]	@ (8000608 <lwiperf_tcp_accept+0x138>)
 80004fe:	4843      	ldr	r0, [pc, #268]	@ (800060c <lwiperf_tcp_accept+0x13c>)
 8000500:	f00f fd18 	bl	800ff34 <iprintf>
  if (s->specific_remote) {
 8000504:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8000508:	68a2      	ldr	r2, [r4, #8]
  if (s->specific_remote) {
 800050a:	2b00      	cmp	r3, #0
 800050c:	d137      	bne.n	800057e <lwiperf_tcp_accept+0xae>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 800050e:	b132      	cbz	r2, 800051e <lwiperf_tcp_accept+0x4e>
 8000510:	4b3c      	ldr	r3, [pc, #240]	@ (8000604 <lwiperf_tcp_accept+0x134>)
 8000512:	f240 2262 	movw	r2, #610	@ 0x262
 8000516:	493e      	ldr	r1, [pc, #248]	@ (8000610 <lwiperf_tcp_accept+0x140>)
 8000518:	483c      	ldr	r0, [pc, #240]	@ (800060c <lwiperf_tcp_accept+0x13c>)
 800051a:	f00f fd0b 	bl	800ff34 <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800051e:	2048      	movs	r0, #72	@ 0x48
 8000520:	f008 fa08 	bl	8008934 <mem_malloc>
  if (conn == NULL) {
 8000524:	4605      	mov	r5, r0
 8000526:	2800      	cmp	r0, #0
 8000528:	d065      	beq.n	80005f6 <lwiperf_tcp_accept+0x126>
    return ERR_MEM;
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 800052a:	2248      	movs	r2, #72	@ 0x48
 800052c:	2100      	movs	r1, #0
 800052e:	f00f fdb4 	bl	801009a <memset>
  conn->base.tcp = 1;
 8000532:	f240 1301 	movw	r3, #257	@ 0x101
  conn->base.server = 1;
  conn->base.related_master_state = &s->base;
 8000536:	60ac      	str	r4, [r5, #8]
  conn->base.tcp = 1;
 8000538:	80ab      	strh	r3, [r5, #4]
  conn->conn_pcb = newpcb;
 800053a:	612e      	str	r6, [r5, #16]
  conn->time_started = sys_now();
 800053c:	f003 fc40 	bl	8003dc0 <sys_now>
  conn->report_fn = s->report_fn;
 8000540:	69a3      	ldr	r3, [r4, #24]
  conn->report_arg = s->report_arg;

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 8000542:	4629      	mov	r1, r5
  conn->report_fn = s->report_fn;
 8000544:	e9c5 0305 	strd	r0, r3, [r5, #20]
  conn->report_arg = s->report_arg;
 8000548:	69e3      	ldr	r3, [r4, #28]
  tcp_arg(newpcb, conn);
 800054a:	4630      	mov	r0, r6
  conn->report_arg = s->report_arg;
 800054c:	61eb      	str	r3, [r5, #28]
  tcp_arg(newpcb, conn);
 800054e:	f009 fcaf 	bl	8009eb0 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 8000552:	4930      	ldr	r1, [pc, #192]	@ (8000614 <lwiperf_tcp_accept+0x144>)
 8000554:	4630      	mov	r0, r6
 8000556:	f009 fcb3 	bl	8009ec0 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 800055a:	2202      	movs	r2, #2
 800055c:	492e      	ldr	r1, [pc, #184]	@ (8000618 <lwiperf_tcp_accept+0x148>)
 800055e:	4630      	mov	r0, r6
 8000560:	f009 fd08 	bl	8009f74 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 8000564:	492d      	ldr	r1, [pc, #180]	@ (800061c <lwiperf_tcp_accept+0x14c>)
 8000566:	6928      	ldr	r0, [r5, #16]
 8000568:	f009 fcde 	bl	8009f28 <tcp_err>

  if (s->specific_remote) {
 800056c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8000570:	b973      	cbnz	r3, 8000590 <lwiperf_tcp_accept+0xc0>
  item->next = lwiperf_all_connections;
 8000572:	4e2b      	ldr	r6, [pc, #172]	@ (8000620 <lwiperf_tcp_accept+0x150>)
 8000574:	6831      	ldr	r1, [r6, #0]
      s->report_fn = NULL;
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
    }
  }
  lwiperf_list_add(&conn->base);
  return ERR_OK;
 8000576:	2000      	movs	r0, #0
  item->next = lwiperf_all_connections;
 8000578:	6029      	str	r1, [r5, #0]
  lwiperf_all_connections = item;
 800057a:	6035      	str	r5, [r6, #0]
}
 800057c:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 800057e:	2a00      	cmp	r2, #0
 8000580:	d031      	beq.n	80005e6 <lwiperf_tcp_accept+0x116>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 8000582:	6872      	ldr	r2, [r6, #4]
 8000584:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000586:	429a      	cmp	r2, r3
 8000588:	d0c9      	beq.n	800051e <lwiperf_tcp_accept+0x4e>
    return ERR_VAL;
 800058a:	f06f 0005 	mvn.w	r0, #5
}
 800058e:	bd70      	pop	{r4, r5, r6, pc}
    conn->base.related_master_state = s->base.related_master_state;
 8000590:	68a2      	ldr	r2, [r4, #8]
 8000592:	4e23      	ldr	r6, [pc, #140]	@ (8000620 <lwiperf_tcp_accept+0x150>)
 8000594:	60aa      	str	r2, [r5, #8]
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 8000596:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800059a:	b153      	cbz	r3, 80005b2 <lwiperf_tcp_accept+0xe2>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800059c:	6831      	ldr	r1, [r6, #0]
 800059e:	b141      	cbz	r1, 80005b2 <lwiperf_tcp_accept+0xe2>
    if (iter == item) {
 80005a0:	428a      	cmp	r2, r1
 80005a2:	d0e8      	beq.n	8000576 <lwiperf_tcp_accept+0xa6>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 80005a4:	460b      	mov	r3, r1
 80005a6:	e001      	b.n	80005ac <lwiperf_tcp_accept+0xdc>
    if (iter == item) {
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d0e4      	beq.n	8000576 <lwiperf_tcp_accept+0xa6>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1fa      	bne.n	80005a8 <lwiperf_tcp_accept+0xd8>
      s->report_fn = NULL;
 80005b2:	2300      	movs	r3, #0
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 80005b4:	2102      	movs	r1, #2
 80005b6:	4620      	mov	r0, r4
      s->report_fn = NULL;
 80005b8:	61a3      	str	r3, [r4, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 80005ba:	f7ff ff03 	bl	80003c4 <lwiperf_tcp_close>
  item->next = lwiperf_all_connections;
 80005be:	6831      	ldr	r1, [r6, #0]
 80005c0:	e7d9      	b.n	8000576 <lwiperf_tcp_accept+0xa6>
  LWIP_ASSERT("invalid session", s->base.server);
 80005c2:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <lwiperf_tcp_accept+0x134>)
 80005c4:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80005c8:	4916      	ldr	r1, [pc, #88]	@ (8000624 <lwiperf_tcp_accept+0x154>)
 80005ca:	4810      	ldr	r0, [pc, #64]	@ (800060c <lwiperf_tcp_accept+0x13c>)
 80005cc:	f00f fcb2 	bl	800ff34 <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 80005d0:	68e3      	ldr	r3, [r4, #12]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d18d      	bne.n	80004f2 <lwiperf_tcp_accept+0x22>
 80005d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000604 <lwiperf_tcp_accept+0x134>)
 80005d8:	f240 2259 	movw	r2, #601	@ 0x259
 80005dc:	4912      	ldr	r1, [pc, #72]	@ (8000628 <lwiperf_tcp_accept+0x158>)
 80005de:	480b      	ldr	r0, [pc, #44]	@ (800060c <lwiperf_tcp_accept+0x13c>)
 80005e0:	f00f fca8 	bl	800ff34 <iprintf>
 80005e4:	e785      	b.n	80004f2 <lwiperf_tcp_accept+0x22>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 80005e6:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <lwiperf_tcp_accept+0x134>)
 80005e8:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 80005ec:	490f      	ldr	r1, [pc, #60]	@ (800062c <lwiperf_tcp_accept+0x15c>)
 80005ee:	4807      	ldr	r0, [pc, #28]	@ (800060c <lwiperf_tcp_accept+0x13c>)
 80005f0:	f00f fca0 	bl	800ff34 <iprintf>
 80005f4:	e7c5      	b.n	8000582 <lwiperf_tcp_accept+0xb2>
    return ERR_MEM;
 80005f6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80005fc:	f06f 0005 	mvn.w	r0, #5
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	080110b4 	.word	0x080110b4
 8000608:	08011130 	.word	0x08011130
 800060c:	080110dc 	.word	0x080110dc
 8000610:	0801116c 	.word	0x0801116c
 8000614:	08000a29 	.word	0x08000a29
 8000618:	08000775 	.word	0x08000775
 800061c:	08000631 	.word	0x08000631
 8000620:	240000ac 	.word	0x240000ac
 8000624:	0801110c 	.word	0x0801110c
 8000628:	0801111c 	.word	0x0801111c
 800062c:	08011144 	.word	0x08011144

08000630 <lwiperf_tcp_err>:
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000630:	2105      	movs	r1, #5
 8000632:	f7ff bec7 	b.w	80003c4 <lwiperf_tcp_close>
 8000636:	bf00      	nop

08000638 <lwiperf_tcp_client_send_more>:
{
 8000638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 800063c:	4604      	mov	r4, r0
 800063e:	b110      	cbz	r0, 8000646 <lwiperf_tcp_client_send_more+0xe>
 8000640:	7903      	ldrb	r3, [r0, #4]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d16e      	bne.n	8000724 <lwiperf_tcp_client_send_more+0xec>
 8000646:	4b39      	ldr	r3, [pc, #228]	@ (800072c <lwiperf_tcp_client_send_more+0xf4>)
 8000648:	f240 121d 	movw	r2, #285	@ 0x11d
 800064c:	4938      	ldr	r1, [pc, #224]	@ (8000730 <lwiperf_tcp_client_send_more+0xf8>)
 800064e:	4839      	ldr	r0, [pc, #228]	@ (8000734 <lwiperf_tcp_client_send_more+0xfc>)
 8000650:	f00f fc70 	bl	800ff34 <iprintf>
      u32_t time_ms = time * 10;
 8000654:	f06f 0909 	mvn.w	r9, #9
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8000658:	f8df b0e0 	ldr.w	fp, [pc, #224]	@ 800073c <lwiperf_tcp_client_send_more+0x104>
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 800065c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800065e:	0602      	lsls	r2, r0, #24
 8000660:	d534      	bpl.n	80006cc <lwiperf_tcp_client_send_more+0x94>
      u32_t now = sys_now();
 8000662:	f003 fbad 	bl	8003dc0 <sys_now>
      u32_t diff_ms = now - conn->time_started;
 8000666:	6963      	ldr	r3, [r4, #20]
      u32_t now = sys_now();
 8000668:	4605      	mov	r5, r0
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 800066a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
      u32_t diff_ms = now - conn->time_started;
 800066c:	1aed      	subs	r5, r5, r3
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 800066e:	f007 fefb 	bl	8008468 <lwip_htonl>
      u32_t time_ms = time * 10;
 8000672:	fb09 f000 	mul.w	r0, r9, r0
      if (diff_ms >= time_ms) {
 8000676:	4285      	cmp	r5, r0
 8000678:	d22d      	bcs.n	80006d6 <lwiperf_tcp_client_send_more+0x9e>
    if (conn->bytes_transferred < 24) {
 800067a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800067c:	2b17      	cmp	r3, #23
 800067e:	d831      	bhi.n	80006e4 <lwiperf_tcp_client_send_more+0xac>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 8000680:	f104 0528 	add.w	r5, r4, #40	@ 0x28
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8000684:	f1c3 0a18 	rsb	sl, r3, #24
      apiflags = TCP_WRITE_FLAG_COPY;
 8000688:	2601      	movs	r6, #1
    send_more = 0;
 800068a:	f04f 0800 	mov.w	r8, #0
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 800068e:	441d      	add	r5, r3
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8000690:	fa1f fa8a 	uxth.w	sl, sl
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8000694:	f240 27da 	movw	r7, #730	@ 0x2da
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8000698:	4633      	mov	r3, r6
 800069a:	4652      	mov	r2, sl
 800069c:	4629      	mov	r1, r5
 800069e:	6920      	ldr	r0, [r4, #16]
 80006a0:	f00c f9b6 	bl	800ca10 <tcp_write>
      if (err ==  ERR_MEM) {
 80006a4:	1c43      	adds	r3, r0, #1
 80006a6:	d00c      	beq.n	80006c2 <lwiperf_tcp_client_send_more+0x8a>
    if (err == ERR_OK) {
 80006a8:	b928      	cbnz	r0, 80006b6 <lwiperf_tcp_client_send_more+0x7e>
      conn->bytes_transferred += txlen;
 80006aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80006ac:	4453      	add	r3, sl
 80006ae:	6263      	str	r3, [r4, #36]	@ 0x24
  } while (send_more);
 80006b0:	f1b8 0f00 	cmp.w	r8, #0
 80006b4:	d1d2      	bne.n	800065c <lwiperf_tcp_client_send_more+0x24>
  tcp_output(conn->conn_pcb);
 80006b6:	6920      	ldr	r0, [r4, #16]
 80006b8:	f00c ffa2 	bl	800d600 <tcp_output>
}
 80006bc:	2000      	movs	r0, #0
 80006be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txlen /= 2;
 80006c2:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 80006c6:	45ba      	cmp	sl, r7
 80006c8:	d0e6      	beq.n	8000698 <lwiperf_tcp_client_send_more+0x60>
 80006ca:	e7f4      	b.n	80006b6 <lwiperf_tcp_client_send_more+0x7e>
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 80006cc:	f007 fecc 	bl	8008468 <lwip_htonl>
      if (amount_bytes >= conn->bytes_transferred) {
 80006d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80006d2:	4283      	cmp	r3, r0
 80006d4:	d8d2      	bhi.n	800067c <lwiperf_tcp_client_send_more+0x44>
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 80006d6:	4620      	mov	r0, r4
 80006d8:	2101      	movs	r1, #1
 80006da:	f7ff fe73 	bl	80003c4 <lwiperf_tcp_close>
}
 80006de:	2000      	movs	r0, #0
 80006e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (conn->bytes_transferred < 48) {
 80006e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80006e6:	d809      	bhi.n	80006fc <lwiperf_tcp_client_send_more+0xc4>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 80006e8:	18e5      	adds	r5, r4, r3
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 80006ea:	f1c3 0330 	rsb	r3, r3, #48	@ 0x30
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 80006ee:	2603      	movs	r6, #3
      send_more = 1;
 80006f0:	f04f 0801 	mov.w	r8, #1
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 80006f4:	3510      	adds	r5, #16
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 80006f6:	fa1f fa83 	uxth.w	sl, r3
      send_more = 1;
 80006fa:	e7cb      	b.n	8000694 <lwiperf_tcp_client_send_more+0x5c>
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80006fc:	fbab 1203 	umull	r1, r2, fp, r3
      apiflags = 0; /* no copying needed */
 8000700:	f240 5a9c 	movw	sl, #1436	@ 0x59c
 8000704:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 8000708:	2600      	movs	r6, #0
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 800070a:	08d2      	lsrs	r2, r2, #3
      apiflags = 0; /* no copying needed */
 800070c:	f04f 0801 	mov.w	r8, #1
 8000710:	2b30      	cmp	r3, #48	@ 0x30
 8000712:	bf18      	it	ne
 8000714:	468a      	movne	sl, r1
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8000716:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800071a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800071e:	4a06      	ldr	r2, [pc, #24]	@ (8000738 <lwiperf_tcp_client_send_more+0x100>)
 8000720:	189d      	adds	r5, r3, r2
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 8000722:	e7b7      	b.n	8000694 <lwiperf_tcp_client_send_more+0x5c>
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8000724:	7943      	ldrb	r3, [r0, #5]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d094      	beq.n	8000654 <lwiperf_tcp_client_send_more+0x1c>
 800072a:	e78c      	b.n	8000646 <lwiperf_tcp_client_send_more+0xe>
 800072c:	080110b4 	.word	0x080110b4
 8000730:	08011194 	.word	0x08011194
 8000734:	080110dc 	.word	0x080110dc
 8000738:	08011208 	.word	0x08011208
 800073c:	cccccccd 	.word	0xcccccccd

08000740 <lwiperf_tcp_client_sent>:
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000740:	6903      	ldr	r3, [r0, #16]
 8000742:	428b      	cmp	r3, r1
{
 8000744:	b510      	push	{r4, lr}
 8000746:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000748:	d006      	beq.n	8000758 <lwiperf_tcp_client_sent+0x18>
 800074a:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <lwiperf_tcp_client_sent+0x28>)
 800074c:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 8000750:	4906      	ldr	r1, [pc, #24]	@ (800076c <lwiperf_tcp_client_sent+0x2c>)
 8000752:	4807      	ldr	r0, [pc, #28]	@ (8000770 <lwiperf_tcp_client_sent+0x30>)
 8000754:	f00f fbee 	bl	800ff34 <iprintf>
  conn->poll_count = 0;
 8000758:	2300      	movs	r3, #0
  return lwiperf_tcp_client_send_more(conn);
 800075a:	4620      	mov	r0, r4
  conn->poll_count = 0;
 800075c:	f884 3020 	strb.w	r3, [r4, #32]
}
 8000760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return lwiperf_tcp_client_send_more(conn);
 8000764:	f7ff bf68 	b.w	8000638 <lwiperf_tcp_client_send_more>
 8000768:	080110b4 	.word	0x080110b4
 800076c:	08011c40 	.word	0x08011c40
 8000770:	080110dc 	.word	0x080110dc

08000774 <lwiperf_tcp_poll>:
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000774:	6903      	ldr	r3, [r0, #16]
 8000776:	428b      	cmp	r3, r1
{
 8000778:	b510      	push	{r4, lr}
 800077a:	4604      	mov	r4, r0
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800077c:	d006      	beq.n	800078c <lwiperf_tcp_poll+0x18>
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <lwiperf_tcp_poll+0x48>)
 8000780:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000784:	490e      	ldr	r1, [pc, #56]	@ (80007c0 <lwiperf_tcp_poll+0x4c>)
 8000786:	480f      	ldr	r0, [pc, #60]	@ (80007c4 <lwiperf_tcp_poll+0x50>)
 8000788:	f00f fbd4 	bl	800ff34 <iprintf>
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 800078c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000790:	3301      	adds	r3, #1
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b09      	cmp	r3, #9
 8000796:	f884 3020 	strb.w	r3, [r4, #32]
 800079a:	d808      	bhi.n	80007ae <lwiperf_tcp_poll+0x3a>
  if (!conn->base.server) {
 800079c:	7963      	ldrb	r3, [r4, #5]
 800079e:	b10b      	cbz	r3, 80007a4 <lwiperf_tcp_poll+0x30>
}
 80007a0:	2000      	movs	r0, #0
 80007a2:	bd10      	pop	{r4, pc}
    lwiperf_tcp_client_send_more(conn);
 80007a4:	4620      	mov	r0, r4
 80007a6:	f7ff ff47 	bl	8000638 <lwiperf_tcp_client_send_more>
}
 80007aa:	2000      	movs	r0, #0
 80007ac:	bd10      	pop	{r4, pc}
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 80007ae:	4620      	mov	r0, r4
 80007b0:	2102      	movs	r1, #2
 80007b2:	f7ff fe07 	bl	80003c4 <lwiperf_tcp_close>
}
 80007b6:	2000      	movs	r0, #0
 80007b8:	bd10      	pop	{r4, pc}
 80007ba:	bf00      	nop
 80007bc:	080110b4 	.word	0x080110b4
 80007c0:	080111a4 	.word	0x080111a4
 80007c4:	080110dc 	.word	0x080110dc

080007c8 <lwiperf_tcp_client_connected>:
{
 80007c8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 80007ca:	6903      	ldr	r3, [r0, #16]
{
 80007cc:	4604      	mov	r4, r0
 80007ce:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 80007d0:	428b      	cmp	r3, r1
 80007d2:	d006      	beq.n	80007e2 <lwiperf_tcp_client_connected+0x1a>
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <lwiperf_tcp_client_connected+0x40>)
 80007d6:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80007da:	490c      	ldr	r1, [pc, #48]	@ (800080c <lwiperf_tcp_client_connected+0x44>)
 80007dc:	480c      	ldr	r0, [pc, #48]	@ (8000810 <lwiperf_tcp_client_connected+0x48>)
 80007de:	f00f fba9 	bl	800ff34 <iprintf>
  if (err != ERR_OK) {
 80007e2:	b955      	cbnz	r5, 80007fa <lwiperf_tcp_client_connected+0x32>
  conn->poll_count = 0;
 80007e4:	f884 5020 	strb.w	r5, [r4, #32]
  conn->time_started = sys_now();
 80007e8:	f003 faea 	bl	8003dc0 <sys_now>
 80007ec:	4603      	mov	r3, r0
  return lwiperf_tcp_client_send_more(conn);
 80007ee:	4620      	mov	r0, r4
  conn->time_started = sys_now();
 80007f0:	6163      	str	r3, [r4, #20]
}
 80007f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return lwiperf_tcp_client_send_more(conn);
 80007f6:	f7ff bf1f 	b.w	8000638 <lwiperf_tcp_client_send_more>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 80007fa:	4620      	mov	r0, r4
 80007fc:	2105      	movs	r1, #5
 80007fe:	f7ff fde1 	bl	80003c4 <lwiperf_tcp_close>
}
 8000802:	2000      	movs	r0, #0
 8000804:	bd38      	pop	{r3, r4, r5, pc}
 8000806:	bf00      	nop
 8000808:	080110b4 	.word	0x080110b4
 800080c:	08011c40 	.word	0x08011c40
 8000810:	080110dc 	.word	0x080110dc

08000814 <lwiperf_start_tcp_server_impl.constprop.0>:
    return state;
  }
  return NULL;
}

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
 8000814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000818:	4605      	mov	r5, r0
 800081a:	460f      	mov	r7, r1
 800081c:	4690      	mov	r8, r2
 800081e:	461e      	mov	r6, r3
{
  err_t err;
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();
 8000820:	f003 fc56 	bl	80040d0 <sys_check_core_locking>

  LWIP_ASSERT("state != NULL", state != NULL);

  if (local_addr == NULL) {
 8000824:	2d00      	cmp	r5, #0
 8000826:	d035      	beq.n	8000894 <lwiperf_start_tcp_server_impl.constprop.0+0x80>
    return ERR_ARG;
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000828:	2048      	movs	r0, #72	@ 0x48
 800082a:	f008 f883 	bl	8008934 <mem_malloc>
  if (s == NULL) {
 800082e:	4604      	mov	r4, r0
 8000830:	2800      	cmp	r0, #0
 8000832:	d038      	beq.n	80008a6 <lwiperf_start_tcp_server_impl.constprop.0+0x92>
    return ERR_MEM;
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 8000834:	2248      	movs	r2, #72	@ 0x48
 8000836:	2100      	movs	r1, #0
 8000838:	f00f fc2f 	bl	801009a <memset>
  s->base.tcp = 1;
  s->base.server = 1;
  s->base.related_master_state = related_master_state;
 800083c:	9b06      	ldr	r3, [sp, #24]
  s->report_fn = report_fn;
  s->report_arg = report_arg;
 800083e:	61e6      	str	r6, [r4, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8000840:	202e      	movs	r0, #46	@ 0x2e
  s->base.related_master_state = related_master_state;
 8000842:	60a3      	str	r3, [r4, #8]
  s->base.tcp = 1;
 8000844:	f240 1301 	movw	r3, #257	@ 0x101
  s->report_fn = report_fn;
 8000848:	f8c4 8018 	str.w	r8, [r4, #24]
  s->base.tcp = 1;
 800084c:	80a3      	strh	r3, [r4, #4]
  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 800084e:	f00a f901 	bl	800aa54 <tcp_new_ip_type>
  if (pcb == NULL) {
 8000852:	4606      	mov	r6, r0
 8000854:	b338      	cbz	r0, 80008a6 <lwiperf_start_tcp_server_impl.constprop.0+0x92>
    return ERR_MEM;
  }
  err = tcp_bind(pcb, local_addr, local_port);
 8000856:	4629      	mov	r1, r5
 8000858:	463a      	mov	r2, r7
 800085a:	f009 f8c1 	bl	80099e0 <tcp_bind>
  if (err != ERR_OK) {
 800085e:	4605      	mov	r5, r0
 8000860:	b110      	cbz	r0, 8000868 <lwiperf_start_tcp_server_impl.constprop.0+0x54>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);

  lwiperf_list_add(&s->base);
  *state = s;
  return ERR_OK;
}
 8000862:	4628      	mov	r0, r5
 8000864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 8000868:	2101      	movs	r1, #1
 800086a:	4630      	mov	r0, r6
 800086c:	f009 f9a0 	bl	8009bb0 <tcp_listen_with_backlog>
 8000870:	60e0      	str	r0, [r4, #12]
  if (s->server_pcb == NULL) {
 8000872:	b190      	cbz	r0, 800089a <lwiperf_start_tcp_server_impl.constprop.0+0x86>
  tcp_arg(s->server_pcb, s);
 8000874:	4621      	mov	r1, r4
 8000876:	f009 fb1b 	bl	8009eb0 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 800087a:	68e0      	ldr	r0, [r4, #12]
 800087c:	490b      	ldr	r1, [pc, #44]	@ (80008ac <lwiperf_start_tcp_server_impl.constprop.0+0x98>)
 800087e:	f009 fb6d 	bl	8009f5c <tcp_accept>
  item->next = lwiperf_all_connections;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <lwiperf_start_tcp_server_impl.constprop.0+0x9c>)
}
 8000884:	4628      	mov	r0, r5
  item->next = lwiperf_all_connections;
 8000886:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 8000888:	601c      	str	r4, [r3, #0]
  *state = s;
 800088a:	9b07      	ldr	r3, [sp, #28]
  item->next = lwiperf_all_connections;
 800088c:	6022      	str	r2, [r4, #0]
  *state = s;
 800088e:	601c      	str	r4, [r3, #0]
}
 8000890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_ARG;
 8000894:	f06f 050f 	mvn.w	r5, #15
 8000898:	e7e3      	b.n	8000862 <lwiperf_start_tcp_server_impl.constprop.0+0x4e>
      tcp_close(pcb);
 800089a:	4630      	mov	r0, r6
 800089c:	f00a f9ac 	bl	800abf8 <tcp_close>
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 80008a0:	4620      	mov	r0, r4
 80008a2:	f007 fe9f 	bl	80085e4 <mem_free>
    return ERR_MEM;
 80008a6:	f04f 35ff 	mov.w	r5, #4294967295
 80008aa:	e7da      	b.n	8000862 <lwiperf_start_tcp_server_impl.constprop.0+0x4e>
 80008ac:	080004d1 	.word	0x080004d1
 80008b0:	240000ac 	.word	0x240000ac

080008b4 <lwiperf_tx_start_impl.constprop.0>:
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
 80008b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008b8:	4689      	mov	r9, r1
 80008ba:	b083      	sub	sp, #12
 80008bc:	4616      	mov	r6, r2
 80008be:	469a      	mov	sl, r3
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 80008c0:	4607      	mov	r7, r0
 80008c2:	2800      	cmp	r0, #0
 80008c4:	d063      	beq.n	800098e <lwiperf_tx_start_impl.constprop.0+0xda>
  *new_conn = NULL;
 80008c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80008c8:	f04f 0800 	mov.w	r8, #0
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80008cc:	2048      	movs	r0, #72	@ 0x48
  *new_conn = NULL;
 80008ce:	f8c3 8000 	str.w	r8, [r3]
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80008d2:	f008 f82f 	bl	8008934 <mem_malloc>
  if (client_conn == NULL) {
 80008d6:	4604      	mov	r4, r0
 80008d8:	2800      	cmp	r0, #0
 80008da:	d063      	beq.n	80009a4 <lwiperf_tx_start_impl.constprop.0+0xf0>
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 80008dc:	4640      	mov	r0, r8
 80008de:	f00a f8b9 	bl	800aa54 <tcp_new_ip_type>
  if (newpcb == NULL) {
 80008e2:	4605      	mov	r5, r0
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d05a      	beq.n	800099e <lwiperf_tx_start_impl.constprop.0+0xea>
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 80008e8:	2248      	movs	r2, #72	@ 0x48
 80008ea:	4641      	mov	r1, r8
 80008ec:	4620      	mov	r0, r4
  client_conn->base.tcp = 1;
 80008ee:	f04f 0b01 	mov.w	fp, #1
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 80008f2:	f00f fbd2 	bl	801009a <memset>
  client_conn->base.related_master_state = related_master_state;
 80008f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  client_conn->conn_pcb = newpcb;
 80008f8:	6125      	str	r5, [r4, #16]
  client_conn->base.related_master_state = related_master_state;
 80008fa:	60a3      	str	r3, [r4, #8]
  client_conn->base.tcp = 1;
 80008fc:	f884 b004 	strb.w	fp, [r4, #4]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8000900:	f003 fa5e 	bl	8003dc0 <sys_now>
  client_conn->report_arg = report_arg;
 8000904:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  client_conn->report_fn = report_fn;
 8000906:	f8c4 a018 	str.w	sl, [r4, #24]
  client_conn->report_arg = report_arg;
 800090a:	61e3      	str	r3, [r4, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 800090c:	2304      	movs	r3, #4
  client_conn->bytes_transferred = 0;
 800090e:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8000912:	6160      	str	r0, [r4, #20]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8000914:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000918:	6832      	ldr	r2, [r6, #0]
 800091a:	6873      	ldr	r3, [r6, #4]
 800091c:	68b0      	ldr	r0, [r6, #8]
 800091e:	68f1      	ldr	r1, [r6, #12]
 8000920:	6320      	str	r0, [r4, #48]	@ 0x30
  tcp_arg(newpcb, client_conn);
 8000922:	4628      	mov	r0, r5
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000924:	6361      	str	r1, [r4, #52]	@ 0x34
  tcp_arg(newpcb, client_conn);
 8000926:	4621      	mov	r1, r4
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000928:	62a2      	str	r2, [r4, #40]	@ 0x28
 800092a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800092c:	6973      	ldr	r3, [r6, #20]
 800092e:	6932      	ldr	r2, [r6, #16]
 8000930:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8000932:	63a2      	str	r2, [r4, #56]	@ 0x38
  client_conn->have_settings_buf = 1;
 8000934:	f884 b040 	strb.w	fp, [r4, #64]	@ 0x40
  tcp_arg(newpcb, client_conn);
 8000938:	f009 faba 	bl	8009eb0 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 800093c:	4628      	mov	r0, r5
 800093e:	491b      	ldr	r1, [pc, #108]	@ (80009ac <lwiperf_tx_start_impl.constprop.0+0xf8>)
 8000940:	f009 fad8 	bl	8009ef4 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000944:	2202      	movs	r2, #2
 8000946:	4628      	mov	r0, r5
 8000948:	4919      	ldr	r1, [pc, #100]	@ (80009b0 <lwiperf_tx_start_impl.constprop.0+0xfc>)
 800094a:	f009 fb13 	bl	8009f74 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 800094e:	4628      	mov	r0, r5
 8000950:	4918      	ldr	r1, [pc, #96]	@ (80009b4 <lwiperf_tx_start_impl.constprop.0+0x100>)
 8000952:	f009 fae9 	bl	8009f28 <tcp_err>
  ip_addr_copy(remote_addr, *remote_ip);
 8000956:	683b      	ldr	r3, [r7, #0]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8000958:	4628      	mov	r0, r5
 800095a:	464a      	mov	r2, r9
  ip_addr_copy(remote_addr, *remote_ip);
 800095c:	9301      	str	r3, [sp, #4]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 800095e:	a901      	add	r1, sp, #4
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <lwiperf_tx_start_impl.constprop.0+0x104>)
 8000962:	f009 f9af 	bl	8009cc4 <tcp_connect>
  if (err != ERR_OK) {
 8000966:	4605      	mov	r5, r0
 8000968:	b948      	cbnz	r0, 800097e <lwiperf_tx_start_impl.constprop.0+0xca>
  item->next = lwiperf_all_connections;
 800096a:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <lwiperf_tx_start_impl.constprop.0+0x108>)
 800096c:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 800096e:	601c      	str	r4, [r3, #0]
  *new_conn = client_conn;
 8000970:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  item->next = lwiperf_all_connections;
 8000972:	6022      	str	r2, [r4, #0]
  *new_conn = client_conn;
 8000974:	601c      	str	r4, [r3, #0]
}
 8000976:	4628      	mov	r0, r5
 8000978:	b003      	add	sp, #12
 800097a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 800097e:	4620      	mov	r0, r4
 8000980:	2102      	movs	r1, #2
 8000982:	f7ff fd1f 	bl	80003c4 <lwiperf_tcp_close>
}
 8000986:	4628      	mov	r0, r5
 8000988:	b003      	add	sp, #12
 800098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 800098e:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <lwiperf_tx_start_impl.constprop.0+0x10c>)
 8000990:	f240 128b 	movw	r2, #395	@ 0x18b
 8000994:	490b      	ldr	r1, [pc, #44]	@ (80009c4 <lwiperf_tx_start_impl.constprop.0+0x110>)
 8000996:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <lwiperf_tx_start_impl.constprop.0+0x114>)
 8000998:	f00f facc 	bl	800ff34 <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 800099c:	e793      	b.n	80008c6 <lwiperf_tx_start_impl.constprop.0+0x12>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 800099e:	4620      	mov	r0, r4
 80009a0:	f007 fe20 	bl	80085e4 <mem_free>
    return ERR_MEM;
 80009a4:	f04f 35ff 	mov.w	r5, #4294967295
 80009a8:	e7e5      	b.n	8000976 <lwiperf_tx_start_impl.constprop.0+0xc2>
 80009aa:	bf00      	nop
 80009ac:	08000741 	.word	0x08000741
 80009b0:	08000775 	.word	0x08000775
 80009b4:	08000631 	.word	0x08000631
 80009b8:	080007c9 	.word	0x080007c9
 80009bc:	240000ac 	.word	0x240000ac
 80009c0:	080110b4 	.word	0x080110b4
 80009c4:	080111b4 	.word	0x080111b4
 80009c8:	080110dc 	.word	0x080110dc

080009cc <lwiperf_tx_start_passive>:
{
 80009cc:	b530      	push	{r4, r5, lr}
  lwiperf_state_tcp_t *new_conn = NULL;
 80009ce:	2300      	movs	r3, #0
{
 80009d0:	4604      	mov	r4, r0
 80009d2:	b087      	sub	sp, #28
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 80009d4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
  lwiperf_state_tcp_t *new_conn = NULL;
 80009d6:	9305      	str	r3, [sp, #20]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 80009d8:	f007 fd46 	bl	8008468 <lwip_htonl>
  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 80009dc:	6922      	ldr	r2, [r4, #16]
 80009de:	a905      	add	r1, sp, #20
 80009e0:	69e3      	ldr	r3, [r4, #28]
 80009e2:	68a5      	ldr	r5, [r4, #8]
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	e9cd 5101 	strd	r5, r1, [sp, #4]
 80009ea:	b281      	uxth	r1, r0
 80009ec:	69a3      	ldr	r3, [r4, #24]
 80009ee:	1d10      	adds	r0, r2, #4
 80009f0:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 80009f4:	f7ff ff5e 	bl	80008b4 <lwiperf_tx_start_impl.constprop.0>
  if (ret == ERR_OK) {
 80009f8:	4604      	mov	r4, r0
 80009fa:	b918      	cbnz	r0, 8000a04 <lwiperf_tx_start_passive+0x38>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 80009fc:	9d05      	ldr	r5, [sp, #20]
 80009fe:	b125      	cbz	r5, 8000a0a <lwiperf_tx_start_passive+0x3e>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8000a00:	2300      	movs	r3, #0
 8000a02:	62ab      	str	r3, [r5, #40]	@ 0x28
}
 8000a04:	4620      	mov	r0, r4
 8000a06:	b007      	add	sp, #28
 8000a08:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8000a0a:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <lwiperf_tx_start_passive+0x50>)
 8000a0c:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8000a10:	4903      	ldr	r1, [pc, #12]	@ (8000a20 <lwiperf_tx_start_passive+0x54>)
 8000a12:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <lwiperf_tx_start_passive+0x58>)
 8000a14:	f00f fa8e 	bl	800ff34 <iprintf>
 8000a18:	e7f2      	b.n	8000a00 <lwiperf_tx_start_passive+0x34>
 8000a1a:	bf00      	nop
 8000a1c:	080110b4 	.word	0x080110b4
 8000a20:	080111c8 	.word	0x080111c8
 8000a24:	080110dc 	.word	0x080110dc

08000a28 <lwiperf_tcp_recv>:
{
 8000a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a2c:	4698      	mov	r8, r3
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000a2e:	6903      	ldr	r3, [r0, #16]
{
 8000a30:	4604      	mov	r4, r0
 8000a32:	460e      	mov	r6, r1
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000a34:	428b      	cmp	r3, r1
{
 8000a36:	4615      	mov	r5, r2
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000a38:	d006      	beq.n	8000a48 <lwiperf_tcp_recv+0x20>
 8000a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8000be4 <lwiperf_tcp_recv+0x1bc>)
 8000a3c:	f44f 72e8 	mov.w	r2, #464	@ 0x1d0
 8000a40:	4969      	ldr	r1, [pc, #420]	@ (8000be8 <lwiperf_tcp_recv+0x1c0>)
 8000a42:	486a      	ldr	r0, [pc, #424]	@ (8000bec <lwiperf_tcp_recv+0x1c4>)
 8000a44:	f00f fa76 	bl	800ff34 <iprintf>
  if (err != ERR_OK) {
 8000a48:	f1b8 0f00 	cmp.w	r8, #0
 8000a4c:	f040 8092 	bne.w	8000b74 <lwiperf_tcp_recv+0x14c>
  if (p == NULL) {
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	f000 8096 	beq.w	8000b82 <lwiperf_tcp_recv+0x15a>
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000a56:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  tot_len = p->tot_len;
 8000a5a:	892f      	ldrh	r7, [r5, #8]
  conn->poll_count = 0;
 8000a5c:	f884 8020 	strb.w	r8, [r4, #32]
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000a60:	bb33      	cbnz	r3, 8000ab0 <lwiperf_tcp_recv+0x88>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000a62:	2f17      	cmp	r7, #23
 8000a64:	d961      	bls.n	8000b2a <lwiperf_tcp_recv+0x102>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8000a66:	4643      	mov	r3, r8
 8000a68:	2218      	movs	r2, #24
 8000a6a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8000a6e:	4628      	mov	r0, r5
 8000a70:	f008 fe90 	bl	8009794 <pbuf_copy_partial>
 8000a74:	2818      	cmp	r0, #24
 8000a76:	f040 809b 	bne.w	8000bb0 <lwiperf_tcp_recv+0x188>
      conn->have_settings_buf = 1;
 8000a7a:	2301      	movs	r3, #1
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000a7c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      conn->have_settings_buf = 1;
 8000a7e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000a82:	4b5b      	ldr	r3, [pc, #364]	@ (8000bf0 <lwiperf_tcp_recv+0x1c8>)
 8000a84:	4393      	bics	r3, r2
 8000a86:	f000 809f 	beq.w	8000bc8 <lwiperf_tcp_recv+0x1a0>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000a8a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000a8c:	3318      	adds	r3, #24
    if (conn->bytes_transferred <= 24) {
 8000a8e:	2b18      	cmp	r3, #24
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000a90:	6263      	str	r3, [r4, #36]	@ 0x24
    if (conn->bytes_transferred <= 24) {
 8000a92:	d819      	bhi.n	8000ac8 <lwiperf_tcp_recv+0xa0>
      conn->time_started = sys_now();
 8000a94:	f003 f994 	bl	8003dc0 <sys_now>
 8000a98:	4603      	mov	r3, r0
      tcp_recved(tpcb, p->tot_len);
 8000a9a:	8929      	ldrh	r1, [r5, #8]
 8000a9c:	4630      	mov	r0, r6
      conn->time_started = sys_now();
 8000a9e:	6163      	str	r3, [r4, #20]
      tcp_recved(tpcb, p->tot_len);
 8000aa0:	f009 f8d0 	bl	8009c44 <tcp_recved>
      pbuf_free(p);
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	f008 fbcd 	bl	8009244 <pbuf_free>
}
 8000aaa:	2000      	movs	r0, #0
 8000aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000ab0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000ab2:	03da      	lsls	r2, r3, #15
 8000ab4:	f5b2 2f40 	cmp.w	r2, #786432	@ 0xc0000
 8000ab8:	d115      	bne.n	8000ae6 <lwiperf_tcp_recv+0xbe>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000aba:	2f17      	cmp	r7, #23
 8000abc:	d935      	bls.n	8000b2a <lwiperf_tcp_recv+0x102>
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000abe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000ac0:	0612      	lsls	r2, r2, #24
 8000ac2:	d46a      	bmi.n	8000b9a <lwiperf_tcp_recv+0x172>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000ac4:	3318      	adds	r3, #24
 8000ac6:	6263      	str	r3, [r4, #36]	@ 0x24
    conn->next_num = 4; /* 24 bytes received... */
 8000ac8:	2304      	movs	r3, #4
    tmp = pbuf_remove_header(p, 24);
 8000aca:	2118      	movs	r1, #24
 8000acc:	4628      	mov	r0, r5
    conn->next_num = 4; /* 24 bytes received... */
 8000ace:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    tmp = pbuf_remove_header(p, 24);
 8000ad2:	f008 fb55 	bl	8009180 <pbuf_remove_header>
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 8000ad6:	b130      	cbz	r0, 8000ae6 <lwiperf_tcp_recv+0xbe>
 8000ad8:	4b42      	ldr	r3, [pc, #264]	@ (8000be4 <lwiperf_tcp_recv+0x1bc>)
 8000ada:	f240 2211 	movw	r2, #529	@ 0x211
 8000ade:	4945      	ldr	r1, [pc, #276]	@ (8000bf4 <lwiperf_tcp_recv+0x1cc>)
 8000ae0:	4842      	ldr	r0, [pc, #264]	@ (8000bec <lwiperf_tcp_recv+0x1c4>)
 8000ae2:	f00f fa27 	bl	800ff34 <iprintf>
{
 8000ae6:	46ae      	mov	lr, r5
 8000ae8:	f04f 0800 	mov.w	r8, #0
    for (i = 0; i < q->len; i++) {
 8000aec:	f8be 300a 	ldrh.w	r3, [lr, #10]
    const u8_t *payload = (const u8_t *)q->payload;
 8000af0:	f8de 9004 	ldr.w	r9, [lr, #4]
    for (i = 0; i < q->len; i++) {
 8000af4:	b323      	cbz	r3, 8000b40 <lwiperf_tcp_recv+0x118>
      if (num == conn->next_num) {
 8000af6:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8000afa:	2200      	movs	r2, #0
 8000afc:	e008      	b.n	8000b10 <lwiperf_tcp_recv+0xe8>
          conn->next_num = 0;
 8000afe:	2b0a      	cmp	r3, #10
 8000b00:	bf08      	it	eq
 8000b02:	2300      	moveq	r3, #0
 8000b04:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    for (i = 0; i < q->len; i++) {
 8000b08:	f8be 100a 	ldrh.w	r1, [lr, #10]
 8000b0c:	4281      	cmp	r1, r0
 8000b0e:	d916      	bls.n	8000b3e <lwiperf_tcp_recv+0x116>
      u8_t val = payload[i];
 8000b10:	b290      	uxth	r0, r2
        conn->next_num++;
 8000b12:	1c59      	adds	r1, r3, #1
    for (i = 0; i < q->len; i++) {
 8000b14:	3201      	adds	r2, #1
      u8_t num = val - '0';
 8000b16:	f819 c000 	ldrb.w	ip, [r9, r0]
    for (i = 0; i < q->len; i++) {
 8000b1a:	b290      	uxth	r0, r2
      u8_t num = val - '0';
 8000b1c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
      if (num == conn->next_num) {
 8000b20:	fa5f fc8c 	uxtb.w	ip, ip
 8000b24:	459c      	cmp	ip, r3
        conn->next_num++;
 8000b26:	b2cb      	uxtb	r3, r1
      if (num == conn->next_num) {
 8000b28:	d0e9      	beq.n	8000afe <lwiperf_tcp_recv+0xd6>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	2103      	movs	r1, #3
 8000b2e:	f7ff fc49 	bl	80003c4 <lwiperf_tcp_close>
      pbuf_free(p);
 8000b32:	4628      	mov	r0, r5
 8000b34:	f008 fb86 	bl	8009244 <pbuf_free>
}
 8000b38:	2000      	movs	r0, #0
 8000b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    packet_idx += q->len;
 8000b3e:	4488      	add	r8, r1
  for (q = p; q != NULL; q = q->next) {
 8000b40:	f8de e000 	ldr.w	lr, [lr]
 8000b44:	f1be 0f00 	cmp.w	lr, #0
 8000b48:	d1d0      	bne.n	8000aec <lwiperf_tcp_recv+0xc4>
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 8000b4a:	892b      	ldrh	r3, [r5, #8]
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d006      	beq.n	8000b5e <lwiperf_tcp_recv+0x136>
 8000b50:	4b24      	ldr	r3, [pc, #144]	@ (8000be4 <lwiperf_tcp_recv+0x1bc>)
 8000b52:	f240 222b 	movw	r2, #555	@ 0x22b
 8000b56:	4928      	ldr	r1, [pc, #160]	@ (8000bf8 <lwiperf_tcp_recv+0x1d0>)
 8000b58:	4824      	ldr	r0, [pc, #144]	@ (8000bec <lwiperf_tcp_recv+0x1c4>)
 8000b5a:	f00f f9eb 	bl	800ff34 <iprintf>
  conn->bytes_transferred += packet_idx;
 8000b5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 8000b60:	4630      	mov	r0, r6
 8000b62:	4639      	mov	r1, r7
  conn->bytes_transferred += packet_idx;
 8000b64:	4443      	add	r3, r8
 8000b66:	6263      	str	r3, [r4, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 8000b68:	f009 f86c 	bl	8009c44 <tcp_recved>
  pbuf_free(p);
 8000b6c:	4628      	mov	r0, r5
 8000b6e:	f008 fb69 	bl	8009244 <pbuf_free>
  return ERR_OK;
 8000b72:	e7e1      	b.n	8000b38 <lwiperf_tcp_recv+0x110>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000b74:	4620      	mov	r0, r4
 8000b76:	2105      	movs	r1, #5
 8000b78:	f7ff fc24 	bl	80003c4 <lwiperf_tcp_close>
}
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000b82:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000b84:	0618      	lsls	r0, r3, #24
 8000b86:	d501      	bpl.n	8000b8c <lwiperf_tcp_recv+0x164>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8000b88:	01d9      	lsls	r1, r3, #7
 8000b8a:	d519      	bpl.n	8000bc0 <lwiperf_tcp_recv+0x198>
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f7ff fc18 	bl	80003c4 <lwiperf_tcp_close>
}
 8000b94:	2000      	movs	r0, #0
 8000b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8000b9a:	4641      	mov	r1, r8
 8000b9c:	2318      	movs	r3, #24
 8000b9e:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8000ba2:	4628      	mov	r0, r5
 8000ba4:	f008 fe60 	bl	8009868 <pbuf_memcmp>
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	f43f af6e 	beq.w	8000a8a <lwiperf_tcp_recv+0x62>
 8000bae:	e7bc      	b.n	8000b2a <lwiperf_tcp_recv+0x102>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	f7ff fc06 	bl	80003c4 <lwiperf_tcp_close>
        pbuf_free(p);
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f008 fb43 	bl	8009244 <pbuf_free>
        return ERR_OK;
 8000bbe:	e7bb      	b.n	8000b38 <lwiperf_tcp_recv+0x110>
        lwiperf_tx_start_passive(conn);
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	f7ff ff03 	bl	80009cc <lwiperf_tx_start_passive>
 8000bc6:	e7e1      	b.n	8000b8c <lwiperf_tcp_recv+0x164>
          err_t err2 = lwiperf_tx_start_passive(conn);
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f7ff feff 	bl	80009cc <lwiperf_tx_start_passive>
          if (err2 != ERR_OK) {
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	f43f af5b 	beq.w	8000a8a <lwiperf_tcp_recv+0x62>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	f7ff fbf4 	bl	80003c4 <lwiperf_tcp_close>
            pbuf_free(p);
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f008 fb31 	bl	8009244 <pbuf_free>
            return ERR_OK;
 8000be2:	e7a9      	b.n	8000b38 <lwiperf_tcp_recv+0x110>
 8000be4:	080110b4 	.word	0x080110b4
 8000be8:	080111a4 	.word	0x080111a4
 8000bec:	080110dc 	.word	0x080110dc
 8000bf0:	01000080 	.word	0x01000080
 8000bf4:	080111dc 	.word	0x080111dc
 8000bf8:	080111f8 	.word	0x080111f8

08000bfc <lwiperf_start_tcp_server_default>:
{
 8000bfc:	b530      	push	{r4, r5, lr}
 8000bfe:	b085      	sub	sp, #20
  lwiperf_state_tcp_t *state = NULL;
 8000c00:	2400      	movs	r4, #0
{
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000c06:	ad03      	add	r5, sp, #12
 8000c08:	f241 3189 	movw	r1, #5001	@ 0x1389
 8000c0c:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <lwiperf_start_tcp_server_default+0x2c>)
  lwiperf_state_tcp_t *state = NULL;
 8000c0e:	9403      	str	r4, [sp, #12]
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000c10:	e9cd 4500 	strd	r4, r5, [sp]
 8000c14:	f7ff fdfe 	bl	8000814 <lwiperf_start_tcp_server_impl.constprop.0>
  if (err == ERR_OK) {
 8000c18:	b910      	cbnz	r0, 8000c20 <lwiperf_start_tcp_server_default+0x24>
    return state;
 8000c1a:	9803      	ldr	r0, [sp, #12]
}
 8000c1c:	b005      	add	sp, #20
 8000c1e:	bd30      	pop	{r4, r5, pc}
  return NULL;
 8000c20:	4620      	mov	r0, r4
}
 8000c22:	b005      	add	sp, #20
 8000c24:	bd30      	pop	{r4, r5, pc}
 8000c26:	bf00      	nop
 8000c28:	0801406c 	.word	0x0801406c

08000c2c <Starthttp>:

}

/* USER CODE BEGIN 4 */
void Starthttp(void *argument)
{
 8000c2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Starthttp */
	osSemaphoreAcquire(startDefaultTaskSemaphore, osWaitForever);
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <Starthttp+0x3c>)
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295
{
 8000c34:	4604      	mov	r4, r0
	osSemaphoreAcquire(startDefaultTaskSemaphore, osWaitForever);
 8000c36:	6818      	ldr	r0, [r3, #0]
 8000c38:	f003 fbee 	bl	8004418 <osSemaphoreAcquire>
	osDelay(1000);
 8000c3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c40:	f003 fb08 	bl	8004254 <osDelay>
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	4809      	ldr	r0, [pc, #36]	@ (8000c6c <Starthttp+0x40>)
 8000c48:	4611      	mov	r1, r2
 8000c4a:	f001 ffb5 	bl	8002bb8 <HAL_GPIO_WritePin>
	http_thread(argument);
 8000c4e:	4620      	mov	r0, r4
 8000c50:	f000 fb2e 	bl	80012b0 <http_thread>
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2101      	movs	r1, #1
 8000c58:	4804      	ldr	r0, [pc, #16]	@ (8000c6c <Starthttp+0x40>)
 8000c5a:	f001 ffad 	bl	8002bb8 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f003 faf8 	bl	8004254 <osDelay>
  for(;;)
 8000c64:	e7fb      	b.n	8000c5e <Starthttp+0x32>
 8000c66:	bf00      	nop
 8000c68:	240000b0 	.word	0x240000b0
 8000c6c:	58020400 	.word	0x58020400

08000c70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c70:	b508      	push	{r3, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 8000c72:	f002 fe71 	bl	8003958 <MX_LWIP_Init>
     * iperf3 is not compatible at all.
     * Adding lwiperf.c file to the project is necessary.
     * The default include path should already contain
     * 'lwip/apps/lwiperf.h'
     */
  	LOCK_TCPIP_CORE();
 8000c76:	f003 f9a3 	bl	8003fc0 <sys_lock_tcpip_core>
    lwiperf_start_tcp_server_default(NULL, NULL);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	f7ff ffbd 	bl	8000bfc <lwiperf_start_tcp_server_default>

//    ip4_addr_t remote_addr;
//    IP4_ADDR(&remote_addr, 192, 168, 1, 1);
//    lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
    UNLOCK_TCPIP_CORE();
 8000c82:	f003 fa1b 	bl	80040bc <sys_unlock_tcpip_core>
    /* Infinite loop */
    osDelay(1000);
 8000c86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c8a:	f003 fae3 	bl	8004254 <osDelay>
    //  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
      HAL_GPIO_WritePin(GPIOE, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000c8e:	4807      	ldr	r0, [pc, #28]	@ (8000cac <StartDefaultTask+0x3c>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	2102      	movs	r1, #2
 8000c94:	f001 ff90 	bl	8002bb8 <HAL_GPIO_WritePin>
      osSemaphoreRelease(startDefaultTaskSemaphore);
 8000c98:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <StartDefaultTask+0x40>)
 8000c9a:	6818      	ldr	r0, [r3, #0]
 8000c9c:	f003 fbee 	bl	800447c <osSemaphoreRelease>
    for(;;)
    {
      osDelay(1000);
 8000ca0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ca4:	f003 fad6 	bl	8004254 <osDelay>
    for(;;)
 8000ca8:	e7fa      	b.n	8000ca0 <StartDefaultTask+0x30>
 8000caa:	bf00      	nop
 8000cac:	58021000 	.word	0x58021000
 8000cb0:	240000b0 	.word	0x240000b0

08000cb4 <SystemClock_Config>:
{
 8000cb4:	b530      	push	{r4, r5, lr}
 8000cb6:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb8:	224c      	movs	r2, #76	@ 0x4c
 8000cba:	2100      	movs	r1, #0
 8000cbc:	a80a      	add	r0, sp, #40	@ 0x28
 8000cbe:	f00f f9ec 	bl	801009a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc2:	2220      	movs	r2, #32
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	a802      	add	r0, sp, #8
 8000cc8:	f00f f9e7 	bl	801009a <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f001 ff77 	bl	8002bc0 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d50 <SystemClock_Config+0x9c>)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9301      	str	r3, [sp, #4]
 8000cd8:	6993      	ldr	r3, [r2, #24]
 8000cda:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	6993      	ldr	r3, [r2, #24]
 8000ce2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cea:	6993      	ldr	r3, [r2, #24]
 8000cec:	0499      	lsls	r1, r3, #18
 8000cee:	d5fc      	bpl.n	8000cea <SystemClock_Config+0x36>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf0:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cf2:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000cf4:	2508      	movs	r5, #8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cf6:	2440      	movs	r4, #64	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf8:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfa:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cfc:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000cfe:	9217      	str	r2, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d00:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d04:	9218      	str	r2, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000d06:	2210      	movs	r2, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d08:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d0a:	e9cd 3519 	strd	r3, r5, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d12:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000d16:	237d      	movs	r3, #125	@ 0x7d
 8000d18:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1c:	f001 ffe6 	bl	8002cec <HAL_RCC_OscConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b108      	cbz	r0, 8000d28 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d28:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2103      	movs	r1, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d2c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d32:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d38:	9409      	str	r4, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d3a:	e9cd 5405 	strd	r5, r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d3e:	e9cd 4307 	strd	r4, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d42:	f002 fa7f 	bl	8003244 <HAL_RCC_ClockConfig>
 8000d46:	b108      	cbz	r0, 8000d4c <SystemClock_Config+0x98>
 8000d48:	b672      	cpsid	i
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <SystemClock_Config+0x96>
}
 8000d4c:	b01f      	add	sp, #124	@ 0x7c
 8000d4e:	bd30      	pop	{r4, r5, pc}
 8000d50:	58024800 	.word	0x58024800

08000d54 <main>:
{
 8000d54:	b580      	push	{r7, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d56:	2400      	movs	r4, #0
{
 8000d58:	b08c      	sub	sp, #48	@ 0x30
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d5a:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d5c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000d60:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  HAL_MPU_Disable();
 8000d64:	f000 fdf0 	bl	8001948 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d68:	f248 721f 	movw	r2, #34591	@ 0x871f
 8000d6c:	f240 1301 	movw	r3, #257	@ 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d70:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d72:	f8ad 501c 	strh.w	r5, [sp, #28]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d76:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d78:	e9cd 4208 	strd	r4, r2, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d7c:	f000 fe02 	bl	8001984 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000d80:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000d84:	4b98      	ldr	r3, [pc, #608]	@ (8000fe8 <main+0x294>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d86:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000d88:	9208      	str	r2, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000d8a:	9309      	str	r3, [sp, #36]	@ 0x24
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000d8c:	f88d 501d 	strb.w	r5, [sp, #29]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000d90:	f88d 4029 	strb.w	r4, [sp, #41]	@ 0x29
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d94:	f000 fdf6 	bl	8001984 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000d98:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000d9a:	2308      	movs	r3, #8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d9c:	a807      	add	r0, sp, #28
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d9e:	f88d 4026 	strb.w	r4, [sp, #38]	@ 0x26
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000da2:	f88d 201d 	strb.w	r2, [sp, #29]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000da6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000daa:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000dae:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000db2:	f000 fde7 	bl	8001984 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000db6:	2004      	movs	r0, #4
 8000db8:	f000 fdd4 	bl	8001964 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000dbc:	4a8b      	ldr	r2, [pc, #556]	@ (8000fec <main+0x298>)
 8000dbe:	6953      	ldr	r3, [r2, #20]
 8000dc0:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8000dc4:	d111      	bne.n	8000dea <main+0x96>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dca:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dce:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dd6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000dda:	6953      	ldr	r3, [r2, #20]
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000de2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000de6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000dea:	4880      	ldr	r0, [pc, #512]	@ (8000fec <main+0x298>)
 8000dec:	6943      	ldr	r3, [r0, #20]
 8000dee:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000df2:	d126      	bne.n	8000e42 <main+0xee>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000df4:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000df8:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dfc:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e00:	f643 7ee0 	movw	lr, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e04:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e08:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 8000e0c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e10:	ea0c 010e 	and.w	r1, ip, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e14:	4623      	mov	r3, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e16:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	1c5d      	adds	r5, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e1e:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 8000e22:	d1f8      	bne.n	8000e16 <main+0xc2>
    } while(sets-- != 0U);
 8000e24:	f1ac 0c20 	sub.w	ip, ip, #32
 8000e28:	f11c 0f20 	cmn.w	ip, #32
 8000e2c:	d1f0      	bne.n	8000e10 <main+0xbc>
 8000e2e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e32:	6943      	ldr	r3, [r0, #20]
 8000e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e38:	6143      	str	r3, [r0, #20]
 8000e3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e3e:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	2400      	movs	r4, #0
  HAL_Init();
 8000e44:	f000 fcd8 	bl	80017f8 <HAL_Init>
  SystemClock_Config();
 8000e48:	f7ff ff34 	bl	8000cb4 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4c:	4b68      	ldr	r3, [pc, #416]	@ (8000ff0 <main+0x29c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000e50:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000e54:	4622      	mov	r2, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e5a:	f44f 6780 	mov.w	r7, #1024	@ 0x400
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000e62:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000e6a:	f040 0004 	orr.w	r0, r0, #4
 8000e6e:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000e72:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000e76:	f000 0004 	and.w	r0, r0, #4
 8000e7a:	9000      	str	r0, [sp, #0]
 8000e7c:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000e82:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8000e86:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000e8a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000e8e:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8000e92:	9001      	str	r0, [sp, #4]
 8000e94:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000e9a:	f040 0001 	orr.w	r0, r0, #1
 8000e9e:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000ea2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000ea6:	f000 0001 	and.w	r0, r0, #1
 8000eaa:	9002      	str	r0, [sp, #8]
 8000eac:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000eb2:	f040 0002 	orr.w	r0, r0, #2
 8000eb6:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000eba:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000ebe:	f000 0002 	and.w	r0, r0, #2
 8000ec2:	9003      	str	r0, [sp, #12]
 8000ec4:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000eca:	f040 0008 	orr.w	r0, r0, #8
 8000ece:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000ed2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000ed6:	f000 0008 	and.w	r0, r0, #8
 8000eda:	9004      	str	r0, [sp, #16]
 8000edc:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ede:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000ee2:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8000ee6:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000eea:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000eee:	f000 0040 	and.w	r0, r0, #64	@ 0x40
 8000ef2:	9005      	str	r0, [sp, #20]
 8000ef4:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000efa:	f040 0010 	orr.w	r0, r0, #16
 8000efe:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000f06:	483b      	ldr	r0, [pc, #236]	@ (8000ff4 <main+0x2a0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f08:	f003 0310 	and.w	r3, r3, #16
 8000f0c:	9306      	str	r3, [sp, #24]
 8000f0e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000f10:	f001 fe52 	bl	8002bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f14:	4622      	mov	r2, r4
 8000f16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f1a:	4837      	ldr	r0, [pc, #220]	@ (8000ff8 <main+0x2a4>)
 8000f1c:	f001 fe4c 	bl	8002bb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f20:	4622      	mov	r2, r4
 8000f22:	2102      	movs	r1, #2
 8000f24:	4835      	ldr	r0, [pc, #212]	@ (8000ffc <main+0x2a8>)
 8000f26:	f001 fe47 	bl	8002bb8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000f2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	a907      	add	r1, sp, #28
 8000f30:	4833      	ldr	r0, [pc, #204]	@ (8001000 <main+0x2ac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f001 fd0a 	bl	8002950 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000f3c:	f244 0301 	movw	r3, #16385	@ 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	a907      	add	r1, sp, #28
 8000f42:	482c      	ldr	r0, [pc, #176]	@ (8000ff4 <main+0x2a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f001 fd00 	bl	8002950 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000f50:	f44f 7340 	mov.w	r3, #768	@ 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f54:	a907      	add	r1, sp, #28
 8000f56:	4828      	ldr	r0, [pc, #160]	@ (8000ff8 <main+0x2a4>)
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000f58:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f5a:	2307      	movs	r3, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f5e:	930b      	str	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	e9cd 6408 	strd	r6, r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f64:	f001 fcf4 	bl	8002950 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f68:	a907      	add	r1, sp, #28
 8000f6a:	4823      	ldr	r0, [pc, #140]	@ (8000ff8 <main+0x2a4>)
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f6c:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	e9cd 5408 	strd	r5, r4, [sp, #32]
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f001 fcec 	bl	8002950 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f78:	2280      	movs	r2, #128	@ 0x80
 8000f7a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	a907      	add	r1, sp, #28
 8000f80:	4820      	ldr	r0, [pc, #128]	@ (8001004 <main+0x2b0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f84:	e9cd 2307 	strd	r2, r3, [sp, #28]
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f001 fce2 	bl	8002950 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f8c:	230a      	movs	r3, #10
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	a907      	add	r1, sp, #28
 8000f90:	481d      	ldr	r0, [pc, #116]	@ (8001008 <main+0x2b4>)
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f92:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f94:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	e9cd 6408 	strd	r6, r4, [sp, #32]
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f001 fcd8 	bl	8002950 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	a907      	add	r1, sp, #28
 8000fa2:	4816      	ldr	r0, [pc, #88]	@ (8000ffc <main+0x2a8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	e9cd 6507 	strd	r6, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f001 fcd0 	bl	8002950 <HAL_GPIO_Init>
  osKernelInitialize();
 8000fb0:	f003 f8d6 	bl	8004160 <osKernelInitialize>
  startDefaultTaskSemaphore = osSemaphoreNew(1, 0, NULL); // Create semaphore with initial value 0
 8000fb4:	4622      	mov	r2, r4
 8000fb6:	4621      	mov	r1, r4
 8000fb8:	4628      	mov	r0, r5
 8000fba:	f003 f9e1 	bl	8004380 <osSemaphoreNew>
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <main+0x2b8>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fc0:	4a13      	ldr	r2, [pc, #76]	@ (8001010 <main+0x2bc>)
 8000fc2:	4621      	mov	r1, r4
  startDefaultTaskSemaphore = osSemaphoreNew(1, 0, NULL); // Create semaphore with initial value 0
 8000fc4:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fc6:	4813      	ldr	r0, [pc, #76]	@ (8001014 <main+0x2c0>)
 8000fc8:	f003 f8fe 	bl	80041c8 <osThreadNew>
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <main+0x2c4>)
 8000fce:	4605      	mov	r5, r0
  http_testHandle = osThreadNew(Starthttp, NULL, &http_test_attributes);
 8000fd0:	4a12      	ldr	r2, [pc, #72]	@ (800101c <main+0x2c8>)
 8000fd2:	4621      	mov	r1, r4
 8000fd4:	4812      	ldr	r0, [pc, #72]	@ (8001020 <main+0x2cc>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fd6:	601d      	str	r5, [r3, #0]
  http_testHandle = osThreadNew(Starthttp, NULL, &http_test_attributes);
 8000fd8:	f003 f8f6 	bl	80041c8 <osThreadNew>
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <main+0x2d0>)
 8000fde:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000fe0:	f003 f8d0 	bl	8004184 <osKernelStart>
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <main+0x290>
 8000fe6:	bf00      	nop
 8000fe8:	0301000e 	.word	0x0301000e
 8000fec:	e000ed00 	.word	0xe000ed00
 8000ff0:	58024400 	.word	0x58024400
 8000ff4:	58020400 	.word	0x58020400
 8000ff8:	58020c00 	.word	0x58020c00
 8000ffc:	58021000 	.word	0x58021000
 8001000:	58020800 	.word	0x58020800
 8001004:	58021800 	.word	0x58021800
 8001008:	58020000 	.word	0x58020000
 800100c:	240000b0 	.word	0x240000b0
 8001010:	08011884 	.word	0x08011884
 8001014:	08000c71 	.word	0x08000c71
 8001018:	240000b8 	.word	0x240000b8
 800101c:	08011860 	.word	0x08011860
 8001020:	08000c2d 	.word	0x08000c2d
 8001024:	240000b4 	.word	0x240000b4

08001028 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8001028:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800102a:	6802      	ldr	r2, [r0, #0]
 800102c:	429a      	cmp	r2, r3
 800102e:	d000      	beq.n	8001032 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001030:	4770      	bx	lr
    HAL_IncTick();
 8001032:	f000 bc11 	b.w	8001858 <HAL_IncTick>
 8001036:	bf00      	nop
 8001038:	40001000 	.word	0x40001000

0800103c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
  while (1)
 800103e:	e7fe      	b.n	800103e <Error_Handler+0x2>

08001040 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001040:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	210f      	movs	r1, #15
 8001046:	f06f 0001 	mvn.w	r0, #1
{
 800104a:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104c:	f8d3 40f4 	ldr.w	r4, [r3, #244]	@ 0xf4
{
 8001050:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	f044 0402 	orr.w	r4, r4, #2
 8001056:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
 800105a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	b003      	add	sp, #12
 8001068:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800106c:	f000 bc22 	b.w	80018b4 <HAL_NVIC_SetPriority>
 8001070:	58024400 	.word	0x58024400

08001074 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001074:	280f      	cmp	r0, #15
 8001076:	d901      	bls.n	800107c <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001078:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800107a:	4770      	bx	lr
{
 800107c:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800107e:	4601      	mov	r1, r0
{
 8001080:	b08b      	sub	sp, #44	@ 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001082:	2200      	movs	r2, #0
 8001084:	4604      	mov	r4, r0
 8001086:	2036      	movs	r0, #54	@ 0x36
 8001088:	f000 fc14 	bl	80018b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800108c:	2036      	movs	r0, #54	@ 0x36
 800108e:	f000 fc4d 	bl	800192c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001092:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <HAL_InitTick+0x8c>)
    uwTickPrio = TickPriority;
 8001094:	4a1b      	ldr	r2, [pc, #108]	@ (8001104 <HAL_InitTick+0x90>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001096:	4669      	mov	r1, sp
 8001098:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 800109a:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 800109c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80010a0:	f042 0210 	orr.w	r2, r2, #16
 80010a4:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80010a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010b4:	f002 fa42 	bl	800353c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010b8:	9b07      	ldr	r3, [sp, #28]
 80010ba:	b9c3      	cbnz	r3, 80010ee <HAL_InitTick+0x7a>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010bc:	f002 fa2c 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 80010c0:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010c2:	4911      	ldr	r1, [pc, #68]	@ (8001108 <HAL_InitTick+0x94>)
  htim6.Init.ClockDivision = 0;
 80010c4:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 80010c6:	4c11      	ldr	r4, [pc, #68]	@ (800110c <HAL_InitTick+0x98>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010c8:	fba1 1303 	umull	r1, r3, r1, r3
  htim6.Instance = TIM6;
 80010cc:	4d10      	ldr	r5, [pc, #64]	@ (8001110 <HAL_InitTick+0x9c>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010ce:	f240 31e7 	movw	r1, #999	@ 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010d2:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010d4:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 80010d6:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d8:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010da:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010dc:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010e0:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010e2:	f002 fbef 	bl	80038c4 <HAL_TIM_Base_Init>
 80010e6:	b130      	cbz	r0, 80010f6 <HAL_InitTick+0x82>
    return HAL_ERROR;
 80010e8:	2001      	movs	r0, #1
}
 80010ea:	b00b      	add	sp, #44	@ 0x2c
 80010ec:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010ee:	f002 fa13 	bl	8003518 <HAL_RCC_GetPCLK1Freq>
 80010f2:	0043      	lsls	r3, r0, #1
 80010f4:	e7e5      	b.n	80010c2 <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 80010f6:	4620      	mov	r0, r4
 80010f8:	f002 fa4e 	bl	8003598 <HAL_TIM_Base_Start_IT>
 80010fc:	e7f5      	b.n	80010ea <HAL_InitTick+0x76>
 80010fe:	bf00      	nop
 8001100:	58024400 	.word	0x58024400
 8001104:	2400000c 	.word	0x2400000c
 8001108:	431bde83 	.word	0x431bde83
 800110c:	240000bc 	.word	0x240000bc
 8001110:	40001000 	.word	0x40001000

08001114 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <NMI_Handler>
 8001116:	bf00      	nop

08001118 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <HardFault_Handler>
 800111a:	bf00      	nop

0800111c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler>
 800111e:	bf00      	nop

08001120 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <BusFault_Handler>
 8001122:	bf00      	nop

08001124 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler>
 8001126:	bf00      	nop

08001128 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800112c:	4801      	ldr	r0, [pc, #4]	@ (8001134 <TIM6_DAC_IRQHandler+0x8>)
 800112e:	f002 ba99 	b.w	8003664 <HAL_TIM_IRQHandler>
 8001132:	bf00      	nop
 8001134:	240000bc 	.word	0x240000bc

08001138 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001138:	4801      	ldr	r0, [pc, #4]	@ (8001140 <ETH_IRQHandler+0x8>)
 800113a:	f001 b8bf 	b.w	80022bc <HAL_ETH_IRQHandler>
 800113e:	bf00      	nop
 8001140:	240103e0 	.word	0x240103e0

08001144 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001144:	2001      	movs	r0, #1
 8001146:	4770      	bx	lr

08001148 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8001148:	4b02      	ldr	r3, [pc, #8]	@ (8001154 <_kill+0xc>)
 800114a:	2216      	movs	r2, #22
	return -1;
}
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8001150:	601a      	str	r2, [r3, #0]
}
 8001152:	4770      	bx	lr
 8001154:	240209f8 	.word	0x240209f8

08001158 <_exit>:
	errno = EINVAL;
 8001158:	4b01      	ldr	r3, [pc, #4]	@ (8001160 <_exit+0x8>)
 800115a:	2216      	movs	r2, #22
 800115c:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800115e:	e7fe      	b.n	800115e <_exit+0x6>
 8001160:	240209f8 	.word	0x240209f8

08001164 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001164:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	1e16      	subs	r6, r2, #0
 8001168:	dd07      	ble.n	800117a <_read+0x16>
 800116a:	460c      	mov	r4, r1
 800116c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800116e:	f3af 8000 	nop.w
 8001172:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001176:	42a5      	cmp	r5, r4
 8001178:	d1f9      	bne.n	800116e <_read+0xa>
	}

return len;
}
 800117a:	4630      	mov	r0, r6
 800117c:	bd70      	pop	{r4, r5, r6, pc}
 800117e:	bf00      	nop

08001180 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001180:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001182:	1e16      	subs	r6, r2, #0
 8001184:	dd07      	ble.n	8001196 <_write+0x16>
 8001186:	460c      	mov	r4, r1
 8001188:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800118a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800118e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	42a5      	cmp	r5, r4
 8001194:	d1f9      	bne.n	800118a <_write+0xa>
	}
	return len;
}
 8001196:	4630      	mov	r0, r6
 8001198:	bd70      	pop	{r4, r5, r6, pc}
 800119a:	bf00      	nop

0800119c <_close>:

int _close(int file)
{
	return -1;
}
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80011a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80011a8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80011aa:	604b      	str	r3, [r1, #4]
}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80011b0:	2001      	movs	r0, #1
 80011b2:	4770      	bx	lr

080011b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80011b4:	2000      	movs	r0, #0
 80011b6:	4770      	bx	lr

080011b8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b8:	490d      	ldr	r1, [pc, #52]	@ (80011f0 <_sbrk+0x38>)
{
 80011ba:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011bc:	4a0d      	ldr	r2, [pc, #52]	@ (80011f4 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80011be:	6808      	ldr	r0, [r1, #0]
{
 80011c0:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c2:	4c0d      	ldr	r4, [pc, #52]	@ (80011f8 <_sbrk+0x40>)
 80011c4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80011c6:	b170      	cbz	r0, 80011e6 <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c8:	4403      	add	r3, r0
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d803      	bhi.n	80011d6 <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80011ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 80011d2:	600b      	str	r3, [r1, #0]
}
 80011d4:	4770      	bx	lr
    errno = ENOMEM;
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <_sbrk+0x44>)
 80011d8:	220c      	movs	r2, #12
    return (void *)-1;
 80011da:	f04f 30ff 	mov.w	r0, #4294967295
}
 80011de:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 80011e6:	4c06      	ldr	r4, [pc, #24]	@ (8001200 <_sbrk+0x48>)
 80011e8:	4620      	mov	r0, r4
 80011ea:	600c      	str	r4, [r1, #0]
 80011ec:	e7ec      	b.n	80011c8 <_sbrk+0x10>
 80011ee:	bf00      	nop
 80011f0:	24000108 	.word	0x24000108
 80011f4:	24050000 	.word	0x24050000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	240209f8 	.word	0x240209f8
 8001200:	24025388 	.word	0x24025388

08001204 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001204:	4922      	ldr	r1, [pc, #136]	@ (8001290 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001206:	4a23      	ldr	r2, [pc, #140]	@ (8001294 <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001208:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8001210:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001216:	6813      	ldr	r3, [r2, #0]
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	2b06      	cmp	r3, #6
 800121e:	d805      	bhi.n	800122c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001220:	6813      	ldr	r3, [r2, #0]
 8001222:	f023 030f 	bic.w	r3, r3, #15
 8001226:	f043 0307 	orr.w	r3, r3, #7
 800122a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800122e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001230:	4a1a      	ldr	r2, [pc, #104]	@ (800129c <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8001232:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001234:	4817      	ldr	r0, [pc, #92]	@ (8001294 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8001236:	f041 0101 	orr.w	r1, r1, #1
 800123a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800123c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800123e:	6819      	ldr	r1, [r3, #0]
 8001240:	400a      	ands	r2, r1
 8001242:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001244:	6803      	ldr	r3, [r0, #0]
 8001246:	071b      	lsls	r3, r3, #28
 8001248:	d505      	bpl.n	8001256 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800124a:	6803      	ldr	r3, [r0, #0]
 800124c:	f023 030f 	bic.w	r3, r3, #15
 8001250:	f043 0307 	orr.w	r3, r3, #7
 8001254:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <SystemInit+0x94>)
 8001258:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800125a:	4911      	ldr	r1, [pc, #68]	@ (80012a0 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 800125c:	4c11      	ldr	r4, [pc, #68]	@ (80012a4 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 800125e:	4812      	ldr	r0, [pc, #72]	@ (80012a8 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 8001260:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001262:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001264:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001266:	629c      	str	r4, [r3, #40]	@ 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001268:	f243 04d2 	movw	r4, #12498	@ 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 800126c:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800126e:	6319      	str	r1, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
 8001270:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x01010280;
 8001272:	6399      	str	r1, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
 8001274:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8001276:	6419      	str	r1, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
 8001278:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800127a:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800127c:	480b      	ldr	r0, [pc, #44]	@ (80012ac <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 800127e:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8001282:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8001284:	661a      	str	r2, [r3, #96]	@ 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001286:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001288:	f85d 4b04 	ldr.w	r4, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00
 8001294:	52002000 	.word	0x52002000
 8001298:	58024400 	.word	0x58024400
 800129c:	eaf6ed7f 	.word	0xeaf6ed7f
 80012a0:	01010280 	.word	0x01010280
 80012a4:	02020200 	.word	0x02020200
 80012a8:	01ff0000 	.word	0x01ff0000
 80012ac:	52004000 	.word	0x52004000

080012b0 <http_thread>:
{
  struct netconn *conn, *newconn;
  err_t err, accept_err;

  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2010      	movs	r0, #16
{
 80012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  conn = netconn_new(NETCONN_TCP);
 80012b6:	4611      	mov	r1, r2
{
 80012b8:	b085      	sub	sp, #20
  conn = netconn_new(NETCONN_TCP);
 80012ba:	f005 fc31 	bl	8006b20 <netconn_new_with_proto_and_callback>

  if (conn!= NULL)
 80012be:	b128      	cbz	r0, 80012cc <http_thread+0x1c>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, IP_ADDR_ANY, 80);
 80012c0:	2250      	movs	r2, #80	@ 0x50
 80012c2:	4919      	ldr	r1, [pc, #100]	@ (8001328 <http_thread+0x78>)
 80012c4:	4607      	mov	r7, r0
 80012c6:	f005 fcab 	bl	8006c20 <netconn_bind>

    if (err == ERR_OK)
 80012ca:	b108      	cbz	r0, 80012d0 <http_thread+0x20>
        }
      }
    }
  }

}
 80012cc:	b005      	add	sp, #20
 80012ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      netconn_listen(conn);
 80012d0:	21ff      	movs	r1, #255	@ 0xff
 80012d2:	4638      	mov	r0, r7
 80012d4:	f005 fcd0 	bl	8006c78 <netconn_listen_with_backlog>
        accept_err = netconn_accept(conn, &newconn);
 80012d8:	a903      	add	r1, sp, #12
 80012da:	4638      	mov	r0, r7
 80012dc:	f005 fcf0 	bl	8006cc0 <netconn_accept>
        if(accept_err == ERR_OK)
 80012e0:	4604      	mov	r4, r0
 80012e2:	2800      	cmp	r0, #0
 80012e4:	d1f8      	bne.n	80012d8 <http_thread+0x28>
          http_server(newconn);
 80012e6:	9e03      	ldr	r6, [sp, #12]
	request_type = receive_http_header(conn, network_buffer, rx_buffer, rx_buflen, recv_err);
 80012e8:	4603      	mov	r3, r0
 80012ea:	4602      	mov	r2, r0
 80012ec:	2100      	movs	r1, #0
 80012ee:	4630      	mov	r0, r6
 80012f0:	9400      	str	r4, [sp, #0]
 80012f2:	f000 f84d 	bl	8001390 <receive_http_header>
	if (request_type != HTTP_GET){
 80012f6:	4605      	mov	r5, r0
 80012f8:	b950      	cbnz	r0, 8001310 <http_thread+0x60>
	handle_request(conn, request_type);
 80012fa:	4630      	mov	r0, r6
 80012fc:	4629      	mov	r1, r5
 80012fe:	f000 f961 	bl	80015c4 <handle_request>
          netconn_close(newconn);
 8001302:	9803      	ldr	r0, [sp, #12]
 8001304:	f005 fe26 	bl	8006f54 <netconn_close>
          netconn_delete(newconn);
 8001308:	9803      	ldr	r0, [sp, #12]
 800130a:	f005 fc69 	bl	8006be0 <netconn_delete>
 800130e:	e7e3      	b.n	80012d8 <http_thread+0x28>
		content_length = extract_content_len();
 8001310:	f000 f866 	bl	80013e0 <extract_content_len>
		(void)receive_http_body(conn, content_length, network_buffer, rx_buffer, rx_buflen, recv_err);
 8001314:	4623      	mov	r3, r4
		content_length = extract_content_len();
 8001316:	4601      	mov	r1, r0
		(void)receive_http_body(conn, content_length, network_buffer, rx_buffer, rx_buflen, recv_err);
 8001318:	2200      	movs	r2, #0
 800131a:	4630      	mov	r0, r6
 800131c:	e9cd 4400 	strd	r4, r4, [sp]
 8001320:	f000 f804 	bl	800132c <receive_http_body>
 8001324:	e7e9      	b.n	80012fa <http_thread+0x4a>
 8001326:	bf00      	nop
 8001328:	0801406c 	.word	0x0801406c

0800132c <receive_http_body>:
char http_body_buffer[HTTP_BODY_BUFFER_SIZE];




int receive_http_body(struct netconn *conn, int content_length,struct netbuf *network_buffer, char *rx_buffer, u16_t rx_buflen, err_t recv_err) {
 800132c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	460f      	mov	r7, r1
 8001334:	4606      	mov	r6, r0
	// create buffers and counters to keep track of incoming tcp segments
//    struct netbuf *network_buffer; // LWIP netbuf structure that stores received TCP data.

    int total_received = 0;

    memset(http_body_buffer, 0, sizeof(http_body_buffer)); // Clear buffer, makes sure the buffer is empty before writing new data
 8001336:	2100      	movs	r1, #0
int receive_http_body(struct netconn *conn, int content_length,struct netbuf *network_buffer, char *rx_buffer, u16_t rx_buflen, err_t recv_err) {
 8001338:	9201      	str	r2, [sp, #4]
    memset(http_body_buffer, 0, sizeof(http_body_buffer)); // Clear buffer, makes sure the buffer is empty before writing new data
 800133a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800133e:	4813      	ldr	r0, [pc, #76]	@ (800138c <receive_http_body+0x60>)
    int total_received = 0;
 8001340:	2400      	movs	r4, #0
int receive_http_body(struct netconn *conn, int content_length,struct netbuf *network_buffer, char *rx_buffer, u16_t rx_buflen, err_t recv_err) {
 8001342:	f99d 5024 	ldrsb.w	r5, [sp, #36]	@ 0x24
 8001346:	9300      	str	r3, [sp, #0]
    memset(http_body_buffer, 0, sizeof(http_body_buffer)); // Clear buffer, makes sure the buffer is empty before writing new data
 8001348:	f00e fea7 	bl	801009a <memset>
        netbuf_data(network_buffer, (void**)&rx_buffer, &rx_buflen); //extracts the data buffer (buf) and its length (buflen) from inbuf

        // Ensure we don't overflow the buffer TODO - raise HTTP EXCEPTION for OVERFLOW INSTEAD

        // rx_buflen bytes from rx_buffer into http_body_buffer at total_received position
        memcpy(http_body_buffer + total_received, rx_buffer, rx_buflen);
 800134c:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 800138c <receive_http_body+0x60>
    while (recv_err == ERR_OK) {
 8001350:	e014      	b.n	800137c <receive_http_body+0x50>
    	recv_err = netconn_recv(conn, &network_buffer);
 8001352:	f005 fd1b 	bl	8006d8c <netconn_recv>
        netbuf_data(network_buffer, (void**)&rx_buffer, &rx_buflen); //extracts the data buffer (buf) and its length (buflen) from inbuf
 8001356:	aa08      	add	r2, sp, #32
 8001358:	4669      	mov	r1, sp
    	recv_err = netconn_recv(conn, &network_buffer);
 800135a:	4605      	mov	r5, r0
        netbuf_data(network_buffer, (void**)&rx_buffer, &rx_buflen); //extracts the data buffer (buf) and its length (buflen) from inbuf
 800135c:	9801      	ldr	r0, [sp, #4]
 800135e:	f006 ff23 	bl	80081a8 <netbuf_data>
        memcpy(http_body_buffer + total_received, rx_buffer, rx_buflen);
 8001362:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8001366:	eb08 0004 	add.w	r0, r8, r4
 800136a:	9900      	ldr	r1, [sp, #0]
        total_received += rx_buflen;
 800136c:	4414      	add	r4, r2
        memcpy(http_body_buffer + total_received, rx_buffer, rx_buflen);
 800136e:	f00e ff9e 	bl	80102ae <memcpy>

        netbuf_delete(network_buffer); // Free the buffer
 8001372:	9801      	ldr	r0, [sp, #4]
 8001374:	f006 ff06 	bl	8008184 <netbuf_delete>

        // If we've received everything, exit
        if (total_received >= content_length) {
 8001378:	42bc      	cmp	r4, r7
 800137a:	da03      	bge.n	8001384 <receive_http_body+0x58>
    	recv_err = netconn_recv(conn, &network_buffer);
 800137c:	a901      	add	r1, sp, #4
 800137e:	4630      	mov	r0, r6
    while (recv_err == ERR_OK) {
 8001380:	2d00      	cmp	r5, #0
 8001382:	d0e6      	beq.n	8001352 <receive_http_body+0x26>
            break;
        }
    }

    return total_received;  // Return the actual received size
}
 8001384:	4620      	mov	r0, r4
 8001386:	b002      	add	sp, #8
 8001388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800138c:	2400010c 	.word	0x2400010c

08001390 <receive_http_header>:

char http_header_buffer[HTTP_HEADER_BUFFER_SIZE];



HttpRequestType receive_http_header(struct netconn *conn,struct netbuf *network_buffer, char *rx_buffer, u16_t rx_buflen, err_t recv_err) {
 8001390:	b530      	push	{r4, r5, lr}

    memset(http_header_buffer, 0, sizeof(http_header_buffer)); // Clear buffer, makes sure the buffer is empty before writing new data
 8001392:	4c12      	ldr	r4, [pc, #72]	@ (80013dc <receive_http_header+0x4c>)
HttpRequestType receive_http_header(struct netconn *conn,struct netbuf *network_buffer, char *rx_buffer, u16_t rx_buflen, err_t recv_err) {
 8001394:	b085      	sub	sp, #20
 8001396:	4605      	mov	r5, r0
 8001398:	9103      	str	r1, [sp, #12]
    memset(http_header_buffer, 0, sizeof(http_header_buffer)); // Clear buffer, makes sure the buffer is empty before writing new data
 800139a:	4620      	mov	r0, r4
HttpRequestType receive_http_header(struct netconn *conn,struct netbuf *network_buffer, char *rx_buffer, u16_t rx_buflen, err_t recv_err) {
 800139c:	9202      	str	r2, [sp, #8]
    memset(http_header_buffer, 0, sizeof(http_header_buffer)); // Clear buffer, makes sure the buffer is empty before writing new data
 800139e:	2100      	movs	r1, #0
 80013a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
HttpRequestType receive_http_header(struct netconn *conn,struct netbuf *network_buffer, char *rx_buffer, u16_t rx_buflen, err_t recv_err) {
 80013a4:	f8ad 3006 	strh.w	r3, [sp, #6]
    memset(http_header_buffer, 0, sizeof(http_header_buffer)); // Clear buffer, makes sure the buffer is empty before writing new data
 80013a8:	f00e fe77 	bl	801009a <memset>

	// get header
    recv_err = netconn_recv(conn, &network_buffer);
 80013ac:	a903      	add	r1, sp, #12
 80013ae:	4628      	mov	r0, r5
 80013b0:	f005 fcec 	bl	8006d8c <netconn_recv>
	netbuf_data(network_buffer, (void**)&rx_buffer, &rx_buflen);
 80013b4:	f10d 0206 	add.w	r2, sp, #6
 80013b8:	a902      	add	r1, sp, #8
 80013ba:	9803      	ldr	r0, [sp, #12]
 80013bc:	f006 fef4 	bl	80081a8 <netbuf_data>
	// set header in static buffer
	memcpy(http_header_buffer, rx_buffer, rx_buflen);
 80013c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80013c4:	9902      	ldr	r1, [sp, #8]
 80013c6:	4620      	mov	r0, r4
 80013c8:	f00e ff71 	bl	80102ae <memcpy>


	netbuf_delete(network_buffer);
 80013cc:	9803      	ldr	r0, [sp, #12]
 80013ce:	f006 fed9 	bl	8008184 <netbuf_delete>

	// return type
	return get_request_type(http_header_buffer);
 80013d2:	4620      	mov	r0, r4
 80013d4:	f000 f814 	bl	8001400 <get_request_type>
}
 80013d8:	b005      	add	sp, #20
 80013da:	bd30      	pop	{r4, r5, pc}
 80013dc:	2401010c 	.word	0x2401010c

080013e0 <extract_content_len>:

int extract_content_len(void){
 80013e0:	b508      	push	{r3, lr}
	int content_length = 0;
	char *content_length_header = strstr(http_header_buffer, "Content-Length:");
 80013e2:	4905      	ldr	r1, [pc, #20]	@ (80013f8 <extract_content_len+0x18>)
 80013e4:	4805      	ldr	r0, [pc, #20]	@ (80013fc <extract_content_len+0x1c>)
 80013e6:	f00e fe72 	bl	80100ce <strstr>
	if (content_length_header) {
 80013ea:	b120      	cbz	r0, 80013f6 <extract_content_len+0x16>
		content_length = atoi(content_length_header + 15);
 80013ec:	300f      	adds	r0, #15
	}
	return content_length;
}
 80013ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		content_length = atoi(content_length_header + 15);
 80013f2:	f00e bb59 	b.w	800faa8 <atoi>
}
 80013f6:	bd08      	pop	{r3, pc}
 80013f8:	080118b8 	.word	0x080118b8
 80013fc:	2401010c 	.word	0x2401010c

08001400 <get_request_type>:

#include "string.h"
#include "http/request_parser/request_type.h"


HttpRequestType get_request_type(char *request_header) {
 8001400:	b538      	push	{r3, r4, r5, lr}
    if (strncmp(request_header, "GET", 3u) == 0) {
 8001402:	7805      	ldrb	r5, [r0, #0]
HttpRequestType get_request_type(char *request_header) {
 8001404:	4604      	mov	r4, r0
    if (strncmp(request_header, "GET", 3u) == 0) {
 8001406:	2d47      	cmp	r5, #71	@ 0x47
 8001408:	d102      	bne.n	8001410 <get_request_type+0x10>
 800140a:	7843      	ldrb	r3, [r0, #1]
 800140c:	2b45      	cmp	r3, #69	@ 0x45
 800140e:	d00f      	beq.n	8001430 <get_request_type+0x30>
        return HTTP_GET;
    } else if (strncmp(request_header, "POST", 4u) == 0) {
 8001410:	2204      	movs	r2, #4
 8001412:	490f      	ldr	r1, [pc, #60]	@ (8001450 <get_request_type+0x50>)
 8001414:	4620      	mov	r0, r4
 8001416:	f00e fe48 	bl	80100aa <strncmp>
 800141a:	b168      	cbz	r0, 8001438 <get_request_type+0x38>
        return HTTP_POST;
    } else if (strncmp(request_header, "PUT", 3u) == 0) {
 800141c:	2d50      	cmp	r5, #80	@ 0x50
 800141e:	d10d      	bne.n	800143c <get_request_type+0x3c>
 8001420:	7863      	ldrb	r3, [r4, #1]
 8001422:	2b55      	cmp	r3, #85	@ 0x55
 8001424:	d10a      	bne.n	800143c <get_request_type+0x3c>
 8001426:	78a3      	ldrb	r3, [r4, #2]
 8001428:	2b54      	cmp	r3, #84	@ 0x54
 800142a:	d107      	bne.n	800143c <get_request_type+0x3c>
        return HTTP_PUT;
 800142c:	2002      	movs	r0, #2
    } else if (strncmp(request_header, "DELETE", 6u) == 0) {
        return HTTP_DELETE;
    }
    return -1; // Unknown request type
}
 800142e:	bd38      	pop	{r3, r4, r5, pc}
    if (strncmp(request_header, "GET", 3u) == 0) {
 8001430:	7880      	ldrb	r0, [r0, #2]
 8001432:	3854      	subs	r0, #84	@ 0x54
 8001434:	d1ec      	bne.n	8001410 <get_request_type+0x10>
}
 8001436:	bd38      	pop	{r3, r4, r5, pc}
        return HTTP_POST;
 8001438:	2001      	movs	r0, #1
}
 800143a:	bd38      	pop	{r3, r4, r5, pc}
    } else if (strncmp(request_header, "DELETE", 6u) == 0) {
 800143c:	2206      	movs	r2, #6
 800143e:	4905      	ldr	r1, [pc, #20]	@ (8001454 <get_request_type+0x54>)
 8001440:	4620      	mov	r0, r4
 8001442:	f00e fe32 	bl	80100aa <strncmp>
    return -1; // Unknown request type
 8001446:	2800      	cmp	r0, #0
 8001448:	bf0c      	ite	eq
 800144a:	2003      	moveq	r0, #3
 800144c:	20ff      	movne	r0, #255	@ 0xff
}
 800144e:	bd38      	pop	{r3, r4, r5, pc}
 8001450:	080118c8 	.word	0x080118c8
 8001454:	080118d0 	.word	0x080118d0

08001458 <create_http_header>:
#include "http/response_manager/header_manager.h"



// Function to create HTTP header dynamically
char* create_http_header(HttpStatusCode status_code, size_t content_length) {
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	460e      	mov	r6, r1
 800145e:	4607      	mov	r7, r0
    // Allocate memory for the header string
    char *status_message = get_status_message(status_code);
 8001460:	f000 f83e 	bl	80014e0 <get_status_message>
 8001464:	4605      	mov	r5, r0

    // Allocate the memory to store the header
    char *header = (char *)malloc(header_size);
 8001466:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800146a:	f00e fb21 	bl	800fab0 <malloc>
 800146e:	4604      	mov	r4, r0
    //char *header = (char *)calloc(header_size, sizeof(char));

    if (header == NULL) {
 8001470:	b150      	cbz	r0, 8001488 <create_http_header+0x30>
        return NULL; // Memory allocation failure
    }

    // Prepare the status line and headers
    snprintf(header, header_size,
 8001472:	463b      	mov	r3, r7
 8001474:	4a06      	ldr	r2, [pc, #24]	@ (8001490 <create_http_header+0x38>)
 8001476:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800147a:	9601      	str	r6, [sp, #4]
 800147c:	9500      	str	r5, [sp, #0]
 800147e:	f00e fd6b 	bl	800ff58 <sniprintf>
    		//"Connection: close\r\n"       // Connection: close (for this example)
             "\r\n",                      // Blank line to separate headers from body
             status_code, status_message, (unsigned long)content_length);


    free(status_message);
 8001482:	4628      	mov	r0, r5
 8001484:	f00e fb1c 	bl	800fac0 <free>

    return header;
}
 8001488:	4620      	mov	r0, r4
 800148a:	b003      	add	sp, #12
 800148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148e:	bf00      	nop
 8001490:	080118d8 	.word	0x080118d8

08001494 <http_write_response>:
#include <string.h>
#include "lwip/api.h" // For netconn functions
#include "http/response_manager/header_manager.h"


void http_write_response(struct netconn *conn, HttpStatusCode status_code, char * message){
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	4606      	mov	r6, r0
 8001498:	b083      	sub	sp, #12

	char *http_header = create_http_header(HTTP_OK, strlen(message));
 800149a:	4610      	mov	r0, r2
void http_write_response(struct netconn *conn, HttpStatusCode status_code, char * message){
 800149c:	4614      	mov	r4, r2
	char *http_header = create_http_header(HTTP_OK, strlen(message));
 800149e:	f7fe ff37 	bl	8000310 <strlen>
 80014a2:	4601      	mov	r1, r0
 80014a4:	20c8      	movs	r0, #200	@ 0xc8

	netconn_write(conn, http_header, strlen(http_header), NETCONN_COPY);
 80014a6:	2700      	movs	r7, #0
	char *http_header = create_http_header(HTTP_OK, strlen(message));
 80014a8:	f7ff ffd6 	bl	8001458 <create_http_header>
 80014ac:	4605      	mov	r5, r0
	netconn_write(conn, http_header, strlen(http_header), NETCONN_COPY);
 80014ae:	f7fe ff2f 	bl	8000310 <strlen>
 80014b2:	2301      	movs	r3, #1
 80014b4:	4602      	mov	r2, r0
 80014b6:	4629      	mov	r1, r5
 80014b8:	4630      	mov	r0, r6
 80014ba:	9700      	str	r7, [sp, #0]
 80014bc:	f005 fd3c 	bl	8006f38 <netconn_write_partly>
	netconn_write(conn, message, strlen(message), NETCONN_COPY);
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7fe ff25 	bl	8000310 <strlen>
 80014c6:	4621      	mov	r1, r4
 80014c8:	4602      	mov	r2, r0
 80014ca:	2301      	movs	r3, #1
 80014cc:	4630      	mov	r0, r6
 80014ce:	9700      	str	r7, [sp, #0]
 80014d0:	f005 fd32 	bl	8006f38 <netconn_write_partly>

	if (http_header) {
	    free(http_header);
 80014d4:	4628      	mov	r0, r5
	}
//	if (message) {
//		    free(message);
//		}
}
 80014d6:	b003      	add	sp, #12
 80014d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	    free(http_header);
 80014dc:	f00e baf0 	b.w	800fac0 <free>

080014e0 <get_status_message>:

// Enum for HTTP status codes


// Function to get the status message based on the status code
char* get_status_message(HttpStatusCode code) {
 80014e0:	b538      	push	{r3, r4, r5, lr}
 80014e2:	4604      	mov	r4, r0
    char *message = malloc(64);  // Allocate memory for the message (adjust size as needed)
 80014e4:	2040      	movs	r0, #64	@ 0x40
 80014e6:	f00e fae3 	bl	800fab0 <malloc>

    if (message == NULL) {
 80014ea:	4684      	mov	ip, r0
 80014ec:	b190      	cbz	r0, 8001514 <get_status_message+0x34>
        return NULL;  // Return NULL if memory allocation fails
    }

    switch (code) {
 80014ee:	f5b4 7fca 	cmp.w	r4, #404	@ 0x194
 80014f2:	d01d      	beq.n	8001530 <get_status_message+0x50>
 80014f4:	d910      	bls.n	8001518 <get_status_message+0x38>
 80014f6:	f5b4 7fd3 	cmp.w	r4, #422	@ 0x1a6
 80014fa:	d020      	beq.n	800153e <get_status_message+0x5e>
 80014fc:	f5b4 7ffa 	cmp.w	r4, #500	@ 0x1f4
 8001500:	d128      	bne.n	8001554 <get_status_message+0x74>
            break;
        case HTTP_NOT_FOUND:
            strcpy(message, "Not Found");
            break;
        case HTTP_INTERNAL_ERROR:
            strcpy(message, "Internal Server Error");
 8001502:	4d1d      	ldr	r5, [pc, #116]	@ (8001578 <get_status_message+0x98>)
 8001504:	4604      	mov	r4, r0
 8001506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800150e:	f844 0b04 	str.w	r0, [r4], #4
 8001512:	8021      	strh	r1, [r4, #0]
        default:
            strcpy(message, "Unknown Status");
            break;
    }
    return message; // free this var after use!
}
 8001514:	4660      	mov	r0, ip
 8001516:	bd38      	pop	{r3, r4, r5, pc}
    switch (code) {
 8001518:	2cc8      	cmp	r4, #200	@ 0xc8
 800151a:	d025      	beq.n	8001568 <get_status_message+0x88>
 800151c:	f5b4 7fc8 	cmp.w	r4, #400	@ 0x190
 8001520:	d118      	bne.n	8001554 <get_status_message+0x74>
            strcpy(message, "Bad Request");
 8001522:	4b16      	ldr	r3, [pc, #88]	@ (800157c <get_status_message+0x9c>)
 8001524:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001528:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 800152c:	4660      	mov	r0, ip
 800152e:	bd38      	pop	{r3, r4, r5, pc}
            strcpy(message, "Not Found");
 8001530:	4a13      	ldr	r2, [pc, #76]	@ (8001580 <get_status_message+0xa0>)
 8001532:	4603      	mov	r3, r0
 8001534:	ca07      	ldmia	r2, {r0, r1, r2}
 8001536:	c303      	stmia	r3!, {r0, r1}
}
 8001538:	4660      	mov	r0, ip
            strcpy(message, "Not Found");
 800153a:	801a      	strh	r2, [r3, #0]
}
 800153c:	bd38      	pop	{r3, r4, r5, pc}
            strcpy(message, "Unprocessable Entity");
 800153e:	4d11      	ldr	r5, [pc, #68]	@ (8001584 <get_status_message+0xa4>)
 8001540:	4604      	mov	r4, r0
 8001542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001546:	e895 0003 	ldmia.w	r5, {r0, r1}
 800154a:	f844 0b04 	str.w	r0, [r4], #4
}
 800154e:	4660      	mov	r0, ip
            strcpy(message, "Unprocessable Entity");
 8001550:	7021      	strb	r1, [r4, #0]
}
 8001552:	bd38      	pop	{r3, r4, r5, pc}
            strcpy(message, "Unknown Status");
 8001554:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <get_status_message+0xa8>)
 8001556:	4664      	mov	r4, ip
 8001558:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800155a:	c407      	stmia	r4!, {r0, r1, r2}
 800155c:	0c1a      	lsrs	r2, r3, #16
 800155e:	f824 3b02 	strh.w	r3, [r4], #2
}
 8001562:	4660      	mov	r0, ip
            strcpy(message, "Unknown Status");
 8001564:	7022      	strb	r2, [r4, #0]
}
 8001566:	bd38      	pop	{r3, r4, r5, pc}
            strcpy(message, "OK");
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <get_status_message+0xac>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0c1a      	lsrs	r2, r3, #16
 800156e:	8003      	strh	r3, [r0, #0]
 8001570:	7082      	strb	r2, [r0, #2]
}
 8001572:	4660      	mov	r0, ip
 8001574:	bd38      	pop	{r3, r4, r5, pc}
 8001576:	bf00      	nop
 8001578:	08011964 	.word	0x08011964
 800157c:	08011934 	.word	0x08011934
 8001580:	08011958 	.word	0x08011958
 8001584:	08011940 	.word	0x08011940
 8001588:	0801197c 	.word	0x0801197c
 800158c:	080120d0 	.word	0x080120d0

08001590 <GET_requests_router>:





void GET_requests_router(struct netconn *conn){
 8001590:	b510      	push	{r4, lr}
	if (strncmp(http_header_buffer, "GET /index.html", 15) == 0) {
 8001592:	220f      	movs	r2, #15
void GET_requests_router(struct netconn *conn){
 8001594:	b082      	sub	sp, #8
 8001596:	4604      	mov	r4, r0
	if (strncmp(http_header_buffer, "GET /index.html", 15) == 0) {
 8001598:	4907      	ldr	r1, [pc, #28]	@ (80015b8 <GET_requests_router+0x28>)
 800159a:	4808      	ldr	r0, [pc, #32]	@ (80015bc <GET_requests_router+0x2c>)
 800159c:	f00e fd85 	bl	80100aa <strncmp>
 80015a0:	b108      	cbz	r0, 80015a6 <GET_requests_router+0x16>
		netconn_write(conn, http_post_response, strlen(http_post_response), NETCONN_NOCOPY);
	}
}
 80015a2:	b002      	add	sp, #8
 80015a4:	bd10      	pop	{r4, pc}
 80015a6:	4603      	mov	r3, r0
		netconn_write(conn, http_post_response, strlen(http_post_response), NETCONN_NOCOPY);
 80015a8:	2256      	movs	r2, #86	@ 0x56
 80015aa:	4905      	ldr	r1, [pc, #20]	@ (80015c0 <GET_requests_router+0x30>)
 80015ac:	4620      	mov	r0, r4
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	f005 fcc2 	bl	8006f38 <netconn_write_partly>
}
 80015b4:	b002      	add	sp, #8
 80015b6:	bd10      	pop	{r4, pc}
 80015b8:	0801198c 	.word	0x0801198c
 80015bc:	2401010c 	.word	0x2401010c
 80015c0:	0801199c 	.word	0x0801199c

080015c4 <handle_request>:
#include "http/routers/post_router.h"

// Function to handle the request based on the type
void handle_request(struct netconn *conn, HttpRequestType request_type) {

    switch (request_type) {
 80015c4:	b121      	cbz	r1, 80015d0 <handle_request+0xc>
 80015c6:	2901      	cmp	r1, #1
 80015c8:	d101      	bne.n	80015ce <handle_request+0xa>
        case HTTP_GET:
        	GET_requests_router(conn);
            break;

        case HTTP_POST:
        	POST_requests_router(conn);
 80015ca:	f000 b803 	b.w	80015d4 <POST_requests_router>
 80015ce:	4770      	bx	lr
        	GET_requests_router(conn);
 80015d0:	f7ff bfde 	b.w	8001590 <GET_requests_router>

080015d4 <POST_requests_router>:
//const char response_body[] = "hello this is http";

//const char message[] = "this is go";


void POST_requests_router(struct netconn *conn){
 80015d4:	b510      	push	{r4, lr}
	if (strncmp(http_header_buffer, "POST /postTest", 14) == 0) {
 80015d6:	220e      	movs	r2, #14
void POST_requests_router(struct netconn *conn){
 80015d8:	4604      	mov	r4, r0
	if (strncmp(http_header_buffer, "POST /postTest", 14) == 0) {
 80015da:	4906      	ldr	r1, [pc, #24]	@ (80015f4 <POST_requests_router+0x20>)
 80015dc:	4806      	ldr	r0, [pc, #24]	@ (80015f8 <POST_requests_router+0x24>)
 80015de:	f00e fd64 	bl	80100aa <strncmp>
 80015e2:	b100      	cbz	r0, 80015e6 <POST_requests_router+0x12>

//		char *content = (char *)calloc(content, sizeof(char));
//		char *content = "this is message";
		http_write_response(conn, HTTP_OK, "this is message");
	}
}
 80015e4:	bd10      	pop	{r4, pc}
		http_write_response(conn, HTTP_OK, "this is message");
 80015e6:	4620      	mov	r0, r4
 80015e8:	4a04      	ldr	r2, [pc, #16]	@ (80015fc <POST_requests_router+0x28>)
 80015ea:	21c8      	movs	r1, #200	@ 0xc8
}
 80015ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		http_write_response(conn, HTTP_OK, "this is message");
 80015f0:	f7ff bf50 	b.w	8001494 <http_write_response>
 80015f4:	080119f4 	.word	0x080119f4
 80015f8:	2401010c 	.word	0x2401010c
 80015fc:	08011a04 	.word	0x08011a04

08001600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001638 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001604:	f7ff fdfe 	bl	8001204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160a:	490d      	ldr	r1, [pc, #52]	@ (8001640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001620:	4c0a      	ldr	r4, [pc, #40]	@ (800164c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162e:	f00e fe17 	bl	8010260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001632:	f7ff fb8f 	bl	8000d54 <main>
  bx  lr
 8001636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001638:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800163c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001640:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8001644:	08014460 	.word	0x08014460
  ldr r2, =_sbss
 8001648:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 800164c:	24025384 	.word	0x24025384

08001650 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC3_IRQHandler>
	...

08001654 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001654:	b188      	cbz	r0, 800167a <LAN8742_RegisterBusIO+0x26>
 8001656:	68ca      	ldr	r2, [r1, #12]
 8001658:	b17a      	cbz	r2, 800167a <LAN8742_RegisterBusIO+0x26>
{
 800165a:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800165c:	688c      	ldr	r4, [r1, #8]
 800165e:	b17c      	cbz	r4, 8001680 <LAN8742_RegisterBusIO+0x2c>
 8001660:	690d      	ldr	r5, [r1, #16]
 8001662:	b16d      	cbz	r5, 8001680 <LAN8742_RegisterBusIO+0x2c>
 8001664:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8001666:	e9d1 0100 	ldrd	r0, r1, [r1]
  pObj->IO.DeInit = ioctx->DeInit;
  pObj->IO.ReadReg = ioctx->ReadReg;
 800166a:	615a      	str	r2, [r3, #20]
  pObj->IO.Init = ioctx->Init;
 800166c:	6098      	str	r0, [r3, #8]
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
  
  return LAN8742_STATUS_OK;
 800166e:	2000      	movs	r0, #0
  pObj->IO.GetTick = ioctx->GetTick;
 8001670:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001672:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 8001676:	bc30      	pop	{r4, r5}
 8001678:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 800167a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800167e:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	e7f7      	b.n	8001676 <LAN8742_RegisterBusIO+0x22>
 8001686:	bf00      	nop

08001688 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001688:	b570      	push	{r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800168a:	2300      	movs	r3, #0
 {
 800168c:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 800168e:	6844      	ldr	r4, [r0, #4]
 {
 8001690:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001692:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8001694:	2c00      	cmp	r4, #0
 8001696:	d146      	bne.n	8001726 <LAN8742_Init+0x9e>
   {
     if(pObj->IO.Init != 0)
 8001698:	6883      	ldr	r3, [r0, #8]
 800169a:	b103      	cbz	r3, 800169e <LAN8742_Init+0x16>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800169c:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800169e:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 80016a0:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80016a2:	602b      	str	r3, [r5, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016a4:	e007      	b.n	80016b6 <LAN8742_Init+0x2e>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80016a6:	9b01      	ldr	r3, [sp, #4]
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	42a3      	cmp	r3, r4
 80016ae:	d016      	beq.n	80016de <LAN8742_Init+0x56>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016b0:	3401      	adds	r4, #1
 80016b2:	2c20      	cmp	r4, #32
 80016b4:	d00b      	beq.n	80016ce <LAN8742_Init+0x46>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80016b6:	4620      	mov	r0, r4
 80016b8:	696b      	ldr	r3, [r5, #20]
 80016ba:	aa01      	add	r2, sp, #4
 80016bc:	2112      	movs	r1, #18
 80016be:	4798      	blx	r3
 80016c0:	2800      	cmp	r0, #0
 80016c2:	daf0      	bge.n	80016a6 <LAN8742_Init+0x1e>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016c4:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 80016c6:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80016ca:	2c20      	cmp	r4, #32
 80016cc:	d1f3      	bne.n	80016b6 <LAN8742_Init+0x2e>
         status = LAN8742_STATUS_OK;
         break;
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80016ce:	682c      	ldr	r4, [r5, #0]
 80016d0:	2c1f      	cmp	r4, #31
 80016d2:	d937      	bls.n	8001744 <LAN8742_Init+0xbc>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80016d4:	f06f 0602 	mvn.w	r6, #2
     }
     pObj->Is_Initialized = 1;
   }
   
   return status;
 }
 80016d8:	4630      	mov	r0, r6
 80016da:	b002      	add	sp, #8
 80016dc:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 80016de:	602c      	str	r4, [r5, #0]
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80016e0:	692b      	ldr	r3, [r5, #16]
 80016e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80016e6:	4620      	mov	r0, r4
 80016e8:	2100      	movs	r1, #0
 80016ea:	4798      	blx	r3
 80016ec:	2800      	cmp	r0, #0
 80016ee:	db2c      	blt.n	800174a <LAN8742_Init+0xc2>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80016f0:	696b      	ldr	r3, [r5, #20]
 80016f2:	aa01      	add	r2, sp, #4
 80016f4:	2100      	movs	r1, #0
 80016f6:	6828      	ldr	r0, [r5, #0]
 80016f8:	4798      	blx	r3
 80016fa:	2800      	cmp	r0, #0
 80016fc:	db2b      	blt.n	8001756 <LAN8742_Init+0xce>
           tickstart = pObj->IO.GetTick();
 80016fe:	69ab      	ldr	r3, [r5, #24]
 8001700:	4798      	blx	r3
 8001702:	4604      	mov	r4, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001704:	e00c      	b.n	8001720 <LAN8742_Init+0x98>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001706:	69ab      	ldr	r3, [r5, #24]
 8001708:	4798      	blx	r3
 800170a:	1b00      	subs	r0, r0, r4
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800170c:	aa01      	add	r2, sp, #4
 800170e:	2100      	movs	r1, #0
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001710:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8001714:	d81c      	bhi.n	8001750 <LAN8742_Init+0xc8>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001716:	696b      	ldr	r3, [r5, #20]
 8001718:	6828      	ldr	r0, [r5, #0]
 800171a:	4798      	blx	r3
 800171c:	2800      	cmp	r0, #0
 800171e:	db1a      	blt.n	8001756 <LAN8742_Init+0xce>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001720:	9b01      	ldr	r3, [sp, #4]
 8001722:	041b      	lsls	r3, r3, #16
 8001724:	d4ef      	bmi.n	8001706 <LAN8742_Init+0x7e>
     tickstart =  pObj->IO.GetTick();
 8001726:	69ab      	ldr	r3, [r5, #24]
 8001728:	4798      	blx	r3
 800172a:	4604      	mov	r4, r0
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800172c:	69ab      	ldr	r3, [r5, #24]
 800172e:	4798      	blx	r3
 8001730:	1b03      	subs	r3, r0, r4
 8001732:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001736:	d9f9      	bls.n	800172c <LAN8742_Init+0xa4>
     pObj->Is_Initialized = 1;
 8001738:	2301      	movs	r3, #1
 800173a:	2600      	movs	r6, #0
 800173c:	606b      	str	r3, [r5, #4]
 }
 800173e:	4630      	mov	r0, r6
 8001740:	b002      	add	sp, #8
 8001742:	bd70      	pop	{r4, r5, r6, pc}
     if(status == LAN8742_STATUS_OK)
 8001744:	2e00      	cmp	r6, #0
 8001746:	d1fa      	bne.n	800173e <LAN8742_Init+0xb6>
 8001748:	e7ca      	b.n	80016e0 <LAN8742_Init+0x58>
         status = LAN8742_STATUS_WRITE_ERROR;
 800174a:	f06f 0603 	mvn.w	r6, #3
 800174e:	e7f6      	b.n	800173e <LAN8742_Init+0xb6>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001750:	f06f 0601 	mvn.w	r6, #1
 8001754:	e7f3      	b.n	800173e <LAN8742_Init+0xb6>
                 status = LAN8742_STATUS_READ_ERROR;
 8001756:	f06f 0604 	mvn.w	r6, #4
   if(status == LAN8742_STATUS_OK)
 800175a:	e7f0      	b.n	800173e <LAN8742_Init+0xb6>

0800175c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800175c:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 800175e:	2500      	movs	r5, #0
{
 8001760:	b083      	sub	sp, #12
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001762:	6943      	ldr	r3, [r0, #20]
{
 8001764:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001766:	aa01      	add	r2, sp, #4
 8001768:	2101      	movs	r1, #1
 800176a:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 800176c:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800176e:	4798      	blx	r3
 8001770:	42a8      	cmp	r0, r5
 8001772:	db3d      	blt.n	80017f0 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001774:	6963      	ldr	r3, [r4, #20]
 8001776:	aa01      	add	r2, sp, #4
 8001778:	2101      	movs	r1, #1
 800177a:	6820      	ldr	r0, [r4, #0]
 800177c:	4798      	blx	r3
 800177e:	2800      	cmp	r0, #0
 8001780:	db36      	blt.n	80017f0 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001782:	9b01      	ldr	r3, [sp, #4]
 8001784:	075b      	lsls	r3, r3, #29
 8001786:	d52a      	bpl.n	80017de <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001788:	6963      	ldr	r3, [r4, #20]
 800178a:	aa01      	add	r2, sp, #4
 800178c:	4629      	mov	r1, r5
 800178e:	6820      	ldr	r0, [r4, #0]
 8001790:	4798      	blx	r3
 8001792:	2800      	cmp	r0, #0
 8001794:	db2c      	blt.n	80017f0 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001796:	9b01      	ldr	r3, [sp, #4]
 8001798:	04dd      	lsls	r5, r3, #19
 800179a:	d514      	bpl.n	80017c6 <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800179c:	6963      	ldr	r3, [r4, #20]
 800179e:	aa01      	add	r2, sp, #4
 80017a0:	211f      	movs	r1, #31
 80017a2:	6820      	ldr	r0, [r4, #0]
 80017a4:	4798      	blx	r3
 80017a6:	2800      	cmp	r0, #0
 80017a8:	db22      	blt.n	80017f0 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80017aa:	9b01      	ldr	r3, [sp, #4]
 80017ac:	04da      	lsls	r2, r3, #19
 80017ae:	d51d      	bpl.n	80017ec <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80017b0:	f003 031c 	and.w	r3, r3, #28
 80017b4:	2b18      	cmp	r3, #24
 80017b6:	d017      	beq.n	80017e8 <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d013      	beq.n	80017e4 <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80017bc:	2b14      	cmp	r3, #20
 80017be:	d10b      	bne.n	80017d8 <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80017c0:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 80017c2:	b003      	add	sp, #12
 80017c4:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80017c6:	f403 5204 	and.w	r2, r3, #8448	@ 0x2100
 80017ca:	f5b2 5f04 	cmp.w	r2, #8448	@ 0x2100
 80017ce:	d00b      	beq.n	80017e8 <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80017d0:	0498      	lsls	r0, r3, #18
 80017d2:	d407      	bmi.n	80017e4 <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80017d4:	05d9      	lsls	r1, r3, #23
 80017d6:	d4f3      	bmi.n	80017c0 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80017d8:	2005      	movs	r0, #5
}
 80017da:	b003      	add	sp, #12
 80017dc:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;    
 80017de:	2001      	movs	r0, #1
}
 80017e0:	b003      	add	sp, #12
 80017e2:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80017e4:	2003      	movs	r0, #3
 80017e6:	e7f8      	b.n	80017da <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80017e8:	2002      	movs	r0, #2
 80017ea:	e7f6      	b.n	80017da <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80017ec:	2006      	movs	r0, #6
 80017ee:	e7f4      	b.n	80017da <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 80017f0:	f06f 0004 	mvn.w	r0, #4
 80017f4:	e7f1      	b.n	80017da <LAN8742_GetLinkState+0x7e>
 80017f6:	bf00      	nop

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fa:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017fc:	4c12      	ldr	r4, [pc, #72]	@ (8001848 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fe:	f000 f847 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001802:	f001 fcfd 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <HAL_Init+0x54>)
 8001808:	4911      	ldr	r1, [pc, #68]	@ (8001850 <HAL_Init+0x58>)
 800180a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800180c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800180e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001812:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001816:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001818:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800181a:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800181e:	490d      	ldr	r1, [pc, #52]	@ (8001854 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001820:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001824:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001826:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800182a:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800182c:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800182e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001830:	f7ff fc20 	bl	8001074 <HAL_InitTick>
 8001834:	b110      	cbz	r0, 800183c <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8001836:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8001838:	4620      	mov	r0, r4
 800183a:	bd10      	pop	{r4, pc}
 800183c:	4604      	mov	r4, r0
  HAL_MspInit();
 800183e:	f7ff fbff 	bl	8001040 <HAL_MspInit>
}
 8001842:	4620      	mov	r0, r4
 8001844:	bd10      	pop	{r4, pc}
 8001846:	bf00      	nop
 8001848:	24000000 	.word	0x24000000
 800184c:	58024400 	.word	0x58024400
 8001850:	080118a8 	.word	0x080118a8
 8001854:	24000004 	.word	0x24000004

08001858 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001858:	4a03      	ldr	r2, [pc, #12]	@ (8001868 <HAL_IncTick+0x10>)
 800185a:	4b04      	ldr	r3, [pc, #16]	@ (800186c <HAL_IncTick+0x14>)
 800185c:	6811      	ldr	r1, [r2, #0]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	440b      	add	r3, r1
 8001862:	6013      	str	r3, [r2, #0]
}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	2401030c 	.word	0x2401030c
 800186c:	24000008 	.word	0x24000008

08001870 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001870:	4b01      	ldr	r3, [pc, #4]	@ (8001878 <HAL_GetTick+0x8>)
 8001872:	6818      	ldr	r0, [r3, #0]
}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	2401030c 	.word	0x2401030c

0800187c <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800187c:	4a03      	ldr	r2, [pc, #12]	@ (800188c <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 800187e:	6853      	ldr	r3, [r2, #4]
 8001880:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8001884:	4303      	orrs	r3, r0
 8001886:	6053      	str	r3, [r2, #4]
}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	58000400 	.word	0x58000400

08001890 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4906      	ldr	r1, [pc, #24]	@ (80018ac <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001896:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001898:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800189c:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a0:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80018a6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80018a8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00
 80018b0:	05fa0000 	.word	0x05fa0000

080018b4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001920 <HAL_NVIC_SetPriority+0x6c>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018be:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c6:	f1be 0f04 	cmp.w	lr, #4
 80018ca:	bf28      	it	cs
 80018cc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d0:	f1bc 0f06 	cmp.w	ip, #6
 80018d4:	d91a      	bls.n	800190c <HAL_NVIC_SetPriority+0x58>
 80018d6:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	fa03 f30c 	lsl.w	r3, r3, ip
 80018e2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80018ea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	fa03 f30e 	lsl.w	r3, r3, lr
 80018f0:	ea21 0303 	bic.w	r3, r1, r3
 80018f4:	fa03 f30c 	lsl.w	r3, r3, ip
 80018f8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001900:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001902:	db06      	blt.n	8001912 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	4a07      	ldr	r2, [pc, #28]	@ (8001924 <HAL_NVIC_SetPriority+0x70>)
 8001906:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001908:	f85d fb04 	ldr.w	pc, [sp], #4
 800190c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	4694      	mov	ip, r2
 8001910:	e7e9      	b.n	80018e6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	f000 000f 	and.w	r0, r0, #15
 8001916:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <HAL_NVIC_SetPriority+0x74>)
 8001918:	5413      	strb	r3, [r2, r0]
 800191a:	f85d fb04 	ldr.w	pc, [sp], #4
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	e000e400 	.word	0xe000e400
 8001928:	e000ed14 	.word	0xe000ed14

0800192c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800192c:	2800      	cmp	r0, #0
 800192e:	db07      	blt.n	8001940 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001930:	2301      	movs	r3, #1
 8001932:	f000 011f 	and.w	r1, r0, #31
 8001936:	4a03      	ldr	r2, [pc, #12]	@ (8001944 <HAL_NVIC_EnableIRQ+0x18>)
 8001938:	0940      	lsrs	r0, r0, #5
 800193a:	408b      	lsls	r3, r1
 800193c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100

08001948 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001948:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800194e:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001952:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001956:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8001958:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <HAL_MPU_Enable+0x1c>)
 8001966:	f040 0001 	orr.w	r0, r0, #1
 800196a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800196e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001970:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001974:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001976:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001984:	4a17      	ldr	r2, [pc, #92]	@ (80019e4 <HAL_MPU_ConfigRegion+0x60>)
 8001986:	7843      	ldrb	r3, [r0, #1]
 8001988:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != 0UL)
 800198c:	7801      	ldrb	r1, [r0, #0]
 800198e:	b321      	cbz	r1, 80019da <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001990:	6843      	ldr	r3, [r0, #4]
{
 8001992:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8001994:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001998:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800199a:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800199e:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019a0:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019a4:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019a8:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019ac:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019ae:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019b0:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019b4:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019b8:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019bc:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019c0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80019c4:	7a01      	ldrb	r1, [r0, #8]
 80019c6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80019ca:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80019ce:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019d2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80019d6:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 80019da:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 80019de:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80019e8:	b430      	push	{r4, r5}
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80019ea:	688b      	ldr	r3, [r1, #8]
 80019ec:	680d      	ldr	r5, [r1, #0]
 80019ee:	694c      	ldr	r4, [r1, #20]
 80019f0:	432b      	orrs	r3, r5
 80019f2:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019f4:	f891 c011 	ldrb.w	ip, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80019f8:	4323      	orrs	r3, r4
 80019fa:	698c      	ldr	r4, [r1, #24]
 80019fc:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80019fe:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a02:	4323      	orrs	r3, r4
 8001a04:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a06:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a0a:	4d52      	ldr	r5, [pc, #328]	@ (8001b54 <ETH_SetMACConfig+0x16c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a0c:	4323      	orrs	r3, r4
 8001a0e:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8001a10:	4323      	orrs	r3, r4
 8001a12:	4c51      	ldr	r4, [pc, #324]	@ (8001b58 <ETH_SetMACConfig+0x170>)
 8001a14:	4020      	ands	r0, r4
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a16:	790c      	ldrb	r4, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a18:	4303      	orrs	r3, r0
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a1a:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a1c:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a20:	7b0c      	ldrb	r4, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a22:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a26:	7b8c      	ldrb	r4, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a28:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a2c:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a2e:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a32:	7c8c      	ldrb	r4, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a34:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a38:	7f08      	ldrb	r0, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a3e:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a40:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a44:	7fc8      	ldrb	r0, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a46:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a4a:	f891 4028 	ldrb.w	r4, [r1, #40]	@ 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a4e:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a52:	7c08      	ldrb	r0, [r1, #16]
 8001a54:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a58:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a5c:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a5e:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a60:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a64:	7f88      	ldrb	r0, [r1, #30]
 8001a66:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a6a:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a6e:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a70:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a74:	f891 0020 	ldrb.w	r0, [r1, #32]
 8001a78:	fab0 f080 	clz	r0, r0
 8001a7c:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a7e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a82:	6b48      	ldr	r0, [r1, #52]	@ 0x34
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a84:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a86:	6853      	ldr	r3, [r2, #4]
 8001a88:	402b      	ands	r3, r5
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a8a:	f64f 750d 	movw	r5, #65293	@ 0xff0d
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a8e:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a92:	f891 4038 	ldrb.w	r4, [r1, #56]	@ 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a96:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a98:	f891 0030 	ldrb.w	r0, [r1, #48]	@ 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a9c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001aa0:	f891 4031 	ldrb.w	r4, [r1, #49]	@ 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001aa4:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001aa8:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
 8001aac:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ab0:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001ab4:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ab6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001aba:	4828      	ldr	r0, [pc, #160]	@ (8001b5c <ETH_SetMACConfig+0x174>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001abc:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001abe:	68d3      	ldr	r3, [r2, #12]
               (macconf->PauseTime << 16));
 8001ac0:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001ac2:	4018      	ands	r0, r3
 8001ac4:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 8001ac6:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ac8:	f891 3040 	ldrb.w	r3, [r1, #64]	@ 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001acc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001ad0:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001ad2:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001ad4:	6d08      	ldr	r0, [r1, #80]	@ 0x50
 8001ad6:	402b      	ands	r3, r5
 8001ad8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001adc:	f891 4054 	ldrb.w	r4, [r1, #84]	@ 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001ae0:	4303      	orrs	r3, r0
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001ae2:	f891 004c 	ldrb.w	r0, [r1, #76]	@ 0x4c
 8001ae6:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001aea:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001aee:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001af0:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001af4:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	@ 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001af8:	6713      	str	r3, [r2, #112]	@ 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001afa:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001afe:	f891 3056 	ldrb.w	r3, [r1, #86]	@ 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b02:	f020 0003 	bic.w	r0, r0, #3
 8001b06:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b08:	f891 0055 	ldrb.w	r0, [r1, #85]	@ 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b0c:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8001b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b14:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	@ 0xd00
 8001b18:	f023 0372 	bic.w	r3, r3, #114	@ 0x72
 8001b1c:	432b      	orrs	r3, r5
 8001b1e:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b22:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	@ 0xd30
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001b26:	f891 0061 	ldrb.w	r0, [r1, #97]	@ 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b2a:	f023 037b 	bic.w	r3, r3, #123	@ 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001b2e:	f891 c062 	ldrb.w	ip, [r1, #98]	@ 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b32:	4323      	orrs	r3, r4
 8001b34:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b38:	f891 0060 	ldrb.w	r0, [r1, #96]	@ 0x60
 8001b3c:	fab0 f180 	clz	r1, r0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b40:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b44:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b46:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
}
 8001b4a:	bc30      	pop	{r4, r5}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b4c:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	c0f88000 	.word	0xc0f88000
 8001b58:	00048083 	.word	0x00048083
 8001b5c:	fffffef0 	.word	0xfffffef0

08001b60 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b60:	6803      	ldr	r3, [r0, #0]
 8001b62:	4a1e      	ldr	r2, [pc, #120]	@ (8001bdc <ETH_SetDMAConfig+0x7c>)
 8001b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b68:	6808      	ldr	r0, [r1, #0]
{
 8001b6a:	b410      	push	{r4}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b6c:	681c      	ldr	r4, [r3, #0]
 8001b6e:	4022      	ands	r2, r4
 8001b70:	4302      	orrs	r2, r0
 8001b72:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b74:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b76:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b78:	03d2      	lsls	r2, r2, #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b7a:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b7c:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8001b80:	688c      	ldr	r4, [r1, #8]
 8001b82:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b84:	4c16      	ldr	r4, [pc, #88]	@ (8001be0 <ETH_SetDMAConfig+0x80>)
 8001b86:	4004      	ands	r4, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b88:	6a08      	ldr	r0, [r1, #32]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b8a:	4322      	orrs	r2, r4
 8001b8c:	605a      	str	r2, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b8e:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b90:	f8d3 4100 	ldr.w	r4, [r3, #256]	@ 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b94:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b98:	4812      	ldr	r0, [pc, #72]	@ (8001be4 <ETH_SetDMAConfig+0x84>)
 8001b9a:	4020      	ands	r0, r4
 8001b9c:	4302      	orrs	r2, r0
 8001b9e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001ba2:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001ba4:	7d0c      	ldrb	r4, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001ba6:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001ba8:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bac:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001bb0:	690c      	ldr	r4, [r1, #16]
 8001bb2:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001bb4:	4c0c      	ldr	r4, [pc, #48]	@ (8001be8 <ETH_SetDMAConfig+0x88>)
 8001bb6:	4004      	ands	r4, r0

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bb8:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001bba:	4322      	orrs	r2, r4
 8001bbc:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001bc0:	f8d3 4108 	ldr.w	r4, [r3, #264]	@ 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bc4:	7f0a      	ldrb	r2, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001bc6:	4909      	ldr	r1, [pc, #36]	@ (8001bec <ETH_SetDMAConfig+0x8c>)
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bc8:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001bcc:	4021      	ands	r1, r4
}
 8001bce:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	ffff87fd 	.word	0xffff87fd
 8001be0:	ffff2ffe 	.word	0xffff2ffe
 8001be4:	fffec000 	.word	0xfffec000
 8001be8:	ffc0efef 	.word	0xffc0efef
 8001bec:	7fc0ffff 	.word	0x7fc0ffff

08001bf0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001bf4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
{
 8001bf6:	4692      	mov	sl, r2
 8001bf8:	b085      	sub	sp, #20
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001bfa:	688e      	ldr	r6, [r1, #8]
 8001bfc:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001c00:	f8de 3018 	ldr.w	r3, [lr, #24]
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	f2c0 8141 	blt.w	8001e8e <ETH_Prepare_Tx_Descriptors+0x29e>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001c0c:	f8de 202c 	ldr.w	r2, [lr, #44]	@ 0x2c
 8001c10:	2a00      	cmp	r2, #0
 8001c12:	f040 813c 	bne.w	8001e8e <ETH_Prepare_Tx_Descriptors+0x29e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001c16:	680d      	ldr	r5, [r1, #0]
 8001c18:	f015 0c04 	ands.w	ip, r5, #4
 8001c1c:	d02a      	beq.n	8001c74 <ETH_Prepare_Tx_Descriptors+0x84>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	4fa9      	ldr	r7, [pc, #676]	@ (8001ec8 <ETH_Prepare_Tx_Descriptors+0x2d8>)
 8001c22:	4017      	ands	r7, r2
 8001c24:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8001c26:	4317      	orrs	r7, r2
 8001c28:	60df      	str	r7, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8001c2a:	68da      	ldr	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8001c2c:	6807      	ldr	r7, [r0, #0]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8001c2e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c32:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8001c34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c36:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001c3a:	663a      	str	r2, [r7, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8001c3c:	072a      	lsls	r2, r5, #28
 8001c3e:	d519      	bpl.n	8001c74 <ETH_Prepare_Tx_Descriptors+0x84>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	fa1f f882 	uxth.w	r8, r2
 8001c46:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8001c48:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8001c4c:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001c54:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	f422 2840 	bic.w	r8, r2, #786432	@ 0xc0000
 8001c5c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8001c5e:	ea48 0202 	orr.w	r2, r8, r2
 8001c62:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8001c64:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001c66:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001c6a:	667a      	str	r2, [r7, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8001c6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001c6e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001c72:	653a      	str	r2, [r7, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001c74:	f015 0810 	ands.w	r8, r5, #16
 8001c78:	d009      	beq.n	8001c8e <ETH_Prepare_Tx_Descriptors+0x9e>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	4f93      	ldr	r7, [pc, #588]	@ (8001ecc <ETH_Prepare_Tx_Descriptors+0x2dc>)
 8001c7e:	4017      	ands	r7, r2
 8001c80:	698a      	ldr	r2, [r1, #24]
 8001c82:	4317      	orrs	r7, r2
 8001c84:	609f      	str	r7, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001c8c:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001c8e:	f015 0f14 	tst.w	r5, #20
 8001c92:	f040 80c1 	bne.w	8001e18 <ETH_Prepare_Tx_Descriptors+0x228>
 8001c96:	2701      	movs	r7, #1
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001c98:	4622      	mov	r2, r4
 8001c9a:	9701      	str	r7, [sp, #4]
  /***************************************************************************/

  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001c9c:	6837      	ldr	r7, [r6, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001c9e:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 8001ecc <ETH_Prepare_Tx_Descriptors+0x2dc>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001ca2:	601f      	str	r7, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001ca4:	689f      	ldr	r7, [r3, #8]
 8001ca6:	ea07 0909 	and.w	r9, r7, r9
 8001caa:	6877      	ldr	r7, [r6, #4]
 8001cac:	ea49 0707 	orr.w	r7, r9, r7
 8001cb0:	609f      	str	r7, [r3, #8]

  if (txbuffer->next != NULL)
 8001cb2:	68b7      	ldr	r7, [r6, #8]
 8001cb4:	2f00      	cmp	r7, #0
 8001cb6:	f000 812d 	beq.w	8001f14 <ETH_Prepare_Tx_Descriptors+0x324>
  {
    txbuffer = txbuffer->next;
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001cba:	683e      	ldr	r6, [r7, #0]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001cbc:	f8df 9214 	ldr.w	r9, [pc, #532]	@ 8001ed4 <ETH_Prepare_Tx_Descriptors+0x2e4>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001cc0:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001cc2:	689e      	ldr	r6, [r3, #8]
 8001cc4:	ea06 0909 	and.w	r9, r6, r9
 8001cc8:	687e      	ldr	r6, [r7, #4]
 8001cca:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 8001cce:	609e      	str	r6, [r3, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8001cd0:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001cd2:	f1b8 0f00 	cmp.w	r8, #0
 8001cd6:	f000 80dc 	beq.w	8001e92 <ETH_Prepare_Tx_Descriptors+0x2a2>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8001cda:	6a0d      	ldr	r5, [r1, #32]
 8001cdc:	f426 06f0 	bic.w	r6, r6, #7864320	@ 0x780000
 8001ce0:	ea46 45c5 	orr.w	r5, r6, r5, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001ce4:	4e7a      	ldr	r6, [pc, #488]	@ (8001ed0 <ETH_Prepare_Tx_Descriptors+0x2e0>)
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8001ce6:	60dd      	str	r5, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001ce8:	68dd      	ldr	r5, [r3, #12]
 8001cea:	402e      	ands	r6, r5
 8001cec:	69cd      	ldr	r5, [r1, #28]
 8001cee:	432e      	orrs	r6, r5
 8001cf0:	60de      	str	r6, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8001cf2:	68dd      	ldr	r5, [r3, #12]
 8001cf4:	f445 2580 	orr.w	r5, r5, #262144	@ 0x40000
 8001cf8:	60dd      	str	r5, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001cfa:	f1bc 0f00 	cmp.w	ip, #0
 8001cfe:	d005      	beq.n	8001d0c <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8001d00:	689e      	ldr	r6, [r3, #8]
 8001d02:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8001d04:	f426 4640 	bic.w	r6, r6, #49152	@ 0xc000
 8001d08:	4335      	orrs	r5, r6
 8001d0a:	609d      	str	r5, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8001d0c:	68dd      	ldr	r5, [r3, #12]
 8001d0e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8001d12:	60dd      	str	r5, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8001d14:	68dd      	ldr	r5, [r3, #12]
 8001d16:	f025 4580 	bic.w	r5, r5, #1073741824	@ 0x40000000
 8001d1a:	60dd      	str	r5, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001d1c:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001d20:	68dd      	ldr	r5, [r3, #12]
 8001d22:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 8001d26:	60dd      	str	r5, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8001d28:	680d      	ldr	r5, [r1, #0]
 8001d2a:	07ad      	lsls	r5, r5, #30
 8001d2c:	d505      	bpl.n	8001d3a <ETH_Prepare_Tx_Descriptors+0x14a>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8001d2e:	68de      	ldr	r6, [r3, #12]
 8001d30:	68cd      	ldr	r5, [r1, #12]
 8001d32:	f026 7660 	bic.w	r6, r6, #58720256	@ 0x3800000
 8001d36:	4335      	orrs	r5, r6
 8001d38:	60dd      	str	r5, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001d3a:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8001d3e:	f1b9 0f00 	cmp.w	r9, #0
 8001d42:	f000 80fd 	beq.w	8001f40 <ETH_Prepare_Tx_Descriptors+0x350>
 8001d46:	2500      	movs	r5, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001d48:	4f60      	ldr	r7, [pc, #384]	@ (8001ecc <ETH_Prepare_Tx_Descriptors+0x2dc>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8001d4a:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8001ed4 <ETH_Prepare_Tx_Descriptors+0x2e4>
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001d4e:	464e      	mov	r6, r9
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001d50:	f8df 8184 	ldr.w	r8, [pc, #388]	@ 8001ed8 <ETH_Prepare_Tx_Descriptors+0x2e8>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001d54:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8001ed0 <ETH_Prepare_Tx_Descriptors+0x2e0>
 8001d58:	e9cd 4a02 	strd	r4, sl, [sp, #8]
 8001d5c:	e018      	b.n	8001d90 <ETH_Prepare_Tx_Descriptors+0x1a0>
 8001d5e:	ea06 090b 	and.w	r9, r6, fp
 8001d62:	69ce      	ldr	r6, [r1, #28]
 8001d64:	ea49 0606 	orr.w	r6, r9, r6
 8001d68:	60de      	str	r6, [r3, #12]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8001d6a:	68de      	ldr	r6, [r3, #12]
 8001d6c:	f446 2680 	orr.w	r6, r6, #262144	@ 0x40000
 8001d70:	60de      	str	r6, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 8001d72:	3501      	adds	r5, #1
 8001d74:	f3bf 8f5f 	dmb	sy
  while (txbuffer->next != NULL)
 8001d78:	68a6      	ldr	r6, [r4, #8]

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001d7a:	68dc      	ldr	r4, [r3, #12]
 8001d7c:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8001d80:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8001d82:	68dc      	ldr	r4, [r3, #12]
 8001d84:	f024 4480 	bic.w	r4, r4, #1073741824	@ 0x40000000
 8001d88:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8001d8a:	2e00      	cmp	r6, #0
 8001d8c:	f000 80a6 	beq.w	8001edc <ETH_Prepare_Tx_Descriptors+0x2ec>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8001d90:	68dc      	ldr	r4, [r3, #12]
 8001d92:	f024 5480 	bic.w	r4, r4, #268435456	@ 0x10000000
 8001d96:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001d98:	1c53      	adds	r3, r2, #1
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	bf94      	ite	ls
 8001d9e:	461a      	movls	r2, r3
 8001da0:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001da2:	eb00 0982 	add.w	r9, r0, r2, lsl #2
 8001da6:	f8d9 3018 	ldr.w	r3, [r9, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8001daa:	68dc      	ldr	r4, [r3, #12]
 8001dac:	f024 5400 	bic.w	r4, r4, #536870912	@ 0x20000000
 8001db0:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8001db2:	68dc      	ldr	r4, [r3, #12]
 8001db4:	2c00      	cmp	r4, #0
 8001db6:	db52      	blt.n	8001e5e <ETH_Prepare_Tx_Descriptors+0x26e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001db8:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 8001dbc:	2c00      	cmp	r4, #0
 8001dbe:	d14e      	bne.n	8001e5e <ETH_Prepare_Tx_Descriptors+0x26e>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001dc0:	6834      	ldr	r4, [r6, #0]
 8001dc2:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001dc4:	689c      	ldr	r4, [r3, #8]
 8001dc6:	ea04 0907 	and.w	r9, r4, r7
 8001dca:	6874      	ldr	r4, [r6, #4]
 8001dcc:	ea49 0404 	orr.w	r4, r9, r4
 8001dd0:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 8001dd2:	68b4      	ldr	r4, [r6, #8]
 8001dd4:	2c00      	cmp	r4, #0
 8001dd6:	d03b      	beq.n	8001e50 <ETH_Prepare_Tx_Descriptors+0x260>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001dd8:	6826      	ldr	r6, [r4, #0]
 8001dda:	605e      	str	r6, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001ddc:	689e      	ldr	r6, [r3, #8]
 8001dde:	ea06 090c 	and.w	r9, r6, ip
 8001de2:	6866      	ldr	r6, [r4, #4]
 8001de4:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 8001de8:	609e      	str	r6, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001dea:	f8d1 a000 	ldr.w	sl, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001dee:	68de      	ldr	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001df0:	f01a 0f10 	tst.w	sl, #16
 8001df4:	d1b3      	bne.n	8001d5e <ETH_Prepare_Tx_Descriptors+0x16e>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001df6:	ea06 0908 	and.w	r9, r6, r8
 8001dfa:	684e      	ldr	r6, [r1, #4]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8001dfc:	f01a 0f01 	tst.w	sl, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001e00:	ea49 0606 	orr.w	r6, r9, r6
 8001e04:	60de      	str	r6, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8001e06:	d0b4      	beq.n	8001d72 <ETH_Prepare_Tx_Descriptors+0x182>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8001e08:	68de      	ldr	r6, [r3, #12]
 8001e0a:	f426 3940 	bic.w	r9, r6, #196608	@ 0x30000
 8001e0e:	694e      	ldr	r6, [r1, #20]
 8001e10:	ea49 0606 	orr.w	r6, r9, r6
 8001e14:	60de      	str	r6, [r3, #12]
 8001e16:	e7ac      	b.n	8001d72 <ETH_Prepare_Tx_Descriptors+0x182>
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e1e:	60da      	str	r2, [r3, #12]
 8001e20:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e2a:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001e2c:	1c62      	adds	r2, r4, #1
 8001e2e:	2a03      	cmp	r2, #3
 8001e30:	bf88      	it	hi
 8001e32:	1ee2      	subhi	r2, r4, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001e34:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8001e38:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8001e3a:	68dd      	ldr	r5, [r3, #12]
 8001e3c:	2d00      	cmp	r5, #0
 8001e3e:	db76      	blt.n	8001f2e <ETH_Prepare_Tx_Descriptors+0x33e>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001e40:	680d      	ldr	r5, [r1, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001e42:	2702      	movs	r7, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001e44:	f005 0810 	and.w	r8, r5, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001e48:	f005 0c04 	and.w	ip, r5, #4
 8001e4c:	9701      	str	r7, [sp, #4]
 8001e4e:	e725      	b.n	8001c9c <ETH_Prepare_Tx_Descriptors+0xac>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e50:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8001e52:	4634      	mov	r4, r6
 8001e54:	689e      	ldr	r6, [r3, #8]
 8001e56:	ea06 060c 	and.w	r6, r6, ip
 8001e5a:	609e      	str	r6, [r3, #8]
 8001e5c:	e7c5      	b.n	8001dea <ETH_Prepare_Tx_Descriptors+0x1fa>
      for (idx = 0; idx < descnbr; idx ++)
 8001e5e:	9b01      	ldr	r3, [sp, #4]
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001e60:	9c02      	ldr	r4, [sp, #8]
      for (idx = 0; idx < descnbr; idx ++)
 8001e62:	195e      	adds	r6, r3, r5
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001e64:	f8de 2018 	ldr.w	r2, [lr, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001e68:	d011      	beq.n	8001e8e <ETH_Prepare_Tx_Descriptors+0x29e>
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001e70:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001e72:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001e74:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 8001e76:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001e78:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001e7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e7e:	bf98      	it	ls
 8001e80:	462c      	movls	r4, r5
 8001e82:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 8001e84:	42b1      	cmp	r1, r6
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001e86:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8001e8a:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001e8c:	d1ee      	bne.n	8001e6c <ETH_Prepare_Tx_Descriptors+0x27c>
    return HAL_ETH_ERROR_BUSY;
 8001e8e:	2002      	movs	r0, #2
 8001e90:	e03d      	b.n	8001f0e <ETH_Prepare_Tx_Descriptors+0x31e>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001e92:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8001ed8 <ETH_Prepare_Tx_Descriptors+0x2e8>
 8001e96:	ea06 0808 	and.w	r8, r6, r8
 8001e9a:	684e      	ldr	r6, [r1, #4]
 8001e9c:	ea48 0606 	orr.w	r6, r8, r6
 8001ea0:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8001ea2:	07ee      	lsls	r6, r5, #31
 8001ea4:	d506      	bpl.n	8001eb4 <ETH_Prepare_Tx_Descriptors+0x2c4>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8001ea6:	68de      	ldr	r6, [r3, #12]
 8001ea8:	f426 3840 	bic.w	r8, r6, #196608	@ 0x30000
 8001eac:	694e      	ldr	r6, [r1, #20]
 8001eae:	ea48 0606 	orr.w	r6, r8, r6
 8001eb2:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8001eb4:	06ae      	lsls	r6, r5, #26
 8001eb6:	f57f af20 	bpl.w	8001cfa <ETH_Prepare_Tx_Descriptors+0x10a>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8001eba:	68de      	ldr	r6, [r3, #12]
 8001ebc:	690d      	ldr	r5, [r1, #16]
 8001ebe:	f026 6640 	bic.w	r6, r6, #201326592	@ 0xc000000
 8001ec2:	4335      	orrs	r5, r6
 8001ec4:	60dd      	str	r5, [r3, #12]
 8001ec6:	e718      	b.n	8001cfa <ETH_Prepare_Tx_Descriptors+0x10a>
 8001ec8:	ffff0000 	.word	0xffff0000
 8001ecc:	ffffc000 	.word	0xffffc000
 8001ed0:	fffc0000 	.word	0xfffc0000
 8001ed4:	c000ffff 	.word	0xc000ffff
 8001ed8:	ffff8000 	.word	0xffff8000
 8001edc:	f8dd a00c 	ldr.w	sl, [sp, #12]
  }

  if (ItMode != ((uint32_t)RESET))
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8001ee0:	6899      	ldr	r1, [r3, #8]
  if (ItMode != ((uint32_t)RESET))
 8001ee2:	f1ba 0f00 	cmp.w	sl, #0
 8001ee6:	d01e      	beq.n	8001f26 <ETH_Prepare_Tx_Descriptors+0x336>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8001ee8:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 8001eec:	6099      	str	r1, [r3, #8]
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8001eee:	68d9      	ldr	r1, [r3, #12]
 8001ef0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001ef4:	60d9      	str	r1, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001ef6:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8001efa:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001efc:	62d9      	str	r1, [r3, #44]	@ 0x2c

  dmatxdesclist->CurTxDesc = descidx;
 8001efe:	6282      	str	r2, [r0, #40]	@ 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 8001f00:	b672      	cpsid	i

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001f02:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001f04:	3301      	adds	r3, #1
 8001f06:	442b      	add	r3, r5
 8001f08:	6403      	str	r3, [r0, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001f0a:	b662      	cpsie	i
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8001f0c:	2000      	movs	r0, #0
}
 8001f0e:	b005      	add	sp, #20
 8001f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f14:	605f      	str	r7, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8001f16:	4637      	mov	r7, r6
 8001f18:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8001f1c:	4e09      	ldr	r6, [pc, #36]	@ (8001f44 <ETH_Prepare_Tx_Descriptors+0x354>)
 8001f1e:	ea09 0606 	and.w	r6, r9, r6
 8001f22:	609e      	str	r6, [r3, #8]
 8001f24:	e6d4      	b.n	8001cd0 <ETH_Prepare_Tx_Descriptors+0xe0>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8001f26:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8001f2a:	6099      	str	r1, [r3, #8]
 8001f2c:	e7df      	b.n	8001eee <ETH_Prepare_Tx_Descriptors+0x2fe>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8001f2e:	f8de 2018 	ldr.w	r2, [lr, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001f32:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8001f36:	68d3      	ldr	r3, [r2, #12]
 8001f38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f3c:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 8001f3e:	e7a6      	b.n	8001e8e <ETH_Prepare_Tx_Descriptors+0x29e>
  while (txbuffer->next != NULL)
 8001f40:	464d      	mov	r5, r9
 8001f42:	e7cd      	b.n	8001ee0 <ETH_Prepare_Tx_Descriptors+0x2f0>
 8001f44:	c000ffff 	.word	0xc000ffff

08001f48 <ETH_UpdateDescriptor>:
{
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buff = NULL;
 8001f4a:	2300      	movs	r3, #0
{
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	4605      	mov	r5, r0
  uint8_t *buff = NULL;
 8001f50:	9301      	str	r3, [sp, #4]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001f52:	e9d0 761a 	ldrd	r7, r6, [r0, #104]	@ 0x68
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f56:	f107 0312 	add.w	r3, r7, #18
 8001f5a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001f5e:	b1ee      	cbz	r6, 8001f9c <ETH_UpdateDescriptor+0x54>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001f60:	6923      	ldr	r3, [r4, #16]
 8001f62:	b19b      	cbz	r3, 8001f8c <ETH_UpdateDescriptor+0x44>
 8001f64:	f3bf 8f5f 	dmb	sy
      if (heth->RxDescList.ItMode != 0U)
 8001f68:	6dab      	ldr	r3, [r5, #88]	@ 0x58
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001f6a:	f04f 4141 	mov.w	r1, #3238002688	@ 0xc1000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001f6e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
      if (heth->RxDescList.ItMode != 0U)
 8001f72:	bb03      	cbnz	r3, 8001fb6 <ETH_UpdateDescriptor+0x6e>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001f74:	60e2      	str	r2, [r4, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f76:	1c7b      	adds	r3, r7, #1
      desccount--;
 8001f78:	3e01      	subs	r6, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	bf88      	it	hi
 8001f7e:	1efb      	subhi	r3, r7, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f80:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 8001f84:	461f      	mov	r7, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f86:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
      desccount--;
 8001f8a:	e7e8      	b.n	8001f5e <ETH_UpdateDescriptor+0x16>
      HAL_ETH_RxAllocateCallback(&buff);
 8001f8c:	a801      	add	r0, sp, #4
 8001f8e:	f001 ffc1 	bl	8003f14 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8001f92:	9b01      	ldr	r3, [sp, #4]
 8001f94:	b113      	cbz	r3, 8001f9c <ETH_UpdateDescriptor+0x54>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001f96:	6123      	str	r3, [r4, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001f98:	6023      	str	r3, [r4, #0]
    if (allocStatus != 0U)
 8001f9a:	e7e3      	b.n	8001f64 <ETH_UpdateDescriptor+0x1c>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001f9c:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8001f9e:	42b3      	cmp	r3, r6
 8001fa0:	d007      	beq.n	8001fb2 <ETH_UpdateDescriptor+0x6a>
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001fa2:	682b      	ldr	r3, [r5, #0]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001faa:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001fae:	e9c5 761a 	strd	r7, r6, [r5, #104]	@ 0x68
}
 8001fb2:	b003      	add	sp, #12
 8001fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001fb6:	60e1      	str	r1, [r4, #12]
 8001fb8:	e7dd      	b.n	8001f76 <ETH_UpdateDescriptor+0x2e>
 8001fba:	bf00      	nop

08001fbc <HAL_ETH_Start_IT>:
{
 8001fbc:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8001fbe:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d001      	beq.n	8001fca <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 8001fc6:	2001      	movs	r0, #1
}
 8001fc8:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001fca:	6803      	ldr	r3, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fcc:	2523      	movs	r5, #35	@ 0x23
    heth->RxDescList.ItMode = 1U;
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fd2:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    heth->RxDescList.ItMode = 1U;
 8001fd6:	6582      	str	r2, [r0, #88]	@ 0x58
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001fd8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <HAL_ETH_Start_IT+0x98>)
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8002058 <HAL_ETH_Start_IT+0x9c>)
 8001fe6:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001fea:	430a      	orrs	r2, r1
 8001fec:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	66c3      	str	r3, [r0, #108]	@ 0x6c
    ETH_UpdateDescriptor(heth);
 8001ff4:	f7ff ffa8 	bl	8001f48 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ff8:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8001ffa:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ffc:	6811      	ldr	r1, [r2, #0]
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001ffe:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002002:	f041 0102 	orr.w	r1, r1, #2
 8002006:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002008:	6811      	ldr	r1, [r2, #0]
 800200a:	f041 0101 	orr.w	r1, r1, #1
 800200e:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002010:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	@ 0xd00
 8002014:	f041 0101 	orr.w	r1, r1, #1
 8002018:	f8c2 1d00 	str.w	r1, [r2, #3328]	@ 0xd00
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800201c:	f24d 02c1 	movw	r2, #53441	@ 0xd0c1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002020:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
 8002024:	f041 0101 	orr.w	r1, r1, #1
 8002028:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800202c:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 8002030:	f041 0101 	orr.w	r1, r1, #1
 8002034:	f8c3 1108 	str.w	r1, [r3, #264]	@ 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002038:	f8d3 1160 	ldr.w	r1, [r3, #352]	@ 0x160
 800203c:	f441 7181 	orr.w	r1, r1, #258	@ 0x102
 8002040:	f8c3 1160 	str.w	r1, [r3, #352]	@ 0x160
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002044:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002048:	430a      	orrs	r2, r1
 800204a:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 800204e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 8002052:	bd38      	pop	{r3, r4, r5, pc}
 8002054:	0c020060 	.word	0x0c020060
 8002058:	0c20c000 	.word	0x0c20c000

0800205c <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800205c:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8002060:	2a23      	cmp	r2, #35	@ 0x23
 8002062:	d001      	beq.n	8002068 <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 8002064:	2001      	movs	r0, #1
}
 8002066:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002068:	4601      	mov	r1, r0
 800206a:	4603      	mov	r3, r0
{
 800206c:	b430      	push	{r4, r5}
    heth->gState = HAL_ETH_STATE_BUSY;
 800206e:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002072:	f103 0c54 	add.w	ip, r3, #84	@ 0x54
 8002076:	f851 2b44 	ldr.w	r2, [r1], #68
 800207a:	4c19      	ldr	r4, [pc, #100]	@ (80020e0 <HAL_ETH_Stop_IT+0x84>)
 800207c:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
 8002080:	f8d0 5134 	ldr.w	r5, [r0, #308]	@ 0x134
 8002084:	402c      	ands	r4, r5
 8002086:	f8c0 4134 	str.w	r4, [r0, #308]	@ 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800208a:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
 800208e:	f024 0401 	bic.w	r4, r4, #1
 8002092:	f8c0 4104 	str.w	r4, [r0, #260]	@ 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002096:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
 800209a:	f024 0401 	bic.w	r4, r4, #1
 800209e:	f8c0 4108 	str.w	r4, [r0, #264]	@ 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80020a2:	6810      	ldr	r0, [r2, #0]
 80020a4:	f020 0001 	bic.w	r0, r0, #1
 80020a8:	6010      	str	r0, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80020aa:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	@ 0xd00
 80020ae:	f040 0001 	orr.w	r0, r0, #1
 80020b2:	f8c2 0d00 	str.w	r0, [r2, #3328]	@ 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80020b6:	6810      	ldr	r0, [r2, #0]
 80020b8:	f020 0002 	bic.w	r0, r0, #2
 80020bc:	6010      	str	r0, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80020be:	f851 0f04 	ldr.w	r0, [r1, #4]!
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80020c2:	68c2      	ldr	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80020c4:	4561      	cmp	r1, ip
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80020c6:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80020ca:	60c2      	str	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80020cc:	d1f7      	bne.n	80020be <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 80020ce:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 80020d0:	2110      	movs	r1, #16
    return HAL_OK;
 80020d2:	4610      	mov	r0, r2
    heth->RxDescList.ItMode = 0U;
 80020d4:	659a      	str	r2, [r3, #88]	@ 0x58
    heth->gState = HAL_ETH_STATE_READY;
 80020d6:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
}
 80020da:	bc30      	pop	{r4, r5}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	ffff2f3e 	.word	0xffff2f3e

080020e4 <HAL_ETH_Transmit_IT>:
{
 80020e4:	b510      	push	{r4, lr}
 80020e6:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 80020e8:	b321      	cbz	r1, 8002134 <HAL_ETH_Transmit_IT+0x50>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80020ea:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 80020ee:	2a23      	cmp	r2, #35	@ 0x23
 80020f0:	d001      	beq.n	80020f6 <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 80020f2:	2001      	movs	r0, #1
}
 80020f4:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80020f6:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80020f8:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80020fa:	63c3      	str	r3, [r0, #60]	@ 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80020fc:	f7ff fd78 	bl	8001bf0 <ETH_Prepare_Tx_Descriptors>
 8002100:	b130      	cbz	r0, 8002110 <HAL_ETH_Transmit_IT+0x2c>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002102:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8002106:	f043 0302 	orr.w	r3, r3, #2
 800210a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 800210e:	e7f0      	b.n	80020f2 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 8002110:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002114:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    return HAL_OK;
 8002116:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002118:	1c53      	adds	r3, r2, #1
 800211a:	2b03      	cmp	r3, #3
 800211c:	bf88      	it	hi
 800211e:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002120:	6822      	ldr	r2, [r4, #0]
 8002122:	1d99      	adds	r1, r3, #6
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002124:	62a3      	str	r3, [r4, #40]	@ 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002126:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
 800212a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800212e:	f8c3 1120 	str.w	r1, [r3, #288]	@ 0x120
}
 8002132:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002134:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 8002140:	e7d7      	b.n	80020f2 <HAL_ETH_Transmit_IT+0xe>
 8002142:	bf00      	nop

08002144 <HAL_ETH_ReadData>:
{
 8002144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002148:	4604      	mov	r4, r0
 800214a:	b085      	sub	sp, #20
  if (pAppBuff == NULL)
 800214c:	2900      	cmp	r1, #0
 800214e:	d070      	beq.n	8002232 <HAL_ETH_ReadData+0xee>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002150:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8002154:	2b23      	cmp	r3, #35	@ 0x23
 8002156:	d162      	bne.n	800221e <HAL_ETH_ReadData+0xda>
  descidx = heth->RxDescList.RxDescIdx;
 8002158:	f8d0 805c 	ldr.w	r8, [r0, #92]	@ 0x5c
 800215c:	460f      	mov	r7, r1
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800215e:	f108 0312 	add.w	r3, r8, #18
 8002162:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002166:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002168:	68e9      	ldr	r1, [r5, #12]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800216a:	f1c3 0b04 	rsb	fp, r3, #4
         && (rxdataready == 0U))
 800216e:	2900      	cmp	r1, #0
 8002170:	db6a      	blt.n	8002248 <HAL_ETH_ReadData+0x104>
 8002172:	f1bb 0f00 	cmp.w	fp, #0
 8002176:	d069      	beq.n	800224c <HAL_ETH_ReadData+0x108>
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002178:	f100 0380 	add.w	r3, r0, #128	@ 0x80
  uint32_t desccnt = 0U;
 800217c:	f04f 0900 	mov.w	r9, #0
      dmarxdesc->BackupAddr0 = 0;
 8002180:	9703      	str	r7, [sp, #12]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	f100 037c 	add.w	r3, r0, #124	@ 0x7c
      dmarxdesc->BackupAddr0 = 0;
 8002188:	46ca      	mov	sl, r9
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800218a:	9302      	str	r3, [sp, #8]
 800218c:	e003      	b.n	8002196 <HAL_ETH_ReadData+0x52>
         && (rxdataready == 0U))
 800218e:	45cb      	cmp	fp, r9
 8002190:	d93d      	bls.n	800220e <HAL_ETH_ReadData+0xca>
 8002192:	2e00      	cmp	r6, #0
 8002194:	d13b      	bne.n	800220e <HAL_ETH_ReadData+0xca>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002196:	68eb      	ldr	r3, [r5, #12]
 8002198:	0059      	lsls	r1, r3, #1
 800219a:	d503      	bpl.n	80021a4 <HAL_ETH_ReadData+0x60>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800219c:	686b      	ldr	r3, [r5, #4]
 800219e:	67a3      	str	r3, [r4, #120]	@ 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80021a0:	682b      	ldr	r3, [r5, #0]
 80021a2:	6763      	str	r3, [r4, #116]	@ 0x74
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80021a4:	68eb      	ldr	r3, [r5, #12]
 80021a6:	009a      	lsls	r2, r3, #2
 80021a8:	d401      	bmi.n	80021ae <HAL_ETH_ReadData+0x6a>
 80021aa:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
 80021ac:	b1fe      	cbz	r6, 80021ee <HAL_ETH_ReadData+0xaa>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80021ae:	68eb      	ldr	r3, [r5, #12]
      bufflength = heth->Init.RxBuffLen;
 80021b0:	6967      	ldr	r7, [r4, #20]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80021b2:	009b      	lsls	r3, r3, #2
        heth->RxDescList.RxDescCnt = 0;
 80021b4:	bf48      	it	mi
 80021b6:	e9c4 aa18 	strdmi	sl, sl, [r4, #96]	@ 0x60
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80021ba:	68ee      	ldr	r6, [r5, #12]
 80021bc:	f016 5680 	ands.w	r6, r6, #268435456	@ 0x10000000
 80021c0:	d007      	beq.n	80021d2 <HAL_ETH_ReadData+0x8e>
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80021c2:	68ef      	ldr	r7, [r5, #12]
        rxdataready = 1;
 80021c4:	2601      	movs	r6, #1
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80021c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80021c8:	f3c7 070e 	ubfx	r7, r7, #0, #15
 80021cc:	1aff      	subs	r7, r7, r3
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80021ce:	68eb      	ldr	r3, [r5, #12]
 80021d0:	6723      	str	r3, [r4, #112]	@ 0x70
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80021d2:	b2bb      	uxth	r3, r7
 80021d4:	692a      	ldr	r2, [r5, #16]
 80021d6:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 80021da:	f001 febf 	bl	8003f5c <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 80021de:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80021e0:	3301      	adds	r3, #1
 80021e2:	6623      	str	r3, [r4, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80021e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80021e6:	443b      	add	r3, r7
 80021e8:	6663      	str	r3, [r4, #100]	@ 0x64
      dmarxdesc->BackupAddr0 = 0;
 80021ea:	f8c5 a010 	str.w	sl, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 80021ee:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 80021f2:	f109 0901 	add.w	r9, r9, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	bf8c      	ite	hi
 80021fa:	f1a8 0803 	subhi.w	r8, r8, #3
 80021fe:	4698      	movls	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002200:	f108 0312 	add.w	r3, r8, #18
 8002204:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002208:	68eb      	ldr	r3, [r5, #12]
         && (rxdataready == 0U))
 800220a:	2b00      	cmp	r3, #0
 800220c:	dabf      	bge.n	800218e <HAL_ETH_ReadData+0x4a>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 800220e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002210:	9f03      	ldr	r7, [sp, #12]
 8002212:	444b      	add	r3, r9
 8002214:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002216:	b99b      	cbnz	r3, 8002240 <HAL_ETH_ReadData+0xfc>
  heth->RxDescList.RxDescIdx = descidx;
 8002218:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 800221c:	b91e      	cbnz	r6, 8002226 <HAL_ETH_ReadData+0xe2>
    return HAL_ERROR;
 800221e:	2001      	movs	r0, #1
}
 8002220:	b005      	add	sp, #20
 8002222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pAppBuff = heth->RxDescList.pRxStart;
 8002226:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
    heth->RxDescList.pRxStart = NULL;
 8002228:	2300      	movs	r3, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 800222a:	603a      	str	r2, [r7, #0]
    return HAL_OK;
 800222c:	4618      	mov	r0, r3
    heth->RxDescList.pRxStart = NULL;
 800222e:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8002230:	e7f6      	b.n	8002220 <HAL_ETH_ReadData+0xdc>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002232:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 800223e:	e7ee      	b.n	800221e <HAL_ETH_ReadData+0xda>
    ETH_UpdateDescriptor(heth);
 8002240:	4620      	mov	r0, r4
 8002242:	f7ff fe81 	bl	8001f48 <ETH_UpdateDescriptor>
 8002246:	e7e7      	b.n	8002218 <HAL_ETH_ReadData+0xd4>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0e8      	beq.n	800221e <HAL_ETH_ReadData+0xda>
    ETH_UpdateDescriptor(heth);
 800224c:	f7ff fe7c 	bl	8001f48 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8002250:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 8002254:	e7e3      	b.n	800221e <HAL_ETH_ReadData+0xda>
 8002256:	bf00      	nop

08002258 <HAL_ETH_ReleaseTxPacket>:
{
 8002258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800225c:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	@ 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002260:	b17d      	cbz	r5, 8002282 <HAL_ETH_ReleaseTxPacket+0x2a>
 8002262:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002264:	2700      	movs	r7, #0
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002266:	eb06 0884 	add.w	r8, r6, r4, lsl #2
    numOfBuf--;
 800226a:	3d01      	subs	r5, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800226c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002270:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8002274:	b140      	cbz	r0, 8002288 <HAL_ETH_ReleaseTxPacket+0x30>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002276:	68f3      	ldr	r3, [r6, #12]
 8002278:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	da0a      	bge.n	8002298 <HAL_ETH_ReleaseTxPacket+0x40>
}
 8002282:	2000      	movs	r0, #0
 8002284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002288:	3401      	adds	r4, #1
 800228a:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800228e:	2d00      	cmp	r5, #0
 8002290:	d1e9      	bne.n	8002266 <HAL_ETH_ReleaseTxPacket+0xe>
}
 8002292:	2000      	movs	r0, #0
 8002294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002298:	3401      	adds	r4, #1
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800229a:	f001 fe8f 	bl	8003fbc <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 800229e:	f8c8 702c 	str.w	r7, [r8, #44]	@ 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80022a2:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 80022a6:	6435      	str	r5, [r6, #64]	@ 0x40
        dmatxdesclist->releaseIndex = idx;
 80022a8:	6474      	str	r4, [r6, #68]	@ 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80022aa:	2d00      	cmp	r5, #0
 80022ac:	d1db      	bne.n	8002266 <HAL_ETH_ReleaseTxPacket+0xe>
 80022ae:	e7f0      	b.n	8002292 <HAL_ETH_ReleaseTxPacket+0x3a>

080022b0 <HAL_ETH_PMTCallback>:
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop

080022b4 <HAL_ETH_EEECallback>:
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop

080022b8 <HAL_ETH_WakeUpCallback>:
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop

080022bc <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80022bc:	6803      	ldr	r3, [r0, #0]
 80022be:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 80022c2:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 80022c6:	0649      	lsls	r1, r1, #25
{
 80022c8:	b510      	push	{r4, lr}
 80022ca:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80022cc:	d504      	bpl.n	80022d8 <HAL_ETH_IRQHandler+0x1c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80022ce:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 80022d2:	0649      	lsls	r1, r1, #25
 80022d4:	f100 808a 	bmi.w	80023ec <HAL_ETH_IRQHandler+0x130>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80022d8:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 80022dc:	07c8      	lsls	r0, r1, #31
 80022de:	d503      	bpl.n	80022e8 <HAL_ETH_IRQHandler+0x2c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80022e0:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 80022e4:	07c9      	lsls	r1, r1, #31
 80022e6:	d476      	bmi.n	80023d6 <HAL_ETH_IRQHandler+0x11a>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80022e8:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 80022ec:	0448      	lsls	r0, r1, #17
 80022ee:	d503      	bpl.n	80022f8 <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80022f0:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 80022f4:	0449      	lsls	r1, r1, #17
 80022f6:	d41b      	bmi.n	8002330 <HAL_ETH_IRQHandler+0x74>
  macirqenable = heth->Instance->MACIER;
 80022f8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80022fc:	f412 4fc0 	tst.w	r2, #24576	@ 0x6000
 8002300:	d133      	bne.n	800236a <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002302:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002306:	06d0      	lsls	r0, r2, #27
 8002308:	d447      	bmi.n	800239a <HAL_ETH_IRQHandler+0xde>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800230a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800230e:	0691      	lsls	r1, r2, #26
 8002310:	d454      	bmi.n	80023bc <HAL_ETH_IRQHandler+0x100>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002316:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800231a:	0252      	lsls	r2, r2, #9
 800231c:	d400      	bmi.n	8002320 <HAL_ETH_IRQHandler+0x64>
}
 800231e:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002320:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
    HAL_ETH_WakeUpCallback(heth);
 8002324:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002326:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    HAL_ETH_WakeUpCallback(heth);
 800232a:	f7ff ffc5 	bl	80022b8 <HAL_ETH_WakeUpCallback>
}
 800232e:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002330:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800233c:	f8d2 3160 	ldr.w	r3, [r2, #352]	@ 0x160
 8002340:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002344:	f8d2 3160 	ldr.w	r3, [r2, #352]	@ 0x160
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002348:	d15a      	bne.n	8002400 <HAL_ETH_IRQHandler+0x144>
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800234a:	f44f 41cd 	mov.w	r1, #26240	@ 0x6680
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800234e:	400b      	ands	r3, r1
 8002350:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002354:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
      HAL_ETH_ErrorCallback(heth);
 8002358:	4620      	mov	r0, r4
 800235a:	f001 fc35 	bl	8003bc8 <HAL_ETH_ErrorCallback>
  macirqenable = heth->Instance->MACIER;
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002364:	f412 4fc0 	tst.w	r2, #24576	@ 0x6000
 8002368:	d0cb      	beq.n	8002302 <HAL_ETH_IRQHandler+0x46>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800236a:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 800236e:	21e0      	movs	r1, #224	@ 0xe0
    HAL_ETH_ErrorCallback(heth);
 8002370:	4620      	mov	r0, r4
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002372:	f042 0210 	orr.w	r2, r2, #16
 8002376:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800237a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800237e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 8002382:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
    HAL_ETH_ErrorCallback(heth);
 8002386:	f001 fc1f 	bl	8003bc8 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 800238a:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800238c:	6823      	ldr	r3, [r4, #0]
    heth->MACErrorCode = (uint32_t)(0x0U);
 800238e:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002392:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002396:	06d0      	lsls	r0, r2, #27
 8002398:	d5b7      	bpl.n	800230a <HAL_ETH_IRQHandler+0x4e>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800239a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
    HAL_ETH_PMTCallback(heth);
 800239e:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80023a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80023a4:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    HAL_ETH_PMTCallback(heth);
 80023a8:	f7ff ff82 	bl	80022b0 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80023ac:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80023ae:	6823      	ldr	r3, [r4, #0]
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80023b0:	f8c4 2094 	str.w	r2, [r4, #148]	@ 0x94
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80023b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023b8:	0691      	lsls	r1, r2, #26
 80023ba:	d5aa      	bpl.n	8002312 <HAL_ETH_IRQHandler+0x56>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80023bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
    HAL_ETH_EEECallback(heth);
 80023c0:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
    HAL_ETH_EEECallback(heth);
 80023ca:	f7ff ff73 	bl	80022b4 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80023d4:	e79d      	b.n	8002312 <HAL_ETH_IRQHandler+0x56>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80023d6:	f248 0301 	movw	r3, #32769	@ 0x8001
      HAL_ETH_TxCpltCallback(heth);
 80023da:	4620      	mov	r0, r4
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80023dc:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      HAL_ETH_TxCpltCallback(heth);
 80023e0:	f001 fbec 	bl	8003bbc <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 80023ea:	e77d      	b.n	80022e8 <HAL_ETH_IRQHandler+0x2c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80023ec:	f248 0340 	movw	r3, #32832	@ 0x8040
 80023f0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      HAL_ETH_RxCpltCallback(heth);
 80023f4:	f001 fbdc 	bl	8003bb0 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 80023fe:	e76b      	b.n	80022d8 <HAL_ETH_IRQHandler+0x1c>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002400:	f241 1002 	movw	r0, #4354	@ 0x1102
        heth->gState = HAL_ETH_STATE_ERROR;
 8002404:	21e0      	movs	r1, #224	@ 0xe0
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002406:	4003      	ands	r3, r0
 8002408:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800240c:	f8d2 3134 	ldr.w	r3, [r2, #308]	@ 0x134
 8002410:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002414:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
        heth->gState = HAL_ETH_STATE_ERROR;
 8002418:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 800241c:	e79c      	b.n	8002358 <HAL_ETH_IRQHandler+0x9c>
 800241e:	bf00      	nop

08002420 <HAL_ETH_ReadPHYRegister>:
{
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002424:	6800      	ldr	r0, [r0, #0]
{
 8002426:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002428:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 800242c:	07db      	lsls	r3, r3, #31
 800242e:	d501      	bpl.n	8002434 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 8002430:	2001      	movs	r0, #1
}
 8002432:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002434:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002438:	f023 7378 	bic.w	r3, r3, #65011712	@ 0x3e00000
 800243c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002440:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002444:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002448:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800244c:	f8c0 2200 	str.w	r2, [r0, #512]	@ 0x200
  tickstart = HAL_GetTick();
 8002450:	f7ff fa0e 	bl	8001870 <HAL_GetTick>
 8002454:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002456:	e005      	b.n	8002464 <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002458:	f7ff fa0a 	bl	8001870 <HAL_GetTick>
 800245c:	1b82      	subs	r2, r0, r6
 800245e:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8002462:	d8e5      	bhi.n	8002430 <HAL_ETH_ReadPHYRegister+0x10>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002464:	6821      	ldr	r1, [r4, #0]
 8002466:	f8d1 2200 	ldr.w	r2, [r1, #512]	@ 0x200
 800246a:	f012 0201 	ands.w	r2, r2, #1
 800246e:	d1f3      	bne.n	8002458 <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002470:	f8d1 3204 	ldr.w	r3, [r1, #516]	@ 0x204
  return HAL_OK;
 8002474:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002476:	b29b      	uxth	r3, r3
 8002478:	602b      	str	r3, [r5, #0]
}
 800247a:	bd70      	pop	{r4, r5, r6, pc}

0800247c <HAL_ETH_WritePHYRegister>:
{
 800247c:	b538      	push	{r3, r4, r5, lr}
 800247e:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002480:	6800      	ldr	r0, [r0, #0]
 8002482:	f8d0 5200 	ldr.w	r5, [r0, #512]	@ 0x200
 8002486:	07ed      	lsls	r5, r5, #31
 8002488:	d501      	bpl.n	800248e <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 800248a:	2001      	movs	r0, #1
}
 800248c:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800248e:	f8d0 0200 	ldr.w	r0, [r0, #512]	@ 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002492:	b29d      	uxth	r5, r3
 8002494:	f020 7378 	bic.w	r3, r0, #65011712	@ 0x3e00000
 8002498:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800249c:	490f      	ldr	r1, [pc, #60]	@ (80024dc <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800249e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80024a2:	f8c1 5204 	str.w	r5, [r1, #516]	@ 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80024a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80024aa:	f023 030c 	bic.w	r3, r3, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80024ae:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80024b2:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
  tickstart = HAL_GetTick();
 80024b6:	f7ff f9db 	bl	8001870 <HAL_GetTick>
 80024ba:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80024bc:	e005      	b.n	80024ca <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80024be:	f7ff f9d7 	bl	8001870 <HAL_GetTick>
 80024c2:	1b43      	subs	r3, r0, r5
 80024c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024c8:	d8df      	bhi.n	800248a <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024d0:	f013 0301 	ands.w	r3, r3, #1
 80024d4:	d1f3      	bne.n	80024be <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 80024d6:	4618      	mov	r0, r3
}
 80024d8:	bd38      	pop	{r3, r4, r5, pc}
 80024da:	bf00      	nop
 80024dc:	40028000 	.word	0x40028000

080024e0 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 80024e0:	2900      	cmp	r1, #0
 80024e2:	f000 80c4 	beq.w	800266e <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80024e6:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 80024e8:	2000      	movs	r0, #0
{
 80024ea:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80024ec:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80024ee:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80024f0:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80024f4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80024f8:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80024fc:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80024fe:	62cc      	str	r4, [r1, #44]	@ 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002500:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8002504:	624a      	str	r2, [r1, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	f482 7280 	eor.w	r2, r2, #256	@ 0x100
 800250c:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8002510:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002514:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8002516:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800251a:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	f482 6280 	eor.w	r2, r2, #1024	@ 0x400
 8002522:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8002526:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002528:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800252a:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800252e:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002536:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002538:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800253a:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800253c:	f404 5400 	and.w	r4, r4, #8192	@ 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002540:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002544:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	f3c2 4200 	ubfx	r2, r2, #16, #1
 800254e:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	f482 3200 	eor.w	r2, r2, #131072	@ 0x20000
 8002556:	f3c2 4240 	ubfx	r2, r2, #17, #1
 800255a:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8002562:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8002566:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	f3c2 5200 	ubfx	r2, r2, #20, #1
 800256e:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8002576:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	f3c2 5280 	ubfx	r2, r2, #22, #1
 800257e:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002580:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002582:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002586:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002588:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800258a:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800258c:	f004 64e0 	and.w	r4, r4, #117440512	@ 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002590:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002594:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002596:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002598:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800259a:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800259c:	f004 44e0 	and.w	r4, r4, #1879048192	@ 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80025a0:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80025a4:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80025a6:	634a      	str	r2, [r1, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	f482 3280 	eor.w	r2, r2, #65536	@ 0x10000
 80025ae:	f3c2 4200 	ubfx	r2, r2, #16, #1
 80025b2:	f881 2032 	strb.w	r2, [r1, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80025bc:	f881 2031 	strb.w	r2, [r1, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80025c0:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80025c2:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80025c6:	f881 2030 	strb.w	r2, [r1, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80025ca:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 80025cc:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80025d0:	f881 2038 	strb.w	r2, [r1, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80025d4:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80025d6:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80025d8:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80025dc:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80025e0:	63cc      	str	r4, [r1, #60]	@ 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80025e2:	f881 2040 	strb.w	r2, [r1, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80025e6:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80025e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80025ea:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80025ee:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80025f2:	644c      	str	r4, [r1, #68]	@ 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80025f4:	f881 2054 	strb.w	r2, [r1, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80025f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025fa:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 80025fe:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8002602:	f881 204c 	strb.w	r2, [r1, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002606:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002608:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800260a:	f004 0470 	and.w	r4, r4, #112	@ 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800260e:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002610:	650c      	str	r4, [r1, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002612:	648a      	str	r2, [r1, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002614:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002618:	f002 0201 	and.w	r2, r2, #1
 800261c:	f881 2056 	strb.w	r2, [r1, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002620:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
                                      ? ENABLE : DISABLE;
 8002624:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002628:	f881 2055 	strb.w	r2, [r1, #85]	@ 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800262c:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	@ 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002630:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002634:	f004 0472 	and.w	r4, r4, #114	@ 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002638:	f002 0223 	and.w	r2, r2, #35	@ 0x23
 800263c:	e9c1 4216 	strd	r4, r2, [r1, #88]	@ 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002640:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
}
 8002644:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002648:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800264c:	f881 2062 	strb.w	r2, [r1, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002650:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
 8002654:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002658:	f881 2061 	strb.w	r2, [r1, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800265c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002660:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8002664:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002668:	f881 3060 	strb.w	r3, [r1, #96]	@ 0x60
}
 800266c:	4770      	bx	lr
    return HAL_ERROR;
 800266e:	2001      	movs	r0, #1
}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop

08002674 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8002674:	b131      	cbz	r1, 8002684 <HAL_ETH_SetMACConfig+0x10>
{
 8002676:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8002678:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800267c:	2b10      	cmp	r3, #16
 800267e:	d003      	beq.n	8002688 <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 8002680:	2001      	movs	r0, #1
}
 8002682:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8002684:	2001      	movs	r0, #1
}
 8002686:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 8002688:	f7ff f9ae 	bl	80019e8 <ETH_SetMACConfig>
    return HAL_OK;
 800268c:	2000      	movs	r0, #0
}
 800268e:	bd08      	pop	{r3, pc}

08002690 <HAL_ETH_SetMDIOClockRange>:
{
 8002690:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002692:	6803      	ldr	r3, [r0, #0]
{
 8002694:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002696:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 800269a:	f000 fefd 	bl	8003498 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800269e:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <HAL_ETH_SetMDIOClockRange+0x64>)
 80026a0:	4a15      	ldr	r2, [pc, #84]	@ (80026f8 <HAL_ETH_SetMDIOClockRange+0x68>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80026a2:	f424 6470 	bic.w	r4, r4, #3840	@ 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80026a6:	4403      	add	r3, r0
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d205      	bcs.n	80026b8 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80026ac:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80026b0:	682b      	ldr	r3, [r5, #0]
 80026b2:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 80026b6:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80026b8:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <HAL_ETH_SetMDIOClockRange+0x6c>)
 80026ba:	4a11      	ldr	r2, [pc, #68]	@ (8002700 <HAL_ETH_SetMDIOClockRange+0x70>)
 80026bc:	4403      	add	r3, r0
 80026be:	4293      	cmp	r3, r2
 80026c0:	d805      	bhi.n	80026ce <HAL_ETH_SetMDIOClockRange+0x3e>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80026c2:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80026c6:	682b      	ldr	r3, [r5, #0]
 80026c8:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 80026cc:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80026ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <HAL_ETH_SetMDIOClockRange+0x74>)
 80026d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002708 <HAL_ETH_SetMDIOClockRange+0x78>)
 80026d2:	4403      	add	r3, r0
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d3eb      	bcc.n	80026b0 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80026d8:	4b0c      	ldr	r3, [pc, #48]	@ (800270c <HAL_ETH_SetMDIOClockRange+0x7c>)
 80026da:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <HAL_ETH_SetMDIOClockRange+0x80>)
 80026dc:	4403      	add	r3, r0
 80026de:	4293      	cmp	r3, r2
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80026e0:	682b      	ldr	r3, [r5, #0]
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80026e2:	bf94      	ite	ls
 80026e4:	f444 7480 	orrls.w	r4, r4, #256	@ 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80026e8:	f444 6480 	orrhi.w	r4, r4, #1024	@ 0x400
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80026ec:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 80026f0:	bd38      	pop	{r3, r4, r5, pc}
 80026f2:	bf00      	nop
 80026f4:	feced300 	.word	0xfeced300
 80026f8:	00e4e1c0 	.word	0x00e4e1c0
 80026fc:	fde9f140 	.word	0xfde9f140
 8002700:	017d783f 	.word	0x017d783f
 8002704:	fc6c7900 	.word	0xfc6c7900
 8002708:	02625a00 	.word	0x02625a00
 800270c:	fa0a1f00 	.word	0xfa0a1f00
 8002710:	02faf07f 	.word	0x02faf07f

08002714 <HAL_ETH_Init>:
  if (heth == NULL)
 8002714:	2800      	cmp	r0, #0
 8002716:	f000 810b 	beq.w	8002930 <HAL_ETH_Init+0x21c>
  if (heth->gState == HAL_ETH_STATE_RESET)
 800271a:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 800271e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002720:	4605      	mov	r5, r0
 8002722:	b0a5      	sub	sp, #148	@ 0x94
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80af 	beq.w	8002888 <HAL_ETH_Init+0x174>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272a:	4b82      	ldr	r3, [pc, #520]	@ (8002934 <HAL_ETH_Init+0x220>)
 800272c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8002730:	f042 0202 	orr.w	r2, r2, #2
 8002734:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8002738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800273c:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002746:	2800      	cmp	r0, #0
 8002748:	f040 8094 	bne.w	8002874 <HAL_ETH_Init+0x160>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800274c:	f7ff f896 	bl	800187c <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002750:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 8002752:	4a79      	ldr	r2, [pc, #484]	@ (8002938 <HAL_ETH_Init+0x224>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
  (void)SYSCFG->PMCR;
 8002758:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	f042 0201 	orr.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002762:	f7ff f885 	bl	8001870 <HAL_GetTick>
 8002766:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002768:	e006      	b.n	8002778 <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800276a:	f7ff f881 	bl	8001870 <HAL_GetTick>
 800276e:	1b80      	subs	r0, r0, r6
 8002770:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8002774:	f200 8081 	bhi.w	800287a <HAL_ETH_Init+0x166>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800277e:	681c      	ldr	r4, [r3, #0]
 8002780:	f014 0401 	ands.w	r4, r4, #1
 8002784:	d1f1      	bne.n	800276a <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 8002786:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 8002788:	2701      	movs	r7, #1
  HAL_ETH_SetMDIOClockRange(heth);
 800278a:	f7ff ff81 	bl	8002690 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800278e:	f000 fe83 	bl	8003498 <HAL_RCC_GetHCLKFreq>
 8002792:	4b6a      	ldr	r3, [pc, #424]	@ (800293c <HAL_ETH_Init+0x228>)
 8002794:	682e      	ldr	r6, [r5, #0]
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002796:	a90b      	add	r1, sp, #44	@ 0x2c
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002798:	fba3 2300 	umull	r2, r3, r3, r0
  ETH_SetMACConfig(heth, &macDefaultConf);
 800279c:	4628      	mov	r0, r5
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800279e:	9414      	str	r4, [sp, #80]	@ 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80027a0:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 80027a2:	f88d 4054 	strb.w	r4, [sp, #84]	@ 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80027a6:	f88d 4064 	strb.w	r4, [sp, #100]	@ 0x64
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80027aa:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80027ac:	941a      	str	r4, [sp, #104]	@ 0x68
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80027ae:	f88d 408e 	strb.w	r4, [sp, #142]	@ 0x8e
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80027b2:	f8c6 30dc 	str.w	r3, [r6, #220]	@ 0xdc
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80027ba:	940d      	str	r4, [sp, #52]	@ 0x34
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027bc:	9311      	str	r3, [sp, #68]	@ 0x44
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80027be:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
  macDefaultConf.ChecksumOffload = ENABLE;
 80027c2:	f88d 7030 	strb.w	r7, [sp, #48]	@ 0x30
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80027c6:	9318      	str	r3, [sp, #96]	@ 0x60
  macDefaultConf.LoopbackMode = DISABLE;
 80027c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80027cc:	f88d 705e 	strb.w	r7, [sp, #94]	@ 0x5e
  macDefaultConf.LoopbackMode = DISABLE;
 80027d0:	9312      	str	r3, [sp, #72]	@ 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80027d2:	2320      	movs	r3, #32
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80027d4:	f8ad 708c 	strh.w	r7, [sp, #140]	@ 0x8c
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80027d8:	9322      	str	r3, [sp, #136]	@ 0x88
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80027da:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
  macDefaultConf.JumboPacket = DISABLE;
 80027de:	f88d 403e 	strb.w	r4, [sp, #62]	@ 0x3e
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80027e2:	930b      	str	r3, [sp, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80027e8:	941f      	str	r4, [sp, #124]	@ 0x7c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027ea:	9310      	str	r3, [sp, #64]	@ 0x40
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80027ec:	4b54      	ldr	r3, [pc, #336]	@ (8002940 <HAL_ETH_Init+0x22c>)
  macDefaultConf.PauseTime = 0x0;
 80027ee:	941d      	str	r4, [sp, #116]	@ 0x74
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80027f0:	930e      	str	r3, [sp, #56]	@ 0x38
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80027f2:	2302      	movs	r3, #2
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80027f4:	9416      	str	r4, [sp, #88]	@ 0x58
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80027f6:	9321      	str	r3, [sp, #132]	@ 0x84
  macDefaultConf.Watchdog = ENABLE;
 80027f8:	f240 1301 	movw	r3, #257	@ 0x101
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80027fc:	f88d 406c 	strb.w	r4, [sp, #108]	@ 0x6c
  macDefaultConf.Watchdog = ENABLE;
 8002800:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002804:	f88d 4082 	strb.w	r4, [sp, #130]	@ 0x82
  macDefaultConf.RetryTransmission = ENABLE;
 8002808:	f88d 704c 	strb.w	r7, [sp, #76]	@ 0x4c
  macDefaultConf.TransmitFlowControl = DISABLE;
 800280c:	f8ad 4080 	strh.w	r4, [sp, #128]	@ 0x80
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002810:	f8ad 405c 	strh.w	r4, [sp, #92]	@ 0x5c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002814:	941c      	str	r4, [sp, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002816:	f88d 7078 	strb.w	r7, [sp, #120]	@ 0x78
  ETH_SetMACConfig(heth, &macDefaultConf);
 800281a:	f7ff f8e5 	bl	80019e8 <ETH_SetMACConfig>
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800281e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002822:	a902      	add	r1, sp, #8
 8002824:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002826:	f88d 700c 	strb.w	r7, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800282a:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800282c:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800282e:	f44f 7306 	mov.w	r3, #536	@ 0x218
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002832:	9704      	str	r7, [sp, #16]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002834:	930a      	str	r3, [sp, #40]	@ 0x28
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002836:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002838:	f8ad 4014 	strh.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800283c:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002840:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002844:	f7ff f98c 	bl	8001b60 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002848:	f506 5180 	add.w	r1, r6, #4096	@ 0x1000
 800284c:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
 8002850:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002854:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002858:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800285c:	696b      	ldr	r3, [r5, #20]
 800285e:	f013 0203 	ands.w	r2, r3, #3
 8002862:	d017      	beq.n	8002894 <HAL_ETH_Init+0x180>
    heth->gState = HAL_ETH_STATE_ERROR;
 8002864:	23e0      	movs	r3, #224	@ 0xe0
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002866:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 800286a:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
    return HAL_ERROR;
 800286e:	2001      	movs	r0, #1
}
 8002870:	b025      	add	sp, #148	@ 0x94
 8002872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002874:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002878:	e768      	b.n	800274c <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800287a:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 800287c:	23e0      	movs	r3, #224	@ 0xe0
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800287e:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8002882:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
      return HAL_ERROR;
 8002886:	e7f2      	b.n	800286e <HAL_ETH_Init+0x15a>
    heth->gState = HAL_ETH_STATE_BUSY;
 8002888:	2323      	movs	r3, #35	@ 0x23
 800288a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_ETH_MspInit(heth);
 800288e:	f001 fa99 	bl	8003dc4 <HAL_ETH_MspInit>
 8002892:	e74a      	b.n	800272a <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002894:	f8d1 4108 	ldr.w	r4, [r1, #264]	@ 0x108
 8002898:	482a      	ldr	r0, [pc, #168]	@ (8002944 <HAL_ETH_Init+0x230>)
 800289a:	68ef      	ldr	r7, [r5, #12]
 800289c:	4020      	ands	r0, r4
 800289e:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 80028a2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 80028a6:	463b      	mov	r3, r7
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80028a8:	f8c1 0108 	str.w	r0, [r1, #264]	@ 0x108
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028ac:	f105 0014 	add.w	r0, r5, #20
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80028b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80028b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80028b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80028b6:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028b8:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028bc:	3318      	adds	r3, #24
 80028be:	429c      	cmp	r4, r3
 80028c0:	d1f6      	bne.n	80028b0 <HAL_ETH_Init+0x19c>
    dmarxdesc =  heth->Init.RxDesc + i;
 80028c2:	692c      	ldr	r4, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80028c4:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 80028c6:	62aa      	str	r2, [r5, #40]	@ 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80028c8:	f105 0044 	add.w	r0, r5, #68	@ 0x44
 80028cc:	f8c1 312c 	str.w	r3, [r1, #300]	@ 0x12c
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80028d0:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80028d2:	f8c1 7114 	str.w	r7, [r1, #276]	@ 0x114
    dmarxdesc =  heth->Init.RxDesc + i;
 80028d6:	4623      	mov	r3, r4
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80028d8:	f8c1 7120 	str.w	r7, [r1, #288]	@ 0x120
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028dc:	f105 0754 	add.w	r7, r5, #84	@ 0x54
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80028e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80028e2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80028e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80028e6:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80028e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80028ea:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028ec:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028f0:	4287      	cmp	r7, r0
 80028f2:	f103 0318 	add.w	r3, r3, #24
 80028f6:	d1f3      	bne.n	80028e0 <HAL_ETH_Init+0x1cc>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80028f8:	2003      	movs	r0, #3
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80028fa:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028fc:	65aa      	str	r2, [r5, #88]	@ 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028fe:	e9c5 2217 	strd	r2, r2, [r5, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002902:	e9c5 221a 	strd	r2, r2, [r5, #104]	@ 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002906:	f8c1 0130 	str.w	r0, [r1, #304]	@ 0x130
  return HAL_OK;
 800290a:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800290c:	f8c1 411c 	str.w	r4, [r1, #284]	@ 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002910:	3448      	adds	r4, #72	@ 0x48
 8002912:	f8c1 4128 	str.w	r4, [r1, #296]	@ 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002916:	8899      	ldrh	r1, [r3, #4]
 8002918:	f8c6 1300 	str.w	r1, [r6, #768]	@ 0x300
  heth->gState = HAL_ETH_STATE_READY;
 800291c:	2110      	movs	r1, #16
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800291e:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002920:	f8c6 3304 	str.w	r3, [r6, #772]	@ 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002924:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002928:	f8c5 1084 	str.w	r1, [r5, #132]	@ 0x84
}
 800292c:	b025      	add	sp, #148	@ 0x94
 800292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002930:	2001      	movs	r0, #1
}
 8002932:	4770      	bx	lr
 8002934:	58024400 	.word	0x58024400
 8002938:	58000400 	.word	0x58000400
 800293c:	431bde83 	.word	0x431bde83
 8002940:	01010000 	.word	0x01010000
 8002944:	ffff8001 	.word	0xffff8001

08002948 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8002948:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop

08002950 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002954:	680c      	ldr	r4, [r1, #0]
{
 8002956:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002958:	2c00      	cmp	r4, #0
 800295a:	f000 80a0 	beq.w	8002a9e <HAL_GPIO_Init+0x14e>
  uint32_t position = 0x00U;
 800295e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002960:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002964:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002968:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800296a:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 800296e:	ea1c 0a04 	ands.w	sl, ip, r4
 8002972:	f000 808f 	beq.w	8002a94 <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002976:	9900      	ldr	r1, [sp, #0]
 8002978:	005f      	lsls	r7, r3, #1
 800297a:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800297c:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800297e:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002982:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002986:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800298a:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800298c:	f1b8 0f01 	cmp.w	r8, #1
 8002990:	f240 8088 	bls.w	8002aa4 <HAL_GPIO_Init+0x154>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002994:	2a03      	cmp	r2, #3
 8002996:	f040 80c6 	bne.w	8002b26 <HAL_GPIO_Init+0x1d6>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800299a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800299c:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800299e:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029a2:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a6:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 80029aa:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ac:	d072      	beq.n	8002a94 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ae:	4e79      	ldr	r6, [pc, #484]	@ (8002b94 <HAL_GPIO_Init+0x244>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029b0:	f003 0703 	and.w	r7, r3, #3
 80029b4:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b6:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029ba:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029bc:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029c0:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029c4:	4974      	ldr	r1, [pc, #464]	@ (8002b98 <HAL_GPIO_Init+0x248>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c6:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 80029ca:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 80029ce:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029d2:	4288      	cmp	r0, r1
 80029d4:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d8:	f002 0202 	and.w	r2, r2, #2
 80029dc:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80029e0:	9203      	str	r2, [sp, #12]
 80029e2:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80029e4:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029e6:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029ea:	d02c      	beq.n	8002a46 <HAL_GPIO_Init+0xf6>
 80029ec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80029f0:	4288      	cmp	r0, r1
 80029f2:	f000 80ab 	beq.w	8002b4c <HAL_GPIO_Init+0x1fc>
 80029f6:	4969      	ldr	r1, [pc, #420]	@ (8002b9c <HAL_GPIO_Init+0x24c>)
 80029f8:	4288      	cmp	r0, r1
 80029fa:	f000 80ad 	beq.w	8002b58 <HAL_GPIO_Init+0x208>
 80029fe:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8002ba0 <HAL_GPIO_Init+0x250>
 8002a02:	4560      	cmp	r0, ip
 8002a04:	f000 809c 	beq.w	8002b40 <HAL_GPIO_Init+0x1f0>
 8002a08:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8002ba4 <HAL_GPIO_Init+0x254>
 8002a0c:	4560      	cmp	r0, ip
 8002a0e:	f000 80af 	beq.w	8002b70 <HAL_GPIO_Init+0x220>
 8002a12:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8002ba8 <HAL_GPIO_Init+0x258>
 8002a16:	4560      	cmp	r0, ip
 8002a18:	f000 80b0 	beq.w	8002b7c <HAL_GPIO_Init+0x22c>
 8002a1c:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 8002bac <HAL_GPIO_Init+0x25c>
 8002a20:	4560      	cmp	r0, ip
 8002a22:	f000 809f 	beq.w	8002b64 <HAL_GPIO_Init+0x214>
 8002a26:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8002bb0 <HAL_GPIO_Init+0x260>
 8002a2a:	4560      	cmp	r0, ip
 8002a2c:	f000 80ac 	beq.w	8002b88 <HAL_GPIO_Init+0x238>
 8002a30:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8002bb4 <HAL_GPIO_Init+0x264>
 8002a34:	4560      	cmp	r0, ip
 8002a36:	bf0c      	ite	eq
 8002a38:	f04f 0c09 	moveq.w	ip, #9
 8002a3c:	f04f 0c0a 	movne.w	ip, #10
 8002a40:	fa0c f707 	lsl.w	r7, ip, r7
 8002a44:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a46:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a48:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8002a4a:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 8002a4e:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 8002a52:	bf4c      	ite	mi
 8002a54:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 8002a58:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a5a:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 8002a5c:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 8002a60:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 8002a64:	bf54      	ite	pl
 8002a66:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002a68:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a6c:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8002a6e:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8002a72:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8002a76:	bf54      	ite	pl
 8002a78:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002a7a:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a7e:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8002a80:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8002a84:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8002a88:	bf54      	ite	pl
 8002a8a:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002a8c:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a90:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 8002a94:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a96:	fa34 f203 	lsrs.w	r2, r4, r3
 8002a9a:	f47f af66 	bne.w	800296a <HAL_GPIO_Init+0x1a>
  }
}
 8002a9e:	b005      	add	sp, #20
 8002aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aa4:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa6:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 8002aa8:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aac:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002aae:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ab2:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ab6:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ab8:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002abc:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 8002abe:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac2:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8002ac6:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aca:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ace:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad2:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8002ad6:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ada:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 8002ade:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ae2:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae6:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8002aea:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aee:	f47f af54 	bne.w	800299a <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002af2:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002af6:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 8002af8:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002afc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b00:	6909      	ldr	r1, [r1, #16]
 8002b02:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002b06:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 8002b0a:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b0e:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b10:	210f      	movs	r1, #15
 8002b12:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b16:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b18:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b1c:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 8002b20:	f8c8 c020 	str.w	ip, [r8, #32]
 8002b24:	e739      	b.n	800299a <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b26:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 8002b28:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b2c:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b2e:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b32:	fa01 fc07 	lsl.w	ip, r1, r7
 8002b36:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8002b3a:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3e:	e72c      	b.n	800299a <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b40:	f04f 0c03 	mov.w	ip, #3
 8002b44:	fa0c f707 	lsl.w	r7, ip, r7
 8002b48:	433a      	orrs	r2, r7
 8002b4a:	e77c      	b.n	8002a46 <HAL_GPIO_Init+0xf6>
 8002b4c:	f04f 0c01 	mov.w	ip, #1
 8002b50:	fa0c f707 	lsl.w	r7, ip, r7
 8002b54:	433a      	orrs	r2, r7
 8002b56:	e776      	b.n	8002a46 <HAL_GPIO_Init+0xf6>
 8002b58:	f04f 0c02 	mov.w	ip, #2
 8002b5c:	fa0c f707 	lsl.w	r7, ip, r7
 8002b60:	433a      	orrs	r2, r7
 8002b62:	e770      	b.n	8002a46 <HAL_GPIO_Init+0xf6>
 8002b64:	f04f 0c06 	mov.w	ip, #6
 8002b68:	fa0c f707 	lsl.w	r7, ip, r7
 8002b6c:	433a      	orrs	r2, r7
 8002b6e:	e76a      	b.n	8002a46 <HAL_GPIO_Init+0xf6>
 8002b70:	f04f 0c04 	mov.w	ip, #4
 8002b74:	fa0c f707 	lsl.w	r7, ip, r7
 8002b78:	433a      	orrs	r2, r7
 8002b7a:	e764      	b.n	8002a46 <HAL_GPIO_Init+0xf6>
 8002b7c:	f04f 0c05 	mov.w	ip, #5
 8002b80:	fa0c f707 	lsl.w	r7, ip, r7
 8002b84:	433a      	orrs	r2, r7
 8002b86:	e75e      	b.n	8002a46 <HAL_GPIO_Init+0xf6>
 8002b88:	f04f 0c07 	mov.w	ip, #7
 8002b8c:	fa0c f707 	lsl.w	r7, ip, r7
 8002b90:	433a      	orrs	r2, r7
 8002b92:	e758      	b.n	8002a46 <HAL_GPIO_Init+0xf6>
 8002b94:	58024400 	.word	0x58024400
 8002b98:	58020000 	.word	0x58020000
 8002b9c:	58020800 	.word	0x58020800
 8002ba0:	58020c00 	.word	0x58020c00
 8002ba4:	58021000 	.word	0x58021000
 8002ba8:	58021400 	.word	0x58021400
 8002bac:	58021800 	.word	0x58021800
 8002bb0:	58021c00 	.word	0x58021c00
 8002bb4:	58022400 	.word	0x58022400

08002bb8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bb8:	b902      	cbnz	r2, 8002bbc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002bba:	0409      	lsls	r1, r1, #16
 8002bbc:	6181      	str	r1, [r0, #24]
  }
}
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002bc0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002bc2:	4c10      	ldr	r4, [pc, #64]	@ (8002c04 <HAL_PWREx_ConfigSupply+0x44>)
 8002bc4:	68e3      	ldr	r3, [r4, #12]
 8002bc6:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002bca:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002bcc:	d105      	bne.n	8002bda <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	1a18      	subs	r0, r3, r0
 8002bd4:	bf18      	it	ne
 8002bd6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002bd8:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002bda:	f023 0307 	bic.w	r3, r3, #7
 8002bde:	4303      	orrs	r3, r0
 8002be0:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8002be2:	f7fe fe45 	bl	8001870 <HAL_GetTick>
 8002be6:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002be8:	e005      	b.n	8002bf6 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002bea:	f7fe fe41 	bl	8001870 <HAL_GetTick>
 8002bee:	1b40      	subs	r0, r0, r5
 8002bf0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002bf4:	d804      	bhi.n	8002c00 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bf6:	6863      	ldr	r3, [r4, #4]
 8002bf8:	049b      	lsls	r3, r3, #18
 8002bfa:	d5f6      	bpl.n	8002bea <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8002bfc:	2000      	movs	r0, #0
}
 8002bfe:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002c00:	2001      	movs	r0, #1
}
 8002c02:	bd38      	pop	{r3, r4, r5, pc}
 8002c04:	58024800 	.word	0x58024800

08002c08 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c08:	4b33      	ldr	r3, [pc, #204]	@ (8002cd8 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002c0a:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c0c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002c0e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c10:	6add      	ldr	r5, [r3, #44]	@ 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8002c12:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002c16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002c18:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8002c1c:	d036      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq.part.0+0x84>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002c1e:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c22:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c26:	f001 0103 	and.w	r1, r1, #3
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c2a:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002c2e:	fb05 f202 	mul.w	r2, r5, r2
 8002c32:	2901      	cmp	r1, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c38:	ee06 2a90 	vmov	s13, r2
 8002c3c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8002c40:	d002      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8002c42:	2902      	cmp	r1, #2
 8002c44:	d042      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8002c46:	b319      	cbz	r1, 8002c90 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c48:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8002cdc <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8002c4c:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c66:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002c6a:	ee67 7a86 	vmul.f32	s15, s15, s12
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd8 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002c76:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002c78:	ee07 3a10 	vmov	s14, r3
 8002c7c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002c80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c84:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002c88:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8002c8c:	bc30      	pop	{r4, r5}
 8002c8e:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	0692      	lsls	r2, r2, #26
 8002c94:	d51d      	bpl.n	8002cd2 <HAL_RCC_GetSysClockFreq.part.0+0xca>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c96:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c98:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c9c:	4a10      	ldr	r2, [pc, #64]	@ (8002ce0 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ca0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ca8:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	ee06 2a10 	vmov	s12, r2
 8002cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cb6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002cba:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002cbe:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8002cc2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8002cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cca:	e7d0      	b.n	8002c6e <HAL_RCC_GetSysClockFreq.part.0+0x66>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ccc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002ce4 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8002cd0:	e7bc      	b.n	8002c4c <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cd2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002ce8 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8002cd6:	e7b9      	b.n	8002c4c <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8002cd8:	58024400 	.word	0x58024400
 8002cdc:	4a742400 	.word	0x4a742400
 8002ce0:	03d09000 	.word	0x03d09000
 8002ce4:	4af42400 	.word	0x4af42400
 8002ce8:	4c742400 	.word	0x4c742400

08002cec <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002cec:	2800      	cmp	r0, #0
 8002cee:	f000 827f 	beq.w	80031f0 <HAL_RCC_OscConfig+0x504>
{
 8002cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf4:	6803      	ldr	r3, [r0, #0]
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	07d9      	lsls	r1, r3, #31
 8002cfa:	d52e      	bpl.n	8002d5a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cfc:	4993      	ldr	r1, [pc, #588]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
 8002cfe:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d00:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d02:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d06:	2a10      	cmp	r2, #16
 8002d08:	f000 80f0 	beq.w	8002eec <HAL_RCC_OscConfig+0x200>
 8002d0c:	2a18      	cmp	r2, #24
 8002d0e:	f000 80e8 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d12:	6863      	ldr	r3, [r4, #4]
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d18:	f000 8108 	beq.w	8002f2c <HAL_RCC_OscConfig+0x240>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 8146 	beq.w	8002fae <HAL_RCC_OscConfig+0x2c2>
 8002d22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d26:	4b89      	ldr	r3, [pc, #548]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	f000 8232 	beq.w	8003192 <HAL_RCC_OscConfig+0x4a6>
 8002d2e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fd98 	bl	8001870 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d40:	4e82      	ldr	r6, [pc, #520]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8002d42:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d44:	e005      	b.n	8002d52 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d46:	f7fe fd93 	bl	8001870 <HAL_GetTick>
 8002d4a:	1b40      	subs	r0, r0, r5
 8002d4c:	2864      	cmp	r0, #100	@ 0x64
 8002d4e:	f200 812c 	bhi.w	8002faa <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d52:	6833      	ldr	r3, [r6, #0]
 8002d54:	039b      	lsls	r3, r3, #14
 8002d56:	d5f6      	bpl.n	8002d46 <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	079d      	lsls	r5, r3, #30
 8002d5c:	d47e      	bmi.n	8002e5c <HAL_RCC_OscConfig+0x170>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d5e:	06d9      	lsls	r1, r3, #27
 8002d60:	d528      	bpl.n	8002db4 <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d62:	497a      	ldr	r1, [pc, #488]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
 8002d64:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d66:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d68:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d6c:	2a08      	cmp	r2, #8
 8002d6e:	f000 80cd 	beq.w	8002f0c <HAL_RCC_OscConfig+0x220>
 8002d72:	2a18      	cmp	r2, #24
 8002d74:	f000 80c5 	beq.w	8002f02 <HAL_RCC_OscConfig+0x216>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002d78:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8002d7a:	4d74      	ldr	r5, [pc, #464]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 814e 	beq.w	800301e <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_CSI_ENABLE();
 8002d82:	682b      	ldr	r3, [r5, #0]
 8002d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fd71 	bl	8001870 <HAL_GetTick>
 8002d8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d90:	e005      	b.n	8002d9e <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d92:	f7fe fd6d 	bl	8001870 <HAL_GetTick>
 8002d96:	1b80      	subs	r0, r0, r6
 8002d98:	2802      	cmp	r0, #2
 8002d9a:	f200 8106 	bhi.w	8002faa <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d9e:	682b      	ldr	r3, [r5, #0]
 8002da0:	05db      	lsls	r3, r3, #23
 8002da2:	d5f6      	bpl.n	8002d92 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002da4:	68eb      	ldr	r3, [r5, #12]
 8002da6:	6a22      	ldr	r2, [r4, #32]
 8002da8:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8002dac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002db0:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	071d      	lsls	r5, r3, #28
 8002db6:	d516      	bpl.n	8002de6 <HAL_RCC_OscConfig+0xfa>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002db8:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002dba:	4d64      	ldr	r5, [pc, #400]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 810c 	beq.w	8002fda <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002dca:	f7fe fd51 	bl	8001870 <HAL_GetTick>
 8002dce:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dd0:	e005      	b.n	8002dde <HAL_RCC_OscConfig+0xf2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd2:	f7fe fd4d 	bl	8001870 <HAL_GetTick>
 8002dd6:	1b80      	subs	r0, r0, r6
 8002dd8:	2802      	cmp	r0, #2
 8002dda:	f200 80e6 	bhi.w	8002faa <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dde:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002de0:	0798      	lsls	r0, r3, #30
 8002de2:	d5f6      	bpl.n	8002dd2 <HAL_RCC_OscConfig+0xe6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	069a      	lsls	r2, r3, #26
 8002de8:	d516      	bpl.n	8002e18 <HAL_RCC_OscConfig+0x12c>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002dea:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8002dec:	4d57      	ldr	r5, [pc, #348]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 8104 	beq.w	8002ffc <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_HSI48_ENABLE();
 8002df4:	682b      	ldr	r3, [r5, #0]
 8002df6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dfa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fd38 	bl	8001870 <HAL_GetTick>
 8002e00:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e02:	e005      	b.n	8002e10 <HAL_RCC_OscConfig+0x124>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e04:	f7fe fd34 	bl	8001870 <HAL_GetTick>
 8002e08:	1b80      	subs	r0, r0, r6
 8002e0a:	2802      	cmp	r0, #2
 8002e0c:	f200 80cd 	bhi.w	8002faa <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e10:	682b      	ldr	r3, [r5, #0]
 8002e12:	049f      	lsls	r7, r3, #18
 8002e14:	d5f6      	bpl.n	8002e04 <HAL_RCC_OscConfig+0x118>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	0759      	lsls	r1, r3, #29
 8002e1a:	f100 808d 	bmi.w	8002f38 <HAL_RCC_OscConfig+0x24c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e1e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002e20:	b1d2      	cbz	r2, 8002e58 <HAL_RCC_OscConfig+0x16c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e22:	4d4a      	ldr	r5, [pc, #296]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
 8002e24:	692b      	ldr	r3, [r5, #16]
 8002e26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e2a:	2b18      	cmp	r3, #24
 8002e2c:	f000 8183 	beq.w	8003136 <HAL_RCC_OscConfig+0x44a>
        __HAL_RCC_PLL_DISABLE();
 8002e30:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e32:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002e34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e38:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3a:	f000 8117 	beq.w	800306c <HAL_RCC_OscConfig+0x380>
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fd17 	bl	8001870 <HAL_GetTick>
 8002e42:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e44:	e005      	b.n	8002e52 <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e46:	f7fe fd13 	bl	8001870 <HAL_GetTick>
 8002e4a:	1b00      	subs	r0, r0, r4
 8002e4c:	2802      	cmp	r0, #2
 8002e4e:	f200 80ac 	bhi.w	8002faa <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e52:	682b      	ldr	r3, [r5, #0]
 8002e54:	019b      	lsls	r3, r3, #6
 8002e56:	d4f6      	bmi.n	8002e46 <HAL_RCC_OscConfig+0x15a>
  return HAL_OK;
 8002e58:	2000      	movs	r0, #0
}
 8002e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5c:	4a3b      	ldr	r2, [pc, #236]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
 8002e5e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e60:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e62:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8002e66:	d122      	bne.n	8002eae <HAL_RCC_OscConfig+0x1c2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e68:	4b38      	ldr	r3, [pc, #224]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e6a:	68e2      	ldr	r2, [r4, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	0759      	lsls	r1, r3, #29
 8002e70:	d501      	bpl.n	8002e76 <HAL_RCC_OscConfig+0x18a>
 8002e72:	2a00      	cmp	r2, #0
 8002e74:	d043      	beq.n	8002efe <HAL_RCC_OscConfig+0x212>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e76:	4d35      	ldr	r5, [pc, #212]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	f023 0319 	bic.w	r3, r3, #25
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 8002e82:	f7fe fcf5 	bl	8001870 <HAL_GetTick>
 8002e86:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e88:	e005      	b.n	8002e96 <HAL_RCC_OscConfig+0x1aa>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e8a:	f7fe fcf1 	bl	8001870 <HAL_GetTick>
 8002e8e:	1b80      	subs	r0, r0, r6
 8002e90:	2802      	cmp	r0, #2
 8002e92:	f200 808a 	bhi.w	8002faa <HAL_RCC_OscConfig+0x2be>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e96:	682b      	ldr	r3, [r5, #0]
 8002e98:	075b      	lsls	r3, r3, #29
 8002e9a:	d5f6      	bpl.n	8002e8a <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9c:	686b      	ldr	r3, [r5, #4]
 8002e9e:	6922      	ldr	r2, [r4, #16]
 8002ea0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002ea4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ea8:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	e757      	b.n	8002d5e <HAL_RCC_OscConfig+0x72>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002eae:	2b18      	cmp	r3, #24
 8002eb0:	f000 80d8 	beq.w	8003064 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002eb4:	4d25      	ldr	r5, [pc, #148]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eb6:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002eb8:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eba:	2a00      	cmp	r2, #0
 8002ebc:	f000 80c1 	beq.w	8003042 <HAL_RCC_OscConfig+0x356>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ec0:	f023 0319 	bic.w	r3, r3, #25
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fcd2 	bl	8001870 <HAL_GetTick>
 8002ecc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ece:	e004      	b.n	8002eda <HAL_RCC_OscConfig+0x1ee>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7fe fcce 	bl	8001870 <HAL_GetTick>
 8002ed4:	1b80      	subs	r0, r0, r6
 8002ed6:	2802      	cmp	r0, #2
 8002ed8:	d867      	bhi.n	8002faa <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eda:	682b      	ldr	r3, [r5, #0]
 8002edc:	075f      	lsls	r7, r3, #29
 8002ede:	d5f7      	bpl.n	8002ed0 <HAL_RCC_OscConfig+0x1e4>
 8002ee0:	e7dc      	b.n	8002e9c <HAL_RCC_OscConfig+0x1b0>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ee2:	f001 0103 	and.w	r1, r1, #3
 8002ee6:	2902      	cmp	r1, #2
 8002ee8:	f47f af13 	bne.w	8002d12 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	4a17      	ldr	r2, [pc, #92]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	0392      	lsls	r2, r2, #14
 8002ef2:	f57f af32 	bpl.w	8002d5a <HAL_RCC_OscConfig+0x6e>
 8002ef6:	6862      	ldr	r2, [r4, #4]
 8002ef8:	2a00      	cmp	r2, #0
 8002efa:	f47f af2e 	bne.w	8002d5a <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 8002efe:	2001      	movs	r0, #1
}
 8002f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f02:	f001 0103 	and.w	r1, r1, #3
 8002f06:	2901      	cmp	r1, #1
 8002f08:	f47f af36 	bne.w	8002d78 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	05d2      	lsls	r2, r2, #23
 8002f12:	d502      	bpl.n	8002f1a <HAL_RCC_OscConfig+0x22e>
 8002f14:	69e2      	ldr	r2, [r4, #28]
 8002f16:	2a80      	cmp	r2, #128	@ 0x80
 8002f18:	d1f1      	bne.n	8002efe <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f1a:	490c      	ldr	r1, [pc, #48]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
 8002f1c:	6a20      	ldr	r0, [r4, #32]
 8002f1e:	68ca      	ldr	r2, [r1, #12]
 8002f20:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8002f24:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002f28:	60ca      	str	r2, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f2a:	e743      	b.n	8002db4 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2c:	4a07      	ldr	r2, [pc, #28]	@ (8002f4c <HAL_RCC_OscConfig+0x260>)
 8002f2e:	6813      	ldr	r3, [r2, #0]
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f36:	e701      	b.n	8002d3c <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8002f38:	4d05      	ldr	r5, [pc, #20]	@ (8002f50 <HAL_RCC_OscConfig+0x264>)
 8002f3a:	682b      	ldr	r3, [r5, #0]
 8002f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f40:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002f42:	f7fe fc95 	bl	8001870 <HAL_GetTick>
 8002f46:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f48:	e009      	b.n	8002f5e <HAL_RCC_OscConfig+0x272>
 8002f4a:	bf00      	nop
 8002f4c:	58024400 	.word	0x58024400
 8002f50:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f54:	f7fe fc8c 	bl	8001870 <HAL_GetTick>
 8002f58:	1b80      	subs	r0, r0, r6
 8002f5a:	2864      	cmp	r0, #100	@ 0x64
 8002f5c:	d825      	bhi.n	8002faa <HAL_RCC_OscConfig+0x2be>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f5e:	682b      	ldr	r3, [r5, #0]
 8002f60:	05da      	lsls	r2, r3, #23
 8002f62:	d5f7      	bpl.n	8002f54 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f64:	68a3      	ldr	r3, [r4, #8]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	f000 8134 	beq.w	80031d4 <HAL_RCC_OscConfig+0x4e8>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 8118 	beq.w	80031a2 <HAL_RCC_OscConfig+0x4b6>
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	4b9f      	ldr	r3, [pc, #636]	@ (80031f4 <HAL_RCC_OscConfig+0x508>)
 8002f76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f78:	f000 8132 	beq.w	80031e0 <HAL_RCC_OscConfig+0x4f4>
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	671a      	str	r2, [r3, #112]	@ 0x70
 8002f82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f84:	f022 0204 	bic.w	r2, r2, #4
 8002f88:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fc71 	bl	8001870 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f8e:	4e99      	ldr	r6, [pc, #612]	@ (80031f4 <HAL_RCC_OscConfig+0x508>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f90:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002f94:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f96:	e004      	b.n	8002fa2 <HAL_RCC_OscConfig+0x2b6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe fc6a 	bl	8001870 <HAL_GetTick>
 8002f9c:	1b40      	subs	r0, r0, r5
 8002f9e:	42b8      	cmp	r0, r7
 8002fa0:	d803      	bhi.n	8002faa <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fa2:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002fa4:	079b      	lsls	r3, r3, #30
 8002fa6:	d5f7      	bpl.n	8002f98 <HAL_RCC_OscConfig+0x2ac>
 8002fa8:	e739      	b.n	8002e1e <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 8002faa:	2003      	movs	r0, #3
}
 8002fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fae:	4d91      	ldr	r5, [pc, #580]	@ (80031f4 <HAL_RCC_OscConfig+0x508>)
 8002fb0:	682b      	ldr	r3, [r5, #0]
 8002fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fb6:	602b      	str	r3, [r5, #0]
 8002fb8:	682b      	ldr	r3, [r5, #0]
 8002fba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fbe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fc56 	bl	8001870 <HAL_GetTick>
 8002fc4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fc6:	e004      	b.n	8002fd2 <HAL_RCC_OscConfig+0x2e6>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe fc52 	bl	8001870 <HAL_GetTick>
 8002fcc:	1b80      	subs	r0, r0, r6
 8002fce:	2864      	cmp	r0, #100	@ 0x64
 8002fd0:	d8eb      	bhi.n	8002faa <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fd2:	682b      	ldr	r3, [r5, #0]
 8002fd4:	039f      	lsls	r7, r3, #14
 8002fd6:	d4f7      	bmi.n	8002fc8 <HAL_RCC_OscConfig+0x2dc>
 8002fd8:	e6be      	b.n	8002d58 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8002fda:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002fe2:	f7fe fc45 	bl	8001870 <HAL_GetTick>
 8002fe6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fe8:	e004      	b.n	8002ff4 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fea:	f7fe fc41 	bl	8001870 <HAL_GetTick>
 8002fee:	1b80      	subs	r0, r0, r6
 8002ff0:	2802      	cmp	r0, #2
 8002ff2:	d8da      	bhi.n	8002faa <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ff4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002ff6:	0799      	lsls	r1, r3, #30
 8002ff8:	d4f7      	bmi.n	8002fea <HAL_RCC_OscConfig+0x2fe>
 8002ffa:	e6f3      	b.n	8002de4 <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 8002ffc:	682b      	ldr	r3, [r5, #0]
 8002ffe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003002:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003004:	f7fe fc34 	bl	8001870 <HAL_GetTick>
 8003008:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800300a:	e004      	b.n	8003016 <HAL_RCC_OscConfig+0x32a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800300c:	f7fe fc30 	bl	8001870 <HAL_GetTick>
 8003010:	1b80      	subs	r0, r0, r6
 8003012:	2802      	cmp	r0, #2
 8003014:	d8c9      	bhi.n	8002faa <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003016:	682b      	ldr	r3, [r5, #0]
 8003018:	0498      	lsls	r0, r3, #18
 800301a:	d4f7      	bmi.n	800300c <HAL_RCC_OscConfig+0x320>
 800301c:	e6fb      	b.n	8002e16 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 800301e:	682b      	ldr	r3, [r5, #0]
 8003020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003024:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003026:	f7fe fc23 	bl	8001870 <HAL_GetTick>
 800302a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800302c:	e004      	b.n	8003038 <HAL_RCC_OscConfig+0x34c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800302e:	f7fe fc1f 	bl	8001870 <HAL_GetTick>
 8003032:	1b80      	subs	r0, r0, r6
 8003034:	2802      	cmp	r0, #2
 8003036:	d8b8      	bhi.n	8002faa <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	05df      	lsls	r7, r3, #23
 800303c:	d4f7      	bmi.n	800302e <HAL_RCC_OscConfig+0x342>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	e6b8      	b.n	8002db4 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003048:	f7fe fc12 	bl	8001870 <HAL_GetTick>
 800304c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800304e:	e004      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003050:	f7fe fc0e 	bl	8001870 <HAL_GetTick>
 8003054:	1b80      	subs	r0, r0, r6
 8003056:	2802      	cmp	r0, #2
 8003058:	d8a7      	bhi.n	8002faa <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800305a:	682b      	ldr	r3, [r5, #0]
 800305c:	0758      	lsls	r0, r3, #29
 800305e:	d4f7      	bmi.n	8003050 <HAL_RCC_OscConfig+0x364>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	e67c      	b.n	8002d5e <HAL_RCC_OscConfig+0x72>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003064:	0790      	lsls	r0, r2, #30
 8003066:	f47f af25 	bne.w	8002eb4 <HAL_RCC_OscConfig+0x1c8>
 800306a:	e6fd      	b.n	8002e68 <HAL_RCC_OscConfig+0x17c>
        tickstart = HAL_GetTick();
 800306c:	f7fe fc00 	bl	8001870 <HAL_GetTick>
 8003070:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003072:	e004      	b.n	800307e <HAL_RCC_OscConfig+0x392>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe fbfc 	bl	8001870 <HAL_GetTick>
 8003078:	1b80      	subs	r0, r0, r6
 800307a:	2802      	cmp	r0, #2
 800307c:	d895      	bhi.n	8002faa <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800307e:	682b      	ldr	r3, [r5, #0]
 8003080:	0199      	lsls	r1, r3, #6
 8003082:	d4f7      	bmi.n	8003074 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003084:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8003086:	4b5c      	ldr	r3, [pc, #368]	@ (80031f8 <HAL_RCC_OscConfig+0x50c>)
 8003088:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800308a:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800308c:	495b      	ldr	r1, [pc, #364]	@ (80031fc <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800308e:	4e59      	ldr	r6, [pc, #356]	@ (80031f4 <HAL_RCC_OscConfig+0x508>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003090:	4313      	orrs	r3, r2
 8003092:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003094:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003098:	62ab      	str	r3, [r5, #40]	@ 0x28
 800309a:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 800309e:	3b01      	subs	r3, #1
 80030a0:	3a01      	subs	r2, #1
 80030a2:	025b      	lsls	r3, r3, #9
 80030a4:	0412      	lsls	r2, r2, #16
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80030ac:	4313      	orrs	r3, r2
 80030ae:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80030b0:	3a01      	subs	r2, #1
 80030b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b6:	4313      	orrs	r3, r2
 80030b8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80030ba:	3a01      	subs	r2, #1
 80030bc:	0612      	lsls	r2, r2, #24
 80030be:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80030c2:	4313      	orrs	r3, r2
 80030c4:	632b      	str	r3, [r5, #48]	@ 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80030c6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030ce:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80030d0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80030d2:	4011      	ands	r1, r2
 80030d4:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80030d8:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80030da:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80030dc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80030de:	f023 030c 	bic.w	r3, r3, #12
 80030e2:	4313      	orrs	r3, r2
 80030e4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030e6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80030e8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80030ea:	f023 0302 	bic.w	r3, r3, #2
 80030ee:	4313      	orrs	r3, r2
 80030f0:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030f2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f8:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030fa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80030fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003100:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003102:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003108:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800310a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003112:	682b      	ldr	r3, [r5, #0]
 8003114:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003118:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800311a:	f7fe fba9 	bl	8001870 <HAL_GetTick>
 800311e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003120:	e005      	b.n	800312e <HAL_RCC_OscConfig+0x442>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003122:	f7fe fba5 	bl	8001870 <HAL_GetTick>
 8003126:	1b00      	subs	r0, r0, r4
 8003128:	2802      	cmp	r0, #2
 800312a:	f63f af3e 	bhi.w	8002faa <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800312e:	6833      	ldr	r3, [r6, #0]
 8003130:	019a      	lsls	r2, r3, #6
 8003132:	d5f6      	bpl.n	8003122 <HAL_RCC_OscConfig+0x436>
 8003134:	e690      	b.n	8002e58 <HAL_RCC_OscConfig+0x16c>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003136:	2a01      	cmp	r2, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003138:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800313a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313c:	f43f aedf 	beq.w	8002efe <HAL_RCC_OscConfig+0x212>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003140:	f001 0203 	and.w	r2, r1, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003144:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003146:	4282      	cmp	r2, r0
 8003148:	f47f aed9 	bne.w	8002efe <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800314c:	f3c1 1105 	ubfx	r1, r1, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003150:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003152:	4291      	cmp	r1, r2
 8003154:	f47f aed3 	bne.w	8002efe <HAL_RCC_OscConfig+0x212>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003158:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800315a:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800315e:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003160:	4291      	cmp	r1, r2
 8003162:	f47f aecc 	bne.w	8002efe <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003166:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003168:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800316c:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800316e:	4291      	cmp	r1, r2
 8003170:	f47f aec5 	bne.w	8002efe <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003174:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003176:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800317a:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800317c:	4291      	cmp	r1, r2
 800317e:	f47f aebe 	bne.w	8002efe <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003182:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003184:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003188:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800318a:	1a98      	subs	r0, r3, r2
 800318c:	bf18      	it	ne
 800318e:	2001      	movne	r0, #1
}
 8003190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003192:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800319e:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a0:	e5cc      	b.n	8002d3c <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a2:	4d14      	ldr	r5, [pc, #80]	@ (80031f4 <HAL_RCC_OscConfig+0x508>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	672b      	str	r3, [r5, #112]	@ 0x70
 80031b0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80031b2:	f023 0304 	bic.w	r3, r3, #4
 80031b6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80031b8:	f7fe fb5a 	bl	8001870 <HAL_GetTick>
 80031bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031be:	e005      	b.n	80031cc <HAL_RCC_OscConfig+0x4e0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7fe fb56 	bl	8001870 <HAL_GetTick>
 80031c4:	1b80      	subs	r0, r0, r6
 80031c6:	42b8      	cmp	r0, r7
 80031c8:	f63f aeef 	bhi.w	8002faa <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031cc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80031ce:	0798      	lsls	r0, r3, #30
 80031d0:	d4f6      	bmi.n	80031c0 <HAL_RCC_OscConfig+0x4d4>
 80031d2:	e624      	b.n	8002e1e <HAL_RCC_OscConfig+0x132>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d4:	4a07      	ldr	r2, [pc, #28]	@ (80031f4 <HAL_RCC_OscConfig+0x508>)
 80031d6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6713      	str	r3, [r2, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031de:	e6d4      	b.n	8002f8a <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e0:	f042 0204 	orr.w	r2, r2, #4
 80031e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80031e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ee:	e6cc      	b.n	8002f8a <HAL_RCC_OscConfig+0x29e>
    return HAL_ERROR;
 80031f0:	2001      	movs	r0, #1
}
 80031f2:	4770      	bx	lr
 80031f4:	58024400 	.word	0x58024400
 80031f8:	fffffc0c 	.word	0xfffffc0c
 80031fc:	ffff0007 	.word	0xffff0007

08003200 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003200:	4a0c      	ldr	r2, [pc, #48]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x34>)
 8003202:	6913      	ldr	r3, [r2, #16]
 8003204:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003208:	2b10      	cmp	r3, #16
 800320a:	d004      	beq.n	8003216 <HAL_RCC_GetSysClockFreq+0x16>
 800320c:	2b18      	cmp	r3, #24
 800320e:	d00d      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x2c>
 8003210:	b11b      	cbz	r3, 800321a <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8003212:	4809      	ldr	r0, [pc, #36]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x38>)
 8003214:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003216:	4809      	ldr	r0, [pc, #36]	@ (800323c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003218:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800321a:	6813      	ldr	r3, [r2, #0]
 800321c:	069b      	lsls	r3, r3, #26
 800321e:	d507      	bpl.n	8003230 <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003220:	6813      	ldr	r3, [r2, #0]
 8003222:	4807      	ldr	r0, [pc, #28]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x40>)
 8003224:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003228:	40d8      	lsrs	r0, r3
 800322a:	4770      	bx	lr
 800322c:	f7ff bcec 	b.w	8002c08 <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003230:	4803      	ldr	r0, [pc, #12]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003232:	4770      	bx	lr
 8003234:	58024400 	.word	0x58024400
 8003238:	003d0900 	.word	0x003d0900
 800323c:	007a1200 	.word	0x007a1200
 8003240:	03d09000 	.word	0x03d09000

08003244 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003244:	2800      	cmp	r0, #0
 8003246:	f000 810e 	beq.w	8003466 <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800324a:	4a8d      	ldr	r2, [pc, #564]	@ (8003480 <HAL_RCC_ClockConfig+0x23c>)
 800324c:	6813      	ldr	r3, [r2, #0]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	428b      	cmp	r3, r1
{
 8003254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003258:	4604      	mov	r4, r0
 800325a:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	d20c      	bcs.n	8003278 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	6813      	ldr	r3, [r2, #0]
 8003260:	f023 030f 	bic.w	r3, r3, #15
 8003264:	430b      	orrs	r3, r1
 8003266:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003268:	6813      	ldr	r3, [r2, #0]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	428b      	cmp	r3, r1
 8003270:	d002      	beq.n	8003278 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003272:	2001      	movs	r0, #1
}
 8003274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	0758      	lsls	r0, r3, #29
 800327c:	d50b      	bpl.n	8003296 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800327e:	4981      	ldr	r1, [pc, #516]	@ (8003484 <HAL_RCC_ClockConfig+0x240>)
 8003280:	6920      	ldr	r0, [r4, #16]
 8003282:	698a      	ldr	r2, [r1, #24]
 8003284:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003288:	4290      	cmp	r0, r2
 800328a:	d904      	bls.n	8003296 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800328c:	698a      	ldr	r2, [r1, #24]
 800328e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003292:	4302      	orrs	r2, r0
 8003294:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003296:	0719      	lsls	r1, r3, #28
 8003298:	d50b      	bpl.n	80032b2 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800329a:	497a      	ldr	r1, [pc, #488]	@ (8003484 <HAL_RCC_ClockConfig+0x240>)
 800329c:	6960      	ldr	r0, [r4, #20]
 800329e:	69ca      	ldr	r2, [r1, #28]
 80032a0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80032a4:	4290      	cmp	r0, r2
 80032a6:	d904      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032a8:	69ca      	ldr	r2, [r1, #28]
 80032aa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80032ae:	4302      	orrs	r2, r0
 80032b0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b2:	06da      	lsls	r2, r3, #27
 80032b4:	d50b      	bpl.n	80032ce <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032b6:	4973      	ldr	r1, [pc, #460]	@ (8003484 <HAL_RCC_ClockConfig+0x240>)
 80032b8:	69a0      	ldr	r0, [r4, #24]
 80032ba:	69ca      	ldr	r2, [r1, #28]
 80032bc:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80032c0:	4290      	cmp	r0, r2
 80032c2:	d904      	bls.n	80032ce <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032c4:	69ca      	ldr	r2, [r1, #28]
 80032c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032ca:	4302      	orrs	r2, r0
 80032cc:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032ce:	069f      	lsls	r7, r3, #26
 80032d0:	d50b      	bpl.n	80032ea <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032d2:	496c      	ldr	r1, [pc, #432]	@ (8003484 <HAL_RCC_ClockConfig+0x240>)
 80032d4:	69e0      	ldr	r0, [r4, #28]
 80032d6:	6a0a      	ldr	r2, [r1, #32]
 80032d8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80032dc:	4290      	cmp	r0, r2
 80032de:	d904      	bls.n	80032ea <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032e0:	6a0a      	ldr	r2, [r1, #32]
 80032e2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80032e6:	4302      	orrs	r2, r0
 80032e8:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ea:	079e      	lsls	r6, r3, #30
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ec:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f0:	f140 80ab 	bpl.w	800344a <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032f4:	4e63      	ldr	r6, [pc, #396]	@ (8003484 <HAL_RCC_ClockConfig+0x240>)
 80032f6:	68e0      	ldr	r0, [r4, #12]
 80032f8:	69b1      	ldr	r1, [r6, #24]
 80032fa:	f001 010f 	and.w	r1, r1, #15
 80032fe:	4288      	cmp	r0, r1
 8003300:	d904      	bls.n	800330c <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003302:	69b1      	ldr	r1, [r6, #24]
 8003304:	f021 010f 	bic.w	r1, r1, #15
 8003308:	4301      	orrs	r1, r0
 800330a:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330c:	2a00      	cmp	r2, #0
 800330e:	d030      	beq.n	8003372 <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003310:	4a5c      	ldr	r2, [pc, #368]	@ (8003484 <HAL_RCC_ClockConfig+0x240>)
 8003312:	68a1      	ldr	r1, [r4, #8]
 8003314:	6993      	ldr	r3, [r2, #24]
 8003316:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800331a:	430b      	orrs	r3, r1
 800331c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003320:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003322:	2902      	cmp	r1, #2
 8003324:	f000 80a1 	beq.w	800346a <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003328:	2903      	cmp	r1, #3
 800332a:	f000 8098 	beq.w	800345e <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800332e:	2901      	cmp	r1, #1
 8003330:	f000 80a1 	beq.w	8003476 <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003334:	075f      	lsls	r7, r3, #29
 8003336:	d59c      	bpl.n	8003272 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003338:	4e52      	ldr	r6, [pc, #328]	@ (8003484 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333a:	f241 3888 	movw	r8, #5000	@ 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800333e:	6933      	ldr	r3, [r6, #16]
 8003340:	f023 0307 	bic.w	r3, r3, #7
 8003344:	430b      	orrs	r3, r1
 8003346:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8003348:	f7fe fa92 	bl	8001870 <HAL_GetTick>
 800334c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	e005      	b.n	800335c <HAL_RCC_ClockConfig+0x118>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003350:	f7fe fa8e 	bl	8001870 <HAL_GetTick>
 8003354:	1bc0      	subs	r0, r0, r7
 8003356:	4540      	cmp	r0, r8
 8003358:	f200 808b 	bhi.w	8003472 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335c:	6933      	ldr	r3, [r6, #16]
 800335e:	6862      	ldr	r2, [r4, #4]
 8003360:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003364:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003368:	d1f2      	bne.n	8003350 <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	079e      	lsls	r6, r3, #30
 800336e:	d506      	bpl.n	800337e <HAL_RCC_ClockConfig+0x13a>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003370:	68e0      	ldr	r0, [r4, #12]
 8003372:	4944      	ldr	r1, [pc, #272]	@ (8003484 <HAL_RCC_ClockConfig+0x240>)
 8003374:	698a      	ldr	r2, [r1, #24]
 8003376:	f002 020f 	and.w	r2, r2, #15
 800337a:	4282      	cmp	r2, r0
 800337c:	d869      	bhi.n	8003452 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800337e:	4940      	ldr	r1, [pc, #256]	@ (8003480 <HAL_RCC_ClockConfig+0x23c>)
 8003380:	680a      	ldr	r2, [r1, #0]
 8003382:	f002 020f 	and.w	r2, r2, #15
 8003386:	42aa      	cmp	r2, r5
 8003388:	d90a      	bls.n	80033a0 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	680a      	ldr	r2, [r1, #0]
 800338c:	f022 020f 	bic.w	r2, r2, #15
 8003390:	432a      	orrs	r2, r5
 8003392:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003394:	680a      	ldr	r2, [r1, #0]
 8003396:	f002 020f 	and.w	r2, r2, #15
 800339a:	42aa      	cmp	r2, r5
 800339c:	f47f af69 	bne.w	8003272 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033a0:	0758      	lsls	r0, r3, #29
 80033a2:	d50b      	bpl.n	80033bc <HAL_RCC_ClockConfig+0x178>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033a4:	4937      	ldr	r1, [pc, #220]	@ (8003484 <HAL_RCC_ClockConfig+0x240>)
 80033a6:	6920      	ldr	r0, [r4, #16]
 80033a8:	698a      	ldr	r2, [r1, #24]
 80033aa:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80033ae:	4290      	cmp	r0, r2
 80033b0:	d204      	bcs.n	80033bc <HAL_RCC_ClockConfig+0x178>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033b2:	698a      	ldr	r2, [r1, #24]
 80033b4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80033b8:	4302      	orrs	r2, r0
 80033ba:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	0719      	lsls	r1, r3, #28
 80033be:	d50b      	bpl.n	80033d8 <HAL_RCC_ClockConfig+0x194>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033c0:	4930      	ldr	r1, [pc, #192]	@ (8003484 <HAL_RCC_ClockConfig+0x240>)
 80033c2:	6960      	ldr	r0, [r4, #20]
 80033c4:	69ca      	ldr	r2, [r1, #28]
 80033c6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80033ca:	4290      	cmp	r0, r2
 80033cc:	d204      	bcs.n	80033d8 <HAL_RCC_ClockConfig+0x194>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033ce:	69ca      	ldr	r2, [r1, #28]
 80033d0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80033d4:	4302      	orrs	r2, r0
 80033d6:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d8:	06da      	lsls	r2, r3, #27
 80033da:	d50b      	bpl.n	80033f4 <HAL_RCC_ClockConfig+0x1b0>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033dc:	4929      	ldr	r1, [pc, #164]	@ (8003484 <HAL_RCC_ClockConfig+0x240>)
 80033de:	69a0      	ldr	r0, [r4, #24]
 80033e0:	69ca      	ldr	r2, [r1, #28]
 80033e2:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80033e6:	4290      	cmp	r0, r2
 80033e8:	d204      	bcs.n	80033f4 <HAL_RCC_ClockConfig+0x1b0>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033ea:	69ca      	ldr	r2, [r1, #28]
 80033ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033f0:	4302      	orrs	r2, r0
 80033f2:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033f4:	069b      	lsls	r3, r3, #26
 80033f6:	d50b      	bpl.n	8003410 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033f8:	4a22      	ldr	r2, [pc, #136]	@ (8003484 <HAL_RCC_ClockConfig+0x240>)
 80033fa:	69e1      	ldr	r1, [r4, #28]
 80033fc:	6a13      	ldr	r3, [r2, #32]
 80033fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003402:	4299      	cmp	r1, r3
 8003404:	d204      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003406:	6a13      	ldr	r3, [r2, #32]
 8003408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800340c:	430b      	orrs	r3, r1
 800340e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003410:	f7ff fef6 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 8003414:	4a1b      	ldr	r2, [pc, #108]	@ (8003484 <HAL_RCC_ClockConfig+0x240>)
 8003416:	4603      	mov	r3, r0
 8003418:	481b      	ldr	r0, [pc, #108]	@ (8003488 <HAL_RCC_ClockConfig+0x244>)
 800341a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800341c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800341e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8003422:	4d1a      	ldr	r5, [pc, #104]	@ (800348c <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003424:	f002 020f 	and.w	r2, r2, #15
 8003428:	4c19      	ldr	r4, [pc, #100]	@ (8003490 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800342a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800342c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800342e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8003432:	4818      	ldr	r0, [pc, #96]	@ (8003494 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003434:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003438:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 800343a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800343c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800343e:	40d3      	lsrs	r3, r2
 8003440:	6023      	str	r3, [r4, #0]
}
 8003442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8003446:	f7fd be15 	b.w	8001074 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	2a00      	cmp	r2, #0
 800344c:	f47f af60 	bne.w	8003310 <HAL_RCC_ClockConfig+0xcc>
 8003450:	e795      	b.n	800337e <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003452:	698a      	ldr	r2, [r1, #24]
 8003454:	f022 020f 	bic.w	r2, r2, #15
 8003458:	4302      	orrs	r2, r0
 800345a:	618a      	str	r2, [r1, #24]
 800345c:	e78f      	b.n	800337e <HAL_RCC_ClockConfig+0x13a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800345e:	019a      	lsls	r2, r3, #6
 8003460:	f53f af6a 	bmi.w	8003338 <HAL_RCC_ClockConfig+0xf4>
 8003464:	e705      	b.n	8003272 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003466:	2001      	movs	r0, #1
}
 8003468:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800346a:	0398      	lsls	r0, r3, #14
 800346c:	f53f af64 	bmi.w	8003338 <HAL_RCC_ClockConfig+0xf4>
 8003470:	e6ff      	b.n	8003272 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8003472:	2003      	movs	r0, #3
 8003474:	e6fe      	b.n	8003274 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003476:	05db      	lsls	r3, r3, #23
 8003478:	f53f af5e 	bmi.w	8003338 <HAL_RCC_ClockConfig+0xf4>
 800347c:	e6f9      	b.n	8003272 <HAL_RCC_ClockConfig+0x2e>
 800347e:	bf00      	nop
 8003480:	52002000 	.word	0x52002000
 8003484:	58024400 	.word	0x58024400
 8003488:	080118a8 	.word	0x080118a8
 800348c:	24000004 	.word	0x24000004
 8003490:	24000000 	.word	0x24000000
 8003494:	2400000c 	.word	0x2400000c

08003498 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003498:	4a18      	ldr	r2, [pc, #96]	@ (80034fc <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800349a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800349c:	6913      	ldr	r3, [r2, #16]
 800349e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034a2:	2b10      	cmp	r3, #16
 80034a4:	d019      	beq.n	80034da <HAL_RCC_GetHCLKFreq+0x42>
 80034a6:	2b18      	cmp	r3, #24
 80034a8:	d022      	beq.n	80034f0 <HAL_RCC_GetHCLKFreq+0x58>
 80034aa:	b1c3      	cbz	r3, 80034de <HAL_RCC_GetHCLKFreq+0x46>
    sysclockfreq = CSI_VALUE;
 80034ac:	4b14      	ldr	r3, [pc, #80]	@ (8003500 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034ae:	4913      	ldr	r1, [pc, #76]	@ (80034fc <HAL_RCC_GetHCLKFreq+0x64>)
 80034b0:	4814      	ldr	r0, [pc, #80]	@ (8003504 <HAL_RCC_GetHCLKFreq+0x6c>)
 80034b2:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034b4:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034b6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ba:	4c13      	ldr	r4, [pc, #76]	@ (8003508 <HAL_RCC_GetHCLKFreq+0x70>)
 80034bc:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034c0:	4d12      	ldr	r5, [pc, #72]	@ (800350c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034c2:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034c4:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034c6:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ca:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034ce:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034d0:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 80034d4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034d6:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80034d8:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034da:	4b0d      	ldr	r3, [pc, #52]	@ (8003510 <HAL_RCC_GetHCLKFreq+0x78>)
 80034dc:	e7e7      	b.n	80034ae <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034de:	6813      	ldr	r3, [r2, #0]
 80034e0:	069b      	lsls	r3, r3, #26
 80034e2:	d509      	bpl.n	80034f8 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <HAL_RCC_GetHCLKFreq+0x7c>)
 80034e8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80034ec:	40d3      	lsrs	r3, r2
 80034ee:	e7de      	b.n	80034ae <HAL_RCC_GetHCLKFreq+0x16>
 80034f0:	f7ff fb8a 	bl	8002c08 <HAL_RCC_GetSysClockFreq.part.0>
 80034f4:	4603      	mov	r3, r0
 80034f6:	e7da      	b.n	80034ae <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034f8:	4b06      	ldr	r3, [pc, #24]	@ (8003514 <HAL_RCC_GetHCLKFreq+0x7c>)
 80034fa:	e7d8      	b.n	80034ae <HAL_RCC_GetHCLKFreq+0x16>
 80034fc:	58024400 	.word	0x58024400
 8003500:	003d0900 	.word	0x003d0900
 8003504:	080118a8 	.word	0x080118a8
 8003508:	24000000 	.word	0x24000000
 800350c:	24000004 	.word	0x24000004
 8003510:	007a1200 	.word	0x007a1200
 8003514:	03d09000 	.word	0x03d09000

08003518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003518:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800351a:	f7ff ffbd 	bl	8003498 <HAL_RCC_GetHCLKFreq>
 800351e:	4b05      	ldr	r3, [pc, #20]	@ (8003534 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003520:	4a05      	ldr	r2, [pc, #20]	@ (8003538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003528:	5cd3      	ldrb	r3, [r2, r3]
 800352a:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800352e:	40d8      	lsrs	r0, r3
 8003530:	bd08      	pop	{r3, pc}
 8003532:	bf00      	nop
 8003534:	58024400 	.word	0x58024400
 8003538:	080118a8 	.word	0x080118a8

0800353c <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800353c:	4b13      	ldr	r3, [pc, #76]	@ (800358c <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800353e:	223f      	movs	r2, #63	@ 0x3f
 8003540:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	f002 0207 	and.w	r2, r2, #7
 8003548:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800354a:	699a      	ldr	r2, [r3, #24]
 800354c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8003550:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003552:	699a      	ldr	r2, [r3, #24]
 8003554:	f002 020f 	and.w	r2, r2, #15
 8003558:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800355a:	699a      	ldr	r2, [r3, #24]
 800355c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003560:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003568:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003570:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003572:	6a1b      	ldr	r3, [r3, #32]
{
 8003574:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003576:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800357a:	4c05      	ldr	r4, [pc, #20]	@ (8003590 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800357c:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800357e:	6823      	ldr	r3, [r4, #0]
}
 8003580:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	600b      	str	r3, [r1, #0]
}
 800358a:	4770      	bx	lr
 800358c:	58024400 	.word	0x58024400
 8003590:	52002000 	.word	0x52002000

08003594 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop

08003598 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003598:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800359c:	2b01      	cmp	r3, #1
 800359e:	d149      	bne.n	8003634 <HAL_TIM_Base_Start_IT+0x9c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035a0:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80035a2:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a4:	4b24      	ldr	r3, [pc, #144]	@ (8003638 <HAL_TIM_Base_Start_IT+0xa0>)
 80035a6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80035aa:	bf18      	it	ne
 80035ac:	429a      	cmpne	r2, r3
{
 80035ae:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	4d21      	ldr	r5, [pc, #132]	@ (800363c <HAL_TIM_Base_Start_IT+0xa4>)
 80035b8:	4c21      	ldr	r4, [pc, #132]	@ (8003640 <HAL_TIM_Base_Start_IT+0xa8>)
 80035ba:	42aa      	cmp	r2, r5
 80035bc:	bf08      	it	eq
 80035be:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80035c2:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c6:	481f      	ldr	r0, [pc, #124]	@ (8003644 <HAL_TIM_Base_Start_IT+0xac>)
 80035c8:	42a2      	cmp	r2, r4
 80035ca:	bf08      	it	eq
 80035cc:	f043 0301 	orreq.w	r3, r3, #1
 80035d0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035d4:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d6:	42a2      	cmp	r2, r4
 80035d8:	bf08      	it	eq
 80035da:	f043 0301 	orreq.w	r3, r3, #1
 80035de:	f504 6440 	add.w	r4, r4, #3072	@ 0xc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035e2:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e6:	4282      	cmp	r2, r0
 80035e8:	bf08      	it	eq
 80035ea:	f043 0301 	orreq.w	r3, r3, #1
 80035ee:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035f2:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f4:	42a2      	cmp	r2, r4
 80035f6:	bf08      	it	eq
 80035f8:	f043 0301 	orreq.w	r3, r3, #1
 80035fc:	4912      	ldr	r1, [pc, #72]	@ (8003648 <HAL_TIM_Base_Start_IT+0xb0>)
 80035fe:	4282      	cmp	r2, r0
 8003600:	bf08      	it	eq
 8003602:	f043 0301 	orreq.w	r3, r3, #1
 8003606:	428a      	cmp	r2, r1
 8003608:	bf08      	it	eq
 800360a:	f043 0301 	orreq.w	r3, r3, #1
 800360e:	b913      	cbnz	r3, 8003616 <HAL_TIM_Base_Start_IT+0x7e>
 8003610:	4b0e      	ldr	r3, [pc, #56]	@ (800364c <HAL_TIM_Base_Start_IT+0xb4>)
 8003612:	429a      	cmp	r2, r3
 8003614:	d107      	bne.n	8003626 <HAL_TIM_Base_Start_IT+0x8e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003616:	6891      	ldr	r1, [r2, #8]
 8003618:	4b0d      	ldr	r3, [pc, #52]	@ (8003650 <HAL_TIM_Base_Start_IT+0xb8>)
 800361a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361c:	2b06      	cmp	r3, #6
 800361e:	d006      	beq.n	800362e <HAL_TIM_Base_Start_IT+0x96>
 8003620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003624:	d003      	beq.n	800362e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003626:	6813      	ldr	r3, [r2, #0]
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800362e:	2000      	movs	r0, #0
}
 8003630:	bc30      	pop	{r4, r5}
 8003632:	4770      	bx	lr
    return HAL_ERROR;
 8003634:	2001      	movs	r0, #1
}
 8003636:	4770      	bx	lr
 8003638:	40010000 	.word	0x40010000
 800363c:	40000400 	.word	0x40000400
 8003640:	40000800 	.word	0x40000800
 8003644:	40010400 	.word	0x40010400
 8003648:	4000e000 	.word	0x4000e000
 800364c:	4000e400 	.word	0x4000e400
 8003650:	00010007 	.word	0x00010007

08003654 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop

08003658 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop

0800365c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop

08003660 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop

08003664 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003664:	6803      	ldr	r3, [r0, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	0791      	lsls	r1, r2, #30
{
 800366a:	b510      	push	{r4, lr}
 800366c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800366e:	d502      	bpl.n	8003676 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	0792      	lsls	r2, r2, #30
 8003674:	d468      	bmi.n	8003748 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	0752      	lsls	r2, r2, #29
 800367a:	d502      	bpl.n	8003682 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	0750      	lsls	r0, r2, #29
 8003680:	d44f      	bmi.n	8003722 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	0711      	lsls	r1, r2, #28
 8003686:	d502      	bpl.n	800368e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	0712      	lsls	r2, r2, #28
 800368c:	d437      	bmi.n	80036fe <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	06d0      	lsls	r0, r2, #27
 8003692:	d502      	bpl.n	800369a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	06d1      	lsls	r1, r2, #27
 8003698:	d41e      	bmi.n	80036d8 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	07d2      	lsls	r2, r2, #31
 800369e:	d502      	bpl.n	80036a6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	07d0      	lsls	r0, r2, #31
 80036a4:	d469      	bmi.n	800377a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	0611      	lsls	r1, r2, #24
 80036aa:	d502      	bpl.n	80036b2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	0612      	lsls	r2, r2, #24
 80036b0:	d46b      	bmi.n	800378a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	05d0      	lsls	r0, r2, #23
 80036b6:	d502      	bpl.n	80036be <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	0611      	lsls	r1, r2, #24
 80036bc:	d46d      	bmi.n	800379a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	0652      	lsls	r2, r2, #25
 80036c2:	d502      	bpl.n	80036ca <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	0650      	lsls	r0, r2, #25
 80036c8:	d46f      	bmi.n	80037aa <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	0691      	lsls	r1, r2, #26
 80036ce:	d502      	bpl.n	80036d6 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	0692      	lsls	r2, r2, #26
 80036d4:	d449      	bmi.n	800376a <HAL_TIM_IRQHandler+0x106>
}
 80036d6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036d8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036dc:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80036de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036e0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036e2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80036ea:	d16f      	bne.n	80037cc <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ec:	f7ff ffb2 	bl	8003654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	4620      	mov	r0, r4
 80036f2:	f7ff ffb3 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036f8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	7722      	strb	r2, [r4, #28]
 80036fc:	e7cd      	b.n	800369a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036fe:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003702:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8003704:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003706:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003708:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	079b      	lsls	r3, r3, #30
 800370e:	d15a      	bne.n	80037c6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003710:	f7ff ffa0 	bl	8003654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003714:	4620      	mov	r0, r4
 8003716:	f7ff ffa1 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800371c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	7722      	strb	r2, [r4, #28]
 8003720:	e7b5      	b.n	800368e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003722:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003726:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003728:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800372a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800372c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003734:	d144      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	f7ff ff8d 	bl	8003654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373a:	4620      	mov	r0, r4
 800373c:	f7ff ff8e 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003740:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003742:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003744:	7722      	strb	r2, [r4, #28]
 8003746:	e79c      	b.n	8003682 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003748:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800374c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800374e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003750:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	0799      	lsls	r1, r3, #30
 8003756:	d130      	bne.n	80037ba <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003758:	f7ff ff7c 	bl	8003654 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	4620      	mov	r0, r4
 800375e:	f7ff ff7d 	bl	800365c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003764:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003766:	7722      	strb	r2, [r4, #28]
 8003768:	e785      	b.n	8003676 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800376a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800376e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003770:	611a      	str	r2, [r3, #16]
}
 8003772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003776:	f000 b8d7 	b.w	8003928 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800377a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800377e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003780:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003782:	f7fd fc51 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	e78d      	b.n	80036a6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800378a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 800378e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003790:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003792:	f000 f8cb 	bl	800392c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	e78b      	b.n	80036b2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800379a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800379e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80037a2:	f000 f8c5 	bl	8003930 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	e789      	b.n	80036be <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 80037ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80037b2:	f7ff ff55 	bl	8003660 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	e787      	b.n	80036ca <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	f7ff ff4d 	bl	8003658 <HAL_TIM_IC_CaptureCallback>
 80037be:	e7d0      	b.n	8003762 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80037c0:	f7ff ff4a 	bl	8003658 <HAL_TIM_IC_CaptureCallback>
 80037c4:	e7bc      	b.n	8003740 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	f7ff ff47 	bl	8003658 <HAL_TIM_IC_CaptureCallback>
 80037ca:	e7a6      	b.n	800371a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80037cc:	f7ff ff44 	bl	8003658 <HAL_TIM_IC_CaptureCallback>
 80037d0:	e791      	b.n	80036f6 <HAL_TIM_IRQHandler+0x92>
 80037d2:	bf00      	nop

080037d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d6:	4a35      	ldr	r2, [pc, #212]	@ (80038ac <TIM_Base_SetConfig+0xd8>)
 80037d8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80037dc:	4c34      	ldr	r4, [pc, #208]	@ (80038b0 <TIM_Base_SetConfig+0xdc>)
 80037de:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = TIMx->CR1;
 80037e2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e4:	eba0 0e04 	sub.w	lr, r0, r4
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e8:	694f      	ldr	r7, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ea:	fab2 f282 	clz	r2, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037ee:	680d      	ldr	r5, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f0:	fabe fe8e 	clz	lr, lr
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f4:	688e      	ldr	r6, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80037fa:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80037fe:	d028      	beq.n	8003852 <TIM_Base_SetConfig+0x7e>
 8003800:	bb3a      	cbnz	r2, 8003852 <TIM_Base_SetConfig+0x7e>
 8003802:	f8df c0bc 	ldr.w	ip, [pc, #188]	@ 80038c0 <TIM_Base_SetConfig+0xec>
 8003806:	4560      	cmp	r0, ip
 8003808:	d023      	beq.n	8003852 <TIM_Base_SetConfig+0x7e>
 800380a:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800380e:	4560      	cmp	r0, ip
 8003810:	d01f      	beq.n	8003852 <TIM_Base_SetConfig+0x7e>
 8003812:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8003816:	4560      	cmp	r0, ip
 8003818:	d01b      	beq.n	8003852 <TIM_Base_SetConfig+0x7e>
 800381a:	f1be 0f00 	cmp.w	lr, #0
 800381e:	d118      	bne.n	8003852 <TIM_Base_SetConfig+0x7e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003820:	4a24      	ldr	r2, [pc, #144]	@ (80038b4 <TIM_Base_SetConfig+0xe0>)
 8003822:	4290      	cmp	r0, r2
 8003824:	d036      	beq.n	8003894 <TIM_Base_SetConfig+0xc0>
 8003826:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800382a:	4290      	cmp	r0, r2
 800382c:	d032      	beq.n	8003894 <TIM_Base_SetConfig+0xc0>
 800382e:	4c22      	ldr	r4, [pc, #136]	@ (80038b8 <TIM_Base_SetConfig+0xe4>)
 8003830:	f5a2 42c8 	sub.w	r2, r2, #25600	@ 0x6400
 8003834:	4290      	cmp	r0, r2
 8003836:	bf18      	it	ne
 8003838:	42a0      	cmpne	r0, r4
 800383a:	d02b      	beq.n	8003894 <TIM_Base_SetConfig+0xc0>
 800383c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003840:	4290      	cmp	r0, r2
 8003842:	d027      	beq.n	8003894 <TIM_Base_SetConfig+0xc0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003848:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 800384a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800384c:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800384e:	6285      	str	r5, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003850:	e01d      	b.n	800388e <TIM_Base_SetConfig+0xba>
    tmpcr1 |= Structure->CounterMode;
 8003852:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003858:	4323      	orrs	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800385a:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800385c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003860:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003866:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8003868:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800386a:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800386c:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800386e:	b962      	cbnz	r2, 800388a <TIM_Base_SetConfig+0xb6>
 8003870:	f1be 0f00 	cmp.w	lr, #0
 8003874:	d109      	bne.n	800388a <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003876:	4a11      	ldr	r2, [pc, #68]	@ (80038bc <TIM_Base_SetConfig+0xe8>)
 8003878:	4b0e      	ldr	r3, [pc, #56]	@ (80038b4 <TIM_Base_SetConfig+0xe0>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800387a:	4298      	cmp	r0, r3
 800387c:	bf18      	it	ne
 800387e:	4290      	cmpne	r0, r2
 8003880:	d003      	beq.n	800388a <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003886:	4298      	cmp	r0, r3
 8003888:	d101      	bne.n	800388e <TIM_Base_SetConfig+0xba>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800388a:	690b      	ldr	r3, [r1, #16]
 800388c:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800388e:	2301      	movs	r3, #1
 8003890:	6143      	str	r3, [r0, #20]
}
 8003892:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003894:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800389a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800389c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038a0:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 80038a2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a4:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038a6:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a8:	e7e5      	b.n	8003876 <TIM_Base_SetConfig+0xa2>
 80038aa:	bf00      	nop
 80038ac:	40010000 	.word	0x40010000
 80038b0:	40010400 	.word	0x40010400
 80038b4:	40014000 	.word	0x40014000
 80038b8:	40014800 	.word	0x40014800
 80038bc:	40014400 	.word	0x40014400
 80038c0:	40000400 	.word	0x40000400

080038c4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80038c4:	b370      	cbz	r0, 8003924 <HAL_TIM_Base_Init+0x60>
{
 80038c6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80038c8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80038cc:	4604      	mov	r4, r0
 80038ce:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80038d2:	b313      	cbz	r3, 800391a <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80038d6:	2302      	movs	r3, #2
 80038d8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80038e0:	f7ff ff78 	bl	80037d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e4:	2301      	movs	r3, #1
  return HAL_OK;
 80038e6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e8:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ec:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80038f0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80038f4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80038f8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80038fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003904:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003908:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800390c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8003910:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003914:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8003918:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800391a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800391e:	f7ff fe39 	bl	8003594 <HAL_TIM_Base_MspInit>
 8003922:	e7d7      	b.n	80038d4 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8003924:	2001      	movs	r0, #1
}
 8003926:	4770      	bx	lr

08003928 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop

0800392c <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop

08003930 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop

08003934 <ethernet_link_status_updated>:
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
  if (netif_is_up(netif))
 8003934:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 8003938:	f012 0201 	ands.w	r2, r2, #1
 800393c:	d005      	beq.n	800394a <ethernet_link_status_updated+0x16>
  {
/* USER CODE BEGIN 5 */
	  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 800393e:	2201      	movs	r2, #1
 8003940:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003944:	4803      	ldr	r0, [pc, #12]	@ (8003954 <ethernet_link_status_updated+0x20>)
 8003946:	f7ff b937 	b.w	8002bb8 <HAL_GPIO_WritePin>
  }
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
//	  HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_RESET);
 800394a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800394e:	4801      	ldr	r0, [pc, #4]	@ (8003954 <ethernet_link_status_updated+0x20>)
 8003950:	f7ff b932 	b.w	8002bb8 <HAL_GPIO_WritePin>
 8003954:	58020400 	.word	0x58020400

08003958 <MX_LWIP_Init>:
{
 8003958:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[0] = 192;
 800395a:	4b26      	ldr	r3, [pc, #152]	@ (80039f4 <MX_LWIP_Init+0x9c>)
  GATEWAY_ADDRESS[0] = 0;
 800395c:	2400      	movs	r4, #0
  IP_ADDRESS[0] = 192;
 800395e:	4f26      	ldr	r7, [pc, #152]	@ (80039f8 <MX_LWIP_Init+0xa0>)
{
 8003960:	b085      	sub	sp, #20
  NETMASK_ADDRESS[0] = 255;
 8003962:	4e26      	ldr	r6, [pc, #152]	@ (80039fc <MX_LWIP_Init+0xa4>)
	tcpip_init(tcpip_init_done, arg);
 8003964:	4621      	mov	r1, r4
  GATEWAY_ADDRESS[0] = 0;
 8003966:	4d26      	ldr	r5, [pc, #152]	@ (8003a00 <MX_LWIP_Init+0xa8>)
	tcpip_init(tcpip_init_done, arg);
 8003968:	4620      	mov	r0, r4
  IP_ADDRESS[0] = 192;
 800396a:	603b      	str	r3, [r7, #0]
  NETMASK_ADDRESS[0] = 255;
 800396c:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
  GATEWAY_ADDRESS[0] = 0;
 8003970:	602c      	str	r4, [r5, #0]
  NETMASK_ADDRESS[0] = 255;
 8003972:	6033      	str	r3, [r6, #0]
	tcpip_init(tcpip_init_done, arg);
 8003974:	f004 fd2e 	bl	80083d4 <tcpip_init>
	LOCK_TCPIP_CORE();
 8003978:	f000 fb22 	bl	8003fc0 <sys_lock_tcpip_core>
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800397c:	9400      	str	r4, [sp, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800397e:	683b      	ldr	r3, [r7, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003980:	6830      	ldr	r0, [r6, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003982:	4920      	ldr	r1, [pc, #128]	@ (8003a04 <MX_LWIP_Init+0xac>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003984:	4a20      	ldr	r2, [pc, #128]	@ (8003a08 <MX_LWIP_Init+0xb0>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003986:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003988:	6010      	str	r0, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800398a:	4b20      	ldr	r3, [pc, #128]	@ (8003a0c <MX_LWIP_Init+0xb4>)
 800398c:	6828      	ldr	r0, [r5, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800398e:	4c20      	ldr	r4, [pc, #128]	@ (8003a10 <MX_LWIP_Init+0xb8>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003990:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003992:	4820      	ldr	r0, [pc, #128]	@ (8003a14 <MX_LWIP_Init+0xbc>)
 8003994:	9002      	str	r0, [sp, #8]
 8003996:	4820      	ldr	r0, [pc, #128]	@ (8003a18 <MX_LWIP_Init+0xc0>)
 8003998:	9001      	str	r0, [sp, #4]
 800399a:	4620      	mov	r0, r4
 800399c:	f005 f9f0 	bl	8008d80 <netif_add>
  netif_set_default(&gnetif);
 80039a0:	4620      	mov	r0, r4
 80039a2:	f005 fa9f 	bl	8008ee4 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 80039a6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
    netif_set_up(&gnetif);
 80039aa:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 80039ac:	075b      	lsls	r3, r3, #29
 80039ae:	d51d      	bpl.n	80039ec <MX_LWIP_Init+0x94>
    netif_set_up(&gnetif);
 80039b0:	f005 faa2 	bl	8008ef8 <netif_set_up>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80039b4:	4c19      	ldr	r4, [pc, #100]	@ (8003a1c <MX_LWIP_Init+0xc4>)
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80039b6:	491a      	ldr	r1, [pc, #104]	@ (8003a20 <MX_LWIP_Init+0xc8>)
 80039b8:	4815      	ldr	r0, [pc, #84]	@ (8003a10 <MX_LWIP_Init+0xb8>)
 80039ba:	f005 fb31 	bl	8009020 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80039be:	2220      	movs	r2, #32
 80039c0:	2100      	movs	r1, #0
 80039c2:	4620      	mov	r0, r4
 80039c4:	f00c fb69 	bl	801009a <memset>
  attributes.name = "EthLink";
 80039c8:	1f22      	subs	r2, r4, #4
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80039ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  attributes.name = "EthLink";
 80039ce:	4815      	ldr	r0, [pc, #84]	@ (8003a24 <MX_LWIP_Init+0xcc>)
  attributes.priority = osPriorityBelowNormal;
 80039d0:	2310      	movs	r3, #16
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80039d2:	6151      	str	r1, [r2, #20]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80039d4:	490e      	ldr	r1, [pc, #56]	@ (8003a10 <MX_LWIP_Init+0xb8>)
  attributes.name = "EthLink";
 80039d6:	f844 0c04 	str.w	r0, [r4, #-4]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80039da:	4813      	ldr	r0, [pc, #76]	@ (8003a28 <MX_LWIP_Init+0xd0>)
  attributes.priority = osPriorityBelowNormal;
 80039dc:	6193      	str	r3, [r2, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80039de:	f000 fbf3 	bl	80041c8 <osThreadNew>
}
 80039e2:	b005      	add	sp, #20
 80039e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  UNLOCK_TCPIP_CORE();
 80039e8:	f000 bb68 	b.w	80040bc <sys_unlock_tcpip_core>
    netif_set_down(&gnetif);
 80039ec:	f005 faa8 	bl	8008f40 <netif_set_down>
 80039f0:	e7e0      	b.n	80039b4 <MX_LWIP_Init+0x5c>
 80039f2:	bf00      	nop
 80039f4:	0a01a8c0 	.word	0x0a01a8c0
 80039f8:	2401033c 	.word	0x2401033c
 80039fc:	24010338 	.word	0x24010338
 8003a00:	24010334 	.word	0x24010334
 8003a04:	24010348 	.word	0x24010348
 8003a08:	24010344 	.word	0x24010344
 8003a0c:	24010340 	.word	0x24010340
 8003a10:	2401034c 	.word	0x2401034c
 8003a14:	08008341 	.word	0x08008341
 8003a18:	08003be5 	.word	0x08003be5
 8003a1c:	24010314 	.word	0x24010314
 8003a20:	08003935 	.word	0x08003935
 8003a24:	08011a14 	.word	0x08011a14
 8003a28:	08003fdd 	.word	0x08003fdd

08003a2c <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	4770      	bx	lr

08003a30 <low_level_output>:
{
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	b08c      	sub	sp, #48	@ 0x30
 8003a34:	460d      	mov	r5, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003a36:	2230      	movs	r2, #48	@ 0x30
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4668      	mov	r0, sp
 8003a3c:	f00c fb2d 	bl	801009a <memset>
  for(q = p; q != NULL; q = q->next)
 8003a40:	b1fd      	cbz	r5, 8003a82 <low_level_output+0x52>
 8003a42:	466b      	mov	r3, sp
 8003a44:	462a      	mov	r2, r5
  uint32_t i = 0U;
 8003a46:	2000      	movs	r0, #0
    Txbuffer[i].len = q->len;
 8003a48:	8954      	ldrh	r4, [r2, #10]
    Txbuffer[i].buffer = q->payload;
 8003a4a:	6851      	ldr	r1, [r2, #4]
    if(q->next == NULL)
 8003a4c:	6812      	ldr	r2, [r2, #0]
    Txbuffer[i].len = q->len;
 8003a4e:	e9c3 1400 	strd	r1, r4, [r3]
    if(i>0)
 8003a52:	b918      	cbnz	r0, 8003a5c <low_level_output+0x2c>
    if(i >= ETH_TX_DESC_CNT)
 8003a54:	330c      	adds	r3, #12
    if(q->next == NULL)
 8003a56:	b162      	cbz	r2, 8003a72 <low_level_output+0x42>
    i++;
 8003a58:	2001      	movs	r0, #1
 8003a5a:	e7f5      	b.n	8003a48 <low_level_output+0x18>
      Txbuffer[i-1].next = &Txbuffer[i];
 8003a5c:	f843 3c04 	str.w	r3, [r3, #-4]
    if(q->next == NULL)
 8003a60:	b13a      	cbz	r2, 8003a72 <low_level_output+0x42>
    i++;
 8003a62:	3001      	adds	r0, #1
    if(i >= ETH_TX_DESC_CNT)
 8003a64:	330c      	adds	r3, #12
 8003a66:	2804      	cmp	r0, #4
 8003a68:	d1ee      	bne.n	8003a48 <low_level_output+0x18>
      return ERR_IF;
 8003a6a:	f06f 000b 	mvn.w	r0, #11
}
 8003a6e:	b00c      	add	sp, #48	@ 0x30
 8003a70:	bd70      	pop	{r4, r5, r6, pc}
      Txbuffer[i].next = NULL;
 8003a72:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003a76:	aa0c      	add	r2, sp, #48	@ 0x30
 8003a78:	2300      	movs	r3, #0
 8003a7a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8003a7e:	f840 3c28 	str.w	r3, [r0, #-40]
  TxConfig.Length = p->tot_len;
 8003a82:	4c0e      	ldr	r4, [pc, #56]	@ (8003abc <low_level_output+0x8c>)
  pbuf_ref(p);
 8003a84:	4628      	mov	r0, r5
  TxConfig.Length = p->tot_len;
 8003a86:	892b      	ldrh	r3, [r5, #8]
  TxConfig.TxBuffer = Txbuffer;
 8003a88:	f8c4 d008 	str.w	sp, [r4, #8]
  TxConfig.Length = p->tot_len;
 8003a8c:	6063      	str	r3, [r4, #4]
  TxConfig.pData = p;
 8003a8e:	6365      	str	r5, [r4, #52]	@ 0x34
  pbuf_ref(p);
 8003a90:	f005 fd56 	bl	8009540 <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8003a94:	4621      	mov	r1, r4
 8003a96:	480a      	ldr	r0, [pc, #40]	@ (8003ac0 <low_level_output+0x90>)
 8003a98:	4e0a      	ldr	r6, [pc, #40]	@ (8003ac4 <low_level_output+0x94>)
 8003a9a:	f7fe fb23 	bl	80020e4 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8003a9e:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa2:	6830      	ldr	r0, [r6, #0]
 8003aa4:	f000 fcb8 	bl	8004418 <osSemaphoreAcquire>
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	d1f7      	bne.n	8003a9e <low_level_output+0x6e>
  HAL_ETH_ReleaseTxPacket(&heth);
 8003aae:	4804      	ldr	r0, [pc, #16]	@ (8003ac0 <low_level_output+0x90>)
 8003ab0:	f7fe fbd2 	bl	8002258 <HAL_ETH_ReleaseTxPacket>
  return errval;
 8003ab4:	4620      	mov	r0, r4
}
 8003ab6:	b00c      	add	sp, #48	@ 0x30
 8003ab8:	bd70      	pop	{r4, r5, r6, pc}
 8003aba:	bf00      	nop
 8003abc:	240103a8 	.word	0x240103a8
 8003ac0:	240103e0 	.word	0x240103e0
 8003ac4:	24010490 	.word	0x24010490

08003ac8 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8003ac8:	f7fd bed2 	b.w	8001870 <HAL_GetTick>

08003acc <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 8003acc:	4802      	ldr	r0, [pc, #8]	@ (8003ad8 <ETH_PHY_IO_Init+0xc>)
{
 8003ace:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8003ad0:	f7fe fdde 	bl	8002690 <HAL_ETH_SetMDIOClockRange>
}
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	bd08      	pop	{r3, pc}
 8003ad8:	240103e0 	.word	0x240103e0

08003adc <ETH_PHY_IO_ReadReg>:
{
 8003adc:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003ade:	4806      	ldr	r0, [pc, #24]	@ (8003af8 <ETH_PHY_IO_ReadReg+0x1c>)
{
 8003ae0:	b508      	push	{r3, lr}
 8003ae2:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003ae4:	460a      	mov	r2, r1
 8003ae6:	4661      	mov	r1, ip
 8003ae8:	f7fe fc9a 	bl	8002420 <HAL_ETH_ReadPHYRegister>
 8003aec:	3800      	subs	r0, #0
 8003aee:	bf18      	it	ne
 8003af0:	2001      	movne	r0, #1
}
 8003af2:	4240      	negs	r0, r0
 8003af4:	bd08      	pop	{r3, pc}
 8003af6:	bf00      	nop
 8003af8:	240103e0 	.word	0x240103e0

08003afc <ETH_PHY_IO_WriteReg>:
{
 8003afc:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003afe:	4806      	ldr	r0, [pc, #24]	@ (8003b18 <ETH_PHY_IO_WriteReg+0x1c>)
{
 8003b00:	b508      	push	{r3, lr}
 8003b02:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003b04:	460a      	mov	r2, r1
 8003b06:	4661      	mov	r1, ip
 8003b08:	f7fe fcb8 	bl	800247c <HAL_ETH_WritePHYRegister>
 8003b0c:	3800      	subs	r0, #0
 8003b0e:	bf18      	it	ne
 8003b10:	2001      	movne	r0, #1
}
 8003b12:	4240      	negs	r0, r0
 8003b14:	bd08      	pop	{r3, pc}
 8003b16:	bf00      	nop
 8003b18:	240103e0 	.word	0x240103e0

08003b1c <pbuf_free_custom>:
{
 8003b1c:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003b1e:	4808      	ldr	r0, [pc, #32]	@ (8003b40 <pbuf_free_custom+0x24>)
{
 8003b20:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003b22:	f005 f859 	bl	8008bd8 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003b26:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <pbuf_free_custom+0x28>)
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	2a01      	cmp	r2, #1
 8003b2c:	d000      	beq.n	8003b30 <pbuf_free_custom+0x14>
}
 8003b2e:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 8003b30:	4905      	ldr	r1, [pc, #20]	@ (8003b48 <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 8003b32:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 8003b34:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 8003b36:	701a      	strb	r2, [r3, #0]
}
 8003b38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8003b3c:	f000 bc9e 	b.w	800447c <osSemaphoreRelease>
 8003b40:	08011ad4 	.word	0x08011ad4
 8003b44:	24010498 	.word	0x24010498
 8003b48:	24010494 	.word	0x24010494

08003b4c <ethernetif_input>:
{
 8003b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b50:	4c14      	ldr	r4, [pc, #80]	@ (8003ba4 <ethernetif_input+0x58>)
 8003b52:	b083      	sub	sp, #12
 8003b54:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 8003ba8 <ethernetif_input+0x5c>
 8003b58:	4606      	mov	r6, r0
  struct pbuf *p = NULL;
 8003b5a:	2700      	movs	r7, #0
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003b5c:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8003bac <ethernetif_input+0x60>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003b60:	f04f 31ff 	mov.w	r1, #4294967295
 8003b64:	6820      	ldr	r0, [r4, #0]
 8003b66:	f000 fc57 	bl	8004418 <osSemaphoreAcquire>
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d1f8      	bne.n	8003b60 <ethernetif_input+0x14>
  if(RxAllocStatus == RX_ALLOC_OK)
 8003b6e:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8003b72:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f3      	bne.n	8003b60 <ethernetif_input+0x14>
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003b78:	a901      	add	r1, sp, #4
 8003b7a:	4648      	mov	r0, r9
 8003b7c:	f7fe fae2 	bl	8002144 <HAL_ETH_ReadData>
  return p;
 8003b80:	9d01      	ldr	r5, [sp, #4]
          if (netif->input( p, netif) != ERR_OK )
 8003b82:	4631      	mov	r1, r6
 8003b84:	4628      	mov	r0, r5
        if (p != NULL)
 8003b86:	2d00      	cmp	r5, #0
 8003b88:	d0ea      	beq.n	8003b60 <ethernetif_input+0x14>
          if (netif->input( p, netif) != ERR_OK )
 8003b8a:	6933      	ldr	r3, [r6, #16]
 8003b8c:	4798      	blx	r3
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d0ed      	beq.n	8003b6e <ethernetif_input+0x22>
            pbuf_free(p);
 8003b92:	4628      	mov	r0, r5
 8003b94:	f005 fb56 	bl	8009244 <pbuf_free>
  if(RxAllocStatus == RX_ALLOC_OK)
 8003b98:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8003b9c:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1de      	bne.n	8003b60 <ethernetif_input+0x14>
 8003ba2:	e7e9      	b.n	8003b78 <ethernetif_input+0x2c>
 8003ba4:	24010494 	.word	0x24010494
 8003ba8:	24010498 	.word	0x24010498
 8003bac:	240103e0 	.word	0x240103e0

08003bb0 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8003bb0:	4b01      	ldr	r3, [pc, #4]	@ (8003bb8 <HAL_ETH_RxCpltCallback+0x8>)
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	f000 bc62 	b.w	800447c <osSemaphoreRelease>
 8003bb8:	24010494 	.word	0x24010494

08003bbc <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8003bbc:	4b01      	ldr	r3, [pc, #4]	@ (8003bc4 <HAL_ETH_TxCpltCallback+0x8>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	f000 bc5c 	b.w	800447c <osSemaphoreRelease>
 8003bc4:	24010490 	.word	0x24010490

08003bc8 <HAL_ETH_ErrorCallback>:
{
 8003bc8:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8003bca:	f7fe febd 	bl	8002948 <HAL_ETH_GetDMAError>
 8003bce:	0603      	lsls	r3, r0, #24
 8003bd0:	d400      	bmi.n	8003bd4 <HAL_ETH_ErrorCallback+0xc>
}
 8003bd2:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8003bd4:	4b02      	ldr	r3, [pc, #8]	@ (8003be0 <HAL_ETH_ErrorCallback+0x18>)
 8003bd6:	6818      	ldr	r0, [r3, #0]
}
 8003bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8003bdc:	f000 bc4e 	b.w	800447c <osSemaphoreRelease>
 8003be0:	24010494 	.word	0x24010494

08003be4 <ethernetif_init>:
{
 8003be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003be8:	4604      	mov	r4, r0
{
 8003bea:	b0a5      	sub	sp, #148	@ 0x94
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003bec:	2800      	cmp	r0, #0
 8003bee:	f000 80b6 	beq.w	8003d5e <ethernetif_init+0x17a>
  netif->linkoutput = low_level_output;
 8003bf2:	4b5f      	ldr	r3, [pc, #380]	@ (8003d70 <ethernetif_init+0x18c>)
  netif->name[0] = IFNAME0;
 8003bf4:	f247 4173 	movw	r1, #29811	@ 0x7473
  netif->output = etharp_output;
 8003bf8:	4a5e      	ldr	r2, [pc, #376]	@ (8003d74 <ethernetif_init+0x190>)
  ETH_MACConfigTypeDef MACConf = {0};
 8003bfa:	a80b      	add	r0, sp, #44	@ 0x2c
  netif->name[0] = IFNAME0;
 8003bfc:	85e1      	strh	r1, [r4, #46]	@ 0x2e
  ETH_MACConfigTypeDef MACConf = {0};
 8003bfe:	2100      	movs	r1, #0
  netif->output = etharp_output;
 8003c00:	6162      	str	r2, [r4, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 8003c02:	2264      	movs	r2, #100	@ 0x64
  netif->linkoutput = low_level_output;
 8003c04:	61a3      	str	r3, [r4, #24]
  MACAddr[4] = 0x00;
 8003c06:	2600      	movs	r6, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8003c08:	f00c fa47 	bl	801009a <memset>
  heth.Instance = ETH;
 8003c0c:	4d5a      	ldr	r5, [pc, #360]	@ (8003d78 <ethernetif_init+0x194>)
 8003c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8003d7c <ethernetif_init+0x198>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003c10:	2701      	movs	r7, #1
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003c12:	f8df 91a8 	ldr.w	r9, [pc, #424]	@ 8003dbc <ethernetif_init+0x1d8>
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003c16:	4628      	mov	r0, r5
  heth.Instance = ETH;
 8003c18:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 8003c1a:	4b59      	ldr	r3, [pc, #356]	@ (8003d80 <ethernetif_init+0x19c>)
  MACAddr[4] = 0x00;
 8003c1c:	f8ad 6004 	strh.w	r6, [sp, #4]
  MACAddr[0] = 0x00;
 8003c20:	9300      	str	r3, [sp, #0]
  heth.Init.TxDesc = DMATxDscrTab;
 8003c22:	4b58      	ldr	r3, [pc, #352]	@ (8003d84 <ethernetif_init+0x1a0>)
  heth.Init.MACAddr = &MACAddr[0];
 8003c24:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 8003c28:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003c2a:	4b57      	ldr	r3, [pc, #348]	@ (8003d88 <ethernetif_init+0x1a4>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003c2c:	722f      	strb	r7, [r5, #8]
  heth.Init.RxDesc = DMARxDscrTab;
 8003c2e:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 8003c30:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003c34:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003c36:	f7fe fd6d 	bl	8002714 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003c3a:	2234      	movs	r2, #52	@ 0x34
 8003c3c:	4631      	mov	r1, r6
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003c3e:	4680      	mov	r8, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003c40:	4648      	mov	r0, r9
 8003c42:	f00c fa2a 	bl	801009a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003c46:	2321      	movs	r3, #33	@ 0x21
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003c48:	4850      	ldr	r0, [pc, #320]	@ (8003d8c <ethernetif_init+0x1a8>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003c4a:	f849 3c04 	str.w	r3, [r9, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003c4e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003c52:	f8c9 3010 	str.w	r3, [r9, #16]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003c56:	f004 ff47 	bl	8008ae8 <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003c5a:	686b      	ldr	r3, [r5, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003c5c:	2206      	movs	r2, #6
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003c5e:	4638      	mov	r0, r7
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003c60:	f884 202c 	strb.w	r2, [r4, #44]	@ 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003c64:	781a      	ldrb	r2, [r3, #0]
 8003c66:	f884 2026 	strb.w	r2, [r4, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003c6a:	785a      	ldrb	r2, [r3, #1]
 8003c6c:	f884 2027 	strb.w	r2, [r4, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003c70:	789a      	ldrb	r2, [r3, #2]
 8003c72:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003c76:	78da      	ldrb	r2, [r3, #3]
 8003c78:	f884 2029 	strb.w	r2, [r4, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003c7c:	7919      	ldrb	r1, [r3, #4]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003c7e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003c82:	f884 102a 	strb.w	r1, [r4, #42]	@ 0x2a
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003c86:	4639      	mov	r1, r7
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003c88:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003c8a:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003c8e:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 8003c92:	f240 53dc 	movw	r3, #1500	@ 0x5dc
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003c96:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003c9a:	4632      	mov	r2, r6
  netif->mtu = ETH_MAX_PAYLOAD;
 8003c9c:	84a3      	strh	r3, [r4, #36]	@ 0x24
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003c9e:	f000 fb6f 	bl	8004380 <osSemaphoreNew>
 8003ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8003d90 <ethernetif_init+0x1ac>)
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003ca4:	4632      	mov	r2, r6
 8003ca6:	4639      	mov	r1, r7
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003ca8:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003caa:	4638      	mov	r0, r7
 8003cac:	f000 fb68 	bl	8004380 <osSemaphoreNew>
 8003cb0:	4b38      	ldr	r3, [pc, #224]	@ (8003d94 <ethernetif_init+0x1b0>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003cb2:	4631      	mov	r1, r6
 8003cb4:	2220      	movs	r2, #32
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003cb6:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003cb8:	a803      	add	r0, sp, #12
 8003cba:	f00c f9ee 	bl	801009a <memset>
  attributes.name = "EthIf";
 8003cbe:	4b36      	ldr	r3, [pc, #216]	@ (8003d98 <ethernetif_init+0x1b4>)
  attributes.priority = osPriorityRealtime;
 8003cc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  osThreadNew(ethernetif_input, netif, &attributes);
 8003cc4:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 8003cc6:	9302      	str	r3, [sp, #8]
  attributes.priority = osPriorityRealtime;
 8003cc8:	2330      	movs	r3, #48	@ 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 8003cca:	4834      	ldr	r0, [pc, #208]	@ (8003d9c <ethernetif_init+0x1b8>)
  attributes.priority = osPriorityRealtime;
 8003ccc:	e9cd 1307 	strd	r1, r3, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	f000 fa79 	bl	80041c8 <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003cd6:	4932      	ldr	r1, [pc, #200]	@ (8003da0 <ethernetif_init+0x1bc>)
 8003cd8:	4832      	ldr	r0, [pc, #200]	@ (8003da4 <ethernetif_init+0x1c0>)
 8003cda:	f7fd fcbb 	bl	8001654 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8003cde:	4831      	ldr	r0, [pc, #196]	@ (8003da4 <ethernetif_init+0x1c0>)
 8003ce0:	f7fd fcd2 	bl	8001688 <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 8003ce4:	f1b8 0f00 	cmp.w	r8, #0
 8003ce8:	d124      	bne.n	8003d34 <ethernetif_init+0x150>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003cea:	482e      	ldr	r0, [pc, #184]	@ (8003da4 <ethernetif_init+0x1c0>)
 8003cec:	f7fd fd36 	bl	800175c <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003cf0:	42b8      	cmp	r0, r7
 8003cf2:	dd2a      	ble.n	8003d4a <ethernetif_init+0x166>
      switch (PHYLinkState)
 8003cf4:	3803      	subs	r0, #3
 8003cf6:	2802      	cmp	r0, #2
 8003cf8:	d822      	bhi.n	8003d40 <ethernetif_init+0x15c>
 8003cfa:	4a2b      	ldr	r2, [pc, #172]	@ (8003da8 <ethernetif_init+0x1c4>)
 8003cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8003dac <ethernetif_init+0x1c8>)
 8003cfe:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8003d02:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003d06:	a90b      	add	r1, sp, #44	@ 0x2c
 8003d08:	481b      	ldr	r0, [pc, #108]	@ (8003d78 <ethernetif_init+0x194>)
 8003d0a:	f7fe fbe9 	bl	80024e0 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003d0e:	a90b      	add	r1, sp, #44	@ 0x2c
 8003d10:	4819      	ldr	r0, [pc, #100]	@ (8003d78 <ethernetif_init+0x194>)
    MACConf.Speed = speed;
 8003d12:	e9cd 5610 	strd	r5, r6, [sp, #64]	@ 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003d16:	f7fe fcad 	bl	8002674 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8003d1a:	4817      	ldr	r0, [pc, #92]	@ (8003d78 <ethernetif_init+0x194>)
 8003d1c:	f7fe f94e 	bl	8001fbc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003d20:	4620      	mov	r0, r4
 8003d22:	f005 f8e9 	bl	8008ef8 <netif_set_up>
    netif_set_link_up(netif);
 8003d26:	4620      	mov	r0, r4
 8003d28:	f005 f92e 	bl	8008f88 <netif_set_link_up>
}
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	b025      	add	sp, #148	@ 0x94
 8003d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 8003d34:	f7fd f982 	bl	800103c <Error_Handler>
}
 8003d38:	2000      	movs	r0, #0
 8003d3a:	b025      	add	sp, #148	@ 0x94
 8003d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      switch (PHYLinkState)
 8003d40:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
 8003d44:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 8003d48:	e7dd      	b.n	8003d06 <ethernetif_init+0x122>
      netif_set_link_down(netif);
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	f005 f944 	bl	8008fd8 <netif_set_link_down>
      netif_set_down(netif);
 8003d50:	4620      	mov	r0, r4
 8003d52:	f005 f8f5 	bl	8008f40 <netif_set_down>
}
 8003d56:	2000      	movs	r0, #0
 8003d58:	b025      	add	sp, #148	@ 0x94
 8003d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003d5e:	4b14      	ldr	r3, [pc, #80]	@ (8003db0 <ethernetif_init+0x1cc>)
 8003d60:	f240 2217 	movw	r2, #535	@ 0x217
 8003d64:	4913      	ldr	r1, [pc, #76]	@ (8003db4 <ethernetif_init+0x1d0>)
 8003d66:	4814      	ldr	r0, [pc, #80]	@ (8003db8 <ethernetif_init+0x1d4>)
 8003d68:	f00c f8e4 	bl	800ff34 <iprintf>
 8003d6c:	e741      	b.n	8003bf2 <ethernetif_init+0xe>
 8003d6e:	bf00      	nop
 8003d70:	08003a31 	.word	0x08003a31
 8003d74:	0800e801 	.word	0x0800e801
 8003d78:	240103e0 	.word	0x240103e0
 8003d7c:	40028000 	.word	0x40028000
 8003d80:	00e18000 	.word	0x00e18000
 8003d84:	30000100 	.word	0x30000100
 8003d88:	30000000 	.word	0x30000000
 8003d8c:	08011ad4 	.word	0x08011ad4
 8003d90:	24010494 	.word	0x24010494
 8003d94:	24010490 	.word	0x24010490
 8003d98:	08011a48 	.word	0x08011a48
 8003d9c:	08003b4d 	.word	0x08003b4d
 8003da0:	24000010 	.word	0x24000010
 8003da4:	24010388 	.word	0x24010388
 8003da8:	08011ac8 	.word	0x08011ac8
 8003dac:	08011abc 	.word	0x08011abc
 8003db0:	08011a1c 	.word	0x08011a1c
 8003db4:	08011a38 	.word	0x08011a38
 8003db8:	080110dc 	.word	0x080110dc
 8003dbc:	240103ac 	.word	0x240103ac

08003dc0 <sys_now>:
  return HAL_GetTick();
 8003dc0:	f7fd bd56 	b.w	8001870 <HAL_GetTick>

08003dc4 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8003dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8003efc <HAL_ETH_MspInit+0x138>)
 8003dc6:	6802      	ldr	r2, [r0, #0]
{
 8003dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8003dca:	429a      	cmp	r2, r3
{
 8003dcc:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dce:	f04f 0400 	mov.w	r4, #0
 8003dd2:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003dd6:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8003dda:	940c      	str	r4, [sp, #48]	@ 0x30
  if(ethHandle->Instance==ETH)
 8003ddc:	d001      	beq.n	8003de2 <HAL_ETH_MspInit+0x1e>
}
 8003dde:	b00f      	add	sp, #60	@ 0x3c
 8003de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003de2:	4b47      	ldr	r3, [pc, #284]	@ (8003f00 <HAL_ETH_MspInit+0x13c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de4:	2603      	movs	r6, #3
 8003de6:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de8:	a908      	add	r1, sp, #32
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003dea:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dee:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003df0:	4844      	ldr	r0, [pc, #272]	@ (8003f04 <HAL_ETH_MspInit+0x140>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003df2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003df6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8003dfa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8003dfe:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8003e02:	9201      	str	r2, [sp, #4]
 8003e04:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003e06:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8003e0a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e0e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8003e12:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8003e16:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8003e1a:	9202      	str	r2, [sp, #8]
 8003e1c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003e1e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8003e22:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003e26:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8003e2a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8003e2e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8003e32:	9203      	str	r2, [sp, #12]
 8003e34:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003e3a:	f042 0204 	orr.w	r2, r2, #4
 8003e3e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8003e42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003e46:	f002 0204 	and.w	r2, r2, #4
 8003e4a:	9204      	str	r2, [sp, #16]
 8003e4c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8003e5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003e5e:	f002 0201 	and.w	r2, r2, #1
 8003e62:	9205      	str	r2, [sp, #20]
 8003e64:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003e6a:	f042 0202 	orr.w	r2, r2, #2
 8003e6e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8003e72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003e76:	f002 0202 	and.w	r2, r2, #2
 8003e7a:	9206      	str	r2, [sp, #24]
 8003e7c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003e82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e86:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003e8a:	2232      	movs	r2, #50	@ 0x32
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e94:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003e96:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e98:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003e9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ea0:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ea2:	f7fe fd55 	bl	8002950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003ea6:	2386      	movs	r3, #134	@ 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea8:	a908      	add	r1, sp, #32
 8003eaa:	4817      	ldr	r0, [pc, #92]	@ (8003f08 <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003eac:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003eae:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb0:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb2:	e9cd 460a 	strd	r4, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb6:	f7fe fd4b 	bl	8002950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003eba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003ebe:	a908      	add	r1, sp, #32
 8003ec0:	4812      	ldr	r0, [pc, #72]	@ (8003f0c <HAL_ETH_MspInit+0x148>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003ec2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec4:	e9cd 7409 	strd	r7, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ec8:	e9cd 650b 	strd	r6, r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003ecc:	f7fe fd40 	bl	8002950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003ed0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ed4:	a908      	add	r1, sp, #32
 8003ed6:	480e      	ldr	r0, [pc, #56]	@ (8003f10 <HAL_ETH_MspInit+0x14c>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003ed8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eda:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003edc:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ede:	e9cd 460a 	strd	r4, r6, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ee2:	f7fe fd35 	bl	8002950 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	2105      	movs	r1, #5
 8003eea:	203d      	movs	r0, #61	@ 0x3d
 8003eec:	f7fd fce2 	bl	80018b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003ef0:	203d      	movs	r0, #61	@ 0x3d
 8003ef2:	f7fd fd1b 	bl	800192c <HAL_NVIC_EnableIRQ>
}
 8003ef6:	b00f      	add	sp, #60	@ 0x3c
 8003ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40028000 	.word	0x40028000
 8003f00:	58024400 	.word	0x58024400
 8003f04:	58020800 	.word	0x58020800
 8003f08:	58020000 	.word	0x58020000
 8003f0c:	58020400 	.word	0x58020400
 8003f10:	58021800 	.word	0x58021800

08003f14 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003f14:	b530      	push	{r4, r5, lr}
 8003f16:	4604      	mov	r4, r0
 8003f18:	b083      	sub	sp, #12
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003f1a:	480d      	ldr	r0, [pc, #52]	@ (8003f50 <HAL_ETH_RxAllocateCallback+0x3c>)
 8003f1c:	f004 fe2c 	bl	8008b78 <memp_malloc_pool>
  if (p)
 8003f20:	4603      	mov	r3, r0
 8003f22:	b178      	cbz	r0, 8003f44 <HAL_ETH_RxAllocateCallback+0x30>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003f24:	f100 0520 	add.w	r5, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8003f28:	4a0a      	ldr	r2, [pc, #40]	@ (8003f54 <HAL_ETH_RxAllocateCallback+0x40>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003f30:	6025      	str	r5, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8003f32:	611a      	str	r2, [r3, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8003f34:	2241      	movs	r2, #65	@ 0x41
 8003f36:	9001      	str	r0, [sp, #4]
 8003f38:	4608      	mov	r0, r1
 8003f3a:	9500      	str	r5, [sp, #0]
 8003f3c:	f005 f8d0 	bl	80090e0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003f40:	b003      	add	sp, #12
 8003f42:	bd30      	pop	{r4, r5, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8003f44:	4a04      	ldr	r2, [pc, #16]	@ (8003f58 <HAL_ETH_RxAllocateCallback+0x44>)
 8003f46:	2101      	movs	r1, #1
    *buff = NULL;
 8003f48:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8003f4a:	7011      	strb	r1, [r2, #0]
}
 8003f4c:	b003      	add	sp, #12
 8003f4e:	bd30      	pop	{r4, r5, pc}
 8003f50:	08011ad4 	.word	0x08011ad4
 8003f54:	08003b1d 	.word	0x08003b1d
 8003f58:	24010498 	.word	0x24010498

08003f5c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003f5c:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 8003f5e:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003f60:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 8003f64:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 8003f68:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8003f6c:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 8003f70:	6805      	ldr	r5, [r0, #0]
 8003f72:	b1f5      	cbz	r5, 8003fb2 <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003f74:	680d      	ldr	r5, [r1, #0]
 8003f76:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 8003f78:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003f7a:	6801      	ldr	r1, [r0, #0]
 8003f7c:	b129      	cbz	r1, 8003f8a <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 8003f7e:	8908      	ldrh	r0, [r1, #8]
 8003f80:	4418      	add	r0, r3
 8003f82:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003f84:	6809      	ldr	r1, [r1, #0]
 8003f86:	2900      	cmp	r1, #0
 8003f88:	d1f9      	bne.n	8003f7e <HAL_ETH_RxLinkCallback+0x22>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8003f8a:	b183      	cbz	r3, 8003fae <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003f8c:	f002 011f 	and.w	r1, r2, #31
 8003f90:	4419      	add	r1, r3
 8003f92:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003f96:	4808      	ldr	r0, [pc, #32]	@ (8003fb8 <HAL_ETH_RxLinkCallback+0x5c>)
 8003f98:	4411      	add	r1, r2
 8003f9a:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003f9e:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8003fa0:	1a8b      	subs	r3, r1, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	dcf9      	bgt.n	8003f9a <HAL_ETH_RxLinkCallback+0x3e>
 8003fa6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003faa:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003fae:	bc30      	pop	{r4, r5}
 8003fb0:	4770      	bx	lr
    *ppStart = p;
 8003fb2:	6004      	str	r4, [r0, #0]
 8003fb4:	e7e0      	b.n	8003f78 <HAL_ETH_RxLinkCallback+0x1c>
 8003fb6:	bf00      	nop
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8003fbc:	f005 b942 	b.w	8009244 <pbuf_free>

08003fc0 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 8003fc0:	b508      	push	{r3, lr}
	sys_mutex_lock(&lock_tcpip_core);
 8003fc2:	4804      	ldr	r0, [pc, #16]	@ (8003fd4 <sys_lock_tcpip_core+0x14>)
 8003fc4:	f00b fd3e 	bl	800fa44 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8003fc8:	f000 f942 	bl	8004250 <osThreadGetId>
 8003fcc:	4b02      	ldr	r3, [pc, #8]	@ (8003fd8 <sys_lock_tcpip_core+0x18>)
 8003fce:	6018      	str	r0, [r3, #0]
}
 8003fd0:	bd08      	pop	{r3, pc}
 8003fd2:	bf00      	nop
 8003fd4:	24019c88 	.word	0x24019c88
 8003fd8:	24010384 	.word	0x24010384

08003fdc <ethernet_link_thread>:
{
 8003fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe0:	b09b      	sub	sp, #108	@ 0x6c
  LOCK_TCPIP_CORE();
 8003fe2:	f04f 0900 	mov.w	r9, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8003fe6:	2264      	movs	r2, #100	@ 0x64
 8003fe8:	2100      	movs	r1, #0
{
 8003fea:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8003fec:	4668      	mov	r0, sp
 8003fee:	f00c f854 	bl	801009a <memset>
  LOCK_TCPIP_CORE();
 8003ff2:	46cb      	mov	fp, r9
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003ff4:	46ca      	mov	sl, r9
 8003ff6:	4d2b      	ldr	r5, [pc, #172]	@ (80040a4 <ethernet_link_thread+0xc8>)
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003ff8:	4f2b      	ldr	r7, [pc, #172]	@ (80040a8 <ethernet_link_thread+0xcc>)
  LOCK_TCPIP_CORE();
 8003ffa:	f7ff ffe1 	bl	8003fc0 <sys_lock_tcpip_core>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003ffe:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 80040b8 <ethernet_link_thread+0xdc>

void sys_unlock_tcpip_core(void){
	lwip_core_lock_holder_thread_id = 0;
	sys_mutex_unlock(&lock_tcpip_core);
 8004002:	4c2a      	ldr	r4, [pc, #168]	@ (80040ac <ethernet_link_thread+0xd0>)
 8004004:	e02f      	b.n	8004066 <ethernet_link_thread+0x8a>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004006:	2801      	cmp	r0, #1
 8004008:	dd41      	ble.n	800408e <ethernet_link_thread+0xb2>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800400a:	075a      	lsls	r2, r3, #29
 800400c:	d41d      	bmi.n	800404a <ethernet_link_thread+0x6e>
    switch (PHYLinkState)
 800400e:	3802      	subs	r0, #2
 8004010:	2803      	cmp	r0, #3
 8004012:	d838      	bhi.n	8004086 <ethernet_link_thread+0xaa>
 8004014:	4b26      	ldr	r3, [pc, #152]	@ (80040b0 <ethernet_link_thread+0xd4>)
 8004016:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800401a:	4b26      	ldr	r3, [pc, #152]	@ (80040b4 <ethernet_link_thread+0xd8>)
 800401c:	f853 b020 	ldr.w	fp, [r3, r0, lsl #2]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004020:	4669      	mov	r1, sp
 8004022:	4640      	mov	r0, r8
 8004024:	f7fe fa5c 	bl	80024e0 <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004028:	4669      	mov	r1, sp
 800402a:	4640      	mov	r0, r8
      netif_set_link_up(netif);
 800402c:	f04f 0a01 	mov.w	sl, #1
      MACConf.Speed = speed;
 8004030:	e9cd 9b05 	strd	r9, fp, [sp, #20]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004034:	f7fe fb1e 	bl	8002674 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004038:	4640      	mov	r0, r8
 800403a:	f7fd ffbf 	bl	8001fbc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800403e:	4630      	mov	r0, r6
 8004040:	f004 ff5a 	bl	8008ef8 <netif_set_up>
      netif_set_link_up(netif);
 8004044:	4630      	mov	r0, r6
 8004046:	f004 ff9f 	bl	8008f88 <netif_set_link_up>
	lwip_core_lock_holder_thread_id = 0;
 800404a:	2300      	movs	r3, #0
	sys_mutex_unlock(&lock_tcpip_core);
 800404c:	4620      	mov	r0, r4
	lwip_core_lock_holder_thread_id = 0;
 800404e:	602b      	str	r3, [r5, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8004050:	f00b fcfe 	bl	800fa50 <sys_mutex_unlock>
  osDelay(100);
 8004054:	2064      	movs	r0, #100	@ 0x64
 8004056:	f000 f8fd 	bl	8004254 <osDelay>
	sys_mutex_lock(&lock_tcpip_core);
 800405a:	4620      	mov	r0, r4
 800405c:	f00b fcf2 	bl	800fa44 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8004060:	f000 f8f6 	bl	8004250 <osThreadGetId>
 8004064:	6028      	str	r0, [r5, #0]
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004066:	4638      	mov	r0, r7
 8004068:	f7fd fb78 	bl	800175c <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800406c:	f896 302d 	ldrb.w	r3, [r6, #45]	@ 0x2d
 8004070:	0759      	lsls	r1, r3, #29
 8004072:	ea4f 0293 	mov.w	r2, r3, lsr #2
 8004076:	d4c6      	bmi.n	8004006 <ethernet_link_thread+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004078:	07d3      	lsls	r3, r2, #31
 800407a:	d4e6      	bmi.n	800404a <ethernet_link_thread+0x6e>
 800407c:	2801      	cmp	r0, #1
 800407e:	dde4      	ble.n	800404a <ethernet_link_thread+0x6e>
    switch (PHYLinkState)
 8004080:	3802      	subs	r0, #2
 8004082:	2803      	cmp	r0, #3
 8004084:	d9c6      	bls.n	8004014 <ethernet_link_thread+0x38>
    if(linkchanged)
 8004086:	f1ba 0f00 	cmp.w	sl, #0
 800408a:	d0de      	beq.n	800404a <ethernet_link_thread+0x6e>
 800408c:	e7c8      	b.n	8004020 <ethernet_link_thread+0x44>
    HAL_ETH_Stop_IT(&heth);
 800408e:	4640      	mov	r0, r8
 8004090:	f7fd ffe4 	bl	800205c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004094:	4630      	mov	r0, r6
 8004096:	f004 ff53 	bl	8008f40 <netif_set_down>
    netif_set_link_down(netif);
 800409a:	4630      	mov	r0, r6
 800409c:	f004 ff9c 	bl	8008fd8 <netif_set_link_down>
 80040a0:	e7d3      	b.n	800404a <ethernet_link_thread+0x6e>
 80040a2:	bf00      	nop
 80040a4:	24010384 	.word	0x24010384
 80040a8:	24010388 	.word	0x24010388
 80040ac:	24019c88 	.word	0x24019c88
 80040b0:	08011aac 	.word	0x08011aac
 80040b4:	08011a9c 	.word	0x08011a9c
 80040b8:	240103e0 	.word	0x240103e0

080040bc <sys_unlock_tcpip_core>:
	lwip_core_lock_holder_thread_id = 0;
 80040bc:	4b02      	ldr	r3, [pc, #8]	@ (80040c8 <sys_unlock_tcpip_core+0xc>)
 80040be:	2200      	movs	r2, #0
	sys_mutex_unlock(&lock_tcpip_core);
 80040c0:	4802      	ldr	r0, [pc, #8]	@ (80040cc <sys_unlock_tcpip_core+0x10>)
	lwip_core_lock_holder_thread_id = 0;
 80040c2:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 80040c4:	f00b bcc4 	b.w	800fa50 <sys_mutex_unlock>
 80040c8:	24010384 	.word	0x24010384
 80040cc:	24019c88 	.word	0x24019c88

080040d0 <sys_check_core_locking>:
}

void sys_check_core_locking(void){
 80040d0:	b538      	push	{r3, r4, r5, lr}
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 80040d2:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <sys_check_core_locking+0x48>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040da:	b9ab      	cbnz	r3, 8004108 <sys_check_core_locking+0x38>

  if (lwip_tcpip_thread_id != 0) {
 80040dc:	4b0f      	ldr	r3, [pc, #60]	@ (800411c <sys_check_core_locking+0x4c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	b18b      	cbz	r3, 8004106 <sys_check_core_locking+0x36>
	  osThreadId_t current_thread_id = osThreadGetId();

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 80040e2:	4d0f      	ldr	r5, [pc, #60]	@ (8004120 <sys_check_core_locking+0x50>)
	  osThreadId_t current_thread_id = osThreadGetId();
 80040e4:	f000 f8b4 	bl	8004250 <osThreadGetId>
 80040e8:	4604      	mov	r4, r0
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 80040ea:	682b      	ldr	r3, [r5, #0]
 80040ec:	4283      	cmp	r3, r0
 80040ee:	d00a      	beq.n	8004106 <sys_check_core_locking+0x36>
 80040f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <sys_check_core_locking+0x54>)
 80040f2:	f44f 7274 	mov.w	r2, #976	@ 0x3d0
 80040f6:	490c      	ldr	r1, [pc, #48]	@ (8004128 <sys_check_core_locking+0x58>)
 80040f8:	480c      	ldr	r0, [pc, #48]	@ (800412c <sys_check_core_locking+0x5c>)
 80040fa:	f00b ff1b 	bl	800ff34 <iprintf>
	/* ETH_CODE: to easily check that example has correct handling of core lock
	 * This will trigger breakpoint (__BKPT)
	 */
#warning Below check should be removed in production code
	if(current_thread_id != lwip_core_lock_holder_thread_id) __BKPT(0);
 80040fe:	682b      	ldr	r3, [r5, #0]
 8004100:	42a3      	cmp	r3, r4
 8004102:	d000      	beq.n	8004106 <sys_check_core_locking+0x36>
 8004104:	be00      	bkpt	0x0000
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 8004106:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8004108:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <sys_check_core_locking+0x54>)
 800410a:	f240 32ca 	movw	r2, #970	@ 0x3ca
 800410e:	4908      	ldr	r1, [pc, #32]	@ (8004130 <sys_check_core_locking+0x60>)
 8004110:	4806      	ldr	r0, [pc, #24]	@ (800412c <sys_check_core_locking+0x5c>)
 8004112:	f00b ff0f 	bl	800ff34 <iprintf>
 8004116:	e7e1      	b.n	80040dc <sys_check_core_locking+0xc>
 8004118:	e000ed00 	.word	0xe000ed00
 800411c:	24010380 	.word	0x24010380
 8004120:	24010384 	.word	0x24010384
 8004124:	08011a1c 	.word	0x08011a1c
 8004128:	08011a78 	.word	0x08011a78
 800412c:	080110dc 	.word	0x080110dc
 8004130:	08011a50 	.word	0x08011a50

08004134 <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8004134:	b508      	push	{r3, lr}
	lwip_tcpip_thread_id = osThreadGetId();
 8004136:	f000 f88b 	bl	8004250 <osThreadGetId>
 800413a:	4b01      	ldr	r3, [pc, #4]	@ (8004140 <sys_mark_tcpip_thread+0xc>)
 800413c:	6018      	str	r0, [r3, #0]
}
 800413e:	bd08      	pop	{r3, pc}
 8004140:	24010380 	.word	0x24010380

08004144 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004144:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8004146:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800414a:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800414c:	f001 fe2c 	bl	8005da8 <xTaskGetSchedulerState>
 8004150:	2801      	cmp	r0, #1
 8004152:	d100      	bne.n	8004156 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8004154:	bd08      	pop	{r3, pc}
 8004156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800415a:	f002 b9fb 	b.w	8006554 <xPortSysTickHandler>
 800415e:	bf00      	nop

08004160 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004160:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004164:	b92b      	cbnz	r3, 8004172 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8004166:	4b06      	ldr	r3, [pc, #24]	@ (8004180 <osKernelInitialize+0x20>)
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	b928      	cbnz	r0, 8004178 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800416c:	2201      	movs	r2, #1
 800416e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004170:	4770      	bx	lr
    stat = osErrorISR;
 8004172:	f06f 0005 	mvn.w	r0, #5
 8004176:	4770      	bx	lr
    } else {
      stat = osError;
 8004178:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	24011df0 	.word	0x24011df0

08004184 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004184:	b510      	push	{r4, lr}
 8004186:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800418a:	b974      	cbnz	r4, 80041aa <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800418c:	4b08      	ldr	r3, [pc, #32]	@ (80041b0 <osKernelStart+0x2c>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2a01      	cmp	r2, #1
 8004192:	d107      	bne.n	80041a4 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004194:	4907      	ldr	r1, [pc, #28]	@ (80041b4 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004196:	2202      	movs	r2, #2
 8004198:	77cc      	strb	r4, [r1, #31]
 800419a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800419c:	f001 faf2 	bl	8005784 <vTaskStartScheduler>
      stat = osOK;
 80041a0:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80041a2:	bd10      	pop	{r4, pc}
      stat = osError;
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80041a8:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80041aa:	f06f 0005 	mvn.w	r0, #5
}
 80041ae:	bd10      	pop	{r4, pc}
 80041b0:	24011df0 	.word	0x24011df0
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <osKernelGetTickCount>:
 80041b8:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 80041bc:	b10b      	cbz	r3, 80041c2 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 80041be:	f001 bb3f 	b.w	8005840 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 80041c2:	f001 bb37 	b.w	8005834 <xTaskGetTickCount>
 80041c6:	bf00      	nop

080041c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041ca:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041cc:	b087      	sub	sp, #28
  hTask = NULL;
 80041ce:	9505      	str	r5, [sp, #20]
 80041d0:	f3ef 8305 	mrs	r3, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80041d4:	b300      	cbz	r0, 8004218 <osThreadNew+0x50>
 80041d6:	b9fb      	cbnz	r3, 8004218 <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80041d8:	4614      	mov	r4, r2
 80041da:	b302      	cbz	r2, 800421e <osThreadNew+0x56>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80041dc:	6996      	ldr	r6, [r2, #24]
 80041de:	b9c6      	cbnz	r6, 8004212 <osThreadNew+0x4a>
 80041e0:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80041e2:	6863      	ldr	r3, [r4, #4]
 80041e4:	07db      	lsls	r3, r3, #31
 80041e6:	d417      	bmi.n	8004218 <osThreadNew+0x50>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80041e8:	6963      	ldr	r3, [r4, #20]
 80041ea:	b333      	cbz	r3, 800423a <osThreadNew+0x72>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041ec:	089a      	lsrs	r2, r3, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041ee:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
 80041f0:	f8d4 c000 	ldr.w	ip, [r4]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041f4:	68e7      	ldr	r7, [r4, #12]
 80041f6:	b31d      	cbz	r5, 8004240 <osThreadNew+0x78>
 80041f8:	2fa7      	cmp	r7, #167	@ 0xa7
 80041fa:	d90d      	bls.n	8004218 <osThreadNew+0x50>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041fc:	6924      	ldr	r4, [r4, #16]
 80041fe:	b15b      	cbz	r3, 8004218 <osThreadNew+0x50>
 8004200:	b154      	cbz	r4, 8004218 <osThreadNew+0x50>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004202:	460b      	mov	r3, r1
 8004204:	9600      	str	r6, [sp, #0]
 8004206:	4661      	mov	r1, ip
 8004208:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800420c:	f001 fa50 	bl	80056b0 <xTaskCreateStatic>
 8004210:	e003      	b.n	800421a <osThreadNew+0x52>
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004212:	1e72      	subs	r2, r6, #1
 8004214:	2a37      	cmp	r2, #55	@ 0x37
 8004216:	d9e4      	bls.n	80041e2 <osThreadNew+0x1a>
        return (NULL);
 8004218:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 800421a:	b007      	add	sp, #28
 800421c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800421e:	f44f 7200 	mov.w	r2, #512	@ 0x200
    prio  = (UBaseType_t)osPriorityNormal;
 8004222:	2618      	movs	r6, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004224:	460b      	mov	r3, r1
 8004226:	4621      	mov	r1, r4
 8004228:	ac05      	add	r4, sp, #20
 800422a:	9600      	str	r6, [sp, #0]
 800422c:	9401      	str	r4, [sp, #4]
 800422e:	f001 fa79 	bl	8005724 <xTaskCreate>
 8004232:	2801      	cmp	r0, #1
 8004234:	d1f0      	bne.n	8004218 <osThreadNew+0x50>
  return ((osThreadId_t)hTask);
 8004236:	9805      	ldr	r0, [sp, #20]
 8004238:	e7ef      	b.n	800421a <osThreadNew+0x52>
    stack = configMINIMAL_STACK_SIZE;
 800423a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800423e:	e7d6      	b.n	80041ee <osThreadNew+0x26>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004240:	2f00      	cmp	r7, #0
 8004242:	d1e9      	bne.n	8004218 <osThreadNew+0x50>
 8004244:	6923      	ldr	r3, [r4, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e6      	bne.n	8004218 <osThreadNew+0x50>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800424a:	b292      	uxth	r2, r2
 800424c:	4664      	mov	r4, ip
 800424e:	e7e9      	b.n	8004224 <osThreadNew+0x5c>

08004250 <osThreadGetId>:
}

osThreadId_t osThreadGetId (void) {
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8004250:	f001 bda4 	b.w	8005d9c <xTaskGetCurrentTaskHandle>

08004254 <osDelay>:
 8004254:	f3ef 8205 	mrs	r2, IPSR
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004258:	b93a      	cbnz	r2, 800426a <osDelay+0x16>
osStatus_t osDelay (uint32_t ticks) {
 800425a:	b508      	push	{r3, lr}
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800425c:	b908      	cbnz	r0, 8004262 <osDelay+0xe>
    stat = osOK;
 800425e:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8004260:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8004262:	f001 fc43 	bl	8005aec <vTaskDelay>
    stat = osOK;
 8004266:	2000      	movs	r0, #0
}
 8004268:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800426a:	f06f 0005 	mvn.w	r0, #5
}
 800426e:	4770      	bx	lr

08004270 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004270:	b530      	push	{r4, r5, lr}
 8004272:	b083      	sub	sp, #12
 8004274:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8004278:	b9bd      	cbnz	r5, 80042aa <osMutexNew+0x3a>
    if (attr != NULL) {
 800427a:	4604      	mov	r4, r0
 800427c:	b1c0      	cbz	r0, 80042b0 <osMutexNew+0x40>
      type = attr->attr_bits;
 800427e:	6845      	ldr	r5, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004280:	072b      	lsls	r3, r5, #28
 8004282:	d412      	bmi.n	80042aa <osMutexNew+0x3a>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004284:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004286:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800428a:	68c3      	ldr	r3, [r0, #12]
 800428c:	b309      	cbz	r1, 80042d2 <osMutexNew+0x62>
 800428e:	2b4f      	cmp	r3, #79	@ 0x4f
 8004290:	d90b      	bls.n	80042aa <osMutexNew+0x3a>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004292:	b345      	cbz	r5, 80042e6 <osMutexNew+0x76>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004294:	2004      	movs	r0, #4
 8004296:	f000 fcad 	bl	8004bf4 <xQueueCreateMutexStatic>
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800429a:	b130      	cbz	r0, 80042aa <osMutexNew+0x3a>
        if (attr != NULL) {
          name = attr->name;
 800429c:	6824      	ldr	r4, [r4, #0]
 800429e:	e00c      	b.n	80042ba <osMutexNew+0x4a>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80042a0:	2004      	movs	r0, #4
 80042a2:	f000 fcfd 	bl	8004ca0 <xQueueCreateMutex>
      if (hMutex != NULL) {
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d1f8      	bne.n	800429c <osMutexNew+0x2c>
  hMutex = NULL;
 80042aa:	2000      	movs	r0, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80042ac:	b003      	add	sp, #12
 80042ae:	bd30      	pop	{r4, r5, pc}
              hMutex = xSemaphoreCreateMutex ();
 80042b0:	2001      	movs	r0, #1
 80042b2:	f000 fcf5 	bl	8004ca0 <xQueueCreateMutex>
      if (hMutex != NULL) {
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d0f7      	beq.n	80042aa <osMutexNew+0x3a>
        vQueueAddToRegistry (hMutex, name);
 80042ba:	4621      	mov	r1, r4
 80042bc:	9001      	str	r0, [sp, #4]
 80042be:	f001 f827 	bl	8005310 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 80042c2:	9801      	ldr	r0, [sp, #4]
 80042c4:	f015 0f01 	tst.w	r5, #1
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80042c8:	bf18      	it	ne
 80042ca:	f040 0001 	orrne.w	r0, r0, #1
}
 80042ce:	b003      	add	sp, #12
 80042d0:	bd30      	pop	{r4, r5, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e9      	bne.n	80042aa <osMutexNew+0x3a>
            if (rmtx != 0U) {
 80042d6:	2d00      	cmp	r5, #0
 80042d8:	d1e2      	bne.n	80042a0 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 80042da:	2001      	movs	r0, #1
 80042dc:	f000 fce0 	bl	8004ca0 <xQueueCreateMutex>
      if (hMutex != NULL) {
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d1db      	bne.n	800429c <osMutexNew+0x2c>
 80042e4:	e7e1      	b.n	80042aa <osMutexNew+0x3a>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80042e6:	2001      	movs	r0, #1
 80042e8:	f000 fc84 	bl	8004bf4 <xQueueCreateMutexStatic>
      if (hMutex != NULL) {
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d1d5      	bne.n	800429c <osMutexNew+0x2c>
 80042f0:	e7db      	b.n	80042aa <osMutexNew+0x3a>
 80042f2:	bf00      	nop

080042f4 <osMutexAcquire>:
 80042f4:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 80042f8:	b9d2      	cbnz	r2, 8004330 <osMutexAcquire+0x3c>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80042fa:	2801      	cmp	r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4603      	mov	r3, r0
  else if (hMutex == NULL) {
 8004300:	d919      	bls.n	8004336 <osMutexAcquire+0x42>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8004302:	f003 0501 	and.w	r5, r3, #1
 8004306:	460c      	mov	r4, r1
 8004308:	f020 0001 	bic.w	r0, r0, #1
 800430c:	b955      	cbnz	r5, 8004324 <osMutexAcquire+0x30>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800430e:	f000 fe5f 	bl	8004fd0 <xQueueSemaphoreTake>
 8004312:	2801      	cmp	r0, #1
 8004314:	d00a      	beq.n	800432c <osMutexAcquire+0x38>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8004316:	2c00      	cmp	r4, #0
 8004318:	bf14      	ite	ne
 800431a:	f06f 0001 	mvnne.w	r0, #1
 800431e:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8004322:	bd38      	pop	{r3, r4, r5, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004324:	f000 ff2e 	bl	8005184 <xQueueTakeMutexRecursive>
 8004328:	2801      	cmp	r0, #1
 800432a:	d1f4      	bne.n	8004316 <osMutexAcquire+0x22>
  stat = osOK;
 800432c:	2000      	movs	r0, #0
}
 800432e:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 8004330:	f06f 0005 	mvn.w	r0, #5
}
 8004334:	4770      	bx	lr
    stat = osErrorParameter;
 8004336:	f06f 0003 	mvn.w	r0, #3
}
 800433a:	bd38      	pop	{r3, r4, r5, pc}

0800433c <osMutexRelease>:
 800433c:	f3ef 8105 	mrs	r1, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8004340:	b9b9      	cbnz	r1, 8004372 <osMutexRelease+0x36>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8004342:	2801      	cmp	r0, #1
 8004344:	4602      	mov	r2, r0
 8004346:	d917      	bls.n	8004378 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8004348:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800434c:	b508      	push	{r3, lr}
 800434e:	f002 0301 	and.w	r3, r2, #1
    if (rmtx != 0U) {
 8004352:	b93b      	cbnz	r3, 8004364 <osMutexRelease+0x28>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004354:	461a      	mov	r2, r3
 8004356:	4619      	mov	r1, r3
 8004358:	f000 fb88 	bl	8004a6c <xQueueGenericSend>
 800435c:	2801      	cmp	r0, #1
 800435e:	d105      	bne.n	800436c <osMutexRelease+0x30>
  stat = osOK;
 8004360:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004362:	bd08      	pop	{r3, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004364:	f000 fc7c 	bl	8004c60 <xQueueGiveMutexRecursive>
 8004368:	2801      	cmp	r0, #1
 800436a:	d0f9      	beq.n	8004360 <osMutexRelease+0x24>
        stat = osErrorResource;
 800436c:	f06f 0002 	mvn.w	r0, #2
}
 8004370:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8004372:	f06f 0005 	mvn.w	r0, #5
 8004376:	4770      	bx	lr
    stat = osErrorParameter;
 8004378:	f06f 0003 	mvn.w	r0, #3
}
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop

08004380 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004382:	b083      	sub	sp, #12
 8004384:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004388:	b98e      	cbnz	r6, 80043ae <osSemaphoreNew+0x2e>
 800438a:	4605      	mov	r5, r0
 800438c:	b178      	cbz	r0, 80043ae <osSemaphoreNew+0x2e>
 800438e:	4288      	cmp	r0, r1
 8004390:	460f      	mov	r7, r1
 8004392:	d30c      	bcc.n	80043ae <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
 8004394:	4614      	mov	r4, r2
 8004396:	b172      	cbz	r2, 80043b6 <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004398:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 800439c:	b14a      	cbz	r2, 80043b2 <osSemaphoreNew+0x32>
 800439e:	2b4f      	cmp	r3, #79	@ 0x4f
 80043a0:	d905      	bls.n	80043ae <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80043a2:	2801      	cmp	r0, #1
 80043a4:	d02f      	beq.n	8004406 <osSemaphoreNew+0x86>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80043a6:	f000 fb1f 	bl	80049e8 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80043aa:	4605      	mov	r5, r0
 80043ac:	b968      	cbnz	r0, 80043ca <osSemaphoreNew+0x4a>
  hSemaphore = NULL;
 80043ae:	2500      	movs	r5, #0
 80043b0:	e010      	b.n	80043d4 <osSemaphoreNew+0x54>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1fb      	bne.n	80043ae <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 80043b6:	2d01      	cmp	r5, #1
 80043b8:	d00f      	beq.n	80043da <osSemaphoreNew+0x5a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80043ba:	4628      	mov	r0, r5
 80043bc:	4639      	mov	r1, r7
 80043be:	f000 fb37 	bl	8004a30 <xQueueCreateCountingSemaphore>
 80043c2:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 80043c4:	2d00      	cmp	r5, #0
 80043c6:	d0f2      	beq.n	80043ae <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 80043c8:	b104      	cbz	r4, 80043cc <osSemaphoreNew+0x4c>
          name = attr->name;
 80043ca:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 80043cc:	4621      	mov	r1, r4
 80043ce:	4628      	mov	r0, r5
 80043d0:	f000 ff9e 	bl	8005310 <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80043d4:	4628      	mov	r0, r5
 80043d6:	b003      	add	sp, #12
 80043d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
 80043da:	4628      	mov	r0, r5
 80043dc:	2203      	movs	r2, #3
 80043de:	2100      	movs	r1, #0
 80043e0:	f000 fada 	bl	8004998 <xQueueGenericCreate>
 80043e4:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80043e6:	2d00      	cmp	r5, #0
 80043e8:	d0e1      	beq.n	80043ae <osSemaphoreNew+0x2e>
 80043ea:	2f00      	cmp	r7, #0
 80043ec:	d0ea      	beq.n	80043c4 <osSemaphoreNew+0x44>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80043ee:	2300      	movs	r3, #0
 80043f0:	4628      	mov	r0, r5
 80043f2:	461a      	mov	r2, r3
 80043f4:	4619      	mov	r1, r3
 80043f6:	f000 fb39 	bl	8004a6c <xQueueGenericSend>
 80043fa:	2801      	cmp	r0, #1
 80043fc:	d0e4      	beq.n	80043c8 <osSemaphoreNew+0x48>
            vSemaphoreDelete (hSemaphore);
 80043fe:	4628      	mov	r0, r5
 8004400:	f000 ff5c 	bl	80052bc <vQueueDelete>
      if (hSemaphore != NULL) {
 8004404:	e7d3      	b.n	80043ae <osSemaphoreNew+0x2e>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004406:	4613      	mov	r3, r2
 8004408:	2203      	movs	r2, #3
 800440a:	4631      	mov	r1, r6
 800440c:	9200      	str	r2, [sp, #0]
 800440e:	4632      	mov	r2, r6
 8004410:	f000 fa70 	bl	80048f4 <xQueueGenericCreateStatic>
 8004414:	4605      	mov	r5, r0
 8004416:	e7e6      	b.n	80043e6 <osSemaphoreNew+0x66>

08004418 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8004418:	b360      	cbz	r0, 8004474 <osSemaphoreAcquire+0x5c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800441a:	b510      	push	{r4, lr}
 800441c:	460c      	mov	r4, r1
 800441e:	b082      	sub	sp, #8
 8004420:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8004424:	b1b3      	cbz	r3, 8004454 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 8004426:	bb11      	cbnz	r1, 800446e <osSemaphoreAcquire+0x56>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004428:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800442a:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800442c:	f000 feca 	bl	80051c4 <xQueueReceiveFromISR>
 8004430:	2801      	cmp	r0, #1
 8004432:	d118      	bne.n	8004466 <osSemaphoreAcquire+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8004434:	9b01      	ldr	r3, [sp, #4]
 8004436:	b913      	cbnz	r3, 800443e <osSemaphoreAcquire+0x26>
  stat = osOK;
 8004438:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800443a:	b002      	add	sp, #8
 800443c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800443e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004446:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	e7f1      	b.n	8004438 <osSemaphoreAcquire+0x20>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004454:	f000 fdbc 	bl	8004fd0 <xQueueSemaphoreTake>
 8004458:	2801      	cmp	r0, #1
 800445a:	d0ed      	beq.n	8004438 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
 800445c:	b11c      	cbz	r4, 8004466 <osSemaphoreAcquire+0x4e>
        stat = osErrorTimeout;
 800445e:	f06f 0001 	mvn.w	r0, #1
}
 8004462:	b002      	add	sp, #8
 8004464:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 8004466:	f06f 0002 	mvn.w	r0, #2
}
 800446a:	b002      	add	sp, #8
 800446c:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 800446e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8004472:	e7e2      	b.n	800443a <osSemaphoreAcquire+0x22>
    stat = osErrorParameter;
 8004474:	f06f 0003 	mvn.w	r0, #3
}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop

0800447c <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800447c:	b328      	cbz	r0, 80044ca <osSemaphoreRelease+0x4e>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800447e:	b500      	push	{lr}
 8004480:	b083      	sub	sp, #12
 8004482:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8004486:	b19b      	cbz	r3, 80044b0 <osSemaphoreRelease+0x34>
    yield = pdFALSE;
 8004488:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800448a:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800448c:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800448e:	f000 fc8b 	bl	8004da8 <xQueueGiveFromISR>
 8004492:	2801      	cmp	r0, #1
 8004494:	d116      	bne.n	80044c4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8004496:	9b01      	ldr	r3, [sp, #4]
 8004498:	b183      	cbz	r3, 80044bc <osSemaphoreRelease+0x40>
 800449a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800449e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	e005      	b.n	80044bc <osSemaphoreRelease+0x40>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80044b0:	461a      	mov	r2, r3
 80044b2:	4619      	mov	r1, r3
 80044b4:	f000 fada 	bl	8004a6c <xQueueGenericSend>
 80044b8:	2801      	cmp	r0, #1
 80044ba:	d103      	bne.n	80044c4 <osSemaphoreRelease+0x48>
  stat = osOK;
 80044bc:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80044be:	b003      	add	sp, #12
 80044c0:	f85d fb04 	ldr.w	pc, [sp], #4
      stat = osErrorResource;
 80044c4:	f06f 0002 	mvn.w	r0, #2
 80044c8:	e7f9      	b.n	80044be <osSemaphoreRelease+0x42>
    stat = osErrorParameter;
 80044ca:	f06f 0003 	mvn.w	r0, #3
}
 80044ce:	4770      	bx	lr

080044d0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	f3ef 8405 	mrs	r4, IPSR
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80044d6:	b944      	cbnz	r4, 80044ea <osSemaphoreDelete+0x1a>
    stat = osErrorISR;
  }
  else if (hSemaphore == NULL) {
 80044d8:	4605      	mov	r5, r0
 80044da:	b148      	cbz	r0, 80044f0 <osSemaphoreDelete+0x20>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80044dc:	f000 ff30 	bl	8005340 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vSemaphoreDelete (hSemaphore);
 80044e0:	4628      	mov	r0, r5
 80044e2:	f000 feeb 	bl	80052bc <vQueueDelete>
    stat = osOK;
 80044e6:	4620      	mov	r0, r4
#else
  stat = osError;
#endif

  return (stat);
}
 80044e8:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 80044ea:	f06f 0005 	mvn.w	r0, #5
}
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorParameter;
 80044f0:	f06f 0003 	mvn.w	r0, #3
}
 80044f4:	bd38      	pop	{r3, r4, r5, pc}
 80044f6:	bf00      	nop

080044f8 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	b083      	sub	sp, #12
 80044fc:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004500:	b987      	cbnz	r7, 8004524 <osMessageQueueNew+0x2c>
 8004502:	4605      	mov	r5, r0
 8004504:	b170      	cbz	r0, 8004524 <osMessageQueueNew+0x2c>
 8004506:	b169      	cbz	r1, 8004524 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 8004508:	4614      	mov	r4, r2
 800450a:	b17a      	cbz	r2, 800452c <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800450c:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8004510:	b1c3      	cbz	r3, 8004544 <osMessageQueueNew+0x4c>
 8004512:	2a4f      	cmp	r2, #79	@ 0x4f
 8004514:	d906      	bls.n	8004524 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004516:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004518:	b122      	cbz	r2, 8004524 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800451a:	fb01 f505 	mul.w	r5, r1, r5
 800451e:	6966      	ldr	r6, [r4, #20]
 8004520:	42ae      	cmp	r6, r5
 8004522:	d21e      	bcs.n	8004562 <osMessageQueueNew+0x6a>
  hQueue = NULL;
 8004524:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8004526:	4628      	mov	r0, r5
 8004528:	b003      	add	sp, #12
 800452a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 800452c:	f000 fa34 	bl	8004998 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8004530:	4605      	mov	r5, r0
 8004532:	2800      	cmp	r0, #0
 8004534:	d0f6      	beq.n	8004524 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
 8004536:	4628      	mov	r0, r5
 8004538:	4621      	mov	r1, r4
 800453a:	f000 fee9 	bl	8005310 <vQueueAddToRegistry>
}
 800453e:	4628      	mov	r0, r5
 8004540:	b003      	add	sp, #12
 8004542:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004544:	2a00      	cmp	r2, #0
 8004546:	d1ed      	bne.n	8004524 <osMessageQueueNew+0x2c>
 8004548:	6923      	ldr	r3, [r4, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ea      	bne.n	8004524 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800454e:	6962      	ldr	r2, [r4, #20]
 8004550:	2a00      	cmp	r2, #0
 8004552:	d1e7      	bne.n	8004524 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 8004554:	f000 fa20 	bl	8004998 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8004558:	4605      	mov	r5, r0
 800455a:	2800      	cmp	r0, #0
 800455c:	d0e2      	beq.n	8004524 <osMessageQueueNew+0x2c>
        name = attr->name;
 800455e:	6824      	ldr	r4, [r4, #0]
 8004560:	e7e9      	b.n	8004536 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004562:	9700      	str	r7, [sp, #0]
 8004564:	f000 f9c6 	bl	80048f4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8004568:	4605      	mov	r5, r0
 800456a:	2800      	cmp	r0, #0
 800456c:	d1f7      	bne.n	800455e <osMessageQueueNew+0x66>
 800456e:	e7d9      	b.n	8004524 <osMessageQueueNew+0x2c>

08004570 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004570:	b560      	push	{r5, r6, lr}
 8004572:	461e      	mov	r6, r3
 8004574:	b083      	sub	sp, #12
 8004576:	f3ef 8205 	mrs	r2, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800457a:	fab0 f580 	clz	r5, r0
 800457e:	fab1 f381 	clz	r3, r1
 8004582:	096d      	lsrs	r5, r5, #5
 8004584:	095b      	lsrs	r3, r3, #5
  if (IS_IRQ()) {
 8004586:	b1da      	cbz	r2, 80045c0 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004588:	2e00      	cmp	r6, #0
 800458a:	bf18      	it	ne
 800458c:	f043 0301 	orrne.w	r3, r3, #1
 8004590:	bb33      	cbnz	r3, 80045e0 <osMessageQueuePut+0x70>
 8004592:	bb2d      	cbnz	r5, 80045e0 <osMessageQueuePut+0x70>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004594:	462b      	mov	r3, r5
 8004596:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8004598:	9501      	str	r5, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800459a:	f000 fb9f 	bl	8004cdc <xQueueGenericSendFromISR>
 800459e:	2801      	cmp	r0, #1
 80045a0:	d11a      	bne.n	80045d8 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80045a2:	9b01      	ldr	r3, [sp, #4]
 80045a4:	b14b      	cbz	r3, 80045ba <osMessageQueuePut+0x4a>
 80045a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80045aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80045ba:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80045bc:	b003      	add	sp, #12
 80045be:	bd60      	pop	{r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80045c0:	b975      	cbnz	r5, 80045e0 <osMessageQueuePut+0x70>
 80045c2:	b96b      	cbnz	r3, 80045e0 <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80045c4:	4632      	mov	r2, r6
 80045c6:	f000 fa51 	bl	8004a6c <xQueueGenericSend>
 80045ca:	2801      	cmp	r0, #1
 80045cc:	d0f5      	beq.n	80045ba <osMessageQueuePut+0x4a>
        if (timeout != 0U) {
 80045ce:	b11e      	cbz	r6, 80045d8 <osMessageQueuePut+0x68>
          stat = osErrorTimeout;
 80045d0:	f06f 0001 	mvn.w	r0, #1
}
 80045d4:	b003      	add	sp, #12
 80045d6:	bd60      	pop	{r5, r6, pc}
        stat = osErrorResource;
 80045d8:	f06f 0002 	mvn.w	r0, #2
}
 80045dc:	b003      	add	sp, #12
 80045de:	bd60      	pop	{r5, r6, pc}
      stat = osErrorParameter;
 80045e0:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80045e4:	e7ea      	b.n	80045bc <osMessageQueuePut+0x4c>
 80045e6:	bf00      	nop

080045e8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	461e      	mov	r6, r3
 80045ec:	b082      	sub	sp, #8
 80045ee:	f3ef 8305 	mrs	r3, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045f2:	fab0 f580 	clz	r5, r0
 80045f6:	fab1 f481 	clz	r4, r1
 80045fa:	096d      	lsrs	r5, r5, #5
 80045fc:	0964      	lsrs	r4, r4, #5
  if (IS_IRQ()) {
 80045fe:	b1d3      	cbz	r3, 8004636 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004600:	2e00      	cmp	r6, #0
 8004602:	bf18      	it	ne
 8004604:	f044 0401 	orrne.w	r4, r4, #1
 8004608:	bb2c      	cbnz	r4, 8004656 <osMessageQueueGet+0x6e>
 800460a:	bb25      	cbnz	r5, 8004656 <osMessageQueueGet+0x6e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800460c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800460e:	9501      	str	r5, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004610:	f000 fdd8 	bl	80051c4 <xQueueReceiveFromISR>
 8004614:	2801      	cmp	r0, #1
 8004616:	d11a      	bne.n	800464e <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8004618:	9b01      	ldr	r3, [sp, #4]
 800461a:	b14b      	cbz	r3, 8004630 <osMessageQueueGet+0x48>
 800461c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004624:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8004630:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004632:	b002      	add	sp, #8
 8004634:	bd70      	pop	{r4, r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004636:	b975      	cbnz	r5, 8004656 <osMessageQueueGet+0x6e>
 8004638:	b96c      	cbnz	r4, 8004656 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800463a:	4632      	mov	r2, r6
 800463c:	f000 fc0a 	bl	8004e54 <xQueueReceive>
 8004640:	2801      	cmp	r0, #1
 8004642:	d0f5      	beq.n	8004630 <osMessageQueueGet+0x48>
        if (timeout != 0U) {
 8004644:	b11e      	cbz	r6, 800464e <osMessageQueueGet+0x66>
          stat = osErrorTimeout;
 8004646:	f06f 0001 	mvn.w	r0, #1
}
 800464a:	b002      	add	sp, #8
 800464c:	bd70      	pop	{r4, r5, r6, pc}
        stat = osErrorResource;
 800464e:	f06f 0002 	mvn.w	r0, #2
}
 8004652:	b002      	add	sp, #8
 8004654:	bd70      	pop	{r4, r5, r6, pc}
      stat = osErrorParameter;
 8004656:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800465a:	e7ea      	b.n	8004632 <osMessageQueueGet+0x4a>

0800465c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800465c:	b130      	cbz	r0, 800466c <osMessageQueueGetCount+0x10>
 800465e:	f3ef 8305 	mrs	r3, IPSR
 8004662:	b10b      	cbz	r3, 8004668 <osMessageQueueGetCount+0xc>
 8004664:	f000 be1e 	b.w	80052a4 <uxQueueMessagesWaitingFromISR>
 8004668:	f000 be08 	b.w	800527c <uxQueueMessagesWaiting>
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop

08004670 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	f3ef 8405 	mrs	r4, IPSR
 8004676:	b944      	cbnz	r4, 800468a <osMessageQueueDelete+0x1a>
 8004678:	4605      	mov	r5, r0
 800467a:	b148      	cbz	r0, 8004690 <osMessageQueueDelete+0x20>
 800467c:	f000 fe60 	bl	8005340 <vQueueUnregisterQueue>
 8004680:	4628      	mov	r0, r5
 8004682:	f000 fe1b 	bl	80052bc <vQueueDelete>
 8004686:	4620      	mov	r0, r4
 8004688:	bd38      	pop	{r3, r4, r5, pc}
 800468a:	f06f 0005 	mvn.w	r0, #5
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	f06f 0003 	mvn.w	r0, #3
 8004694:	bd38      	pop	{r3, r4, r5, pc}
 8004696:	bf00      	nop

08004698 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004698:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <vApplicationGetIdleTaskMemory+0x18>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800469a:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800469c:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800469e:	f44f 7300 	mov.w	r3, #512	@ 0x200
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046a2:	4c04      	ldr	r4, [pc, #16]	@ (80046b4 <vApplicationGetIdleTaskMemory+0x1c>)
 80046a4:	600c      	str	r4, [r1, #0]
}
 80046a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046aa:	6013      	str	r3, [r2, #0]
}
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	24011d48 	.word	0x24011d48
 80046b4:	24011548 	.word	0x24011548

080046b8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046b8:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046ba:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046bc:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046c2:	4c04      	ldr	r4, [pc, #16]	@ (80046d4 <vApplicationGetTimerTaskMemory+0x1c>)
 80046c4:	600c      	str	r4, [r1, #0]
}
 80046c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046ca:	6013      	str	r3, [r2, #0]
}
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	240114a0 	.word	0x240114a0
 80046d4:	240104a0 	.word	0x240104a0

080046d8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046dc:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046e0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046e2:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046e4:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046e6:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046e8:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop

080046f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop

080046f8 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80046f8:	6803      	ldr	r3, [r0, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046fa:	6842      	ldr	r2, [r0, #4]
	( pxList->uxNumberOfItems )++;
 80046fc:	3301      	adds	r3, #1
{
 80046fe:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004700:	6894      	ldr	r4, [r2, #8]
 8004702:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004706:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004708:	6091      	str	r1, [r2, #8]
}
 800470a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 800470e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004710:	6003      	str	r3, [r0, #0]
}
 8004712:	4770      	bx	lr

08004714 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004714:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004716:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004718:	1c6b      	adds	r3, r5, #1
 800471a:	d010      	beq.n	800473e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800471c:	f100 0308 	add.w	r3, r0, #8
 8004720:	461c      	mov	r4, r3
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	42aa      	cmp	r2, r5
 8004728:	d9fa      	bls.n	8004720 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800472a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800472c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800472e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004730:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004732:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004734:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8004736:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004738:	6002      	str	r2, [r0, #0]
}
 800473a:	bc30      	pop	{r4, r5}
 800473c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800473e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8004740:	6863      	ldr	r3, [r4, #4]
 8004742:	e7f2      	b.n	800472a <vListInsert+0x16>

08004744 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004744:	6903      	ldr	r3, [r0, #16]
{
 8004746:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004748:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800474a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 800474e:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8004750:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004754:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004756:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8004758:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800475c:	bf08      	it	eq
 800475e:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8004760:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8004762:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004764:	3a01      	subs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8004768:	6818      	ldr	r0, [r3, #0]
}
 800476a:	4770      	bx	lr

0800476c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004770:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8004772:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004774:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004776:	b92a      	cbnz	r2, 8004784 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004778:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800477a:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800477c:	b34e      	cbz	r6, 80047d2 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800477e:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004780:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 8004782:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004784:	b97e      	cbnz	r6, 80047a6 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004786:	6840      	ldr	r0, [r0, #4]
 8004788:	f00b fd91 	bl	80102ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800478c:	6863      	ldr	r3, [r4, #4]
 800478e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004790:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004792:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004794:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004796:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004798:	bf24      	itt	cs
 800479a:	6823      	ldrcs	r3, [r4, #0]
 800479c:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800479e:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 80047a0:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047a2:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80047a4:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047a6:	68c0      	ldr	r0, [r0, #12]
 80047a8:	f00b fd81 	bl	80102ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047ac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80047ae:	68e3      	ldr	r3, [r4, #12]
 80047b0:	4251      	negs	r1, r2
 80047b2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047b8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047ba:	d202      	bcs.n	80047c2 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047bc:	68a3      	ldr	r3, [r4, #8]
 80047be:	440b      	add	r3, r1
 80047c0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80047c2:	2e02      	cmp	r6, #2
 80047c4:	d1eb      	bne.n	800479e <prvCopyDataToQueue+0x32>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047c6:	2d01      	cmp	r5, #1
BaseType_t xReturn = pdFALSE;
 80047c8:	f04f 0000 	mov.w	r0, #0
 80047cc:	bf38      	it	cc
 80047ce:	2501      	movcc	r5, #1
 80047d0:	e7d6      	b.n	8004780 <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047d2:	6880      	ldr	r0, [r0, #8]
 80047d4:	f001 fb38 	bl	8005e48 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047d8:	60a6      	str	r6, [r4, #8]
 80047da:	e7d1      	b.n	8004780 <prvCopyDataToQueue+0x14>

080047dc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047dc:	b570      	push	{r4, r5, r6, lr}
 80047de:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047e0:	f001 fe50 	bl	8006484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047e4:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 80047e8:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047ea:	2c00      	cmp	r4, #0
 80047ec:	dd14      	ble.n	8004818 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047ee:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 80047f2:	e003      	b.n	80047fc <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047f4:	1e63      	subs	r3, r4, #1
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047fa:	b16a      	cbz	r2, 8004818 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047fc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047fe:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004800:	b153      	cbz	r3, 8004818 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004802:	f001 fa31 	bl	8005c68 <xTaskRemoveFromEventList>
 8004806:	2800      	cmp	r0, #0
 8004808:	d0f4      	beq.n	80047f4 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800480a:	f001 fac1 	bl	8005d90 <vTaskMissedYield>
			--cTxLock;
 800480e:	1e63      	subs	r3, r4, #1
 8004810:	b2da      	uxtb	r2, r3
 8004812:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004814:	2a00      	cmp	r2, #0
 8004816:	d1f1      	bne.n	80047fc <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004818:	23ff      	movs	r3, #255	@ 0xff
 800481a:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800481e:	f001 fe53 	bl	80064c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004822:	f001 fe2f 	bl	8006484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004826:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 800482a:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800482c:	2c00      	cmp	r4, #0
 800482e:	dd14      	ble.n	800485a <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004830:	f105 0610 	add.w	r6, r5, #16
 8004834:	e003      	b.n	800483e <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004836:	1e63      	subs	r3, r4, #1
 8004838:	b2da      	uxtb	r2, r3
 800483a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800483c:	b16a      	cbz	r2, 800485a <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800483e:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004840:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004842:	b153      	cbz	r3, 800485a <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004844:	f001 fa10 	bl	8005c68 <xTaskRemoveFromEventList>
 8004848:	2800      	cmp	r0, #0
 800484a:	d0f4      	beq.n	8004836 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 800484c:	f001 faa0 	bl	8005d90 <vTaskMissedYield>
				--cRxLock;
 8004850:	1e63      	subs	r3, r4, #1
 8004852:	b2da      	uxtb	r2, r3
 8004854:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004856:	2a00      	cmp	r2, #0
 8004858:	d1f1      	bne.n	800483e <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800485a:	23ff      	movs	r3, #255	@ 0xff
 800485c:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
}
 8004860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004864:	f001 be30 	b.w	80064c8 <vPortExitCritical>

08004868 <xQueueGenericReset>:
{
 8004868:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800486a:	b1e0      	cbz	r0, 80048a6 <xQueueGenericReset+0x3e>
 800486c:	4604      	mov	r4, r0
 800486e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8004870:	f001 fe08 	bl	8006484 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004874:	6822      	ldr	r2, [r4, #0]
 8004876:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800487a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800487c:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004880:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004882:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004884:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004886:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004888:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800488a:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800488c:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800488e:	63a1      	str	r1, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004890:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004894:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8004898:	b975      	cbnz	r5, 80048b8 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	b9c3      	cbnz	r3, 80048d0 <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 800489e:	f001 fe13 	bl	80064c8 <vPortExitCritical>
}
 80048a2:	2001      	movs	r0, #1
 80048a4:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80048b6:	e7fe      	b.n	80048b6 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048b8:	f104 0010 	add.w	r0, r4, #16
 80048bc:	f7ff ff0c 	bl	80046d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048c0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80048c4:	f7ff ff08 	bl	80046d8 <vListInitialise>
	taskEXIT_CRITICAL();
 80048c8:	f001 fdfe 	bl	80064c8 <vPortExitCritical>
}
 80048cc:	2001      	movs	r0, #1
 80048ce:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048d0:	f104 0010 	add.w	r0, r4, #16
 80048d4:	f001 f9c8 	bl	8005c68 <xTaskRemoveFromEventList>
 80048d8:	2800      	cmp	r0, #0
 80048da:	d0e0      	beq.n	800489e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80048dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80048e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	e7d5      	b.n	800489e <xQueueGenericReset+0x36>
 80048f2:	bf00      	nop

080048f4 <xQueueGenericCreateStatic>:
	{
 80048f4:	b530      	push	{r4, r5, lr}
 80048f6:	b085      	sub	sp, #20
 80048f8:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048fc:	b940      	cbnz	r0, 8004910 <xQueueGenericCreateStatic+0x1c>
 80048fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	e7fe      	b.n	800490e <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8004910:	b153      	cbz	r3, 8004928 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004912:	b30a      	cbz	r2, 8004958 <xQueueGenericCreateStatic+0x64>
 8004914:	b989      	cbnz	r1, 800493a <xQueueGenericCreateStatic+0x46>
 8004916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	e7fe      	b.n	8004926 <xQueueGenericCreateStatic+0x32>
 8004928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8004938:	e7fe      	b.n	8004938 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800493a:	b16a      	cbz	r2, 8004958 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800493c:	2550      	movs	r5, #80	@ 0x50
 800493e:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004940:	9d03      	ldr	r5, [sp, #12]
 8004942:	2d50      	cmp	r5, #80	@ 0x50
 8004944:	d013      	beq.n	800496e <xQueueGenericCreateStatic+0x7a>
 8004946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	e7fe      	b.n	8004956 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004958:	2900      	cmp	r1, #0
 800495a:	d0ef      	beq.n	800493c <xQueueGenericCreateStatic+0x48>
 800495c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	e7fe      	b.n	800496c <xQueueGenericCreateStatic+0x78>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800496e:	2900      	cmp	r1, #0
 8004970:	bf08      	it	eq
 8004972:	461a      	moveq	r2, r3
	pxNewQueue->uxItemSize = uxItemSize;
 8004974:	6419      	str	r1, [r3, #64]	@ 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004976:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8004978:	63d8      	str	r0, [r3, #60]	@ 0x3c
 800497a:	601a      	str	r2, [r3, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800497c:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800497e:	f883 1046 	strb.w	r1, [r3, #70]	@ 0x46
 8004982:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004984:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004986:	f7ff ff6f 	bl	8004868 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800498a:	9b01      	ldr	r3, [sp, #4]
	}
 800498c:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 800498e:	f883 404c 	strb.w	r4, [r3, #76]	@ 0x4c
	}
 8004992:	b005      	add	sp, #20
 8004994:	bd30      	pop	{r4, r5, pc}
 8004996:	bf00      	nop

08004998 <xQueueGenericCreate>:
	{
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800499a:	b940      	cbnz	r0, 80049ae <xQueueGenericCreate+0x16>
 800499c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	e7fe      	b.n	80049ac <xQueueGenericCreate+0x14>
 80049ae:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b0:	fb01 f000 	mul.w	r0, r1, r0
 80049b4:	460d      	mov	r5, r1
 80049b6:	4616      	mov	r6, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80049b8:	3050      	adds	r0, #80	@ 0x50
 80049ba:	f001 fed7 	bl	800676c <pvPortMalloc>
		if( pxNewQueue != NULL )
 80049be:	4607      	mov	r7, r0
 80049c0:	b170      	cbz	r0, 80049e0 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80049c8:	b165      	cbz	r5, 80049e4 <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049ca:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049ce:	2101      	movs	r1, #1
 80049d0:	4638      	mov	r0, r7
 80049d2:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80049d4:	e9c7 450f 	strd	r4, r5, [r7, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049d8:	f7ff ff46 	bl	8004868 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80049dc:	f887 604c 	strb.w	r6, [r7, #76]	@ 0x4c
	}
 80049e0:	4638      	mov	r0, r7
 80049e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049e4:	4603      	mov	r3, r0
 80049e6:	e7f2      	b.n	80049ce <xQueueGenericCreate+0x36>

080049e8 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80049e8:	b940      	cbnz	r0, 80049fc <xQueueCreateCountingSemaphoreStatic+0x14>
 80049ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	e7fe      	b.n	80049fa <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 80049fc:	4288      	cmp	r0, r1
	{
 80049fe:	b510      	push	{r4, lr}
 8004a00:	460c      	mov	r4, r1
 8004a02:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 8004a04:	d208      	bcs.n	8004a18 <xQueueCreateCountingSemaphoreStatic+0x30>
 8004a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	e7fe      	b.n	8004a16 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004a18:	2102      	movs	r1, #2
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	9100      	str	r1, [sp, #0]
 8004a20:	4611      	mov	r1, r2
 8004a22:	f7ff ff67 	bl	80048f4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8004a26:	b100      	cbz	r0, 8004a2a <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004a28:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8004a2a:	b002      	add	sp, #8
 8004a2c:	bd10      	pop	{r4, pc}
 8004a2e:	bf00      	nop

08004a30 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8004a30:	b940      	cbnz	r0, 8004a44 <xQueueCreateCountingSemaphore+0x14>
 8004a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	e7fe      	b.n	8004a42 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004a44:	4288      	cmp	r0, r1
	{
 8004a46:	b510      	push	{r4, lr}
 8004a48:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8004a4a:	d208      	bcs.n	8004a5e <xQueueCreateCountingSemaphore+0x2e>
 8004a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	e7fe      	b.n	8004a5c <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004a5e:	2202      	movs	r2, #2
 8004a60:	2100      	movs	r1, #0
 8004a62:	f7ff ff99 	bl	8004998 <xQueueGenericCreate>
		if( xHandle != NULL )
 8004a66:	b100      	cbz	r0, 8004a6a <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004a68:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8004a6a:	bd10      	pop	{r4, pc}

08004a6c <xQueueGenericSend>:
{
 8004a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a70:	b085      	sub	sp, #20
 8004a72:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d07e      	beq.n	8004b76 <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a78:	460f      	mov	r7, r1
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	461e      	mov	r6, r3
 8004a7e:	2900      	cmp	r1, #0
 8004a80:	d069      	beq.n	8004b56 <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a82:	2e02      	cmp	r6, #2
 8004a84:	d10b      	bne.n	8004a9e <xQueueGenericSend+0x32>
 8004a86:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d008      	beq.n	8004a9e <xQueueGenericSend+0x32>
 8004a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	e7fe      	b.n	8004a9c <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a9e:	f001 f983 	bl	8005da8 <xTaskGetSchedulerState>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d070      	beq.n	8004b88 <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aa6:	f1a6 0802 	sub.w	r8, r6, #2
 8004aaa:	2500      	movs	r5, #0
 8004aac:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8004ab0:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ab2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004ab6:	e007      	b.n	8004ac8 <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004ab8:	f001 fd06 	bl	80064c8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004abc:	4620      	mov	r0, r4
 8004abe:	f7ff fe8d 	bl	80047dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ac2:	f001 f803 	bl	8005acc <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ac6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8004ac8:	f001 fcdc 	bl	8006484 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004acc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004ace:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004ad0:	4290      	cmp	r0, r2
 8004ad2:	d365      	bcc.n	8004ba0 <xQueueGenericSend+0x134>
 8004ad4:	f1b8 0f00 	cmp.w	r8, #0
 8004ad8:	d162      	bne.n	8004ba0 <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ada:	9b01      	ldr	r3, [sp, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d077      	beq.n	8004bd0 <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 8004ae0:	2d00      	cmp	r5, #0
 8004ae2:	d044      	beq.n	8004b6e <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 8004ae4:	f001 fcf0 	bl	80064c8 <vPortExitCritical>
		vTaskSuspendAll();
 8004ae8:	f000 fe9c 	bl	8005824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004aec:	f001 fcca 	bl	8006484 <vPortEnterCritical>
 8004af0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004af4:	2bff      	cmp	r3, #255	@ 0xff
 8004af6:	d101      	bne.n	8004afc <xQueueGenericSend+0x90>
 8004af8:	f884 9044 	strb.w	r9, [r4, #68]	@ 0x44
 8004afc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004b00:	2bff      	cmp	r3, #255	@ 0xff
 8004b02:	d101      	bne.n	8004b08 <xQueueGenericSend+0x9c>
 8004b04:	f884 9045 	strb.w	r9, [r4, #69]	@ 0x45
 8004b08:	f001 fcde 	bl	80064c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b0c:	a901      	add	r1, sp, #4
 8004b0e:	a802      	add	r0, sp, #8
 8004b10:	f001 f8fc 	bl	8005d0c <xTaskCheckForTimeOut>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d15f      	bne.n	8004bd8 <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 8004b18:	f001 fcb4 	bl	8006484 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b1c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004b1e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1c9      	bne.n	8004ab8 <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 8004b24:	f001 fcd0 	bl	80064c8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b28:	9901      	ldr	r1, [sp, #4]
 8004b2a:	f104 0010 	add.w	r0, r4, #16
 8004b2e:	f001 f863 	bl	8005bf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b32:	4620      	mov	r0, r4
 8004b34:	f7ff fe52 	bl	80047dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b38:	f000 ffc8 	bl	8005acc <xTaskResumeAll>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	d1c2      	bne.n	8004ac6 <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 8004b40:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b48:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	e7b7      	b.n	8004ac6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b56:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d092      	beq.n	8004a82 <xQueueGenericSend+0x16>
 8004b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	e7fe      	b.n	8004b6c <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b6e:	a802      	add	r0, sp, #8
 8004b70:	f001 f8c0 	bl	8005cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b74:	e7b6      	b.n	8004ae4 <xQueueGenericSend+0x78>
 8004b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004b86:	e7fe      	b.n	8004b86 <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b88:	9b01      	ldr	r3, [sp, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d08b      	beq.n	8004aa6 <xQueueGenericSend+0x3a>
 8004b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	e7fe      	b.n	8004b9e <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ba0:	4632      	mov	r2, r6
 8004ba2:	4639      	mov	r1, r7
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f7ff fde1 	bl	800476c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004baa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004bac:	b9d3      	cbnz	r3, 8004be4 <xQueueGenericSend+0x178>
					else if( xYieldRequired != pdFALSE )
 8004bae:	b148      	cbz	r0, 8004bc4 <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 8004bb0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004bb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bb8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004bc4:	f001 fc80 	bl	80064c8 <vPortExitCritical>
				return pdPASS;
 8004bc8:	2001      	movs	r0, #1
}
 8004bca:	b005      	add	sp, #20
 8004bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8004bd0:	f001 fc7a 	bl	80064c8 <vPortExitCritical>
					return errQUEUE_FULL;
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	e7f8      	b.n	8004bca <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f7ff fdff 	bl	80047dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bde:	f000 ff75 	bl	8005acc <xTaskResumeAll>
			return errQUEUE_FULL;
 8004be2:	e7f7      	b.n	8004bd4 <xQueueGenericSend+0x168>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004be4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004be8:	f001 f83e 	bl	8005c68 <xTaskRemoveFromEventList>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d0e9      	beq.n	8004bc4 <xQueueGenericSend+0x158>
 8004bf0:	e7de      	b.n	8004bb0 <xQueueGenericSend+0x144>
 8004bf2:	bf00      	nop

08004bf4 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 8004bf4:	b179      	cbz	r1, 8004c16 <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bf6:	2350      	movs	r3, #80	@ 0x50
	{
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bfc:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bfe:	9b01      	ldr	r3, [sp, #4]
 8004c00:	2b50      	cmp	r3, #80	@ 0x50
 8004c02:	d011      	beq.n	8004c28 <xQueueCreateMutexStatic+0x34>
 8004c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	e7fe      	b.n	8004c14 <xQueueCreateMutexStatic+0x20>
 8004c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8004c26:	e7fe      	b.n	8004c26 <xQueueCreateMutexStatic+0x32>
 8004c28:	460c      	mov	r4, r1
	pxNewQueue->uxLength = uxQueueLength;
 8004c2a:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	4605      	mov	r5, r0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c30:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c32:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c34:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c38:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxLength = uxQueueLength;
 8004c3a:	e9c4 160f 	strd	r1, r6, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c3e:	f7ff fe13 	bl	8004868 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004c42:	4633      	mov	r3, r6
 8004c44:	4632      	mov	r2, r6
 8004c46:	4631      	mov	r1, r6
 8004c48:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8004c4a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c4e:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004c50:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004c52:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004c54:	f7ff ff0a 	bl	8004a6c <xQueueGenericSend>
	}
 8004c58:	4620      	mov	r0, r4
 8004c5a:	b002      	add	sp, #8
 8004c5c:	bd70      	pop	{r4, r5, r6, pc}
 8004c5e:	bf00      	nop

08004c60 <xQueueGiveMutexRecursive>:
	{
 8004c60:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8004c62:	b138      	cbz	r0, 8004c74 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004c64:	6885      	ldr	r5, [r0, #8]
 8004c66:	4604      	mov	r4, r0
 8004c68:	f001 f898 	bl	8005d9c <xTaskGetCurrentTaskHandle>
 8004c6c:	4285      	cmp	r5, r0
 8004c6e:	d00a      	beq.n	8004c86 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8004c70:	2000      	movs	r0, #0
	}
 8004c72:	bd38      	pop	{r3, r4, r5, pc}
 8004c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8004c84:	e7fe      	b.n	8004c84 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004c86:	68e3      	ldr	r3, [r4, #12]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004c8c:	b10b      	cbz	r3, 8004c92 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8004c8e:	2001      	movs	r0, #1
	}
 8004c90:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004c92:	461a      	mov	r2, r3
 8004c94:	4619      	mov	r1, r3
 8004c96:	4620      	mov	r0, r4
 8004c98:	f7ff fee8 	bl	8004a6c <xQueueGenericSend>
 8004c9c:	e7f7      	b.n	8004c8e <xQueueGiveMutexRecursive+0x2e>
 8004c9e:	bf00      	nop

08004ca0 <xQueueCreateMutex>:
	{
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ca4:	2050      	movs	r0, #80	@ 0x50
 8004ca6:	f001 fd61 	bl	800676c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004caa:	4604      	mov	r4, r0
 8004cac:	b198      	cbz	r0, 8004cd6 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004cae:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 8004cb0:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cb2:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004cb4:	f880 6046 	strb.w	r6, [r0, #70]	@ 0x46
	pxNewQueue->uxLength = uxQueueLength;
 8004cb8:	e9c0 160f 	strd	r1, r6, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cbc:	f7ff fdd4 	bl	8004868 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004cc0:	4633      	mov	r3, r6
 8004cc2:	4632      	mov	r2, r6
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8004cc8:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ccc:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004cce:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004cd0:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004cd2:	f7ff fecb 	bl	8004a6c <xQueueGenericSend>
	}
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	bd70      	pop	{r4, r5, r6, pc}
 8004cda:	bf00      	nop

08004cdc <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d04b      	beq.n	8004d78 <xQueueGenericSendFromISR+0x9c>
{
 8004ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce4:	460e      	mov	r6, r1
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4617      	mov	r7, r2
 8004cea:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cec:	b339      	cbz	r1, 8004d3e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cee:	2d02      	cmp	r5, #2
 8004cf0:	d10b      	bne.n	8004d0a <xQueueGenericSendFromISR+0x2e>
 8004cf2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d008      	beq.n	8004d0a <xQueueGenericSendFromISR+0x2e>
 8004cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	e7fe      	b.n	8004d08 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d0a:	f001 fcd7 	bl	80066bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d0e:	f3ef 8811 	mrs	r8, BASEPRI
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d22:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004d24:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d315      	bcc.n	8004d56 <xQueueGenericSendFromISR+0x7a>
 8004d2a:	f1a5 0002 	sub.w	r0, r5, #2
 8004d2e:	fab0 f080 	clz	r0, r0
 8004d32:	0940      	lsrs	r0, r0, #5
 8004d34:	b978      	cbnz	r0, 8004d56 <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d36:	f388 8811 	msr	BASEPRI, r8
}
 8004d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d3e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0d4      	beq.n	8004cee <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	e7fe      	b.n	8004d54 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d56:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d58:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d60:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d62:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d64:	f7ff fd02 	bl	800476c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004d68:	1c6b      	adds	r3, r5, #1
 8004d6a:	d00e      	beq.n	8004d8a <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d6c:	1c6b      	adds	r3, r5, #1
 8004d6e:	b25b      	sxtb	r3, r3
 8004d70:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8004d74:	2001      	movs	r0, #1
 8004d76:	e7de      	b.n	8004d36 <xQueueGenericSendFromISR+0x5a>
 8004d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004d88:	e7fe      	b.n	8004d88 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d8a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f1      	beq.n	8004d74 <xQueueGenericSendFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d90:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004d94:	f000 ff68 	bl	8005c68 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d0eb      	beq.n	8004d74 <xQueueGenericSendFromISR+0x98>
 8004d9c:	2f00      	cmp	r7, #0
 8004d9e:	d0e9      	beq.n	8004d74 <xQueueGenericSendFromISR+0x98>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004da0:	2301      	movs	r3, #1
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	e7e6      	b.n	8004d74 <xQueueGenericSendFromISR+0x98>
 8004da6:	bf00      	nop

08004da8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8004da8:	b360      	cbz	r0, 8004e04 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004daa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8004db0:	b143      	cbz	r3, 8004dc4 <xQueueGiveFromISR+0x1c>
 8004db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	e7fe      	b.n	8004dc2 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004dc4:	6803      	ldr	r3, [r0, #0]
 8004dc6:	460d      	mov	r5, r1
 8004dc8:	b32b      	cbz	r3, 8004e16 <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dca:	f001 fc77 	bl	80066bc <vPortValidateInterruptPriority>
	__asm volatile
 8004dce:	f3ef 8611 	mrs	r6, BASEPRI
 8004dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004de2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004de4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d921      	bls.n	8004e2e <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004dea:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004dee:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8004df0:	2aff      	cmp	r2, #255	@ 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004df2:	63a3      	str	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8004df4:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8004df6:	d01e      	beq.n	8004e36 <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004df8:	3301      	adds	r3, #1
 8004dfa:	b25b      	sxtb	r3, r3
 8004dfc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8004e00:	2001      	movs	r0, #1
 8004e02:	e015      	b.n	8004e30 <xQueueGiveFromISR+0x88>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004e14:	e7fe      	b.n	8004e14 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004e16:	6883      	ldr	r3, [r0, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0d6      	beq.n	8004dca <xQueueGiveFromISR+0x22>
 8004e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	e7fe      	b.n	8004e2c <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8004e2e:	2000      	movs	r0, #0
	__asm volatile
 8004e30:	f386 8811 	msr	BASEPRI, r6
}
 8004e34:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e36:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0e1      	beq.n	8004e00 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e3c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004e40:	f000 ff12 	bl	8005c68 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8004e44:	2d00      	cmp	r5, #0
 8004e46:	d0db      	beq.n	8004e00 <xQueueGiveFromISR+0x58>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d0d9      	beq.n	8004e00 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	602b      	str	r3, [r5, #0]
 8004e50:	e7d6      	b.n	8004e00 <xQueueGiveFromISR+0x58>
 8004e52:	bf00      	nop

08004e54 <xQueueReceive>:
{
 8004e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e56:	b085      	sub	sp, #20
 8004e58:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	f000 809d 	beq.w	8004f9a <xQueueReceive+0x146>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e60:	460e      	mov	r6, r1
 8004e62:	4604      	mov	r4, r0
 8004e64:	2900      	cmp	r1, #0
 8004e66:	d041      	beq.n	8004eec <xQueueReceive+0x98>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e68:	f000 ff9e 	bl	8005da8 <xTaskGetSchedulerState>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d049      	beq.n	8004f04 <xQueueReceive+0xb0>
		taskENTER_CRITICAL();
 8004e70:	f001 fb08 	bl	8006484 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e74:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e76:	2d00      	cmp	r5, #0
 8004e78:	d161      	bne.n	8004f3e <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e7a:	9b01      	ldr	r3, [sp, #4]
 8004e7c:	b38b      	cbz	r3, 8004ee2 <xQueueReceive+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e7e:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 8004e80:	462f      	mov	r7, r5
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e82:	f000 ff37 	bl	8005cf4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004e86:	f001 fb1f 	bl	80064c8 <vPortExitCritical>
		vTaskSuspendAll();
 8004e8a:	f000 fccb 	bl	8005824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e8e:	f001 faf9 	bl	8006484 <vPortEnterCritical>
 8004e92:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004e96:	2bff      	cmp	r3, #255	@ 0xff
 8004e98:	d101      	bne.n	8004e9e <xQueueReceive+0x4a>
 8004e9a:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8004e9e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004ea2:	2bff      	cmp	r3, #255	@ 0xff
 8004ea4:	d101      	bne.n	8004eaa <xQueueReceive+0x56>
 8004ea6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004eaa:	f001 fb0d 	bl	80064c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eae:	a901      	add	r1, sp, #4
 8004eb0:	a802      	add	r0, sp, #8
 8004eb2:	f000 ff2b 	bl	8005d0c <xTaskCheckForTimeOut>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d130      	bne.n	8004f1c <xQueueReceive+0xc8>
	taskENTER_CRITICAL();
 8004eba:	f001 fae3 	bl	8006484 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ebe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d051      	beq.n	8004f68 <xQueueReceive+0x114>
	taskEXIT_CRITICAL();
 8004ec4:	f001 fb00 	bl	80064c8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7ff fc87 	bl	80047dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ece:	f000 fdfd 	bl	8005acc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8004ed2:	f001 fad7 	bl	8006484 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ed6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ed8:	2d00      	cmp	r5, #0
 8004eda:	d130      	bne.n	8004f3e <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004edc:	9b01      	ldr	r3, [sp, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1d1      	bne.n	8004e86 <xQueueReceive+0x32>
					taskEXIT_CRITICAL();
 8004ee2:	f001 faf1 	bl	80064c8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004ee6:	2000      	movs	r0, #0
}
 8004ee8:	b005      	add	sp, #20
 8004eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0ba      	beq.n	8004e68 <xQueueReceive+0x14>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	e7fe      	b.n	8004f02 <xQueueReceive+0xae>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f04:	9b01      	ldr	r3, [sp, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0b2      	beq.n	8004e70 <xQueueReceive+0x1c>
 8004f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	e7fe      	b.n	8004f1a <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f7ff fc5d 	bl	80047dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f22:	f000 fdd3 	bl	8005acc <xTaskResumeAll>
	taskENTER_CRITICAL();
 8004f26:	f001 faad 	bl	8006484 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f2a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0d8      	beq.n	8004ee2 <xQueueReceive+0x8e>
	taskEXIT_CRITICAL();
 8004f30:	f001 faca 	bl	80064c8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8004f34:	f001 faa6 	bl	8006484 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f38:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f3a:	2d00      	cmp	r5, #0
 8004f3c:	d0ce      	beq.n	8004edc <xQueueReceive+0x88>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f3e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004f40:	b152      	cbz	r2, 8004f58 <xQueueReceive+0x104>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f42:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f44:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f46:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f48:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f4a:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f4c:	d301      	bcc.n	8004f52 <xQueueReceive+0xfe>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f4e:	6821      	ldr	r1, [r4, #0]
 8004f50:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f52:	4630      	mov	r0, r6
 8004f54:	f00b f9ab 	bl	80102ae <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f58:	3d01      	subs	r5, #1
 8004f5a:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f5c:	6923      	ldr	r3, [r4, #16]
 8004f5e:	bb2b      	cbnz	r3, 8004fac <xQueueReceive+0x158>
				taskEXIT_CRITICAL();
 8004f60:	f001 fab2 	bl	80064c8 <vPortExitCritical>
				return pdPASS;
 8004f64:	2001      	movs	r0, #1
 8004f66:	e7bf      	b.n	8004ee8 <xQueueReceive+0x94>
	taskEXIT_CRITICAL();
 8004f68:	f001 faae 	bl	80064c8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f6c:	9901      	ldr	r1, [sp, #4]
 8004f6e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004f72:	f000 fe41 	bl	8005bf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f76:	4620      	mov	r0, r4
 8004f78:	f7ff fc30 	bl	80047dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f7c:	f000 fda6 	bl	8005acc <xTaskResumeAll>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	d1d7      	bne.n	8004f34 <xQueueReceive+0xe0>
					portYIELD_WITHIN_API();
 8004f84:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004f88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f8c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8004f98:	e7cc      	b.n	8004f34 <xQueueReceive+0xe0>
 8004f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8004faa:	e7fe      	b.n	8004faa <xQueueReceive+0x156>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fac:	f104 0010 	add.w	r0, r4, #16
 8004fb0:	f000 fe5a 	bl	8005c68 <xTaskRemoveFromEventList>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d0d3      	beq.n	8004f60 <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 8004fb8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004fbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	e7c8      	b.n	8004f60 <xQueueReceive+0x10c>
 8004fce:	bf00      	nop

08004fd0 <xQueueSemaphoreTake>:
{
 8004fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d056      	beq.n	8005088 <xQueueSemaphoreTake+0xb8>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004fda:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8004fdc:	4604      	mov	r4, r0
 8004fde:	b146      	cbz	r6, 8004ff2 <xQueueSemaphoreTake+0x22>
 8004fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	e7fe      	b.n	8004ff0 <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ff2:	f000 fed9 	bl	8005da8 <xTaskGetSchedulerState>
 8004ff6:	4605      	mov	r5, r0
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d04e      	beq.n	800509a <xQueueSemaphoreTake+0xca>
 8004ffc:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8004ffe:	f001 fa41 	bl	8006484 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005002:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		prvLockQueue( pxQueue );
 8005004:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005006:	bb8b      	cbnz	r3, 800506c <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005008:	9b01      	ldr	r3, [sp, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 809a 	beq.w	8005144 <xQueueSemaphoreTake+0x174>
				else if( xEntryTimeSet == pdFALSE )
 8005010:	2d00      	cmp	r5, #0
 8005012:	d05c      	beq.n	80050ce <xQueueSemaphoreTake+0xfe>
		taskEXIT_CRITICAL();
 8005014:	f001 fa58 	bl	80064c8 <vPortExitCritical>
		vTaskSuspendAll();
 8005018:	f000 fc04 	bl	8005824 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800501c:	f001 fa32 	bl	8006484 <vPortEnterCritical>
 8005020:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005024:	2bff      	cmp	r3, #255	@ 0xff
 8005026:	d101      	bne.n	800502c <xQueueSemaphoreTake+0x5c>
 8005028:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800502c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005030:	2bff      	cmp	r3, #255	@ 0xff
 8005032:	d101      	bne.n	8005038 <xQueueSemaphoreTake+0x68>
 8005034:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005038:	f001 fa46 	bl	80064c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800503c:	a901      	add	r1, sp, #4
 800503e:	a802      	add	r0, sp, #8
 8005040:	f000 fe64 	bl	8005d0c <xTaskCheckForTimeOut>
 8005044:	2800      	cmp	r0, #0
 8005046:	d134      	bne.n	80050b2 <xQueueSemaphoreTake+0xe2>
	taskENTER_CRITICAL();
 8005048:	f001 fa1c 	bl	8006484 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800504c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800504e:	2b00      	cmp	r3, #0
 8005050:	d044      	beq.n	80050dc <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 8005052:	f001 fa39 	bl	80064c8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005056:	4620      	mov	r0, r4
 8005058:	f7ff fbc0 	bl	80047dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800505c:	f000 fd36 	bl	8005acc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005060:	f001 fa10 	bl	8006484 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005064:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005066:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0cd      	beq.n	8005008 <xQueueSemaphoreTake+0x38>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800506c:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800506e:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005070:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005072:	2a00      	cmp	r2, #0
 8005074:	f000 8082 	beq.w	800517c <xQueueSemaphoreTake+0x1ac>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005078:	6923      	ldr	r3, [r4, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d16d      	bne.n	800515a <xQueueSemaphoreTake+0x18a>
				taskEXIT_CRITICAL();
 800507e:	f001 fa23 	bl	80064c8 <vPortExitCritical>
				return pdPASS;
 8005082:	2001      	movs	r0, #1
}
 8005084:	b005      	add	sp, #20
 8005086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005098:	e7fe      	b.n	8005098 <xQueueSemaphoreTake+0xc8>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800509a:	9b01      	ldr	r3, [sp, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d038      	beq.n	8005112 <xQueueSemaphoreTake+0x142>
 80050a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	e7fe      	b.n	80050b0 <xQueueSemaphoreTake+0xe0>
			prvUnlockQueue( pxQueue );
 80050b2:	4620      	mov	r0, r4
 80050b4:	f7ff fb92 	bl	80047dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050b8:	f000 fd08 	bl	8005acc <xTaskResumeAll>
	taskENTER_CRITICAL();
 80050bc:	f001 f9e2 	bl	8006484 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80050c2:	b943      	cbnz	r3, 80050d6 <xQueueSemaphoreTake+0x106>
	taskEXIT_CRITICAL();
 80050c4:	f001 fa00 	bl	80064c8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80050c8:	bb2e      	cbnz	r6, 8005116 <xQueueSemaphoreTake+0x146>
					return errQUEUE_EMPTY;
 80050ca:	2000      	movs	r0, #0
 80050cc:	e7da      	b.n	8005084 <xQueueSemaphoreTake+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050ce:	a802      	add	r0, sp, #8
 80050d0:	f000 fe10 	bl	8005cf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050d4:	e79e      	b.n	8005014 <xQueueSemaphoreTake+0x44>
	taskEXIT_CRITICAL();
 80050d6:	f001 f9f7 	bl	80064c8 <vPortExitCritical>
	return xReturn;
 80050da:	e7c1      	b.n	8005060 <xQueueSemaphoreTake+0x90>
	taskEXIT_CRITICAL();
 80050dc:	f001 f9f4 	bl	80064c8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	b333      	cbz	r3, 8005132 <xQueueSemaphoreTake+0x162>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050e4:	9901      	ldr	r1, [sp, #4]
 80050e6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80050ea:	f000 fd85 	bl	8005bf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050ee:	4620      	mov	r0, r4
 80050f0:	f7ff fb74 	bl	80047dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050f4:	f000 fcea 	bl	8005acc <xTaskResumeAll>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d1b1      	bne.n	8005060 <xQueueSemaphoreTake+0x90>
					portYIELD_WITHIN_API();
 80050fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005104:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	e7a6      	b.n	8005060 <xQueueSemaphoreTake+0x90>
 8005112:	462e      	mov	r6, r5
 8005114:	e773      	b.n	8004ffe <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
 8005116:	f001 f9b5 	bl	8006484 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800511a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800511c:	b119      	cbz	r1, 8005126 <xQueueSemaphoreTake+0x156>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800511e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005120:	6819      	ldr	r1, [r3, #0]
 8005122:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005126:	68a0      	ldr	r0, [r4, #8]
 8005128:	f000 fed2 	bl	8005ed0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800512c:	f001 f9cc 	bl	80064c8 <vPortExitCritical>
 8005130:	e7cb      	b.n	80050ca <xQueueSemaphoreTake+0xfa>
						taskENTER_CRITICAL();
 8005132:	f001 f9a7 	bl	8006484 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005136:	68a0      	ldr	r0, [r4, #8]
 8005138:	f000 fe46 	bl	8005dc8 <xTaskPriorityInherit>
 800513c:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800513e:	f001 f9c3 	bl	80064c8 <vPortExitCritical>
 8005142:	e7cf      	b.n	80050e4 <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005144:	2e00      	cmp	r6, #0
 8005146:	d0f1      	beq.n	800512c <xQueueSemaphoreTake+0x15c>
 8005148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	e7fe      	b.n	8005158 <xQueueSemaphoreTake+0x188>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800515a:	f104 0010 	add.w	r0, r4, #16
 800515e:	f000 fd83 	bl	8005c68 <xTaskRemoveFromEventList>
 8005162:	2800      	cmp	r0, #0
 8005164:	d08b      	beq.n	800507e <xQueueSemaphoreTake+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 8005166:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800516a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800516e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	e780      	b.n	800507e <xQueueSemaphoreTake+0xae>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800517c:	f000 fef8 	bl	8005f70 <pvTaskIncrementMutexHeldCount>
 8005180:	60a0      	str	r0, [r4, #8]
 8005182:	e779      	b.n	8005078 <xQueueSemaphoreTake+0xa8>

08005184 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8005184:	b1a8      	cbz	r0, 80051b2 <xQueueTakeMutexRecursive+0x2e>
	{
 8005186:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005188:	6886      	ldr	r6, [r0, #8]
 800518a:	4604      	mov	r4, r0
 800518c:	460d      	mov	r5, r1
 800518e:	f000 fe05 	bl	8005d9c <xTaskGetCurrentTaskHandle>
 8005192:	4286      	cmp	r6, r0
 8005194:	d008      	beq.n	80051a8 <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005196:	4629      	mov	r1, r5
 8005198:	4620      	mov	r0, r4
 800519a:	f7ff ff19 	bl	8004fd0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800519e:	b110      	cbz	r0, 80051a6 <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80051a0:	68e3      	ldr	r3, [r4, #12]
 80051a2:	3301      	adds	r3, #1
 80051a4:	60e3      	str	r3, [r4, #12]
	}
 80051a6:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80051a8:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 80051aa:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80051ac:	4403      	add	r3, r0
 80051ae:	60e3      	str	r3, [r4, #12]
	}
 80051b0:	bd70      	pop	{r4, r5, r6, pc}
 80051b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80051c2:	e7fe      	b.n	80051c2 <xQueueTakeMutexRecursive+0x3e>

080051c4 <xQueueReceiveFromISR>:
{
 80051c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80051c8:	b310      	cbz	r0, 8005210 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051ca:	460f      	mov	r7, r1
 80051cc:	4604      	mov	r4, r0
 80051ce:	4616      	mov	r6, r2
 80051d0:	b191      	cbz	r1, 80051f8 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051d2:	f001 fa73 	bl	80066bc <vPortValidateInterruptPriority>
	__asm volatile
 80051d6:	f3ef 8911 	mrs	r9, BASEPRI
 80051da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051ea:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051ec:	b9cd      	cbnz	r5, 8005222 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80051ee:	4628      	mov	r0, r5
	__asm volatile
 80051f0:	f389 8811 	msr	BASEPRI, r9
}
 80051f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051f8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0e9      	beq.n	80051d2 <xQueueReceiveFromISR+0xe>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	e7fe      	b.n	800520e <xQueueReceiveFromISR+0x4a>
 8005210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005220:	e7fe      	b.n	8005220 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005222:	f894 8044 	ldrb.w	r8, [r4, #68]	@ 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005226:	6c22      	ldr	r2, [r4, #64]	@ 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8005228:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800522c:	b142      	cbz	r2, 8005240 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800522e:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005230:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005232:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005234:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005236:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005238:	d21c      	bcs.n	8005274 <xQueueReceiveFromISR+0xb0>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800523a:	4638      	mov	r0, r7
 800523c:	f00b f837 	bl	80102ae <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005240:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8005242:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005246:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8005248:	d006      	beq.n	8005258 <xQueueReceiveFromISR+0x94>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800524a:	f108 0301 	add.w	r3, r8, #1
 800524e:	b25b      	sxtb	r3, r3
 8005250:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8005254:	2001      	movs	r0, #1
 8005256:	e7cb      	b.n	80051f0 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005258:	6923      	ldr	r3, [r4, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0fa      	beq.n	8005254 <xQueueReceiveFromISR+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800525e:	f104 0010 	add.w	r0, r4, #16
 8005262:	f000 fd01 	bl	8005c68 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8005266:	2e00      	cmp	r6, #0
 8005268:	d0f4      	beq.n	8005254 <xQueueReceiveFromISR+0x90>
 800526a:	2800      	cmp	r0, #0
 800526c:	d0f2      	beq.n	8005254 <xQueueReceiveFromISR+0x90>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800526e:	2301      	movs	r3, #1
 8005270:	6033      	str	r3, [r6, #0]
 8005272:	e7ef      	b.n	8005254 <xQueueReceiveFromISR+0x90>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005274:	6821      	ldr	r1, [r4, #0]
 8005276:	60e1      	str	r1, [r4, #12]
 8005278:	e7df      	b.n	800523a <xQueueReceiveFromISR+0x76>
 800527a:	bf00      	nop

0800527c <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 800527c:	b140      	cbz	r0, 8005290 <uxQueueMessagesWaiting+0x14>
{
 800527e:	b510      	push	{r4, lr}
 8005280:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005282:	f001 f8ff 	bl	8006484 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005286:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8005288:	f001 f91e 	bl	80064c8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800528c:	4620      	mov	r0, r4
 800528e:	bd10      	pop	{r4, pc}
 8005290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80052a0:	e7fe      	b.n	80052a0 <uxQueueMessagesWaiting+0x24>
 80052a2:	bf00      	nop

080052a4 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80052a4:	b108      	cbz	r0, 80052aa <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 80052a6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80052a8:	4770      	bx	lr
 80052aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80052ba:	e7fe      	b.n	80052ba <uxQueueMessagesWaitingFromISR+0x16>

080052bc <vQueueDelete>:
	configASSERT( pxQueue );
 80052bc:	b170      	cbz	r0, 80052dc <vQueueDelete+0x20>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052be:	2300      	movs	r3, #0
 80052c0:	4911      	ldr	r1, [pc, #68]	@ (8005308 <vQueueDelete+0x4c>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80052c2:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80052c6:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052ca:	3301      	adds	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80052cc:	4290      	cmp	r0, r2
 80052ce:	d010      	beq.n	80052f2 <vQueueDelete+0x36>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d1f6      	bne.n	80052c2 <vQueueDelete+0x6>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80052d4:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 80052d8:	b14b      	cbz	r3, 80052ee <vQueueDelete+0x32>
}
 80052da:	4770      	bx	lr
 80052dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80052ec:	e7fe      	b.n	80052ec <vQueueDelete+0x30>
			vPortFree( pxQueue );
 80052ee:	f001 bad3 	b.w	8006898 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80052f2:	4906      	ldr	r1, [pc, #24]	@ (800530c <vQueueDelete+0x50>)
 80052f4:	2300      	movs	r3, #0
 80052f6:	2200      	movs	r2, #0
 80052f8:	448c      	add	ip, r1
 80052fa:	e9cc 2300 	strd	r2, r3, [ip]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80052fe:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e9      	bne.n	80052da <vQueueDelete+0x1e>
 8005306:	e7f2      	b.n	80052ee <vQueueDelete+0x32>
 8005308:	24011dfc 	.word	0x24011dfc
 800530c:	24011df8 	.word	0x24011df8

08005310 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005310:	2300      	movs	r3, #0
 8005312:	4a0a      	ldr	r2, [pc, #40]	@ (800533c <vQueueAddToRegistry+0x2c>)
	{
 8005314:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005316:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800531a:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
 800531e:	b12c      	cbz	r4, 800532c <vQueueAddToRegistry+0x1c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005320:	3301      	adds	r3, #1
 8005322:	2b08      	cmp	r3, #8
 8005324:	d1f7      	bne.n	8005316 <vQueueAddToRegistry+0x6>
	}
 8005326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005330:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005334:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	24011df8 	.word	0x24011df8

08005340 <vQueueUnregisterQueue>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005340:	2300      	movs	r3, #0
 8005342:	4909      	ldr	r1, [pc, #36]	@ (8005368 <vQueueUnregisterQueue+0x28>)
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005344:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8005348:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800534c:	3301      	adds	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800534e:	4282      	cmp	r2, r0
 8005350:	d002      	beq.n	8005358 <vQueueUnregisterQueue+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005352:	2b08      	cmp	r3, #8
 8005354:	d1f6      	bne.n	8005344 <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005356:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005358:	4904      	ldr	r1, [pc, #16]	@ (800536c <vQueueUnregisterQueue+0x2c>)
 800535a:	2200      	movs	r2, #0
 800535c:	2300      	movs	r3, #0
 800535e:	448c      	add	ip, r1
 8005360:	e9cc 2300 	strd	r2, r3, [ip]
				break;
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	24011dfc 	.word	0x24011dfc
 800536c:	24011df8 	.word	0x24011df8

08005370 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005370:	b570      	push	{r4, r5, r6, lr}
 8005372:	4604      	mov	r4, r0
 8005374:	460e      	mov	r6, r1
 8005376:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005378:	f001 f884 	bl	8006484 <vPortEnterCritical>
 800537c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005380:	2bff      	cmp	r3, #255	@ 0xff
 8005382:	d102      	bne.n	800538a <vQueueWaitForMessageRestricted+0x1a>
 8005384:	2300      	movs	r3, #0
 8005386:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800538a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800538e:	2bff      	cmp	r3, #255	@ 0xff
 8005390:	d102      	bne.n	8005398 <vQueueWaitForMessageRestricted+0x28>
 8005392:	2300      	movs	r3, #0
 8005394:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005398:	f001 f896 	bl	80064c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800539c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800539e:	b123      	cbz	r3, 80053aa <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053a0:	4620      	mov	r0, r4
	}
 80053a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80053a6:	f7ff ba19 	b.w	80047dc <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053aa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80053ae:	462a      	mov	r2, r5
 80053b0:	4631      	mov	r1, r6
 80053b2:	f000 fc3b 	bl	8005c2c <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 80053b6:	4620      	mov	r0, r4
	}
 80053b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80053bc:	f7ff ba0e 	b.w	80047dc <prvUnlockQueue>

080053c0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053c4:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053c6:	f001 f85d 	bl	8006484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053ca:	4a34      	ldr	r2, [pc, #208]	@ (800549c <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80053cc:	4e34      	ldr	r6, [pc, #208]	@ (80054a0 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80053ce:	6813      	ldr	r3, [r2, #0]
 80053d0:	3301      	adds	r3, #1
 80053d2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053d4:	6833      	ldr	r3, [r6, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d031      	beq.n	800543e <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053da:	4c32      	ldr	r4, [pc, #200]	@ (80054a4 <prvAddNewTaskToReadyList+0xe4>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053dc:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	b333      	cbz	r3, 8005430 <prvAddNewTaskToReadyList+0x70>
 80053e2:	4f31      	ldr	r7, [pc, #196]	@ (80054a8 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053e4:	4a31      	ldr	r2, [pc, #196]	@ (80054ac <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053e6:	4932      	ldr	r1, [pc, #200]	@ (80054b0 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 80053e8:	6813      	ldr	r3, [r2, #0]
 80053ea:	3301      	adds	r3, #1
 80053ec:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053ee:	646b      	str	r3, [r5, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80053f0:	680b      	ldr	r3, [r1, #0]
 80053f2:	4283      	cmp	r3, r0
 80053f4:	d200      	bcs.n	80053f8 <prvAddNewTaskToReadyList+0x38>
 80053f6:	6008      	str	r0, [r1, #0]
 80053f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80053fc:	1d29      	adds	r1, r5, #4
 80053fe:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8005402:	f7ff f979 	bl	80046f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005406:	f001 f85f 	bl	80064c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	b173      	cbz	r3, 800542c <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800540e:	6832      	ldr	r2, [r6, #0]
 8005410:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005412:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005414:	429a      	cmp	r2, r3
 8005416:	d209      	bcs.n	800542c <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005418:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800541c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005420:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800542c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005430:	6833      	ldr	r3, [r6, #0]
 8005432:	4f1d      	ldr	r7, [pc, #116]	@ (80054a8 <prvAddNewTaskToReadyList+0xe8>)
 8005434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005436:	4283      	cmp	r3, r0
 8005438:	d8d4      	bhi.n	80053e4 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 800543a:	6035      	str	r5, [r6, #0]
 800543c:	e7d2      	b.n	80053e4 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800543e:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005440:	6813      	ldr	r3, [r2, #0]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d003      	beq.n	800544e <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005446:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8005448:	4f17      	ldr	r7, [pc, #92]	@ (80054a8 <prvAddNewTaskToReadyList+0xe8>)
 800544a:	4c16      	ldr	r4, [pc, #88]	@ (80054a4 <prvAddNewTaskToReadyList+0xe4>)
 800544c:	e7ca      	b.n	80053e4 <prvAddNewTaskToReadyList+0x24>
 800544e:	4f16      	ldr	r7, [pc, #88]	@ (80054a8 <prvAddNewTaskToReadyList+0xe8>)
 8005450:	463c      	mov	r4, r7
 8005452:	f507 688c 	add.w	r8, r7, #1120	@ 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005456:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005458:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800545a:	f7ff f93d 	bl	80046d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800545e:	45a0      	cmp	r8, r4
 8005460:	d1f9      	bne.n	8005456 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005462:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 80054c8 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8005466:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 80054cc <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 800546a:	4648      	mov	r0, r9
 800546c:	4c0d      	ldr	r4, [pc, #52]	@ (80054a4 <prvAddNewTaskToReadyList+0xe4>)
 800546e:	f7ff f933 	bl	80046d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005472:	4640      	mov	r0, r8
 8005474:	f7ff f930 	bl	80046d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005478:	480e      	ldr	r0, [pc, #56]	@ (80054b4 <prvAddNewTaskToReadyList+0xf4>)
 800547a:	f7ff f92d 	bl	80046d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800547e:	480e      	ldr	r0, [pc, #56]	@ (80054b8 <prvAddNewTaskToReadyList+0xf8>)
 8005480:	f7ff f92a 	bl	80046d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005484:	480d      	ldr	r0, [pc, #52]	@ (80054bc <prvAddNewTaskToReadyList+0xfc>)
 8005486:	f7ff f927 	bl	80046d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800548a:	4b0d      	ldr	r3, [pc, #52]	@ (80054c0 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 800548c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 800548e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005492:	4b0c      	ldr	r3, [pc, #48]	@ (80054c4 <prvAddNewTaskToReadyList+0x104>)
 8005494:	f8c3 8000 	str.w	r8, [r3]
}
 8005498:	e7a4      	b.n	80053e4 <prvAddNewTaskToReadyList+0x24>
 800549a:	bf00      	nop
 800549c:	24011e5c 	.word	0x24011e5c
 80054a0:	24012330 	.word	0x24012330
 80054a4:	24011e50 	.word	0x24011e50
 80054a8:	24011ed0 	.word	0x24011ed0
 80054ac:	24011e40 	.word	0x24011e40
 80054b0:	24011e54 	.word	0x24011e54
 80054b4:	24011e8c 	.word	0x24011e8c
 80054b8:	24011e78 	.word	0x24011e78
 80054bc:	24011e60 	.word	0x24011e60
 80054c0:	24011ea4 	.word	0x24011ea4
 80054c4:	24011ea0 	.word	0x24011ea0
 80054c8:	24011ebc 	.word	0x24011ebc
 80054cc:	24011ea8 	.word	0x24011ea8

080054d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054d2:	4b15      	ldr	r3, [pc, #84]	@ (8005528 <prvAddCurrentTaskToDelayedList+0x58>)
{
 80054d4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054d6:	4e15      	ldr	r6, [pc, #84]	@ (800552c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80054d8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80054da:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054dc:	6833      	ldr	r3, [r6, #0]
 80054de:	1d18      	adds	r0, r3, #4
 80054e0:	f7ff f930 	bl	8004744 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054e4:	1c63      	adds	r3, r4, #1
 80054e6:	d100      	bne.n	80054ea <prvAddCurrentTaskToDelayedList+0x1a>
 80054e8:	b9bf      	cbnz	r7, 800551a <prvAddCurrentTaskToDelayedList+0x4a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054ea:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054ec:	6833      	ldr	r3, [r6, #0]
 80054ee:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80054f0:	d307      	bcc.n	8005502 <prvAddCurrentTaskToDelayedList+0x32>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005530 <prvAddCurrentTaskToDelayedList+0x60>)
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054fc:	3104      	adds	r1, #4
 80054fe:	f7ff b909 	b.w	8004714 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005502:	4b0c      	ldr	r3, [pc, #48]	@ (8005534 <prvAddCurrentTaskToDelayedList+0x64>)
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	6831      	ldr	r1, [r6, #0]
 8005508:	3104      	adds	r1, #4
 800550a:	f7ff f903 	bl	8004714 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800550e:	4b0a      	ldr	r3, [pc, #40]	@ (8005538 <prvAddCurrentTaskToDelayedList+0x68>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	42aa      	cmp	r2, r5
 8005514:	d900      	bls.n	8005518 <prvAddCurrentTaskToDelayedList+0x48>
					xNextTaskUnblockTime = xTimeToWake;
 8005516:	601d      	str	r5, [r3, #0]
}
 8005518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800551a:	6831      	ldr	r1, [r6, #0]
 800551c:	4807      	ldr	r0, [pc, #28]	@ (800553c <prvAddCurrentTaskToDelayedList+0x6c>)
 800551e:	3104      	adds	r1, #4
}
 8005520:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005524:	f7ff b8e8 	b.w	80046f8 <vListInsertEnd>
 8005528:	24011e58 	.word	0x24011e58
 800552c:	24012330 	.word	0x24012330
 8005530:	24011ea0 	.word	0x24011ea0
 8005534:	24011ea4 	.word	0x24011ea4
 8005538:	24011e3c 	.word	0x24011e3c
 800553c:	24011e60 	.word	0x24011e60

08005540 <prvDeleteTCB>:
	{
 8005540:	b510      	push	{r4, lr}
 8005542:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005544:	3054      	adds	r0, #84	@ 0x54
 8005546:	f00a fde9 	bl	801011c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800554a:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 800554e:	b163      	cbz	r3, 800556a <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005550:	2b01      	cmp	r3, #1
 8005552:	d013      	beq.n	800557c <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005554:	2b02      	cmp	r3, #2
 8005556:	d010      	beq.n	800557a <prvDeleteTCB+0x3a>
 8005558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	e7fe      	b.n	8005568 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800556a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800556c:	f001 f994 	bl	8006898 <vPortFree>
				vPortFree( pxTCB );
 8005570:	4620      	mov	r0, r4
	}
 8005572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8005576:	f001 b98f 	b.w	8006898 <vPortFree>
	}
 800557a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800557c:	4620      	mov	r0, r4
	}
 800557e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8005582:	f001 b989 	b.w	8006898 <vPortFree>
 8005586:	bf00      	nop

08005588 <prvIdleTask>:
{
 8005588:	4c15      	ldr	r4, [pc, #84]	@ (80055e0 <prvIdleTask+0x58>)
				taskYIELD();
 800558a:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 800558e:	4e15      	ldr	r6, [pc, #84]	@ (80055e4 <prvIdleTask+0x5c>)
 8005590:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
 8005594:	4d14      	ldr	r5, [pc, #80]	@ (80055e8 <prvIdleTask+0x60>)
 8005596:	f8df a054 	ldr.w	sl, [pc, #84]	@ 80055ec <prvIdleTask+0x64>
{
 800559a:	b580      	push	{r7, lr}
 800559c:	e011      	b.n	80055c2 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 800559e:	f000 ff71 	bl	8006484 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a2:	68f3      	ldr	r3, [r6, #12]
 80055a4:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055a6:	1d38      	adds	r0, r7, #4
 80055a8:	f7ff f8cc 	bl	8004744 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80055b8:	f000 ff86 	bl	80064c8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80055bc:	4638      	mov	r0, r7
 80055be:	f7ff ffbf 	bl	8005540 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1ea      	bne.n	800559e <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055c8:	f8da 3000 	ldr.w	r3, [sl]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d9f8      	bls.n	80055c2 <prvIdleTask+0x3a>
				taskYIELD();
 80055d0:	f8c9 8d04 	str.w	r8, [r9, #3332]	@ 0xd04
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	e7f1      	b.n	80055c2 <prvIdleTask+0x3a>
 80055de:	bf00      	nop
 80055e0:	24011e74 	.word	0x24011e74
 80055e4:	24011e78 	.word	0x24011e78
 80055e8:	24011e5c 	.word	0x24011e5c
 80055ec:	24011ed0 	.word	0x24011ed0

080055f0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80055f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055f6:	0095      	lsls	r5, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80055f8:	4606      	mov	r6, r0
 80055fa:	4689      	mov	r9, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80055fc:	462a      	mov	r2, r5
 80055fe:	21a5      	movs	r1, #165	@ 0xa5
 8005600:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005602:	461f      	mov	r7, r3
 8005604:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005608:	3d04      	subs	r5, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800560a:	f00a fd46 	bl	801009a <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800560e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005610:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005612:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 8005616:	f1b9 0f00 	cmp.w	r9, #0
 800561a:	d044      	beq.n	80056a6 <prvInitialiseNewTask.constprop.0+0xb6>
 800561c:	f109 3cff 	add.w	ip, r9, #4294967295
 8005620:	f104 0333 	add.w	r3, r4, #51	@ 0x33
 8005624:	f109 090f 	add.w	r9, r9, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005628:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 800562c:	f803 2f01 	strb.w	r2, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8005630:	b10a      	cbz	r2, 8005636 <prvInitialiseNewTask.constprop.0+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005632:	45cc      	cmp	ip, r9
 8005634:	d1f8      	bne.n	8005628 <prvInitialiseNewTask.constprop.0+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005636:	2300      	movs	r3, #0
 8005638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800563c:	9b08      	ldr	r3, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800563e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005642:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005644:	2b37      	cmp	r3, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8005646:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800564a:	bf28      	it	cs
 800564c:	2337      	movcs	r3, #55	@ 0x37
 800564e:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8005650:	62e3      	str	r3, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005652:	64e3      	str	r3, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005654:	f7ff f84c 	bl	80046f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005658:	f104 0018 	add.w	r0, r4, #24
 800565c:	f7ff f848 	bl	80046f0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005660:	f1c9 0338 	rsb	r3, r9, #56	@ 0x38
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005664:	4651      	mov	r1, sl
 8005666:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005668:	61a3      	str	r3, [r4, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800566a:	f104 0054 	add.w	r0, r4, #84	@ 0x54
		pxNewTCB->ulNotifiedValue = 0;
 800566e:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005672:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005674:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005676:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800567a:	f00a fd0e 	bl	801009a <memset>
 800567e:	4b0b      	ldr	r3, [pc, #44]	@ (80056ac <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005680:	4628      	mov	r0, r5
 8005682:	463a      	mov	r2, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005684:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 8005688:	65a3      	str	r3, [r4, #88]	@ 0x58
 800568a:	33d0      	adds	r3, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800568c:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800568e:	65e5      	str	r5, [r4, #92]	@ 0x5c
 8005690:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005692:	f000 fecb 	bl	800642c <pxPortInitialiseStack>
 8005696:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005698:	f1b8 0f00 	cmp.w	r8, #0
 800569c:	d001      	beq.n	80056a2 <prvInitialiseNewTask.constprop.0+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800569e:	f8c8 4000 	str.w	r4, [r8]
}
 80056a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056a6:	f884 9034 	strb.w	r9, [r4, #52]	@ 0x34
 80056aa:	e7c7      	b.n	800563c <prvInitialiseNewTask.constprop.0+0x4c>
 80056ac:	240208bc 	.word	0x240208bc

080056b0 <xTaskCreateStatic>:
	{
 80056b0:	b530      	push	{r4, r5, lr}
 80056b2:	b087      	sub	sp, #28
 80056b4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80056b6:	b1c4      	cbz	r4, 80056ea <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 80056b8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80056ba:	b16d      	cbz	r5, 80056d8 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 80056bc:	25a8      	movs	r5, #168	@ 0xa8
 80056be:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056c0:	9d05      	ldr	r5, [sp, #20]
 80056c2:	2da8      	cmp	r5, #168	@ 0xa8
 80056c4:	d01a      	beq.n	80056fc <xTaskCreateStatic+0x4c>
 80056c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	e7fe      	b.n	80056d6 <xTaskCreateStatic+0x26>
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80056e8:	e7fe      	b.n	80056e8 <xTaskCreateStatic+0x38>
 80056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80056fa:	e7fe      	b.n	80056fa <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056fc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80056fe:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005700:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005702:	9502      	str	r5, [sp, #8]
 8005704:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8005706:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005708:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800570a:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800570e:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005710:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005712:	9401      	str	r4, [sp, #4]
 8005714:	f7ff ff6c 	bl	80055f0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005718:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800571a:	f7ff fe51 	bl	80053c0 <prvAddNewTaskToReadyList>
	}
 800571e:	9804      	ldr	r0, [sp, #16]
 8005720:	b007      	add	sp, #28
 8005722:	bd30      	pop	{r4, r5, pc}

08005724 <xTaskCreate>:
	{
 8005724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005728:	4607      	mov	r7, r0
 800572a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800572c:	0090      	lsls	r0, r2, #2
	{
 800572e:	4615      	mov	r5, r2
 8005730:	4688      	mov	r8, r1
 8005732:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005734:	f001 f81a 	bl	800676c <pvPortMalloc>
			if( pxStack != NULL )
 8005738:	b1f0      	cbz	r0, 8005778 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800573a:	4604      	mov	r4, r0
 800573c:	20a8      	movs	r0, #168	@ 0xa8
 800573e:	f001 f815 	bl	800676c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005742:	4606      	mov	r6, r0
 8005744:	b1a8      	cbz	r0, 8005772 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8005746:	6304      	str	r4, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005748:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800574a:	464b      	mov	r3, r9
 800574c:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800574e:	f886 40a5 	strb.w	r4, [r6, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005752:	4641      	mov	r1, r8
 8005754:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8005756:	4638      	mov	r0, r7
 8005758:	9602      	str	r6, [sp, #8]
 800575a:	9401      	str	r4, [sp, #4]
 800575c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800575e:	9400      	str	r4, [sp, #0]
 8005760:	f7ff ff46 	bl	80055f0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005764:	4630      	mov	r0, r6
 8005766:	f7ff fe2b 	bl	80053c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800576a:	2001      	movs	r0, #1
	}
 800576c:	b005      	add	sp, #20
 800576e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8005772:	4620      	mov	r0, r4
 8005774:	f001 f890 	bl	8006898 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005778:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800577c:	b005      	add	sp, #20
 800577e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005782:	bf00      	nop

08005784 <vTaskStartScheduler>:
{
 8005784:	b510      	push	{r4, lr}
 8005786:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005788:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800578a:	aa07      	add	r2, sp, #28
 800578c:	a906      	add	r1, sp, #24
 800578e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005790:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005794:	f7fe ff80 	bl	8004698 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005798:	4623      	mov	r3, r4
 800579a:	9a07      	ldr	r2, [sp, #28]
 800579c:	9400      	str	r4, [sp, #0]
 800579e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80057a2:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80057a6:	4918      	ldr	r1, [pc, #96]	@ (8005808 <vTaskStartScheduler+0x84>)
 80057a8:	4818      	ldr	r0, [pc, #96]	@ (800580c <vTaskStartScheduler+0x88>)
 80057aa:	f7ff ff81 	bl	80056b0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80057ae:	b170      	cbz	r0, 80057ce <vTaskStartScheduler+0x4a>
			xReturn = xTimerCreateTimerTask();
 80057b0:	f000 fc20 	bl	8005ff4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80057b4:	2801      	cmp	r0, #1
 80057b6:	d00c      	beq.n	80057d2 <vTaskStartScheduler+0x4e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057b8:	3001      	adds	r0, #1
 80057ba:	d108      	bne.n	80057ce <vTaskStartScheduler+0x4a>
 80057bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	e7fe      	b.n	80057cc <vTaskStartScheduler+0x48>
}
 80057ce:	b008      	add	sp, #32
 80057d0:	bd10      	pop	{r4, pc}
 80057d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005810 <vTaskStartScheduler+0x8c>)
 80057e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005814 <vTaskStartScheduler+0x90>)
 80057e6:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80057e8:	490b      	ldr	r1, [pc, #44]	@ (8005818 <vTaskStartScheduler+0x94>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057ea:	3354      	adds	r3, #84	@ 0x54
 80057ec:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80057ee:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 80057f2:	4a0a      	ldr	r2, [pc, #40]	@ (800581c <vTaskStartScheduler+0x98>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80057f4:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005820 <vTaskStartScheduler+0x9c>)
		xSchedulerRunning = pdTRUE;
 80057f8:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057fa:	601c      	str	r4, [r3, #0]
}
 80057fc:	b008      	add	sp, #32
 80057fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8005802:	f000 bed1 	b.w	80065a8 <xPortStartScheduler>
 8005806:	bf00      	nop
 8005808:	08011ae0 	.word	0x08011ae0
 800580c:	08005589 	.word	0x08005589
 8005810:	24012330 	.word	0x24012330
 8005814:	2400003c 	.word	0x2400003c
 8005818:	24011e3c 	.word	0x24011e3c
 800581c:	24011e50 	.word	0x24011e50
 8005820:	24011e58 	.word	0x24011e58

08005824 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005824:	4a02      	ldr	r2, [pc, #8]	@ (8005830 <vTaskSuspendAll+0xc>)
 8005826:	6813      	ldr	r3, [r2, #0]
 8005828:	3301      	adds	r3, #1
 800582a:	6013      	str	r3, [r2, #0]
}
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	24011e38 	.word	0x24011e38

08005834 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005834:	4b01      	ldr	r3, [pc, #4]	@ (800583c <xTaskGetTickCount+0x8>)
 8005836:	6818      	ldr	r0, [r3, #0]
}
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	24011e58 	.word	0x24011e58

08005840 <xTaskGetTickCountFromISR>:
{
 8005840:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005842:	f000 ff3b 	bl	80066bc <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8005846:	4b01      	ldr	r3, [pc, #4]	@ (800584c <xTaskGetTickCountFromISR+0xc>)
 8005848:	6818      	ldr	r0, [r3, #0]
}
 800584a:	bd08      	pop	{r3, pc}
 800584c:	24011e58 	.word	0x24011e58

08005850 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005850:	4b4f      	ldr	r3, [pc, #316]	@ (8005990 <xTaskIncrementTick+0x140>)
 8005852:	681b      	ldr	r3, [r3, #0]
{
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800585a:	2b00      	cmp	r3, #0
 800585c:	d145      	bne.n	80058ea <xTaskIncrementTick+0x9a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800585e:	4b4d      	ldr	r3, [pc, #308]	@ (8005994 <xTaskIncrementTick+0x144>)
 8005860:	681e      	ldr	r6, [r3, #0]
 8005862:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8005864:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005866:	2e00      	cmp	r6, #0
 8005868:	d048      	beq.n	80058fc <xTaskIncrementTick+0xac>
 800586a:	4b4b      	ldr	r3, [pc, #300]	@ (8005998 <xTaskIncrementTick+0x148>)
 800586c:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800586e:	9b01      	ldr	r3, [sp, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	429e      	cmp	r6, r3
 8005874:	d34f      	bcc.n	8005916 <xTaskIncrementTick+0xc6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005876:	4f49      	ldr	r7, [pc, #292]	@ (800599c <xTaskIncrementTick+0x14c>)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681d      	ldr	r5, [r3, #0]
 800587c:	2d00      	cmp	r5, #0
 800587e:	d076      	beq.n	800596e <xTaskIncrementTick+0x11e>
BaseType_t xSwitchRequired = pdFALSE;
 8005880:	2500      	movs	r5, #0
 8005882:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 80059b0 <xTaskIncrementTick+0x160>
 8005886:	f8df a12c 	ldr.w	sl, [pc, #300]	@ 80059b4 <xTaskIncrementTick+0x164>
					prvAddTaskToReadyList( pxTCB );
 800588a:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 80059b8 <xTaskIncrementTick+0x168>
 800588e:	e020      	b.n	80058d2 <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005890:	f7fe ff58 	bl	8004744 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005894:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005896:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800589a:	b10b      	cbz	r3, 80058a0 <xTaskIncrementTick+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800589c:	f7fe ff52 	bl	8004744 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058a0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80058a2:	4659      	mov	r1, fp
 80058a4:	f8d8 3000 	ldr.w	r3, [r8]
 80058a8:	4298      	cmp	r0, r3
 80058aa:	d901      	bls.n	80058b0 <xTaskIncrementTick+0x60>
 80058ac:	f8c8 0000 	str.w	r0, [r8]
 80058b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80058b4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80058b8:	f7fe ff1e 	bl	80046f8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058bc:	f8da 3000 	ldr.w	r3, [sl]
 80058c0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80058c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 80058c4:	429a      	cmp	r2, r3
 80058c6:	bf28      	it	cs
 80058c8:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d051      	beq.n	8005976 <xTaskIncrementTick+0x126>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058d8:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058da:	f104 0b04 	add.w	fp, r4, #4
					if( xConstTickCount < xItemValue )
 80058de:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058e0:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
 80058e2:	d2d5      	bcs.n	8005890 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 80058e4:	9a01      	ldr	r2, [sp, #4]
 80058e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058e8:	e01a      	b.n	8005920 <xTaskIncrementTick+0xd0>
		++xPendedTicks;
 80058ea:	4a2d      	ldr	r2, [pc, #180]	@ (80059a0 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 80058ec:	2500      	movs	r5, #0
		++xPendedTicks;
 80058ee:	6813      	ldr	r3, [r2, #0]
}
 80058f0:	4628      	mov	r0, r5
		++xPendedTicks;
 80058f2:	3301      	adds	r3, #1
 80058f4:	6013      	str	r3, [r2, #0]
}
 80058f6:	b003      	add	sp, #12
 80058f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80058fc:	4b27      	ldr	r3, [pc, #156]	@ (800599c <xTaskIncrementTick+0x14c>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	b30a      	cbz	r2, 8005948 <xTaskIncrementTick+0xf8>
 8005904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	e7fe      	b.n	8005914 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8005916:	2500      	movs	r5, #0
 8005918:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 80059b0 <xTaskIncrementTick+0x160>
 800591c:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80059b4 <xTaskIncrementTick+0x164>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005920:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8005924:	491f      	ldr	r1, [pc, #124]	@ (80059a4 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005928:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8005932:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8005934:	2a02      	cmp	r2, #2
 8005936:	bf28      	it	cs
 8005938:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 800593a:	2b00      	cmp	r3, #0
 800593c:	bf18      	it	ne
 800593e:	2501      	movne	r5, #1
}
 8005940:	4628      	mov	r0, r5
 8005942:	b003      	add	sp, #12
 8005944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8005948:	4a17      	ldr	r2, [pc, #92]	@ (80059a8 <xTaskIncrementTick+0x158>)
 800594a:	6818      	ldr	r0, [r3, #0]
 800594c:	6811      	ldr	r1, [r2, #0]
 800594e:	6019      	str	r1, [r3, #0]
 8005950:	4916      	ldr	r1, [pc, #88]	@ (80059ac <xTaskIncrementTick+0x15c>)
 8005952:	6010      	str	r0, [r2, #0]
 8005954:	680a      	ldr	r2, [r1, #0]
 8005956:	3201      	adds	r2, #1
 8005958:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	b97a      	cbnz	r2, 8005980 <xTaskIncrementTick+0x130>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005960:	4b0d      	ldr	r3, [pc, #52]	@ (8005998 <xTaskIncrementTick+0x148>)
 8005962:	461a      	mov	r2, r3
 8005964:	9301      	str	r3, [sp, #4]
 8005966:	f04f 33ff 	mov.w	r3, #4294967295
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	e77f      	b.n	800586e <xTaskIncrementTick+0x1e>
 800596e:	f8df 9040 	ldr.w	r9, [pc, #64]	@ 80059b0 <xTaskIncrementTick+0x160>
 8005972:	f8df a040 	ldr.w	sl, [pc, #64]	@ 80059b4 <xTaskIncrementTick+0x164>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005976:	f04f 33ff 	mov.w	r3, #4294967295
 800597a:	9a01      	ldr	r2, [sp, #4]
 800597c:	6013      	str	r3, [r2, #0]
					break;
 800597e:	e7cf      	b.n	8005920 <xTaskIncrementTick+0xd0>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005980:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005982:	4a05      	ldr	r2, [pc, #20]	@ (8005998 <xTaskIncrementTick+0x148>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005984:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005986:	9201      	str	r2, [sp, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	6013      	str	r3, [r2, #0]
}
 800598e:	e76e      	b.n	800586e <xTaskIncrementTick+0x1e>
 8005990:	24011e38 	.word	0x24011e38
 8005994:	24011e58 	.word	0x24011e58
 8005998:	24011e3c 	.word	0x24011e3c
 800599c:	24011ea4 	.word	0x24011ea4
 80059a0:	24011e4c 	.word	0x24011e4c
 80059a4:	24011e48 	.word	0x24011e48
 80059a8:	24011ea0 	.word	0x24011ea0
 80059ac:	24011e44 	.word	0x24011e44
 80059b0:	24011ed0 	.word	0x24011ed0
 80059b4:	24012330 	.word	0x24012330
 80059b8:	24011e54 	.word	0x24011e54

080059bc <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80059bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 80059c0:	f000 fd60 	bl	8006484 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80059c4:	4b37      	ldr	r3, [pc, #220]	@ (8005aa4 <xTaskResumeAll.part.0+0xe8>)
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	3a01      	subs	r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d159      	bne.n	8005a86 <xTaskResumeAll.part.0+0xca>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059d2:	4b35      	ldr	r3, [pc, #212]	@ (8005aa8 <xTaskResumeAll.part.0+0xec>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d055      	beq.n	8005a86 <xTaskResumeAll.part.0+0xca>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059da:	4d34      	ldr	r5, [pc, #208]	@ (8005aac <xTaskResumeAll.part.0+0xf0>)
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d05c      	beq.n	8005a9c <xTaskResumeAll.part.0+0xe0>
 80059e2:	4e33      	ldr	r6, [pc, #204]	@ (8005ab0 <xTaskResumeAll.part.0+0xf4>)
						xYieldPending = pdTRUE;
 80059e4:	f04f 0a01 	mov.w	sl, #1
 80059e8:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8005ac4 <xTaskResumeAll.part.0+0x108>
 80059ec:	4f31      	ldr	r7, [pc, #196]	@ (8005ab4 <xTaskResumeAll.part.0+0xf8>)
 80059ee:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 8005ac8 <xTaskResumeAll.part.0+0x10c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f2:	68eb      	ldr	r3, [r5, #12]
 80059f4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059f6:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059fa:	f104 0018 	add.w	r0, r4, #24
 80059fe:	f7fe fea1 	bl	8004744 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a02:	4658      	mov	r0, fp
 8005a04:	f7fe fe9e 	bl	8004744 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a08:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005a0a:	6832      	ldr	r2, [r6, #0]
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005a12:	4293      	cmp	r3, r2
 8005a14:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8005a18:	d900      	bls.n	8005a1c <xTaskResumeAll.part.0+0x60>
 8005a1a:	6033      	str	r3, [r6, #0]
 8005a1c:	f7fe fe6c 	bl	80046f8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d301      	bcc.n	8005a2e <xTaskResumeAll.part.0+0x72>
						xYieldPending = pdTRUE;
 8005a2a:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a2e:	682b      	ldr	r3, [r5, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1de      	bne.n	80059f2 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a34:	4b20      	ldr	r3, [pc, #128]	@ (8005ab8 <xTaskResumeAll.part.0+0xfc>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	6812      	ldr	r2, [r2, #0]
 8005a3a:	b352      	cbz	r2, 8005a92 <xTaskResumeAll.part.0+0xd6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a3c:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8005abc <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a40:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a42:	68d2      	ldr	r2, [r2, #12]
 8005a44:	6852      	ldr	r2, [r2, #4]
 8005a46:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a48:	4e1d      	ldr	r6, [pc, #116]	@ (8005ac0 <xTaskResumeAll.part.0+0x104>)
 8005a4a:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005a4c:	b144      	cbz	r4, 8005a60 <xTaskResumeAll.part.0+0xa4>
								xYieldPending = pdTRUE;
 8005a4e:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005a50:	f7ff fefe 	bl	8005850 <xTaskIncrementTick>
 8005a54:	b108      	cbz	r0, 8005a5a <xTaskResumeAll.part.0+0x9e>
								xYieldPending = pdTRUE;
 8005a56:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a5a:	3c01      	subs	r4, #1
 8005a5c:	d1f8      	bne.n	8005a50 <xTaskResumeAll.part.0+0x94>
						xPendedTicks = 0;
 8005a5e:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8005a60:	f8d9 3000 	ldr.w	r3, [r9]
 8005a64:	b17b      	cbz	r3, 8005a86 <xTaskResumeAll.part.0+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8005a66:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005a7a:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8005a7c:	f000 fd24 	bl	80064c8 <vPortExitCritical>
}
 8005a80:	4620      	mov	r0, r4
 8005a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8005a86:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005a88:	f000 fd1e 	bl	80064c8 <vPortExitCritical>
}
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a92:	4b0a      	ldr	r3, [pc, #40]	@ (8005abc <xTaskResumeAll.part.0+0x100>)
 8005a94:	f04f 32ff 	mov.w	r2, #4294967295
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	e7d5      	b.n	8005a48 <xTaskResumeAll.part.0+0x8c>
 8005a9c:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 8005ac8 <xTaskResumeAll.part.0+0x10c>
 8005aa0:	e7d2      	b.n	8005a48 <xTaskResumeAll.part.0+0x8c>
 8005aa2:	bf00      	nop
 8005aa4:	24011e38 	.word	0x24011e38
 8005aa8:	24011e5c 	.word	0x24011e5c
 8005aac:	24011e8c 	.word	0x24011e8c
 8005ab0:	24011e54 	.word	0x24011e54
 8005ab4:	24012330 	.word	0x24012330
 8005ab8:	24011ea4 	.word	0x24011ea4
 8005abc:	24011e3c 	.word	0x24011e3c
 8005ac0:	24011e4c 	.word	0x24011e4c
 8005ac4:	24011ed0 	.word	0x24011ed0
 8005ac8:	24011e48 	.word	0x24011e48

08005acc <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8005acc:	4b06      	ldr	r3, [pc, #24]	@ (8005ae8 <xTaskResumeAll+0x1c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	b943      	cbnz	r3, 8005ae4 <xTaskResumeAll+0x18>
 8005ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	e7fe      	b.n	8005ae2 <xTaskResumeAll+0x16>
 8005ae4:	f7ff bf6a 	b.w	80059bc <xTaskResumeAll.part.0>
 8005ae8:	24011e38 	.word	0x24011e38

08005aec <vTaskDelay>:
	{
 8005aec:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005aee:	b950      	cbnz	r0, 8005b06 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8005af0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005af4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005af8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	f3bf 8f6f 	isb	sy
	}
 8005b04:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005b06:	4c10      	ldr	r4, [pc, #64]	@ (8005b48 <vTaskDelay+0x5c>)
 8005b08:	6821      	ldr	r1, [r4, #0]
 8005b0a:	b141      	cbz	r1, 8005b1e <vTaskDelay+0x32>
 8005b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	e7fe      	b.n	8005b1c <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	3301      	adds	r3, #1
 8005b22:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b24:	f7ff fcd4 	bl	80054d0 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	b943      	cbnz	r3, 8005b3e <vTaskDelay+0x52>
 8005b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	e7fe      	b.n	8005b3c <vTaskDelay+0x50>
 8005b3e:	f7ff ff3d 	bl	80059bc <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d0d4      	beq.n	8005af0 <vTaskDelay+0x4>
	}
 8005b46:	bd10      	pop	{r4, pc}
 8005b48:	24011e38 	.word	0x24011e38

08005b4c <vTaskSwitchContext>:
{
 8005b4c:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b4e:	4b24      	ldr	r3, [pc, #144]	@ (8005be0 <vTaskSwitchContext+0x94>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	b11b      	cbz	r3, 8005b5c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8005b54:	4b23      	ldr	r3, [pc, #140]	@ (8005be4 <vTaskSwitchContext+0x98>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
}
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8005b5c:	4c22      	ldr	r4, [pc, #136]	@ (8005be8 <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 8005b5e:	4a21      	ldr	r2, [pc, #132]	@ (8005be4 <vTaskSwitchContext+0x98>)
 8005b60:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005b62:	6822      	ldr	r2, [r4, #0]
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	6812      	ldr	r2, [r2, #0]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d92e      	bls.n	8005bcc <vTaskSwitchContext+0x80>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b6e:	4d1f      	ldr	r5, [pc, #124]	@ (8005bec <vTaskSwitchContext+0xa0>)
 8005b70:	491f      	ldr	r1, [pc, #124]	@ (8005bf0 <vTaskSwitchContext+0xa4>)
 8005b72:	682b      	ldr	r3, [r5, #0]
 8005b74:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005b78:	0098      	lsls	r0, r3, #2
 8005b7a:	0092      	lsls	r2, r2, #2
 8005b7c:	588a      	ldr	r2, [r1, r2]
 8005b7e:	b942      	cbnz	r2, 8005b92 <vTaskSwitchContext+0x46>
 8005b80:	b1db      	cbz	r3, 8005bba <vTaskSwitchContext+0x6e>
 8005b82:	3b01      	subs	r3, #1
 8005b84:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005b88:	0098      	lsls	r0, r3, #2
 8005b8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b8e:	2a00      	cmp	r2, #0
 8005b90:	d0f6      	beq.n	8005b80 <vTaskSwitchContext+0x34>
 8005b92:	4418      	add	r0, r3
 8005b94:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 8005b98:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8005b9c:	4662      	mov	r2, ip
 8005b9e:	6849      	ldr	r1, [r1, #4]
 8005ba0:	3208      	adds	r2, #8
 8005ba2:	4291      	cmp	r1, r2
 8005ba4:	f8cc 1004 	str.w	r1, [ip, #4]
 8005ba8:	d016      	beq.n	8005bd8 <vTaskSwitchContext+0x8c>
 8005baa:	68c9      	ldr	r1, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bac:	4a11      	ldr	r2, [pc, #68]	@ (8005bf4 <vTaskSwitchContext+0xa8>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bae:	6021      	str	r1, [r4, #0]
 8005bb0:	602b      	str	r3, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	3354      	adds	r3, #84	@ 0x54
 8005bb6:	6013      	str	r3, [r2, #0]
}
 8005bb8:	bd38      	pop	{r3, r4, r5, pc}
 8005bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bca:	e7fe      	b.n	8005bca <vTaskSwitchContext+0x7e>
		taskCHECK_FOR_STACK_OVERFLOW();
 8005bcc:	6820      	ldr	r0, [r4, #0]
 8005bce:	6821      	ldr	r1, [r4, #0]
 8005bd0:	3134      	adds	r1, #52	@ 0x34
 8005bd2:	f7fa fbf5 	bl	80003c0 <vApplicationStackOverflowHook>
 8005bd6:	e7ca      	b.n	8005b6e <vTaskSwitchContext+0x22>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd8:	6849      	ldr	r1, [r1, #4]
 8005bda:	f8cc 1004 	str.w	r1, [ip, #4]
 8005bde:	e7e4      	b.n	8005baa <vTaskSwitchContext+0x5e>
 8005be0:	24011e38 	.word	0x24011e38
 8005be4:	24011e48 	.word	0x24011e48
 8005be8:	24012330 	.word	0x24012330
 8005bec:	24011e54 	.word	0x24011e54
 8005bf0:	24011ed0 	.word	0x24011ed0
 8005bf4:	2400003c 	.word	0x2400003c

08005bf8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005bf8:	b160      	cbz	r0, 8005c14 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8005c28 <vTaskPlaceOnEventList+0x30>)
{
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c00:	6819      	ldr	r1, [r3, #0]
 8005c02:	3118      	adds	r1, #24
 8005c04:	f7fe fd86 	bl	8004714 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c08:	4620      	mov	r0, r4
 8005c0a:	2101      	movs	r1, #1
}
 8005c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c10:	f7ff bc5e 	b.w	80054d0 <prvAddCurrentTaskToDelayedList>
 8005c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8005c24:	e7fe      	b.n	8005c24 <vTaskPlaceOnEventList+0x2c>
 8005c26:	bf00      	nop
 8005c28:	24012330 	.word	0x24012330

08005c2c <vTaskPlaceOnEventListRestricted>:
	{
 8005c2c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8005c2e:	b180      	cbz	r0, 8005c52 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c30:	4b0c      	ldr	r3, [pc, #48]	@ (8005c64 <vTaskPlaceOnEventListRestricted+0x38>)
 8005c32:	460d      	mov	r5, r1
 8005c34:	4614      	mov	r4, r2
 8005c36:	6819      	ldr	r1, [r3, #0]
 8005c38:	3118      	adds	r1, #24
 8005c3a:	f7fe fd5d 	bl	80046f8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8005c3e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c40:	4621      	mov	r1, r4
 8005c42:	bf0c      	ite	eq
 8005c44:	4628      	moveq	r0, r5
 8005c46:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8005c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c4e:	f7ff bc3f 	b.w	80054d0 <prvAddCurrentTaskToDelayedList>
 8005c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8005c62:	e7fe      	b.n	8005c62 <vTaskPlaceOnEventListRestricted+0x36>
 8005c64:	24012330 	.word	0x24012330

08005c68 <xTaskRemoveFromEventList>:
{
 8005c68:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6a:	68c3      	ldr	r3, [r0, #12]
 8005c6c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005c6e:	b34c      	cbz	r4, 8005cc4 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c70:	f104 0518 	add.w	r5, r4, #24
 8005c74:	4628      	mov	r0, r5
 8005c76:	f7fe fd65 	bl	8004744 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c7a:	4b18      	ldr	r3, [pc, #96]	@ (8005cdc <xTaskRemoveFromEventList+0x74>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	b173      	cbz	r3, 8005c9e <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c80:	4629      	mov	r1, r5
 8005c82:	4817      	ldr	r0, [pc, #92]	@ (8005ce0 <xTaskRemoveFromEventList+0x78>)
 8005c84:	f7fe fd38 	bl	80046f8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c88:	4b16      	ldr	r3, [pc, #88]	@ (8005ce4 <xTaskRemoveFromEventList+0x7c>)
 8005c8a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d920      	bls.n	8005cd6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8005c94:	2301      	movs	r3, #1
 8005c96:	4a14      	ldr	r2, [pc, #80]	@ (8005ce8 <xTaskRemoveFromEventList+0x80>)
		xReturn = pdTRUE;
 8005c98:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8005c9a:	6013      	str	r3, [r2, #0]
}
 8005c9c:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c9e:	1d25      	adds	r5, r4, #4
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f7fe fd4f 	bl	8004744 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ca6:	4b11      	ldr	r3, [pc, #68]	@ (8005cec <xTaskRemoveFromEventList+0x84>)
 8005ca8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	4290      	cmp	r0, r2
 8005cae:	d900      	bls.n	8005cb2 <xTaskRemoveFromEventList+0x4a>
 8005cb0:	6018      	str	r0, [r3, #0]
 8005cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf0 <xTaskRemoveFromEventList+0x88>)
 8005cb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005cb8:	4629      	mov	r1, r5
 8005cba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005cbe:	f7fe fd1b 	bl	80046f8 <vListInsertEnd>
 8005cc2:	e7e1      	b.n	8005c88 <xTaskRemoveFromEventList+0x20>
 8005cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005cd4:	e7fe      	b.n	8005cd4 <xTaskRemoveFromEventList+0x6c>
		xReturn = pdFALSE;
 8005cd6:	2000      	movs	r0, #0
}
 8005cd8:	bd38      	pop	{r3, r4, r5, pc}
 8005cda:	bf00      	nop
 8005cdc:	24011e38 	.word	0x24011e38
 8005ce0:	24011e8c 	.word	0x24011e8c
 8005ce4:	24012330 	.word	0x24012330
 8005ce8:	24011e48 	.word	0x24011e48
 8005cec:	24011e54 	.word	0x24011e54
 8005cf0:	24011ed0 	.word	0x24011ed0

08005cf4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cf4:	4a03      	ldr	r2, [pc, #12]	@ (8005d04 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cf6:	4b04      	ldr	r3, [pc, #16]	@ (8005d08 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cf8:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	e9c0 2300 	strd	r2, r3, [r0]
}
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	24011e44 	.word	0x24011e44
 8005d08:	24011e58 	.word	0x24011e58

08005d0c <xTaskCheckForTimeOut>:
{
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8005d0e:	b308      	cbz	r0, 8005d54 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 8005d10:	460d      	mov	r5, r1
 8005d12:	b1b1      	cbz	r1, 8005d42 <xTaskCheckForTimeOut+0x36>
 8005d14:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005d16:	f000 fbb5 	bl	8006484 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8005d1a:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8005d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8005d88 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 8005d1e:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8005d20:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005d22:	d02c      	beq.n	8005d7e <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d24:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8005d8c <xTaskCheckForTimeOut+0x80>
 8005d28:	6826      	ldr	r6, [r4, #0]
 8005d2a:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d2e:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d30:	42be      	cmp	r6, r7
 8005d32:	d018      	beq.n	8005d66 <xTaskCheckForTimeOut+0x5a>
 8005d34:	4288      	cmp	r0, r1
 8005d36:	d816      	bhi.n	8005d66 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 8005d38:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8005d3a:	f000 fbc5 	bl	80064c8 <vPortExitCritical>
}
 8005d3e:	4620      	mov	r0, r4
 8005d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8005d52:	e7fe      	b.n	8005d52 <xTaskCheckForTimeOut+0x46>
 8005d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8005d64:	e7fe      	b.n	8005d64 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d66:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d6a:	4573      	cmp	r3, lr
 8005d6c:	d909      	bls.n	8005d82 <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 8005d6e:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d70:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d74:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8005d76:	4403      	add	r3, r0
 8005d78:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d7a:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 8005d7e:	2400      	movs	r4, #0
 8005d80:	e7db      	b.n	8005d3a <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8005d86:	e7d7      	b.n	8005d38 <xTaskCheckForTimeOut+0x2c>
 8005d88:	24011e58 	.word	0x24011e58
 8005d8c:	24011e44 	.word	0x24011e44

08005d90 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005d90:	4b01      	ldr	r3, [pc, #4]	@ (8005d98 <vTaskMissedYield+0x8>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
}
 8005d96:	4770      	bx	lr
 8005d98:	24011e48 	.word	0x24011e48

08005d9c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8005d9c:	4b01      	ldr	r3, [pc, #4]	@ (8005da4 <xTaskGetCurrentTaskHandle+0x8>)
 8005d9e:	6818      	ldr	r0, [r3, #0]
	}
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	24012330 	.word	0x24012330

08005da8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005da8:	4b05      	ldr	r3, [pc, #20]	@ (8005dc0 <xTaskGetSchedulerState+0x18>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	b133      	cbz	r3, 8005dbc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dae:	4b05      	ldr	r3, [pc, #20]	@ (8005dc4 <xTaskGetSchedulerState+0x1c>)
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	fab0 f080 	clz	r0, r0
 8005db6:	0940      	lsrs	r0, r0, #5
 8005db8:	0040      	lsls	r0, r0, #1
 8005dba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dbc:	2001      	movs	r0, #1
	}
 8005dbe:	4770      	bx	lr
 8005dc0:	24011e50 	.word	0x24011e50
 8005dc4:	24011e38 	.word	0x24011e38

08005dc8 <xTaskPriorityInherit>:
	{
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005dca:	4604      	mov	r4, r0
 8005dcc:	b1c8      	cbz	r0, 8005e02 <xTaskPriorityInherit+0x3a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005dce:	4d1b      	ldr	r5, [pc, #108]	@ (8005e3c <xTaskPriorityInherit+0x74>)
 8005dd0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8005dd2:	682a      	ldr	r2, [r5, #0]
 8005dd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d214      	bcs.n	8005e04 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005dda:	6982      	ldr	r2, [r0, #24]
 8005ddc:	2a00      	cmp	r2, #0
 8005dde:	db04      	blt.n	8005dea <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de0:	682a      	ldr	r2, [r5, #0]
 8005de2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005de4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8005de8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005dea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005dee:	4e14      	ldr	r6, [pc, #80]	@ (8005e40 <xTaskPriorityInherit+0x78>)
 8005df0:	6962      	ldr	r2, [r4, #20]
 8005df2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d00c      	beq.n	8005e14 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005dfa:	682b      	ldr	r3, [r5, #0]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfe:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8005e00:	2001      	movs	r0, #1
	}
 8005e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8005e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0a:	4298      	cmp	r0, r3
 8005e0c:	bf2c      	ite	cs
 8005e0e:	2000      	movcs	r0, #0
 8005e10:	2001      	movcc	r0, #1
	}
 8005e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e14:	1d27      	adds	r7, r4, #4
 8005e16:	4638      	mov	r0, r7
 8005e18:	f7fe fc94 	bl	8004744 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e1c:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e1e:	4b09      	ldr	r3, [pc, #36]	@ (8005e44 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e20:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e22:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e24:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e26:	4290      	cmp	r0, r2
 8005e28:	d900      	bls.n	8005e2c <xTaskPriorityInherit+0x64>
 8005e2a:	6018      	str	r0, [r3, #0]
 8005e2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e30:	4639      	mov	r1, r7
 8005e32:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8005e36:	f7fe fc5f 	bl	80046f8 <vListInsertEnd>
 8005e3a:	e7e1      	b.n	8005e00 <xTaskPriorityInherit+0x38>
 8005e3c:	24012330 	.word	0x24012330
 8005e40:	24011ed0 	.word	0x24011ed0
 8005e44:	24011e54 	.word	0x24011e54

08005e48 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005e48:	b308      	cbz	r0, 8005e8e <xTaskPriorityDisinherit+0x46>
	{
 8005e4a:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8005e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec4 <xTaskPriorityDisinherit+0x7c>)
 8005e4e:	681c      	ldr	r4, [r3, #0]
 8005e50:	4284      	cmp	r4, r0
 8005e52:	d008      	beq.n	8005e66 <xTaskPriorityDisinherit+0x1e>
 8005e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	e7fe      	b.n	8005e64 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e66:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005e68:	b143      	cbz	r3, 8005e7c <xTaskPriorityDisinherit+0x34>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 8005e6c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e6e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8005e70:	6523      	str	r3, [r4, #80]	@ 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e72:	4291      	cmp	r1, r2
 8005e74:	d000      	beq.n	8005e78 <xTaskPriorityDisinherit+0x30>
 8005e76:	b163      	cbz	r3, 8005e92 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8005e78:	2000      	movs	r0, #0
	}
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8005e8c:	e7fe      	b.n	8005e8c <xTaskPriorityDisinherit+0x44>
	BaseType_t xReturn = pdFALSE;
 8005e8e:	2000      	movs	r0, #0
	}
 8005e90:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e92:	1d25      	adds	r5, r4, #4
 8005e94:	4628      	mov	r0, r5
 8005e96:	f7fe fc55 	bl	8004744 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e9a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec8 <xTaskPriorityDisinherit+0x80>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e9e:	f1c0 0238 	rsb	r2, r0, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ea2:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea4:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4290      	cmp	r0, r2
 8005eaa:	d900      	bls.n	8005eae <xTaskPriorityDisinherit+0x66>
 8005eac:	6018      	str	r0, [r3, #0]
 8005eae:	4b07      	ldr	r3, [pc, #28]	@ (8005ecc <xTaskPriorityDisinherit+0x84>)
 8005eb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005eba:	f7fe fc1d 	bl	80046f8 <vListInsertEnd>
					xReturn = pdTRUE;
 8005ebe:	2001      	movs	r0, #1
	}
 8005ec0:	bd38      	pop	{r3, r4, r5, pc}
 8005ec2:	bf00      	nop
 8005ec4:	24012330 	.word	0x24012330
 8005ec8:	24011e54 	.word	0x24011e54
 8005ecc:	24011ed0 	.word	0x24011ed0

08005ed0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d03c      	beq.n	8005f4e <vTaskPriorityDisinheritAfterTimeout+0x7e>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ed4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
	{
 8005ed6:	b570      	push	{r4, r5, r6, lr}
 8005ed8:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8005eda:	b14b      	cbz	r3, 8005ef0 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005edc:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005ede:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005ee0:	4281      	cmp	r1, r0
 8005ee2:	bf38      	it	cc
 8005ee4:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8005eea:	428a      	cmp	r2, r1
 8005eec:	d109      	bne.n	8005f02 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8005f00:	e7fe      	b.n	8005f00 <vTaskPriorityDisinheritAfterTimeout+0x30>
					configASSERT( pxTCB != pxCurrentTCB );
 8005f02:	4b18      	ldr	r3, [pc, #96]	@ (8005f64 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	d022      	beq.n	8005f50 <vTaskPriorityDisinheritAfterTimeout+0x80>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f0a:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f0c:	62e1      	str	r1, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	db02      	blt.n	8005f18 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f12:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
 8005f16:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f18:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005f1c:	4d12      	ldr	r5, [pc, #72]	@ (8005f68 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8005f1e:	6961      	ldr	r1, [r4, #20]
 8005f20:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8005f24:	4299      	cmp	r1, r3
 8005f26:	d1e2      	bne.n	8005eee <vTaskPriorityDisinheritAfterTimeout+0x1e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f28:	1d26      	adds	r6, r4, #4
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f7fe fc0a 	bl	8004744 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8005f30:	4b0e      	ldr	r3, [pc, #56]	@ (8005f6c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8005f32:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4290      	cmp	r0, r2
 8005f38:	d900      	bls.n	8005f3c <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8005f3a:	6018      	str	r0, [r3, #0]
 8005f3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f40:	4631      	mov	r1, r6
 8005f42:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 8005f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8005f4a:	f7fe bbd5 	b.w	80046f8 <vListInsertEnd>
 8005f4e:	4770      	bx	lr
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8005f60:	e7fe      	b.n	8005f60 <vTaskPriorityDisinheritAfterTimeout+0x90>
 8005f62:	bf00      	nop
 8005f64:	24012330 	.word	0x24012330
 8005f68:	24011ed0 	.word	0x24011ed0
 8005f6c:	24011e54 	.word	0x24011e54

08005f70 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005f70:	4b04      	ldr	r3, [pc, #16]	@ (8005f84 <pvTaskIncrementMutexHeldCount+0x14>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	b11a      	cbz	r2, 8005f7e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005f76:	6819      	ldr	r1, [r3, #0]
 8005f78:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8005f7a:	3201      	adds	r2, #1
 8005f7c:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 8005f7e:	6818      	ldr	r0, [r3, #0]
	}
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	24012330 	.word	0x24012330

08005f88 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f88:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8005f8a:	4c12      	ldr	r4, [pc, #72]	@ (8005fd4 <prvCheckForValidListAndQueue+0x4c>)
{
 8005f8c:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8005f8e:	f000 fa79 	bl	8006484 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8005f92:	6825      	ldr	r5, [r4, #0]
 8005f94:	b125      	cbz	r5, 8005fa0 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8005f96:	b003      	add	sp, #12
 8005f98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8005f9c:	f000 ba94 	b.w	80064c8 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8005fa0:	4f0d      	ldr	r7, [pc, #52]	@ (8005fd8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8005fa2:	4e0e      	ldr	r6, [pc, #56]	@ (8005fdc <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	f7fe fb97 	bl	80046d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005faa:	4630      	mov	r0, r6
 8005fac:	f7fe fb94 	bl	80046d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8005fe0 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005fb2:	9500      	str	r5, [sp, #0]
 8005fb4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8005fb6:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005fb8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8005fba:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe4 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe8 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8005fbe:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8005fec <prvCheckForValidListAndQueue+0x64>)
 8005fc2:	f7fe fc97 	bl	80048f4 <xQueueGenericCreateStatic>
 8005fc6:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d0e4      	beq.n	8005f96 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005fcc:	4908      	ldr	r1, [pc, #32]	@ (8005ff0 <prvCheckForValidListAndQueue+0x68>)
 8005fce:	f7ff f99f 	bl	8005310 <vQueueAddToRegistry>
 8005fd2:	e7e0      	b.n	8005f96 <prvCheckForValidListAndQueue+0xe>
 8005fd4:	2401242c 	.word	0x2401242c
 8005fd8:	2401244c 	.word	0x2401244c
 8005fdc:	24012438 	.word	0x24012438
 8005fe0:	24012434 	.word	0x24012434
 8005fe4:	24012430 	.word	0x24012430
 8005fe8:	24012334 	.word	0x24012334
 8005fec:	24012384 	.word	0x24012384
 8005ff0:	08011ae8 	.word	0x08011ae8

08005ff4 <xTimerCreateTimerTask>:
{
 8005ff4:	b530      	push	{r4, r5, lr}
 8005ff6:	b089      	sub	sp, #36	@ 0x24
	prvCheckForValidListAndQueue();
 8005ff8:	f7ff ffc6 	bl	8005f88 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005ffc:	4b12      	ldr	r3, [pc, #72]	@ (8006048 <xTimerCreateTimerTask+0x54>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	b1cb      	cbz	r3, 8006036 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006002:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006004:	aa07      	add	r2, sp, #28
 8006006:	a906      	add	r1, sp, #24
 8006008:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800600a:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800600c:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006010:	f7fe fb52 	bl	80046b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006014:	4623      	mov	r3, r4
 8006016:	9a07      	ldr	r2, [sp, #28]
 8006018:	9500      	str	r5, [sp, #0]
 800601a:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800601e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8006022:	490a      	ldr	r1, [pc, #40]	@ (800604c <xTimerCreateTimerTask+0x58>)
 8006024:	480a      	ldr	r0, [pc, #40]	@ (8006050 <xTimerCreateTimerTask+0x5c>)
 8006026:	f7ff fb43 	bl	80056b0 <xTaskCreateStatic>
 800602a:	4b0a      	ldr	r3, [pc, #40]	@ (8006054 <xTimerCreateTimerTask+0x60>)
 800602c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800602e:	b110      	cbz	r0, 8006036 <xTimerCreateTimerTask+0x42>
}
 8006030:	2001      	movs	r0, #1
 8006032:	b009      	add	sp, #36	@ 0x24
 8006034:	bd30      	pop	{r4, r5, pc}
 8006036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8006046:	e7fe      	b.n	8006046 <xTimerCreateTimerTask+0x52>
 8006048:	2401242c 	.word	0x2401242c
 800604c:	08011af0 	.word	0x08011af0
 8006050:	08006141 	.word	0x08006141
 8006054:	24012428 	.word	0x24012428

08006058 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8006058:	b1c8      	cbz	r0, 800608e <xTimerGenericCommand+0x36>
{
 800605a:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 800605c:	4d18      	ldr	r5, [pc, #96]	@ (80060c0 <xTimerGenericCommand+0x68>)
{
 800605e:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8006060:	682c      	ldr	r4, [r5, #0]
 8006062:	b18c      	cbz	r4, 8006088 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006064:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006066:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8006068:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800606c:	dc18      	bgt.n	80060a0 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800606e:	f7ff fe9b 	bl	8005da8 <xTaskGetSchedulerState>
 8006072:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006074:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006078:	d01b      	beq.n	80060b2 <xTimerGenericCommand+0x5a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800607a:	4669      	mov	r1, sp
 800607c:	461a      	mov	r2, r3
 800607e:	6828      	ldr	r0, [r5, #0]
 8006080:	f7fe fcf4 	bl	8004a6c <xQueueGenericSend>
}
 8006084:	b005      	add	sp, #20
 8006086:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8006088:	4620      	mov	r0, r4
}
 800608a:	b005      	add	sp, #20
 800608c:	bd30      	pop	{r4, r5, pc}
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800609e:	e7fe      	b.n	800609e <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060a0:	469c      	mov	ip, r3
 80060a2:	4669      	mov	r1, sp
 80060a4:	2300      	movs	r3, #0
 80060a6:	4620      	mov	r0, r4
 80060a8:	4662      	mov	r2, ip
 80060aa:	f7fe fe17 	bl	8004cdc <xQueueGenericSendFromISR>
}
 80060ae:	b005      	add	sp, #20
 80060b0:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060b2:	9a08      	ldr	r2, [sp, #32]
 80060b4:	4669      	mov	r1, sp
 80060b6:	6828      	ldr	r0, [r5, #0]
 80060b8:	f7fe fcd8 	bl	8004a6c <xQueueGenericSend>
 80060bc:	e7e5      	b.n	800608a <xTimerGenericCommand+0x32>
 80060be:	bf00      	nop
 80060c0:	2401242c 	.word	0x2401242c

080060c4 <prvSwitchTimerLists>:
{
 80060c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c6:	4e1c      	ldr	r6, [pc, #112]	@ (8006138 <prvSwitchTimerLists+0x74>)
 80060c8:	b083      	sub	sp, #12
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060ca:	e00d      	b.n	80060e8 <prvSwitchTimerLists+0x24>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060cc:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ce:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060d0:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060d2:	1d25      	adds	r5, r4, #4
 80060d4:	4628      	mov	r0, r5
 80060d6:	f7fe fb35 	bl	8004744 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060da:	6a23      	ldr	r3, [r4, #32]
 80060dc:	4620      	mov	r0, r4
 80060de:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060e0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80060e4:	075b      	lsls	r3, r3, #29
 80060e6:	d409      	bmi.n	80060fc <prvSwitchTimerLists+0x38>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060e8:	6833      	ldr	r3, [r6, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	2a00      	cmp	r2, #0
 80060ee:	d1ed      	bne.n	80060cc <prvSwitchTimerLists+0x8>
	pxCurrentTimerList = pxOverflowTimerList;
 80060f0:	4a12      	ldr	r2, [pc, #72]	@ (800613c <prvSwitchTimerLists+0x78>)
 80060f2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060f4:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80060f6:	6031      	str	r1, [r6, #0]
}
 80060f8:	b003      	add	sp, #12
 80060fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060fc:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060fe:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006100:	2300      	movs	r3, #0
 8006102:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006104:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006106:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8006108:	42af      	cmp	r7, r5
 800610a:	d205      	bcs.n	8006118 <prvSwitchTimerLists+0x54>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800610c:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800610e:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006110:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006112:	f7fe faff 	bl	8004714 <vListInsert>
 8006116:	e7e7      	b.n	80060e8 <prvSwitchTimerLists+0x24>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006118:	4619      	mov	r1, r3
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	f7ff ff9c 	bl	8006058 <xTimerGenericCommand>
				configASSERT( xResult );
 8006120:	2800      	cmp	r0, #0
 8006122:	d1e1      	bne.n	80060e8 <prvSwitchTimerLists+0x24>
 8006124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	e7fe      	b.n	8006134 <prvSwitchTimerLists+0x70>
 8006136:	bf00      	nop
 8006138:	24012434 	.word	0x24012434
 800613c:	24012430 	.word	0x24012430

08006140 <prvTimerTask>:
{
 8006140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006144:	4e96      	ldr	r6, [pc, #600]	@ (80063a0 <prvTimerTask+0x260>)
 8006146:	b087      	sub	sp, #28
 8006148:	4d96      	ldr	r5, [pc, #600]	@ (80063a4 <prvTimerTask+0x264>)
					portYIELD_WITHIN_API();
 800614a:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 800614e:	4c96      	ldr	r4, [pc, #600]	@ (80063a8 <prvTimerTask+0x268>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006150:	6833      	ldr	r3, [r6, #0]
 8006152:	681f      	ldr	r7, [r3, #0]
 8006154:	2f00      	cmp	r7, #0
 8006156:	f000 80a9 	beq.w	80062ac <prvTimerTask+0x16c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 800615e:	f7ff fb61 	bl	8005824 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006162:	f7ff fb67 	bl	8005834 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006166:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8006168:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 800616a:	4290      	cmp	r0, r2
 800616c:	f0c0 80a6 	bcc.w	80062bc <prvTimerTask+0x17c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006170:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8006172:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006174:	f200 80c7 	bhi.w	8006306 <prvTimerTask+0x1c6>
				( void ) xTaskResumeAll();
 8006178:	f7ff fca8 	bl	8005acc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800617c:	6832      	ldr	r2, [r6, #0]
 800617e:	68d2      	ldr	r2, [r2, #12]
 8006180:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006184:	f10b 0804 	add.w	r8, fp, #4
 8006188:	4640      	mov	r0, r8
 800618a:	f7fe fadb 	bl	8004744 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800618e:	f89b 0028 	ldrb.w	r0, [fp, #40]	@ 0x28
 8006192:	0743      	lsls	r3, r0, #29
 8006194:	f100 80c6 	bmi.w	8006324 <prvTimerTask+0x1e4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006198:	f020 0001 	bic.w	r0, r0, #1
 800619c:	f88b 0028 	strb.w	r0, [fp, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061a0:	f8db 3020 	ldr.w	r3, [fp, #32]
 80061a4:	4658      	mov	r0, fp
 80061a6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061a8:	2200      	movs	r2, #0
 80061aa:	a902      	add	r1, sp, #8
 80061ac:	6820      	ldr	r0, [r4, #0]
 80061ae:	f7fe fe51 	bl	8004e54 <xQueueReceive>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d0cc      	beq.n	8006150 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061b6:	9b02      	ldr	r3, [sp, #8]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061b8:	9804      	ldr	r0, [sp, #16]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	db6e      	blt.n	800629c <prvTimerTask+0x15c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061be:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	b113      	cbz	r3, 80061ca <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061c4:	1d38      	adds	r0, r7, #4
 80061c6:	f7fe fabd 	bl	8004744 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80061ca:	f7ff fb33 	bl	8005834 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80061ce:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80061d0:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 80061d2:	4298      	cmp	r0, r3
 80061d4:	d379      	bcc.n	80062ca <prvTimerTask+0x18a>
			switch( xMessage.xMessageID )
 80061d6:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 80061d8:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 80061dc:	2b09      	cmp	r3, #9
 80061de:	d8e3      	bhi.n	80061a8 <prvTimerTask+0x68>
 80061e0:	e8df f003 	tbb	[pc, r3]
 80061e4:	4c050505 	.word	0x4c050505
 80061e8:	05055336 	.word	0x05055336
 80061ec:	364c      	.short	0x364c
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061ee:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061f2:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061f4:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061f8:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061fa:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061fc:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006200:	185a      	adds	r2, r3, r1
 8006202:	bf2c      	ite	cs
 8006204:	2001      	movcs	r0, #1
 8006206:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8006208:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800620a:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800620c:	d87d      	bhi.n	800630a <prvTimerTask+0x1ca>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800620e:	eba8 0303 	sub.w	r3, r8, r3
 8006212:	4299      	cmp	r1, r3
 8006214:	f200 80af 	bhi.w	8006376 <prvTimerTask+0x236>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	4638      	mov	r0, r7
 800621c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800621e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006222:	0759      	lsls	r1, r3, #29
 8006224:	d5c0      	bpl.n	80061a8 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006226:	2200      	movs	r2, #0
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	4638      	mov	r0, r7
 800622c:	9200      	str	r2, [sp, #0]
 800622e:	9a03      	ldr	r2, [sp, #12]
 8006230:	441a      	add	r2, r3
 8006232:	2300      	movs	r3, #0
 8006234:	4619      	mov	r1, r3
 8006236:	f7ff ff0f 	bl	8006058 <xTimerGenericCommand>
							configASSERT( xResult );
 800623a:	2800      	cmp	r0, #0
 800623c:	d1b4      	bne.n	80061a8 <prvTimerTask+0x68>
 800623e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	e7fe      	b.n	800624e <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006250:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006254:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006256:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800625a:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800625c:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 8094 	beq.w	800638e <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006266:	4443      	add	r3, r8
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006268:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800626a:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 800626c:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800626e:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006270:	d854      	bhi.n	800631c <prvTimerTask+0x1dc>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006272:	4b4e      	ldr	r3, [pc, #312]	@ (80063ac <prvTimerTask+0x26c>)
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	f7fe fa4d 	bl	8004714 <vListInsert>
 800627a:	e795      	b.n	80061a8 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800627c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006280:	f023 0301 	bic.w	r3, r3, #1
 8006284:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
					break;
 8006288:	e78e      	b.n	80061a8 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800628a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800628e:	079a      	lsls	r2, r3, #30
 8006290:	d568      	bpl.n	8006364 <prvTimerTask+0x224>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006292:	f023 0301 	bic.w	r3, r3, #1
 8006296:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800629a:	e785      	b.n	80061a8 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800629c:	9b03      	ldr	r3, [sp, #12]
 800629e:	9905      	ldr	r1, [sp, #20]
 80062a0:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062a2:	9b02      	ldr	r3, [sp, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f6ff af7f 	blt.w	80061a8 <prvTimerTask+0x68>
 80062aa:	e788      	b.n	80061be <prvTimerTask+0x7e>
	vTaskSuspendAll();
 80062ac:	f7ff faba 	bl	8005824 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80062b0:	f7ff fac0 	bl	8005834 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80062b4:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80062b6:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80062b8:	4290      	cmp	r0, r2
 80062ba:	d209      	bcs.n	80062d0 <prvTimerTask+0x190>
		prvSwitchTimerLists();
 80062bc:	f7ff ff02 	bl	80060c4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80062c0:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 80062c4:	f7ff fc02 	bl	8005acc <xTaskResumeAll>
 80062c8:	e76e      	b.n	80061a8 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 80062ca:	f7ff fefb 	bl	80060c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062ce:	e782      	b.n	80061d6 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062d0:	4b36      	ldr	r3, [pc, #216]	@ (80063ac <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 80062d2:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	fab2 f282 	clz	r2, r2
 80062de:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062e0:	eba7 010a 	sub.w	r1, r7, sl
 80062e4:	6820      	ldr	r0, [r4, #0]
 80062e6:	f7ff f843 	bl	8005370 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062ea:	f7ff fbef 	bl	8005acc <xTaskResumeAll>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	f47f af5a 	bne.w	80061a8 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 80062f4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80062f8:	f8c9 3d04 	str.w	r3, [r9, #3332]	@ 0xd04
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	e750      	b.n	80061a8 <prvTimerTask+0x68>
 8006306:	2200      	movs	r2, #0
 8006308:	e7ea      	b.n	80062e0 <prvTimerTask+0x1a0>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800630a:	4543      	cmp	r3, r8
 800630c:	d901      	bls.n	8006312 <prvTimerTask+0x1d2>
 800630e:	2800      	cmp	r0, #0
 8006310:	d082      	beq.n	8006218 <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006312:	1d39      	adds	r1, r7, #4
 8006314:	6830      	ldr	r0, [r6, #0]
 8006316:	f7fe f9fd 	bl	8004714 <vListInsert>
	return xProcessTimerNow;
 800631a:	e745      	b.n	80061a8 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800631c:	6830      	ldr	r0, [r6, #0]
 800631e:	f7fe f9f9 	bl	8004714 <vListInsert>
 8006322:	e741      	b.n	80061a8 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006324:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006328:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800632c:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 800632e:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006330:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006334:	d31a      	bcc.n	800636c <prvTimerTask+0x22c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006336:	ebaa 0307 	sub.w	r3, sl, r7
 800633a:	429a      	cmp	r2, r3
 800633c:	d821      	bhi.n	8006382 <prvTimerTask+0x242>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800633e:	2300      	movs	r3, #0
 8006340:	463a      	mov	r2, r7
 8006342:	4658      	mov	r0, fp
 8006344:	4619      	mov	r1, r3
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	f7ff fe86 	bl	8006058 <xTimerGenericCommand>
			configASSERT( xResult );
 800634c:	2800      	cmp	r0, #0
 800634e:	f47f af27 	bne.w	80061a0 <prvTimerTask+0x60>
 8006352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	e7fe      	b.n	8006362 <prvTimerTask+0x222>
							vPortFree( pxTimer );
 8006364:	4638      	mov	r0, r7
 8006366:	f000 fa97 	bl	8006898 <vPortFree>
 800636a:	e71d      	b.n	80061a8 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800636c:	4641      	mov	r1, r8
 800636e:	6830      	ldr	r0, [r6, #0]
 8006370:	f7fe f9d0 	bl	8004714 <vListInsert>
	return xProcessTimerNow;
 8006374:	e714      	b.n	80061a0 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006376:	4b0d      	ldr	r3, [pc, #52]	@ (80063ac <prvTimerTask+0x26c>)
 8006378:	1d39      	adds	r1, r7, #4
 800637a:	6818      	ldr	r0, [r3, #0]
 800637c:	f7fe f9ca 	bl	8004714 <vListInsert>
	return xProcessTimerNow;
 8006380:	e712      	b.n	80061a8 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006382:	4b0a      	ldr	r3, [pc, #40]	@ (80063ac <prvTimerTask+0x26c>)
 8006384:	4641      	mov	r1, r8
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	f7fe f9c4 	bl	8004714 <vListInsert>
	return xProcessTimerNow;
 800638c:	e708      	b.n	80061a0 <prvTimerTask+0x60>
 800638e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800639e:	e7fe      	b.n	800639e <prvTimerTask+0x25e>
 80063a0:	24012434 	.word	0x24012434
 80063a4:	24012424 	.word	0x24012424
 80063a8:	2401242c 	.word	0x2401242c
 80063ac:	24012430 	.word	0x24012430

080063b0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063b0:	4808      	ldr	r0, [pc, #32]	@ (80063d4 <prvPortStartFirstTask+0x24>)
 80063b2:	6800      	ldr	r0, [r0, #0]
 80063b4:	6800      	ldr	r0, [r0, #0]
 80063b6:	f380 8808 	msr	MSP, r0
 80063ba:	f04f 0000 	mov.w	r0, #0
 80063be:	f380 8814 	msr	CONTROL, r0
 80063c2:	b662      	cpsie	i
 80063c4:	b661      	cpsie	f
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	df00      	svc	0
 80063d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063d2:	0000      	.short	0x0000
 80063d4:	e000ed08 	.word	0xe000ed08

080063d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063d8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80063e8 <vPortEnableVFP+0x10>
 80063dc:	6801      	ldr	r1, [r0, #0]
 80063de:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80063e2:	6001      	str	r1, [r0, #0]
 80063e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063e6:	0000      	.short	0x0000
 80063e8:	e000ed88 	.word	0xe000ed88

080063ec <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 80063ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006428 <prvTaskExitError+0x3c>)
{
 80063ee:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80063f0:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80063f2:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 80063f4:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80063f6:	3301      	adds	r3, #1
 80063f8:	d008      	beq.n	800640c <prvTaskExitError+0x20>
 80063fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	e7fe      	b.n	800640a <prvTaskExitError+0x1e>
 800640c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800641c:	9b01      	ldr	r3, [sp, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0fc      	beq.n	800641c <prvTaskExitError+0x30>
}
 8006422:	b002      	add	sp, #8
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	24000024 	.word	0x24000024

0800642c <pxPortInitialiseStack>:
{
 800642c:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800642e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006432:	4809      	ldr	r0, [pc, #36]	@ (8006458 <pxPortInitialiseStack+0x2c>)
{
 8006434:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006436:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800643a:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800643e:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8006442:	f1a3 0044 	sub.w	r0, r3, #68	@ 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006446:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800644a:	f06f 0102 	mvn.w	r1, #2
}
 800644e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006452:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8006456:	4770      	bx	lr
 8006458:	080063ed 	.word	0x080063ed
 800645c:	00000000 	.word	0x00000000

08006460 <SVC_Handler>:
	__asm volatile (
 8006460:	4b07      	ldr	r3, [pc, #28]	@ (8006480 <pxCurrentTCBConst2>)
 8006462:	6819      	ldr	r1, [r3, #0]
 8006464:	6808      	ldr	r0, [r1, #0]
 8006466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	f380 8809 	msr	PSP, r0
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f04f 0000 	mov.w	r0, #0
 8006476:	f380 8811 	msr	BASEPRI, r0
 800647a:	4770      	bx	lr
 800647c:	f3af 8000 	nop.w

08006480 <pxCurrentTCBConst2>:
 8006480:	24012330 	.word	0x24012330

08006484 <vPortEnterCritical>:
 8006484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006494:	4a0b      	ldr	r2, [pc, #44]	@ (80064c4 <vPortEnterCritical+0x40>)
 8006496:	6813      	ldr	r3, [r2, #0]
 8006498:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800649a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800649c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800649e:	d000      	beq.n	80064a2 <vPortEnterCritical+0x1e>
}
 80064a0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80064a6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0f7      	beq.n	80064a0 <vPortEnterCritical+0x1c>
 80064b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	e7fe      	b.n	80064c0 <vPortEnterCritical+0x3c>
 80064c2:	bf00      	nop
 80064c4:	24000024 	.word	0x24000024

080064c8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80064c8:	4a08      	ldr	r2, [pc, #32]	@ (80064ec <vPortExitCritical+0x24>)
 80064ca:	6813      	ldr	r3, [r2, #0]
 80064cc:	b943      	cbnz	r3, 80064e0 <vPortExitCritical+0x18>
 80064ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	e7fe      	b.n	80064de <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80064e0:	3b01      	subs	r3, #1
 80064e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064e4:	b90b      	cbnz	r3, 80064ea <vPortExitCritical+0x22>
	__asm volatile
 80064e6:	f383 8811 	msr	BASEPRI, r3
}
 80064ea:	4770      	bx	lr
 80064ec:	24000024 	.word	0x24000024

080064f0 <PendSV_Handler>:
	__asm volatile
 80064f0:	f3ef 8009 	mrs	r0, PSP
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	4b15      	ldr	r3, [pc, #84]	@ (8006550 <pxCurrentTCBConst>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	f01e 0f10 	tst.w	lr, #16
 8006500:	bf08      	it	eq
 8006502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650a:	6010      	str	r0, [r2, #0]
 800650c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006514:	f380 8811 	msr	BASEPRI, r0
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f7ff fb14 	bl	8005b4c <vTaskSwitchContext>
 8006524:	f04f 0000 	mov.w	r0, #0
 8006528:	f380 8811 	msr	BASEPRI, r0
 800652c:	bc09      	pop	{r0, r3}
 800652e:	6819      	ldr	r1, [r3, #0]
 8006530:	6808      	ldr	r0, [r1, #0]
 8006532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006536:	f01e 0f10 	tst.w	lr, #16
 800653a:	bf08      	it	eq
 800653c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006540:	f380 8809 	msr	PSP, r0
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	f3af 8000 	nop.w

08006550 <pxCurrentTCBConst>:
 8006550:	24012330 	.word	0x24012330

08006554 <xPortSysTickHandler>:
{
 8006554:	b508      	push	{r3, lr}
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006566:	f7ff f973 	bl	8005850 <xTaskIncrementTick>
 800656a:	b128      	cbz	r0, 8006578 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800656c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006570:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006574:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8006578:	2300      	movs	r3, #0
 800657a:	f383 8811 	msr	BASEPRI, r3
}
 800657e:	bd08      	pop	{r3, pc}

08006580 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006580:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006584:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006586:	4806      	ldr	r0, [pc, #24]	@ (80065a0 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006588:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800658a:	4906      	ldr	r1, [pc, #24]	@ (80065a4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800658c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800658e:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006590:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006592:	fba1 1303 	umull	r1, r3, r1, r3
 8006596:	099b      	lsrs	r3, r3, #6
 8006598:	3b01      	subs	r3, #1
 800659a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800659c:	6110      	str	r0, [r2, #16]
}
 800659e:	4770      	bx	lr
 80065a0:	24000004 	.word	0x24000004
 80065a4:	10624dd3 	.word	0x10624dd3

080065a8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80065ac:	4a3d      	ldr	r2, [pc, #244]	@ (80066a4 <xPortStartScheduler+0xfc>)
 80065ae:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 80065b2:	4291      	cmp	r1, r2
 80065b4:	d041      	beq.n	800663a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065b6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80065ba:	4b3b      	ldr	r3, [pc, #236]	@ (80066a8 <xPortStartScheduler+0x100>)
 80065bc:	429a      	cmp	r2, r3
 80065be:	d033      	beq.n	8006628 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065c0:	4b3a      	ldr	r3, [pc, #232]	@ (80066ac <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065c6:	483a      	ldr	r0, [pc, #232]	@ (80066b0 <xPortStartScheduler+0x108>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065c8:	493a      	ldr	r1, [pc, #232]	@ (80066b4 <xPortStartScheduler+0x10c>)
{
 80065ca:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065cc:	781a      	ldrb	r2, [r3, #0]
{
 80065ce:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065d4:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065d6:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065da:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065dc:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065f0:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065f2:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065f4:	d50f      	bpl.n	8006616 <xPortStartScheduler+0x6e>
 80065f6:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80065fc:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065fe:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006608:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800660c:	061b      	lsls	r3, r3, #24
 800660e:	d4f3      	bmi.n	80065f8 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006610:	2903      	cmp	r1, #3
 8006612:	d01b      	beq.n	800664c <xPortStartScheduler+0xa4>
 8006614:	6001      	str	r1, [r0, #0]
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	e7fe      	b.n	8006626 <xPortStartScheduler+0x7e>
 8006628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006638:	e7fe      	b.n	8006638 <xPortStartScheduler+0x90>
 800663a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800664a:	e7fe      	b.n	800664a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800664c:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800664e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006652:	4a16      	ldr	r2, [pc, #88]	@ (80066ac <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006654:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006658:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 800665a:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800665c:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800665e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006660:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006664:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006668:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800666c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006670:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006674:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8006678:	f7ff ff82 	bl	8006580 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800667c:	4b0e      	ldr	r3, [pc, #56]	@ (80066b8 <xPortStartScheduler+0x110>)
 800667e:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8006680:	f7ff feaa 	bl	80063d8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006684:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8006688:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800668c:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8006690:	f7ff fe8e 	bl	80063b0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006694:	f7ff fa5a 	bl	8005b4c <vTaskSwitchContext>
}
 8006698:	4628      	mov	r0, r5
	prvTaskExitError();
 800669a:	f7ff fea7 	bl	80063ec <prvTaskExitError>
}
 800669e:	b003      	add	sp, #12
 80066a0:	bd30      	pop	{r4, r5, pc}
 80066a2:	bf00      	nop
 80066a4:	410fc271 	.word	0x410fc271
 80066a8:	410fc270 	.word	0x410fc270
 80066ac:	e000e400 	.word	0xe000e400
 80066b0:	24012460 	.word	0x24012460
 80066b4:	24012464 	.word	0x24012464
 80066b8:	24000024 	.word	0x24000024

080066bc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066bc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066c0:	2b0f      	cmp	r3, #15
 80066c2:	d90e      	bls.n	80066e2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066c4:	4911      	ldr	r1, [pc, #68]	@ (800670c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066c6:	4a12      	ldr	r2, [pc, #72]	@ (8006710 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066c8:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066ca:	7812      	ldrb	r2, [r2, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d908      	bls.n	80066e2 <vPortValidateInterruptPriority+0x26>
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	e7fe      	b.n	80066e0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80066e6:	4a0b      	ldr	r2, [pc, #44]	@ (8006714 <vPortValidateInterruptPriority+0x58>)
 80066e8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80066ec:	6812      	ldr	r2, [r2, #0]
 80066ee:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d908      	bls.n	8006708 <vPortValidateInterruptPriority+0x4c>
 80066f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	e7fe      	b.n	8006706 <vPortValidateInterruptPriority+0x4a>
	}
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	e000e3f0 	.word	0xe000e3f0
 8006710:	24012464 	.word	0x24012464
 8006714:	24012460 	.word	0x24012460

08006718 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006718:	4b12      	ldr	r3, [pc, #72]	@ (8006764 <prvInsertBlockIntoFreeList+0x4c>)
{
 800671a:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800671c:	461a      	mov	r2, r3
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4283      	cmp	r3, r0
 8006722:	d3fb      	bcc.n	800671c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006724:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006726:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006728:	eb02 0c04 	add.w	ip, r2, r4
 800672c:	4560      	cmp	r0, ip
 800672e:	d008      	beq.n	8006742 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006730:	1844      	adds	r4, r0, r1
 8006732:	42a3      	cmp	r3, r4
 8006734:	d00b      	beq.n	800674e <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006736:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006738:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800673a:	bf18      	it	ne
 800673c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800673e:	bc30      	pop	{r4, r5}
 8006740:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006742:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006744:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006746:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006748:	4283      	cmp	r3, r0
 800674a:	d1f8      	bne.n	800673e <prvInsertBlockIntoFreeList+0x26>
 800674c:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800674e:	4c06      	ldr	r4, [pc, #24]	@ (8006768 <prvInsertBlockIntoFreeList+0x50>)
 8006750:	6824      	ldr	r4, [r4, #0]
 8006752:	42a3      	cmp	r3, r4
 8006754:	d003      	beq.n	800675e <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006756:	e9d3 4500 	ldrd	r4, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800675a:	4429      	add	r1, r5
 800675c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800675e:	6004      	str	r4, [r0, #0]
 8006760:	e7ea      	b.n	8006738 <prvInsertBlockIntoFreeList+0x20>
 8006762:	bf00      	nop
 8006764:	24012480 	.word	0x24012480
 8006768:	2401247c 	.word	0x2401247c

0800676c <pvPortMalloc>:
{
 800676c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( pxEnd == NULL )
 8006770:	4d41      	ldr	r5, [pc, #260]	@ (8006878 <pvPortMalloc+0x10c>)
{
 8006772:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006774:	f7ff f856 	bl	8005824 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d05c      	beq.n	8006838 <pvPortMalloc+0xcc>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800677e:	4b3f      	ldr	r3, [pc, #252]	@ (800687c <pvPortMalloc+0x110>)
 8006780:	681e      	ldr	r6, [r3, #0]
 8006782:	4234      	tst	r4, r6
 8006784:	d12e      	bne.n	80067e4 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 8006786:	b36c      	cbz	r4, 80067e4 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006788:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 800678a:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800678e:	d002      	beq.n	8006796 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006790:	f021 0107 	bic.w	r1, r1, #7
 8006794:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006796:	b329      	cbz	r1, 80067e4 <pvPortMalloc+0x78>
 8006798:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8006894 <pvPortMalloc+0x128>
 800679c:	f8d8 7000 	ldr.w	r7, [r8]
 80067a0:	428f      	cmp	r7, r1
 80067a2:	d31f      	bcc.n	80067e4 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 80067a4:	4836      	ldr	r0, [pc, #216]	@ (8006880 <pvPortMalloc+0x114>)
 80067a6:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067a8:	e003      	b.n	80067b2 <pvPortMalloc+0x46>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	b123      	cbz	r3, 80067b8 <pvPortMalloc+0x4c>
 80067ae:	4620      	mov	r0, r4
 80067b0:	461c      	mov	r4, r3
 80067b2:	6862      	ldr	r2, [r4, #4]
 80067b4:	428a      	cmp	r2, r1
 80067b6:	d3f8      	bcc.n	80067aa <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	42a3      	cmp	r3, r4
 80067bc:	d012      	beq.n	80067e4 <pvPortMalloc+0x78>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067be:	1a53      	subs	r3, r2, r1
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067c0:	6825      	ldr	r5, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067c2:	f8d0 9000 	ldr.w	r9, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067c6:	2b10      	cmp	r3, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067c8:	6005      	str	r5, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067ca:	d916      	bls.n	80067fa <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067cc:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067ce:	0742      	lsls	r2, r0, #29
 80067d0:	d00e      	beq.n	80067f0 <pvPortMalloc+0x84>
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	e7fe      	b.n	80067e2 <pvPortMalloc+0x76>
void *pvReturn = NULL;
 80067e4:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 80067e6:	f7ff f971 	bl	8005acc <xTaskResumeAll>
}
 80067ea:	4628      	mov	r0, r5
 80067ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067f0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067f2:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067f4:	f7ff ff90 	bl	8006718 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067f8:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067fa:	4b22      	ldr	r3, [pc, #136]	@ (8006884 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067fc:	1abf      	subs	r7, r7, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067fe:	4332      	orrs	r2, r6
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006800:	f109 0508 	add.w	r5, r9, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006804:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006806:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800680a:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 800680c:	491e      	ldr	r1, [pc, #120]	@ (8006888 <pvPortMalloc+0x11c>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800680e:	bf38      	it	cc
 8006810:	601f      	strcc	r7, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	e9c4 3200 	strd	r3, r2, [r4]
					xNumberOfSuccessfulAllocations++;
 8006818:	680b      	ldr	r3, [r1, #0]
 800681a:	3301      	adds	r3, #1
 800681c:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800681e:	f7ff f955 	bl	8005acc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006822:	076b      	lsls	r3, r5, #29
 8006824:	d0e1      	beq.n	80067ea <pvPortMalloc+0x7e>
 8006826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	e7fe      	b.n	8006836 <pvPortMalloc+0xca>
	uxAddress = ( size_t ) ucHeap;
 8006838:	4b14      	ldr	r3, [pc, #80]	@ (800688c <pvPortMalloc+0x120>)
	xStart.xBlockSize = ( size_t ) 0;
 800683a:	2100      	movs	r1, #0
	uxAddress -= xHeapStructSize;
 800683c:	4a14      	ldr	r2, [pc, #80]	@ (8006890 <pvPortMalloc+0x124>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800683e:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006842:	075e      	lsls	r6, r3, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006844:	4e0e      	ldr	r6, [pc, #56]	@ (8006880 <pvPortMalloc+0x114>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006846:	f022 0207 	bic.w	r2, r2, #7
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800684a:	bf18      	it	ne
 800684c:	3307      	addne	r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800684e:	6071      	str	r1, [r6, #4]
	pxEnd = ( void * ) uxAddress;
 8006850:	602a      	str	r2, [r5, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006852:	bf18      	it	ne
 8006854:	f023 0307 	bicne.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006858:	6033      	str	r3, [r6, #0]
 800685a:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800685c:	1ad3      	subs	r3, r2, r3
}
 800685e:	463e      	mov	r6, r7
	pxEnd->pxNextFreeBlock = NULL;
 8006860:	e9c2 1100 	strd	r1, r1, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006864:	e9c0 2300 	strd	r2, r3, [r0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006868:	4a06      	ldr	r2, [pc, #24]	@ (8006884 <pvPortMalloc+0x118>)
 800686a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800686c:	4a09      	ldr	r2, [pc, #36]	@ (8006894 <pvPortMalloc+0x128>)
 800686e:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006870:	4b02      	ldr	r3, [pc, #8]	@ (800687c <pvPortMalloc+0x110>)
 8006872:	601f      	str	r7, [r3, #0]
}
 8006874:	e785      	b.n	8006782 <pvPortMalloc+0x16>
 8006876:	bf00      	nop
 8006878:	2401247c 	.word	0x2401247c
 800687c:	24012468 	.word	0x24012468
 8006880:	24012480 	.word	0x24012480
 8006884:	24012474 	.word	0x24012474
 8006888:	24012470 	.word	0x24012470
 800688c:	24012488 	.word	0x24012488
 8006890:	24019c80 	.word	0x24019c80
 8006894:	24012478 	.word	0x24012478

08006898 <vPortFree>:
	if( pv != NULL )
 8006898:	b1d0      	cbz	r0, 80068d0 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800689a:	4a1c      	ldr	r2, [pc, #112]	@ (800690c <vPortFree+0x74>)
 800689c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80068a0:	6812      	ldr	r2, [r2, #0]
 80068a2:	4213      	tst	r3, r2
 80068a4:	d00b      	beq.n	80068be <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068a6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80068aa:	b191      	cbz	r1, 80068d2 <vPortFree+0x3a>
 80068ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	e7fe      	b.n	80068bc <vPortFree+0x24>
 80068be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068ce:	e7fe      	b.n	80068ce <vPortFree+0x36>
 80068d0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068d2:	ea23 0302 	bic.w	r3, r3, r2
{
 80068d6:	b500      	push	{lr}
 80068d8:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068da:	f840 3c04 	str.w	r3, [r0, #-4]
 80068de:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 80068e0:	f7fe ffa0 	bl	8005824 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006910 <vPortFree+0x78>)
 80068e6:	9801      	ldr	r0, [sp, #4]
 80068e8:	6811      	ldr	r1, [r2, #0]
 80068ea:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068ee:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068f0:	440b      	add	r3, r1
 80068f2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068f4:	f7ff ff10 	bl	8006718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068f8:	4a06      	ldr	r2, [pc, #24]	@ (8006914 <vPortFree+0x7c>)
 80068fa:	6813      	ldr	r3, [r2, #0]
 80068fc:	3301      	adds	r3, #1
 80068fe:	6013      	str	r3, [r2, #0]
}
 8006900:	b003      	add	sp, #12
 8006902:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8006906:	f7ff b8e1 	b.w	8005acc <xTaskResumeAll>
 800690a:	bf00      	nop
 800690c:	24012468 	.word	0x24012468
 8006910:	24012478 	.word	0x24012478
 8006914:	2401246c 	.word	0x2401246c

08006918 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8006918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  void *buf = NULL;
 800691c:	2300      	movs	r3, #0
{
 800691e:	b082      	sub	sp, #8
  void *buf = NULL;
 8006920:	9301      	str	r3, [sp, #4]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006922:	2900      	cmp	r1, #0
 8006924:	d074      	beq.n	8006a10 <netconn_recv_data+0xf8>
  *new_buf = NULL;
 8006926:	4604      	mov	r4, r0
 8006928:	460d      	mov	r5, r1
 800692a:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800692c:	2800      	cmp	r0, #0
 800692e:	d065      	beq.n	80069fc <netconn_recv_data+0xe4>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8006930:	f100 0810 	add.w	r8, r0, #16
 8006934:	4616      	mov	r6, r2
 8006936:	4640      	mov	r0, r8
 8006938:	f009 f822 	bl	800f980 <sys_mbox_valid>
 800693c:	4607      	mov	r7, r0
 800693e:	b310      	cbz	r0, 8006986 <netconn_recv_data+0x6e>
    }
    return ERR_CONN;
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8006940:	7f23      	ldrb	r3, [r4, #28]
 8006942:	f006 0204 	and.w	r2, r6, #4
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8006946:	a901      	add	r1, sp, #4
 8006948:	4640      	mov	r0, r8
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800694a:	f003 0303 	and.w	r3, r3, #3
 800694e:	4313      	orrs	r3, r2
 8006950:	d025      	beq.n	800699e <netconn_recv_data+0x86>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8006952:	f009 f809 	bl	800f968 <sys_arch_mbox_tryfetch>
 8006956:	3001      	adds	r0, #1
 8006958:	d034      	beq.n	80069c4 <netconn_recv_data+0xac>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800695a:	7823      	ldrb	r3, [r4, #0]
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800695c:	9801      	ldr	r0, [sp, #4]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800695e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006962:	2b10      	cmp	r3, #16
 8006964:	d022      	beq.n	80069ac <netconn_recv_data+0x94>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8006966:	2800      	cmp	r0, #0
 8006968:	d03c      	beq.n	80069e4 <netconn_recv_data+0xcc>
    len = netbuf_len((struct netbuf *)buf);
 800696a:	6803      	ldr	r3, [r0, #0]
 800696c:	891a      	ldrh	r2, [r3, #8]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800696e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006970:	b11b      	cbz	r3, 800697a <netconn_recv_data+0x62>
 8006972:	4620      	mov	r0, r4
 8006974:	2101      	movs	r1, #1
 8006976:	4798      	blx	r3
 8006978:	9801      	ldr	r0, [sp, #4]

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800697a:	2600      	movs	r6, #0
  *new_buf = buf;
 800697c:	6028      	str	r0, [r5, #0]
}
 800697e:	4630      	mov	r0, r6
 8006980:	b002      	add	sp, #8
 8006982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 8006986:	f009 f87d 	bl	800fa84 <sys_arch_protect>
  err = conn->pending_err;
 800698a:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 800698e:	7227      	strb	r7, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8006990:	f009 f884 	bl	800fa9c <sys_arch_unprotect>
    if (err != ERR_OK) {
 8006994:	2e00      	cmp	r6, #0
 8006996:	d1f2      	bne.n	800697e <netconn_recv_data+0x66>
    return ERR_CONN;
 8006998:	f06f 060a 	mvn.w	r6, #10
 800699c:	e7ef      	b.n	800697e <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800699e:	f994 2008 	ldrsb.w	r2, [r4, #8]
 80069a2:	2a00      	cmp	r2, #0
 80069a4:	d1d5      	bne.n	8006952 <netconn_recv_data+0x3a>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80069a6:	f008 ffc1 	bl	800f92c <sys_arch_mbox_fetch>
 80069aa:	e7d6      	b.n	800695a <netconn_recv_data+0x42>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80069ac:	f10d 0103 	add.w	r1, sp, #3
 80069b0:	f001 f824 	bl	80079fc <lwip_netconn_is_err_msg>
 80069b4:	b1f8      	cbz	r0, 80069f6 <netconn_recv_data+0xde>
      if (err == ERR_CLSD) {
 80069b6:	f99d 6003 	ldrsb.w	r6, [sp, #3]
        return ERR_OK;
 80069ba:	f116 0f0f 	cmn.w	r6, #15
 80069be:	bf08      	it	eq
 80069c0:	2600      	moveq	r6, #0
 80069c2:	e7dc      	b.n	800697e <netconn_recv_data+0x66>
  SYS_ARCH_PROTECT(lev);
 80069c4:	f009 f85e 	bl	800fa84 <sys_arch_protect>
  conn->pending_err = ERR_OK;
 80069c8:	2300      	movs	r3, #0
  err = conn->pending_err;
 80069ca:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 80069ce:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 80069d0:	f009 f864 	bl	800fa9c <sys_arch_unprotect>
      if (err != ERR_OK) {
 80069d4:	2e00      	cmp	r6, #0
 80069d6:	d1d2      	bne.n	800697e <netconn_recv_data+0x66>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80069d8:	7f23      	ldrb	r3, [r4, #28]
 80069da:	07db      	lsls	r3, r3, #31
 80069dc:	d4dc      	bmi.n	8006998 <netconn_recv_data+0x80>
      return ERR_WOULDBLOCK;
 80069de:	f06f 0606 	mvn.w	r6, #6
 80069e2:	e7cc      	b.n	800697e <netconn_recv_data+0x66>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80069e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006a20 <netconn_recv_data+0x108>)
 80069e6:	f240 2291 	movw	r2, #657	@ 0x291
 80069ea:	490e      	ldr	r1, [pc, #56]	@ (8006a24 <netconn_recv_data+0x10c>)
 80069ec:	480e      	ldr	r0, [pc, #56]	@ (8006a28 <netconn_recv_data+0x110>)
 80069ee:	f009 faa1 	bl	800ff34 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80069f2:	9801      	ldr	r0, [sp, #4]
 80069f4:	e7b9      	b.n	800696a <netconn_recv_data+0x52>
    len = ((struct pbuf *)buf)->tot_len;
 80069f6:	9801      	ldr	r0, [sp, #4]
 80069f8:	8902      	ldrh	r2, [r0, #8]
 80069fa:	e7b8      	b.n	800696e <netconn_recv_data+0x56>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80069fc:	4b08      	ldr	r3, [pc, #32]	@ (8006a20 <netconn_recv_data+0x108>)
 80069fe:	f240 224a 	movw	r2, #586	@ 0x24a
 8006a02:	490a      	ldr	r1, [pc, #40]	@ (8006a2c <netconn_recv_data+0x114>)
 8006a04:	4808      	ldr	r0, [pc, #32]	@ (8006a28 <netconn_recv_data+0x110>)
 8006a06:	f009 fa95 	bl	800ff34 <iprintf>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006a0a:	f06f 060f 	mvn.w	r6, #15
 8006a0e:	e7b6      	b.n	800697e <netconn_recv_data+0x66>
 8006a10:	4b03      	ldr	r3, [pc, #12]	@ (8006a20 <netconn_recv_data+0x108>)
 8006a12:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8006a16:	4906      	ldr	r1, [pc, #24]	@ (8006a30 <netconn_recv_data+0x118>)
 8006a18:	4803      	ldr	r0, [pc, #12]	@ (8006a28 <netconn_recv_data+0x110>)
 8006a1a:	f009 fa8b 	bl	800ff34 <iprintf>
 8006a1e:	e7f4      	b.n	8006a0a <netconn_recv_data+0xf2>
 8006a20:	08011af8 	.word	0x08011af8
 8006a24:	08011b68 	.word	0x08011b68
 8006a28:	080110dc 	.word	0x080110dc
 8006a2c:	08011b4c 	.word	0x08011b4c
 8006a30:	08011b2c 	.word	0x08011b2c

08006a34 <netconn_recv_data_tcp>:
{
 8006a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a36:	4604      	mov	r4, r0
 8006a38:	b091      	sub	sp, #68	@ 0x44
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8006a3a:	3010      	adds	r0, #16
{
 8006a3c:	460e      	mov	r6, r1
 8006a3e:	4617      	mov	r7, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8006a40:	f008 ff9e 	bl	800f980 <sys_mbox_valid>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d053      	beq.n	8006af0 <netconn_recv_data_tcp+0xbc>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8006a48:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8006a4c:	7f23      	ldrb	r3, [r4, #28]
 8006a4e:	2a00      	cmp	r2, #0
 8006a50:	db1c      	blt.n	8006a8c <netconn_recv_data_tcp+0x58>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8006a52:	463a      	mov	r2, r7
 8006a54:	4631      	mov	r1, r6
 8006a56:	4620      	mov	r0, r4
 8006a58:	f7ff ff5e 	bl	8006918 <netconn_recv_data>
  if (err != ERR_OK) {
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	b990      	cbnz	r0, 8006a86 <netconn_recv_data_tcp+0x52>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8006a60:	073a      	lsls	r2, r7, #28
  buf = *new_buf;
 8006a62:	6836      	ldr	r6, [r6, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8006a64:	d40e      	bmi.n	8006a84 <netconn_recv_data_tcp+0x50>
    u16_t len = buf ? buf->tot_len : 1;
 8006a66:	b39e      	cbz	r6, 8006ad0 <netconn_recv_data_tcp+0x9c>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8006a68:	8932      	ldrh	r2, [r6, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8006a6a:	7823      	ldrb	r3, [r4, #0]
 8006a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a70:	2b10      	cmp	r3, #16
 8006a72:	d140      	bne.n	8006af6 <netconn_recv_data_tcp+0xc2>
  msg->msg.r.len = len;
 8006a74:	9202      	str	r2, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006a76:	4669      	mov	r1, sp
 8006a78:	f104 020c 	add.w	r2, r4, #12
 8006a7c:	4823      	ldr	r0, [pc, #140]	@ (8006b0c <netconn_recv_data_tcp+0xd8>)
  msg->conn = conn;
 8006a7e:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006a80:	f001 fc9c 	bl	80083bc <tcpip_send_msg_wait_sem>
  if (buf == NULL) {
 8006a84:	b1de      	cbz	r6, 8006abe <netconn_recv_data_tcp+0x8a>
}
 8006a86:	4628      	mov	r0, r5
 8006a88:	b011      	add	sp, #68	@ 0x44
 8006a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8006a8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a90:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8006a92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006a94:	b11b      	cbz	r3, 8006a9e <netconn_recv_data_tcp+0x6a>
 8006a96:	2200      	movs	r2, #0
 8006a98:	2101      	movs	r1, #1
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8006a9e:	6866      	ldr	r6, [r4, #4]
 8006aa0:	b9c6      	cbnz	r6, 8006ad4 <netconn_recv_data_tcp+0xa0>
  SYS_ARCH_PROTECT(lev);
 8006aa2:	f008 ffef 	bl	800fa84 <sys_arch_protect>
  err = conn->pending_err;
 8006aa6:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8006aaa:	7226      	strb	r6, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8006aac:	f008 fff6 	bl	800fa9c <sys_arch_unprotect>
        return ERR_RST;
 8006ab0:	2d00      	cmp	r5, #0
 8006ab2:	bf08      	it	eq
 8006ab4:	f06f 050d 	mvneq.w	r5, #13
}
 8006ab8:	4628      	mov	r0, r5
 8006aba:	b011      	add	sp, #68	@ 0x44
 8006abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (apiflags & NETCONN_NOFIN) {
 8006abe:	06fb      	lsls	r3, r7, #27
 8006ac0:	d5e7      	bpl.n	8006a92 <netconn_recv_data_tcp+0x5e>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8006ac2:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8006ac4:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8006ac8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006acc:	7723      	strb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8006ace:	e7da      	b.n	8006a86 <netconn_recv_data_tcp+0x52>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	e7ca      	b.n	8006a6a <netconn_recv_data_tcp+0x36>
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8006ad4:	f642 1301 	movw	r3, #10497	@ 0x2901
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006ad8:	f104 020c 	add.w	r2, r4, #12
 8006adc:	a908      	add	r1, sp, #32
 8006ade:	480c      	ldr	r0, [pc, #48]	@ (8006b10 <netconn_recv_data_tcp+0xdc>)
      return ERR_CLSD;
 8006ae0:	f06f 050e 	mvn.w	r5, #14
  API_MSG_VAR_REF(msg).conn = conn;
 8006ae4:	9408      	str	r4, [sp, #32]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8006ae6:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006aea:	f001 fc67 	bl	80083bc <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006aee:	e7ca      	b.n	8006a86 <netconn_recv_data_tcp+0x52>
    return ERR_CONN;
 8006af0:	f06f 050a 	mvn.w	r5, #10
 8006af4:	e7c7      	b.n	8006a86 <netconn_recv_data_tcp+0x52>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8006af6:	4b07      	ldr	r3, [pc, #28]	@ (8006b14 <netconn_recv_data_tcp+0xe0>)
 8006af8:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8006afc:	4906      	ldr	r1, [pc, #24]	@ (8006b18 <netconn_recv_data_tcp+0xe4>)
 8006afe:	4807      	ldr	r0, [pc, #28]	@ (8006b1c <netconn_recv_data_tcp+0xe8>)
 8006b00:	f009 fa18 	bl	800ff34 <iprintf>
  if (buf == NULL) {
 8006b04:	2e00      	cmp	r6, #0
 8006b06:	d1be      	bne.n	8006a86 <netconn_recv_data_tcp+0x52>
 8006b08:	e7d9      	b.n	8006abe <netconn_recv_data_tcp+0x8a>
 8006b0a:	bf00      	nop
 8006b0c:	08007fc1 	.word	0x08007fc1
 8006b10:	080080c9 	.word	0x080080c9
 8006b14:	08011af8 	.word	0x08011af8
 8006b18:	08011b74 	.word	0x08011b74
 8006b1c:	080110dc 	.word	0x080110dc

08006b20 <netconn_new_with_proto_and_callback>:
{
 8006b20:	b570      	push	{r4, r5, r6, lr}
 8006b22:	460d      	mov	r5, r1
 8006b24:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 8006b26:	4611      	mov	r1, r2
 8006b28:	f000 ffca 	bl	8007ac0 <netconn_alloc>
  if (conn != NULL) {
 8006b2c:	b398      	cbz	r0, 8006b96 <netconn_new_with_proto_and_callback+0x76>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006b2e:	f100 060c 	add.w	r6, r0, #12
 8006b32:	4604      	mov	r4, r0
 8006b34:	4669      	mov	r1, sp
 8006b36:	4823      	ldr	r0, [pc, #140]	@ (8006bc4 <netconn_new_with_proto_and_callback+0xa4>)
 8006b38:	4632      	mov	r2, r6
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8006b3a:	f88d 5008 	strb.w	r5, [sp, #8]
    API_MSG_VAR_REF(msg).conn = conn;
 8006b3e:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006b40:	f001 fc3c 	bl	80083bc <tcpip_send_msg_wait_sem>
    if (err != ERR_OK) {
 8006b44:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006b48:	4318      	orrs	r0, r3
 8006b4a:	b240      	sxtb	r0, r0
 8006b4c:	b910      	cbnz	r0, 8006b54 <netconn_new_with_proto_and_callback+0x34>
}
 8006b4e:	4620      	mov	r0, r4
 8006b50:	b008      	add	sp, #32
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8006b54:	6863      	ldr	r3, [r4, #4]
 8006b56:	b12b      	cbz	r3, 8006b64 <netconn_new_with_proto_and_callback+0x44>
 8006b58:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc8 <netconn_new_with_proto_and_callback+0xa8>)
 8006b5a:	22a3      	movs	r2, #163	@ 0xa3
 8006b5c:	491b      	ldr	r1, [pc, #108]	@ (8006bcc <netconn_new_with_proto_and_callback+0xac>)
 8006b5e:	481c      	ldr	r0, [pc, #112]	@ (8006bd0 <netconn_new_with_proto_and_callback+0xb0>)
 8006b60:	f009 f9e8 	bl	800ff34 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006b64:	f104 0510 	add.w	r5, r4, #16
 8006b68:	4628      	mov	r0, r5
 8006b6a:	f008 ff09 	bl	800f980 <sys_mbox_valid>
 8006b6e:	b310      	cbz	r0, 8006bb6 <netconn_new_with_proto_and_callback+0x96>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8006b70:	f104 0014 	add.w	r0, r4, #20
 8006b74:	f008 ff04 	bl	800f980 <sys_mbox_valid>
 8006b78:	b9b0      	cbnz	r0, 8006ba8 <netconn_new_with_proto_and_callback+0x88>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f008 ff42 	bl	800fa04 <sys_sem_valid>
 8006b80:	b158      	cbz	r0, 8006b9a <netconn_new_with_proto_and_callback+0x7a>
      sys_sem_free(&conn->op_completed);
 8006b82:	4630      	mov	r0, r6
 8006b84:	f008 ff3a 	bl	800f9fc <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f008 feb5 	bl	800f8f8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8006b8e:	4621      	mov	r1, r4
 8006b90:	2007      	movs	r0, #7
 8006b92:	f002 f84b 	bl	8008c2c <memp_free>
      return NULL;
 8006b96:	2400      	movs	r4, #0
 8006b98:	e7d9      	b.n	8006b4e <netconn_new_with_proto_and_callback+0x2e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc8 <netconn_new_with_proto_and_callback+0xa8>)
 8006b9c:	22a9      	movs	r2, #169	@ 0xa9
 8006b9e:	490d      	ldr	r1, [pc, #52]	@ (8006bd4 <netconn_new_with_proto_and_callback+0xb4>)
 8006ba0:	480b      	ldr	r0, [pc, #44]	@ (8006bd0 <netconn_new_with_proto_and_callback+0xb0>)
 8006ba2:	f009 f9c7 	bl	800ff34 <iprintf>
 8006ba6:	e7ec      	b.n	8006b82 <netconn_new_with_proto_and_callback+0x62>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8006ba8:	4b07      	ldr	r3, [pc, #28]	@ (8006bc8 <netconn_new_with_proto_and_callback+0xa8>)
 8006baa:	22a6      	movs	r2, #166	@ 0xa6
 8006bac:	490a      	ldr	r1, [pc, #40]	@ (8006bd8 <netconn_new_with_proto_and_callback+0xb8>)
 8006bae:	4808      	ldr	r0, [pc, #32]	@ (8006bd0 <netconn_new_with_proto_and_callback+0xb0>)
 8006bb0:	f009 f9c0 	bl	800ff34 <iprintf>
 8006bb4:	e7e1      	b.n	8006b7a <netconn_new_with_proto_and_callback+0x5a>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006bb6:	4b04      	ldr	r3, [pc, #16]	@ (8006bc8 <netconn_new_with_proto_and_callback+0xa8>)
 8006bb8:	22a4      	movs	r2, #164	@ 0xa4
 8006bba:	4908      	ldr	r1, [pc, #32]	@ (8006bdc <netconn_new_with_proto_and_callback+0xbc>)
 8006bbc:	4804      	ldr	r0, [pc, #16]	@ (8006bd0 <netconn_new_with_proto_and_callback+0xb0>)
 8006bbe:	f009 f9b9 	bl	800ff34 <iprintf>
 8006bc2:	e7d5      	b.n	8006b70 <netconn_new_with_proto_and_callback+0x50>
 8006bc4:	08007a59 	.word	0x08007a59
 8006bc8:	08011af8 	.word	0x08011af8
 8006bcc:	08011b98 	.word	0x08011b98
 8006bd0:	080110dc 	.word	0x080110dc
 8006bd4:	08011bf8 	.word	0x08011bf8
 8006bd8:	08011bd4 	.word	0x08011bd4
 8006bdc:	08011bbc 	.word	0x08011bbc

08006be0 <netconn_delete>:
  if (conn == NULL) {
 8006be0:	b1c8      	cbz	r0, 8006c16 <netconn_delete+0x36>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006be2:	2329      	movs	r3, #41	@ 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006be4:	f100 020c 	add.w	r2, r0, #12
{
 8006be8:	b510      	push	{r4, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	4604      	mov	r4, r0
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006bee:	480b      	ldr	r0, [pc, #44]	@ (8006c1c <netconn_delete+0x3c>)
 8006bf0:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).conn = conn;
 8006bf2:	9400      	str	r4, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006bf4:	f88d 3009 	strb.w	r3, [sp, #9]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006bf8:	f001 fbe0 	bl	80083bc <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006bfc:	b108      	cbz	r0, 8006c02 <netconn_delete+0x22>
}
 8006bfe:	b008      	add	sp, #32
 8006c00:	bd10      	pop	{r4, pc}
    return apimsg->err;
 8006c02:	f99d 0004 	ldrsb.w	r0, [sp, #4]
  if (err != ERR_OK) {
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d1f9      	bne.n	8006bfe <netconn_delete+0x1e>
    netconn_free(conn);
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f000 ff9e 	bl	8007b4c <netconn_free>
    return ERR_OK;
 8006c10:	2000      	movs	r0, #0
}
 8006c12:	b008      	add	sp, #32
 8006c14:	bd10      	pop	{r4, pc}
    return ERR_OK;
 8006c16:	2000      	movs	r0, #0
}
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	08007dad 	.word	0x08007dad

08006c20 <netconn_bind>:
{
 8006c20:	b500      	push	{lr}
 8006c22:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8006c24:	b1a0      	cbz	r0, 8006c50 <netconn_bind+0x30>
  if (addr == NULL) {
 8006c26:	460b      	mov	r3, r1
 8006c28:	4694      	mov	ip, r2
 8006c2a:	b179      	cbz	r1, 8006c4c <netconn_bind+0x2c>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006c2c:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 8006c30:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006c32:	4669      	mov	r1, sp
 8006c34:	480b      	ldr	r0, [pc, #44]	@ (8006c64 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8006c36:	9302      	str	r3, [sp, #8]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8006c38:	f8ad c00c 	strh.w	ip, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006c3c:	f001 fbbe 	bl	80083bc <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006c40:	b908      	cbnz	r0, 8006c46 <netconn_bind+0x26>
    return apimsg->err;
 8006c42:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8006c46:	b009      	add	sp, #36	@ 0x24
 8006c48:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8006c4c:	4b06      	ldr	r3, [pc, #24]	@ (8006c68 <netconn_bind+0x48>)
 8006c4e:	e7ed      	b.n	8006c2c <netconn_bind+0xc>
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8006c50:	4b06      	ldr	r3, [pc, #24]	@ (8006c6c <netconn_bind+0x4c>)
 8006c52:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8006c56:	4906      	ldr	r1, [pc, #24]	@ (8006c70 <netconn_bind+0x50>)
 8006c58:	4806      	ldr	r0, [pc, #24]	@ (8006c74 <netconn_bind+0x54>)
 8006c5a:	f009 f96b 	bl	800ff34 <iprintf>
 8006c5e:	f06f 000f 	mvn.w	r0, #15
 8006c62:	e7f0      	b.n	8006c46 <netconn_bind+0x26>
 8006c64:	08007ebd 	.word	0x08007ebd
 8006c68:	0801406c 	.word	0x0801406c
 8006c6c:	08011af8 	.word	0x08011af8
 8006c70:	08011c14 	.word	0x08011c14
 8006c74:	080110dc 	.word	0x080110dc

08006c78 <netconn_listen_with_backlog>:
{
 8006c78:	b500      	push	{lr}
 8006c7a:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8006c7c:	b168      	cbz	r0, 8006c9a <netconn_listen_with_backlog+0x22>
  API_MSG_VAR_REF(msg).conn = conn;
 8006c7e:	4603      	mov	r3, r0
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006c80:	f100 020c 	add.w	r2, r0, #12
 8006c84:	4669      	mov	r1, sp
 8006c86:	480a      	ldr	r0, [pc, #40]	@ (8006cb0 <netconn_listen_with_backlog+0x38>)
  API_MSG_VAR_REF(msg).conn = conn;
 8006c88:	9300      	str	r3, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006c8a:	f001 fb97 	bl	80083bc <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006c8e:	b908      	cbnz	r0, 8006c94 <netconn_listen_with_backlog+0x1c>
    return apimsg->err;
 8006c90:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8006c94:	b009      	add	sp, #36	@ 0x24
 8006c96:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8006c9a:	4b06      	ldr	r3, [pc, #24]	@ (8006cb4 <netconn_listen_with_backlog+0x3c>)
 8006c9c:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8006ca0:	4905      	ldr	r1, [pc, #20]	@ (8006cb8 <netconn_listen_with_backlog+0x40>)
 8006ca2:	4806      	ldr	r0, [pc, #24]	@ (8006cbc <netconn_listen_with_backlog+0x44>)
 8006ca4:	f009 f946 	bl	800ff34 <iprintf>
 8006ca8:	f06f 000f 	mvn.w	r0, #15
 8006cac:	e7f2      	b.n	8006c94 <netconn_listen_with_backlog+0x1c>
 8006cae:	bf00      	nop
 8006cb0:	08007ef5 	.word	0x08007ef5
 8006cb4:	08011af8 	.word	0x08011af8
 8006cb8:	08011c30 	.word	0x08011c30
 8006cbc:	080110dc 	.word	0x080110dc

08006cc0 <netconn_accept>:
{
 8006cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc2:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8006cc4:	2900      	cmp	r1, #0
 8006cc6:	d04d      	beq.n	8006d64 <netconn_accept+0xa4>
  *new_conn = NULL;
 8006cc8:	2700      	movs	r7, #0
 8006cca:	4604      	mov	r4, r0
 8006ccc:	460d      	mov	r5, r1
 8006cce:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d03d      	beq.n	8006d50 <netconn_accept+0x90>
  SYS_ARCH_PROTECT(lev);
 8006cd4:	f008 fed6 	bl	800fa84 <sys_arch_protect>
  err = conn->pending_err;
 8006cd8:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 8006cdc:	7227      	strb	r7, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8006cde:	f008 fedd 	bl	800fa9c <sys_arch_unprotect>
  err = netconn_err(conn);
 8006ce2:	f88d 6003 	strb.w	r6, [sp, #3]
  if (err != ERR_OK) {
 8006ce6:	b116      	cbz	r6, 8006cee <netconn_accept+0x2e>
}
 8006ce8:	4630      	mov	r0, r6
 8006cea:	b003      	add	sp, #12
 8006cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8006cee:	f104 0714 	add.w	r7, r4, #20
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	f008 fe44 	bl	800f980 <sys_mbox_valid>
 8006cf8:	b338      	cbz	r0, 8006d4a <netconn_accept+0x8a>
 8006cfa:	7f23      	ldrb	r3, [r4, #28]
 8006cfc:	07da      	lsls	r2, r3, #31
 8006cfe:	d424      	bmi.n	8006d4a <netconn_accept+0x8a>
  if (netconn_is_nonblocking(conn)) {
 8006d00:	079b      	lsls	r3, r3, #30
 8006d02:	d517      	bpl.n	8006d34 <netconn_accept+0x74>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8006d04:	a901      	add	r1, sp, #4
 8006d06:	4638      	mov	r0, r7
 8006d08:	f008 fe2e 	bl	800f968 <sys_arch_mbox_tryfetch>
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d031      	beq.n	8006d74 <netconn_accept+0xb4>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8006d10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006d12:	b11b      	cbz	r3, 8006d1c <netconn_accept+0x5c>
 8006d14:	2200      	movs	r2, #0
 8006d16:	4620      	mov	r0, r4
 8006d18:	2101      	movs	r1, #1
 8006d1a:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8006d1c:	f10d 0103 	add.w	r1, sp, #3
 8006d20:	9801      	ldr	r0, [sp, #4]
 8006d22:	f000 fe6b 	bl	80079fc <lwip_netconn_is_err_msg>
 8006d26:	b958      	cbnz	r0, 8006d40 <netconn_accept+0x80>
  if (accept_ptr == NULL) {
 8006d28:	9b01      	ldr	r3, [sp, #4]
 8006d2a:	b173      	cbz	r3, 8006d4a <netconn_accept+0x8a>
}
 8006d2c:	4630      	mov	r0, r6
  *new_conn = newconn;
 8006d2e:	602b      	str	r3, [r5, #0]
}
 8006d30:	b003      	add	sp, #12
 8006d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8006d34:	4632      	mov	r2, r6
 8006d36:	4638      	mov	r0, r7
 8006d38:	a901      	add	r1, sp, #4
 8006d3a:	f008 fdf7 	bl	800f92c <sys_arch_mbox_fetch>
 8006d3e:	e7e7      	b.n	8006d10 <netconn_accept+0x50>
    return err;
 8006d40:	f99d 6003 	ldrsb.w	r6, [sp, #3]
}
 8006d44:	4630      	mov	r0, r6
 8006d46:	b003      	add	sp, #12
 8006d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_CLSD;
 8006d4a:	f06f 060e 	mvn.w	r6, #14
 8006d4e:	e7cb      	b.n	8006ce8 <netconn_accept+0x28>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8006d50:	4b0a      	ldr	r3, [pc, #40]	@ (8006d7c <netconn_accept+0xbc>)
 8006d52:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8006d56:	490a      	ldr	r1, [pc, #40]	@ (8006d80 <netconn_accept+0xc0>)
 8006d58:	480a      	ldr	r0, [pc, #40]	@ (8006d84 <netconn_accept+0xc4>)
 8006d5a:	f009 f8eb 	bl	800ff34 <iprintf>
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8006d5e:	f06f 060f 	mvn.w	r6, #15
 8006d62:	e7c1      	b.n	8006ce8 <netconn_accept+0x28>
 8006d64:	4b05      	ldr	r3, [pc, #20]	@ (8006d7c <netconn_accept+0xbc>)
 8006d66:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8006d6a:	4907      	ldr	r1, [pc, #28]	@ (8006d88 <netconn_accept+0xc8>)
 8006d6c:	4805      	ldr	r0, [pc, #20]	@ (8006d84 <netconn_accept+0xc4>)
 8006d6e:	f009 f8e1 	bl	800ff34 <iprintf>
 8006d72:	e7f4      	b.n	8006d5e <netconn_accept+0x9e>
      return ERR_WOULDBLOCK;
 8006d74:	f06f 0606 	mvn.w	r6, #6
 8006d78:	e7b6      	b.n	8006ce8 <netconn_accept+0x28>
 8006d7a:	bf00      	nop
 8006d7c:	08011af8 	.word	0x08011af8
 8006d80:	08011c70 	.word	0x08011c70
 8006d84:	080110dc 	.word	0x080110dc
 8006d88:	08011c50 	.word	0x08011c50

08006d8c <netconn_recv>:
{
 8006d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d8e:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006d90:	2900      	cmp	r1, #0
 8006d92:	d046      	beq.n	8006e22 <netconn_recv+0x96>
  *new_buf = NULL;
 8006d94:	2600      	movs	r6, #0
 8006d96:	4604      	mov	r4, r0
 8006d98:	460d      	mov	r5, r1
 8006d9a:	600e      	str	r6, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d036      	beq.n	8006e0e <netconn_recv+0x82>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8006da0:	7803      	ldrb	r3, [r0, #0]
 8006da2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006da6:	2b10      	cmp	r3, #16
 8006da8:	d117      	bne.n	8006dda <netconn_recv+0x4e>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006daa:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 8006dac:	9601      	str	r6, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006dae:	f001 fef7 	bl	8008ba0 <memp_malloc>
    if (buf == NULL) {
 8006db2:	4607      	mov	r7, r0
 8006db4:	b1b8      	cbz	r0, 8006de6 <netconn_recv+0x5a>
    err = netconn_recv_data_tcp(conn, &p, 0);
 8006db6:	4620      	mov	r0, r4
 8006db8:	4632      	mov	r2, r6
 8006dba:	a901      	add	r1, sp, #4
 8006dbc:	f7ff fe3a 	bl	8006a34 <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	b9a8      	cbnz	r0, 8006df0 <netconn_recv+0x64>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006dc4:	9e01      	ldr	r6, [sp, #4]
 8006dc6:	b1d6      	cbz	r6, 8006dfe <netconn_recv+0x72>
    buf->port = 0;
 8006dc8:	2300      	movs	r3, #0
    buf->p = p;
 8006dca:	e9c7 6600 	strd	r6, r6, [r7]
    buf->port = 0;
 8006dce:	81bb      	strh	r3, [r7, #12]
    ip_addr_set_zero(&buf->addr);
 8006dd0:	60bb      	str	r3, [r7, #8]
    *new_buf = buf;
 8006dd2:	602f      	str	r7, [r5, #0]
}
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	b003      	add	sp, #12
 8006dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8006dda:	4632      	mov	r2, r6
}
 8006ddc:	b003      	add	sp, #12
 8006dde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8006de2:	f7ff bd99 	b.w	8006918 <netconn_recv_data>
      return ERR_MEM;
 8006de6:	f04f 34ff 	mov.w	r4, #4294967295
}
 8006dea:	4620      	mov	r0, r4
 8006dec:	b003      	add	sp, #12
 8006dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memp_free(MEMP_NETBUF, buf);
 8006df0:	4639      	mov	r1, r7
 8006df2:	2006      	movs	r0, #6
 8006df4:	f001 ff1a 	bl	8008c2c <memp_free>
}
 8006df8:	4620      	mov	r0, r4
 8006dfa:	b003      	add	sp, #12
 8006dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LWIP_ASSERT("p != NULL", p != NULL);
 8006dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006e34 <netconn_recv+0xa8>)
 8006e00:	f240 3279 	movw	r2, #889	@ 0x379
 8006e04:	490c      	ldr	r1, [pc, #48]	@ (8006e38 <netconn_recv+0xac>)
 8006e06:	480d      	ldr	r0, [pc, #52]	@ (8006e3c <netconn_recv+0xb0>)
 8006e08:	f009 f894 	bl	800ff34 <iprintf>
 8006e0c:	e7dc      	b.n	8006dc8 <netconn_recv+0x3c>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006e0e:	4b09      	ldr	r3, [pc, #36]	@ (8006e34 <netconn_recv+0xa8>)
 8006e10:	f240 3265 	movw	r2, #869	@ 0x365
 8006e14:	490a      	ldr	r1, [pc, #40]	@ (8006e40 <netconn_recv+0xb4>)
 8006e16:	4809      	ldr	r0, [pc, #36]	@ (8006e3c <netconn_recv+0xb0>)
 8006e18:	f009 f88c 	bl	800ff34 <iprintf>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006e1c:	f06f 040f 	mvn.w	r4, #15
 8006e20:	e7d8      	b.n	8006dd4 <netconn_recv+0x48>
 8006e22:	4b04      	ldr	r3, [pc, #16]	@ (8006e34 <netconn_recv+0xa8>)
 8006e24:	f240 3263 	movw	r2, #867	@ 0x363
 8006e28:	4906      	ldr	r1, [pc, #24]	@ (8006e44 <netconn_recv+0xb8>)
 8006e2a:	4804      	ldr	r0, [pc, #16]	@ (8006e3c <netconn_recv+0xb0>)
 8006e2c:	f009 f882 	bl	800ff34 <iprintf>
 8006e30:	e7f4      	b.n	8006e1c <netconn_recv+0x90>
 8006e32:	bf00      	nop
 8006e34:	08011af8 	.word	0x08011af8
 8006e38:	08011df0 	.word	0x08011df0
 8006e3c:	080110dc 	.word	0x080110dc
 8006e40:	08011b4c 	.word	0x08011b4c
 8006e44:	08011b2c 	.word	0x08011b2c

08006e48 <netconn_write_vectors_partly>:
{
 8006e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e4a:	b089      	sub	sp, #36	@ 0x24
 8006e4c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d05b      	beq.n	8006f0a <netconn_write_vectors_partly+0xc2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8006e52:	7804      	ldrb	r4, [r0, #0]
 8006e54:	f004 04f0 	and.w	r4, r4, #240	@ 0xf0
 8006e58:	2c10      	cmp	r4, #16
 8006e5a:	d14e      	bne.n	8006efa <netconn_write_vectors_partly+0xb2>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006e5c:	7f04      	ldrb	r4, [r0, #28]
 8006e5e:	f003 0604 	and.w	r6, r3, #4
 8006e62:	f004 0402 	and.w	r4, r4, #2
 8006e66:	4334      	orrs	r4, r6
 8006e68:	d016      	beq.n	8006e98 <netconn_write_vectors_partly+0x50>
  if (dontblock && !bytes_written) {
 8006e6a:	b18d      	cbz	r5, 8006e90 <netconn_write_vectors_partly+0x48>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006e6c:	2701      	movs	r7, #1
  for (i = 0; i < vectorcnt; i++) {
 8006e6e:	2a00      	cmp	r2, #0
 8006e70:	d038      	beq.n	8006ee4 <netconn_write_vectors_partly+0x9c>
 8006e72:	f04f 0c00 	mov.w	ip, #0
 8006e76:	f101 0e04 	add.w	lr, r1, #4
  size = 0;
 8006e7a:	4666      	mov	r6, ip
 8006e7c:	e001      	b.n	8006e82 <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 8006e7e:	4562      	cmp	r2, ip
 8006e80:	d00c      	beq.n	8006e9c <netconn_write_vectors_partly+0x54>
 8006e82:	f85e 403c 	ldr.w	r4, [lr, ip, lsl #3]
 8006e86:	f10c 0c01 	add.w	ip, ip, #1
 8006e8a:	19a4      	adds	r4, r4, r6
    size += vectors[i].len;
 8006e8c:	4626      	mov	r6, r4
    if (size < vectors[i].len) {
 8006e8e:	d3f6      	bcc.n	8006e7e <netconn_write_vectors_partly+0x36>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8006e90:	f06f 0005 	mvn.w	r0, #5
}
 8006e94:	b009      	add	sp, #36	@ 0x24
 8006e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006e98:	4627      	mov	r7, r4
 8006e9a:	e7e8      	b.n	8006e6e <netconn_write_vectors_partly+0x26>
  if (size == 0) {
 8006e9c:	2c00      	cmp	r4, #0
 8006e9e:	d021      	beq.n	8006ee4 <netconn_write_vectors_partly+0x9c>
  } else if (size > SSIZE_MAX) {
 8006ea0:	da03      	bge.n	8006eaa <netconn_write_vectors_partly+0x62>
    if (!bytes_written) {
 8006ea2:	2d00      	cmp	r5, #0
 8006ea4:	d0f4      	beq.n	8006e90 <netconn_write_vectors_partly+0x48>
    size = (size_t)limited;
 8006ea6:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8006eaa:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8006eae:	2300      	movs	r3, #0
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8006eb0:	9102      	str	r1, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006eb2:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8006eb4:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006eb8:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 8006ebc:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006ebe:	4818      	ldr	r0, [pc, #96]	@ (8006f20 <netconn_write_vectors_partly+0xd8>)
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8006ec0:	9306      	str	r3, [sp, #24]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8006ec2:	e9cd 3604 	strd	r3, r6, [sp, #16]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006ec6:	f001 fa79 	bl	80083bc <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d1e2      	bne.n	8006e94 <netconn_write_vectors_partly+0x4c>
    return apimsg->err;
 8006ece:	f99d 0004 	ldrsb.w	r0, [sp, #4]
  if (err == ERR_OK) {
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d1de      	bne.n	8006e94 <netconn_write_vectors_partly+0x4c>
    if (bytes_written != NULL) {
 8006ed6:	b10d      	cbz	r5, 8006edc <netconn_write_vectors_partly+0x94>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8006ed8:	9b06      	ldr	r3, [sp, #24]
 8006eda:	602b      	str	r3, [r5, #0]
    if (!dontblock) {
 8006edc:	b917      	cbnz	r7, 8006ee4 <netconn_write_vectors_partly+0x9c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8006ede:	9b06      	ldr	r3, [sp, #24]
 8006ee0:	42b3      	cmp	r3, r6
 8006ee2:	d102      	bne.n	8006eea <netconn_write_vectors_partly+0xa2>
    return ERR_OK;
 8006ee4:	2000      	movs	r0, #0
}
 8006ee6:	b009      	add	sp, #36	@ 0x24
 8006ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8006eea:	4b0e      	ldr	r3, [pc, #56]	@ (8006f24 <netconn_write_vectors_partly+0xdc>)
 8006eec:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006ef0:	490d      	ldr	r1, [pc, #52]	@ (8006f28 <netconn_write_vectors_partly+0xe0>)
 8006ef2:	480e      	ldr	r0, [pc, #56]	@ (8006f2c <netconn_write_vectors_partly+0xe4>)
 8006ef4:	f009 f81e 	bl	800ff34 <iprintf>
 8006ef8:	e7f4      	b.n	8006ee4 <netconn_write_vectors_partly+0x9c>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8006efa:	4b0a      	ldr	r3, [pc, #40]	@ (8006f24 <netconn_write_vectors_partly+0xdc>)
 8006efc:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8006f00:	490b      	ldr	r1, [pc, #44]	@ (8006f30 <netconn_write_vectors_partly+0xe8>)
 8006f02:	480a      	ldr	r0, [pc, #40]	@ (8006f2c <netconn_write_vectors_partly+0xe4>)
 8006f04:	f009 f816 	bl	800ff34 <iprintf>
 8006f08:	e7c2      	b.n	8006e90 <netconn_write_vectors_partly+0x48>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006f0a:	4b06      	ldr	r3, [pc, #24]	@ (8006f24 <netconn_write_vectors_partly+0xdc>)
 8006f0c:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8006f10:	4908      	ldr	r1, [pc, #32]	@ (8006f34 <netconn_write_vectors_partly+0xec>)
 8006f12:	4806      	ldr	r0, [pc, #24]	@ (8006f2c <netconn_write_vectors_partly+0xe4>)
 8006f14:	f009 f80e 	bl	800ff34 <iprintf>
 8006f18:	f06f 000f 	mvn.w	r0, #15
 8006f1c:	e7ba      	b.n	8006e94 <netconn_write_vectors_partly+0x4c>
 8006f1e:	bf00      	nop
 8006f20:	08007ffd 	.word	0x08007ffd
 8006f24:	08011af8 	.word	0x08011af8
 8006f28:	08011cd0 	.word	0x08011cd0
 8006f2c:	080110dc 	.word	0x080110dc
 8006f30:	08011cac 	.word	0x08011cac
 8006f34:	08011c90 	.word	0x08011c90

08006f38 <netconn_write_partly>:
{
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	4614      	mov	r4, r2
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8006f3e:	9a06      	ldr	r2, [sp, #24]
  vector.len = size;
 8006f40:	e9cd 1402 	strd	r1, r4, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8006f44:	9200      	str	r2, [sp, #0]
 8006f46:	a902      	add	r1, sp, #8
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f7ff ff7d 	bl	8006e48 <netconn_write_vectors_partly>
}
 8006f4e:	b004      	add	sp, #16
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	bf00      	nop

08006f54 <netconn_close>:
{
 8006f54:	b500      	push	{lr}
 8006f56:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006f58:	b188      	cbz	r0, 8006f7e <netconn_close+0x2a>
  API_MSG_VAR_REF(msg).conn = conn;
 8006f5a:	4603      	mov	r3, r0
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8006f5c:	f642 1c03 	movw	ip, #10499	@ 0x2903
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f60:	f100 020c 	add.w	r2, r0, #12
 8006f64:	4669      	mov	r1, sp
 8006f66:	480b      	ldr	r0, [pc, #44]	@ (8006f94 <netconn_close+0x40>)
  API_MSG_VAR_REF(msg).conn = conn;
 8006f68:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8006f6a:	f8ad c008 	strh.w	ip, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f6e:	f001 fa25 	bl	80083bc <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006f72:	b908      	cbnz	r0, 8006f78 <netconn_close+0x24>
    return apimsg->err;
 8006f74:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8006f78:	b009      	add	sp, #36	@ 0x24
 8006f7a:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006f7e:	4b06      	ldr	r3, [pc, #24]	@ (8006f98 <netconn_close+0x44>)
 8006f80:	f240 4247 	movw	r2, #1095	@ 0x447
 8006f84:	4905      	ldr	r1, [pc, #20]	@ (8006f9c <netconn_close+0x48>)
 8006f86:	4806      	ldr	r0, [pc, #24]	@ (8006fa0 <netconn_close+0x4c>)
 8006f88:	f008 ffd4 	bl	800ff34 <iprintf>
 8006f8c:	f06f 000f 	mvn.w	r0, #15
 8006f90:	e7f2      	b.n	8006f78 <netconn_close+0x24>
 8006f92:	bf00      	nop
 8006f94:	080080c9 	.word	0x080080c9
 8006f98:	08011af8 	.word	0x08011af8
 8006f9c:	08011cf4 	.word	0x08011cf4
 8006fa0:	080110dc 	.word	0x080110dc

08006fa4 <netconn_err>:
{
 8006fa4:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	b148      	cbz	r0, 8006fbe <netconn_err+0x1a>
  SYS_ARCH_PROTECT(lev);
 8006faa:	f008 fd6b 	bl	800fa84 <sys_arch_protect>
  conn->pending_err = ERR_OK;
 8006fae:	2300      	movs	r3, #0
  err = conn->pending_err;
 8006fb0:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8006fb4:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8006fb6:	f008 fd71 	bl	800fa9c <sys_arch_unprotect>
  return err;
}
 8006fba:	4628      	mov	r0, r5
 8006fbc:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8006fbe:	4605      	mov	r5, r0
}
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}

08006fc4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8006fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc8:	4604      	mov	r4, r0
 8006fca:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 8006fce:	4617      	mov	r7, r2
 8006fd0:	461e      	mov	r6, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8006fd2:	460d      	mov	r5, r1
 8006fd4:	b379      	cbz	r1, 8007036 <recv_udp+0x72>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8006fd6:	2c00      	cmp	r4, #0
 8006fd8:	d03b      	beq.n	8007052 <recv_udp+0x8e>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8006fda:	6863      	ldr	r3, [r4, #4]
 8006fdc:	42ab      	cmp	r3, r5
 8006fde:	d005      	beq.n	8006fec <recv_udp+0x28>
 8006fe0:	4b21      	ldr	r3, [pc, #132]	@ (8007068 <recv_udp+0xa4>)
 8006fe2:	22ee      	movs	r2, #238	@ 0xee
 8006fe4:	4921      	ldr	r1, [pc, #132]	@ (800706c <recv_udp+0xa8>)
 8006fe6:	4822      	ldr	r0, [pc, #136]	@ (8007070 <recv_udp+0xac>)
 8006fe8:	f008 ffa4 	bl	800ff34 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006fec:	f104 0910 	add.w	r9, r4, #16
 8006ff0:	4648      	mov	r0, r9
 8006ff2:	f008 fcc5 	bl	800f980 <sys_mbox_valid>
 8006ff6:	b1c8      	cbz	r0, 800702c <recv_udp+0x68>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006ff8:	2006      	movs	r0, #6
 8006ffa:	f001 fdd1 	bl	8008ba0 <memp_malloc>
  if (buf == NULL) {
 8006ffe:	4605      	mov	r5, r0
 8007000:	b1a0      	cbz	r0, 800702c <recv_udp+0x68>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 8007002:	e9c0 7700 	strd	r7, r7, [r0]
    buf->ptr = p;
    ip_addr_set(&buf->addr, addr);
 8007006:	b106      	cbz	r6, 800700a <recv_udp+0x46>
 8007008:	6836      	ldr	r6, [r6, #0]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800700a:	4629      	mov	r1, r5
    ip_addr_set(&buf->addr, addr);
 800700c:	60ae      	str	r6, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800700e:	4648      	mov	r0, r9
    buf->port = port;
 8007010:	f8a5 800c 	strh.w	r8, [r5, #12]
  len = p->tot_len;
 8007014:	893e      	ldrh	r6, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8007016:	f008 fc79 	bl	800f90c <sys_mbox_trypost>
 800701a:	4601      	mov	r1, r0
 800701c:	b990      	cbnz	r0, 8007044 <recv_udp+0x80>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800701e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007020:	b1ab      	cbz	r3, 800704e <recv_udp+0x8a>
 8007022:	4632      	mov	r2, r6
 8007024:	4620      	mov	r0, r4
  }
}
 8007026:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800702a:	4718      	bx	r3
    pbuf_free(p);
 800702c:	4638      	mov	r0, r7
}
 800702e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8007032:	f002 b907 	b.w	8009244 <pbuf_free>
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8007036:	4b0c      	ldr	r3, [pc, #48]	@ (8007068 <recv_udp+0xa4>)
 8007038:	22e5      	movs	r2, #229	@ 0xe5
 800703a:	490e      	ldr	r1, [pc, #56]	@ (8007074 <recv_udp+0xb0>)
 800703c:	480c      	ldr	r0, [pc, #48]	@ (8007070 <recv_udp+0xac>)
 800703e:	f008 ff79 	bl	800ff34 <iprintf>
 8007042:	e7c8      	b.n	8006fd6 <recv_udp+0x12>
    netbuf_delete(buf);
 8007044:	4628      	mov	r0, r5
}
 8007046:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 800704a:	f001 b89b 	b.w	8008184 <netbuf_delete>
}
 800704e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8007052:	4b05      	ldr	r3, [pc, #20]	@ (8007068 <recv_udp+0xa4>)
 8007054:	22e6      	movs	r2, #230	@ 0xe6
 8007056:	4908      	ldr	r1, [pc, #32]	@ (8007078 <recv_udp+0xb4>)
 8007058:	4805      	ldr	r0, [pc, #20]	@ (8007070 <recv_udp+0xac>)
 800705a:	f008 ff6b 	bl	800ff34 <iprintf>
    pbuf_free(p);
 800705e:	4638      	mov	r0, r7
}
 8007060:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8007064:	f002 b8ee 	b.w	8009244 <pbuf_free>
 8007068:	08011d10 	.word	0x08011d10
 800706c:	08011d88 	.word	0x08011d88
 8007070:	080110dc 	.word	0x080110dc
 8007074:	08011d44 	.word	0x08011d44
 8007078:	08011d68 	.word	0x08011d68

0800707c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800707c:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800707e:	6844      	ldr	r4, [r0, #4]
{
 8007080:	4601      	mov	r1, r0
  tcp_arg(pcb, conn);
 8007082:	4620      	mov	r0, r4
 8007084:	f002 ff14 	bl	8009eb0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8007088:	4620      	mov	r0, r4
 800708a:	4909      	ldr	r1, [pc, #36]	@ (80070b0 <setup_tcp+0x34>)
 800708c:	f002 ff18 	bl	8009ec0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8007090:	4620      	mov	r0, r4
 8007092:	4908      	ldr	r1, [pc, #32]	@ (80070b4 <setup_tcp+0x38>)
 8007094:	f002 ff2e 	bl	8009ef4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8007098:	4620      	mov	r0, r4
 800709a:	4907      	ldr	r1, [pc, #28]	@ (80070b8 <setup_tcp+0x3c>)
 800709c:	2202      	movs	r2, #2
 800709e:	f002 ff69 	bl	8009f74 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80070a2:	4620      	mov	r0, r4
 80070a4:	4905      	ldr	r1, [pc, #20]	@ (80070bc <setup_tcp+0x40>)
}
 80070a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_err(pcb, err_tcp);
 80070aa:	f002 bf3d 	b.w	8009f28 <tcp_err>
 80070ae:	bf00      	nop
 80070b0:	080077dd 	.word	0x080077dd
 80070b4:	0800776d 	.word	0x0800776d
 80070b8:	080076ed 	.word	0x080076ed
 80070bc:	080078b5 	.word	0x080078b5

080070c0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80070c4:	4680      	mov	r8, r0
{
 80070c6:	b083      	sub	sp, #12
 80070c8:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", conn != NULL);
 80070ca:	2800      	cmp	r0, #0
 80070cc:	f000 8140 	beq.w	8007350 <lwip_netconn_do_writemore+0x290>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80070d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d006      	beq.n	80070e6 <lwip_netconn_do_writemore+0x26>
 80070d8:	4bab      	ldr	r3, [pc, #684]	@ (8007388 <lwip_netconn_do_writemore+0x2c8>)
 80070da:	f240 6274 	movw	r2, #1652	@ 0x674
 80070de:	49ab      	ldr	r1, [pc, #684]	@ (800738c <lwip_netconn_do_writemore+0x2cc>)
 80070e0:	48ab      	ldr	r0, [pc, #684]	@ (8007390 <lwip_netconn_do_writemore+0x2d0>)
 80070e2:	f008 ff27 	bl	800ff34 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80070e6:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 8138 	beq.w	8007360 <lwip_netconn_do_writemore+0x2a0>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80070f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 813f 	beq.w	8007378 <lwip_netconn_do_writemore+0x2b8>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80070fa:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80070fe:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
 8007102:	4291      	cmp	r1, r2
 8007104:	f080 80cf 	bcs.w	80072a6 <lwip_netconn_do_writemore+0x1e6>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8007108:	899a      	ldrh	r2, [r3, #12]
 800710a:	2a00      	cmp	r2, #0
 800710c:	f000 80c1 	beq.w	8007292 <lwip_netconn_do_writemore+0x1d2>

  apiflags = conn->current_msg->msg.w.apiflags;
 8007110:	7f1f      	ldrb	r7, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007112:	f898 901c 	ldrb.w	r9, [r8, #28]
 8007116:	f007 0204 	and.w	r2, r7, #4
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800711a:	f8df b26c 	ldr.w	fp, [pc, #620]	@ 8007388 <lwip_netconn_do_writemore+0x2c8>
 800711e:	f009 0902 	and.w	r9, r9, #2
 8007122:	f8df a284 	ldr.w	sl, [pc, #644]	@ 80073a8 <lwip_netconn_do_writemore+0x2e8>
 8007126:	9501      	str	r5, [sp, #4]
 8007128:	ea49 0902 	orr.w	r9, r9, r2
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800712c:	689a      	ldr	r2, [r3, #8]
 800712e:	6919      	ldr	r1, [r3, #16]
 8007130:	e9d2 6c00 	ldrd	r6, ip, [r2]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8007134:	ebac 0501 	sub.w	r5, ip, r1
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8007138:	440e      	add	r6, r1
      if (diff > 0xffffUL) { /* max_u16_t */
 800713a:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 800713e:	d371      	bcc.n	8007224 <lwip_netconn_do_writemore+0x164>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8007140:	f047 0702 	orr.w	r7, r7, #2
        len = 0xffff;
 8007144:	f64f 74ff 	movw	r4, #65535	@ 0xffff
      available = tcp_sndbuf(conn->pcb.tcp);
 8007148:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800714c:	f8b2 e064 	ldrh.w	lr, [r2, #100]	@ 0x64
 8007150:	4610      	mov	r0, r2
      if (available < len) {
 8007152:	4574      	cmp	r4, lr
 8007154:	d908      	bls.n	8007168 <lwip_netconn_do_writemore+0xa8>
        if (dontblock) {
 8007156:	f1b9 0f00 	cmp.w	r9, #0
 800715a:	f000 8088 	beq.w	800726e <lwip_netconn_do_writemore+0x1ae>
          if (!len) {
 800715e:	f1be 0f00 	cmp.w	lr, #0
 8007162:	f000 80aa 	beq.w	80072ba <lwip_netconn_do_writemore+0x1fa>
 8007166:	4674      	mov	r4, lr
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8007168:	4421      	add	r1, r4
 800716a:	458c      	cmp	ip, r1
 800716c:	d375      	bcc.n	800725a <lwip_netconn_do_writemore+0x19a>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800716e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007172:	429c      	cmp	r4, r3
 8007174:	d16c      	bne.n	8007250 <lwip_netconn_do_writemore+0x190>
 8007176:	429d      	cmp	r5, r3
 8007178:	d96a      	bls.n	8007250 <lwip_netconn_do_writemore+0x190>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
        write_more = 1;
        apiflags |= TCP_WRITE_FLAG_MORE;
 800717a:	f047 0702 	orr.w	r7, r7, #2
        write_more = 1;
 800717e:	2501      	movs	r5, #1
      } else {
        write_more = 0;
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8007180:	463b      	mov	r3, r7
 8007182:	4622      	mov	r2, r4
 8007184:	4631      	mov	r1, r6
 8007186:	f005 fc43 	bl	800ca10 <tcp_write>
      if (err == ERR_OK) {
 800718a:	2800      	cmp	r0, #0
 800718c:	d14c      	bne.n	8007228 <lwip_netconn_do_writemore+0x168>
        conn->current_msg->msg.w.offset += len;
 800718e:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8007192:	699a      	ldr	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8007194:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 8007196:	4422      	add	r2, r4
 8007198:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800719a:	691a      	ldr	r2, [r3, #16]
 800719c:	4414      	add	r4, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800719e:	684a      	ldr	r2, [r1, #4]
 80071a0:	4294      	cmp	r4, r2
        conn->current_msg->msg.w.vector_off += len;
 80071a2:	611c      	str	r4, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80071a4:	d032      	beq.n	800720c <lwip_netconn_do_writemore+0x14c>
            conn->current_msg->msg.w.vector++;
            conn->current_msg->msg.w.vector_off = 0;
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80071a6:	2d00      	cmp	r5, #0
 80071a8:	d1c0      	bne.n	800712c <lwip_netconn_do_writemore+0x6c>
 80071aa:	4606      	mov	r6, r0
 80071ac:	9d01      	ldr	r5, [sp, #4]
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80071ae:	f1b9 0f00 	cmp.w	r9, #0
 80071b2:	f040 80fb 	bne.w	80073ac <lwip_netconn_do_writemore+0x2ec>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80071b6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80071ba:	f640 3369 	movw	r3, #2921	@ 0xb69
 80071be:	f8b2 1064 	ldrh.w	r1, [r2, #100]	@ 0x64
 80071c2:	4299      	cmp	r1, r3
 80071c4:	d903      	bls.n	80071ce <lwip_netconn_do_writemore+0x10e>
 80071c6:	f8b2 3066 	ldrh.w	r3, [r2, #102]	@ 0x66
 80071ca:	2b07      	cmp	r3, #7
 80071cc:	d908      	bls.n	80071e0 <lwip_netconn_do_writemore+0x120>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80071ce:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 80071d2:	b12b      	cbz	r3, 80071e0 <lwip_netconn_do_writemore+0x120>
 80071d4:	2200      	movs	r2, #0
 80071d6:	2103      	movs	r1, #3
 80071d8:	4640      	mov	r0, r8
 80071da:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80071dc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80071e0:	2e00      	cmp	r6, #0
 80071e2:	f000 8086 	beq.w	80072f2 <lwip_netconn_do_writemore+0x232>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80071e6:	4610      	mov	r0, r2
 80071e8:	f006 fa0a 	bl	800d600 <tcp_output>
      if (out_err == ERR_RTE) {
 80071ec:	1d03      	adds	r3, r0, #4
      err_t out_err = tcp_output(conn->pcb.tcp);
 80071ee:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 80071f0:	d020      	beq.n	8007234 <lwip_netconn_do_writemore+0x174>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
      } else if (dontblock) {
 80071f2:	f1b9 0f00 	cmp.w	r9, #0
 80071f6:	f000 808b 	beq.w	8007310 <lwip_netconn_do_writemore+0x250>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80071fa:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80071fe:	699a      	ldr	r2, [r3, #24]
 8007200:	2a00      	cmp	r2, #0
 8007202:	bf14      	ite	ne
 8007204:	2600      	movne	r6, #0
 8007206:	f06f 0606 	mvneq.w	r6, #6
 800720a:	e015      	b.n	8007238 <lwip_netconn_do_writemore+0x178>
          conn->current_msg->msg.w.vector_cnt--;
 800720c:	899a      	ldrh	r2, [r3, #12]
 800720e:	3a01      	subs	r2, #1
 8007210:	b292      	uxth	r2, r2
 8007212:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8007214:	2a00      	cmp	r2, #0
 8007216:	d0c6      	beq.n	80071a6 <lwip_netconn_do_writemore+0xe6>
            conn->current_msg->msg.w.vector++;
 8007218:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 800721a:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 800721c:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 800721e:	2d00      	cmp	r5, #0
 8007220:	d184      	bne.n	800712c <lwip_netconn_do_writemore+0x6c>
 8007222:	e7c2      	b.n	80071aa <lwip_netconn_do_writemore+0xea>
        len = (u16_t)diff;
 8007224:	b2ac      	uxth	r4, r5
 8007226:	e78f      	b.n	8007148 <lwip_netconn_do_writemore+0x88>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	4606      	mov	r6, r0
 800722c:	9d01      	ldr	r5, [sp, #4]
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b01      	cmp	r3, #1
 8007232:	d927      	bls.n	8007284 <lwip_netconn_do_writemore+0x1c4>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8007234:	f8d8 3020 	ldr.w	r3, [r8, #32]
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007238:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 800723a:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 800723c:	2300      	movs	r3, #0
 800723e:	f8c8 3020 	str.w	r3, [r8, #32]
    conn->state = NETCONN_NONE;
 8007242:	f888 3001 	strb.w	r3, [r8, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8007246:	bb05      	cbnz	r5, 800728a <lwip_netconn_do_writemore+0x1ca>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8007248:	2000      	movs	r0, #0
}
 800724a:	b003      	add	sp, #12
 800724c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((len == 0xffff && diff > 0xffffUL) ||
 8007250:	b2ad      	uxth	r5, r5
 8007252:	42a5      	cmp	r5, r4
 8007254:	d00f      	beq.n	8007276 <lwip_netconn_do_writemore+0x1b6>
        write_more = 0;
 8007256:	2500      	movs	r5, #0
 8007258:	e792      	b.n	8007180 <lwip_netconn_do_writemore+0xc0>
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800725a:	465b      	mov	r3, fp
 800725c:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8007260:	4651      	mov	r1, sl
 8007262:	484b      	ldr	r0, [pc, #300]	@ (8007390 <lwip_netconn_do_writemore+0x2d0>)
 8007264:	f008 fe66 	bl	800ff34 <iprintf>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8007268:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800726c:	e77f      	b.n	800716e <lwip_netconn_do_writemore+0xae>
          apiflags |= TCP_WRITE_FLAG_MORE;
 800726e:	f047 0702 	orr.w	r7, r7, #2
 8007272:	4674      	mov	r4, lr
 8007274:	e778      	b.n	8007168 <lwip_netconn_do_writemore+0xa8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8007276:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800727a:	899b      	ldrh	r3, [r3, #12]
 800727c:	2b01      	cmp	r3, #1
 800727e:	f63f af7c 	bhi.w	800717a <lwip_netconn_do_writemore+0xba>
 8007282:	e7e8      	b.n	8007256 <lwip_netconn_do_writemore+0x196>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8007284:	f04f 36ff 	mov.w	r6, #4294967295
 8007288:	e791      	b.n	80071ae <lwip_netconn_do_writemore+0xee>
      sys_sem_signal(op_completed_sem);
 800728a:	300c      	adds	r0, #12
 800728c:	f008 fbb2 	bl	800f9f4 <sys_sem_signal>
 8007290:	e7da      	b.n	8007248 <lwip_netconn_do_writemore+0x188>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8007292:	4b3d      	ldr	r3, [pc, #244]	@ (8007388 <lwip_netconn_do_writemore+0x2c8>)
 8007294:	f240 6279 	movw	r2, #1657	@ 0x679
 8007298:	493e      	ldr	r1, [pc, #248]	@ (8007394 <lwip_netconn_do_writemore+0x2d4>)
 800729a:	483d      	ldr	r0, [pc, #244]	@ (8007390 <lwip_netconn_do_writemore+0x2d0>)
 800729c:	f008 fe4a 	bl	800ff34 <iprintf>
  apiflags = conn->current_msg->msg.w.apiflags;
 80072a0:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80072a4:	e734      	b.n	8007110 <lwip_netconn_do_writemore+0x50>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80072a6:	4b38      	ldr	r3, [pc, #224]	@ (8007388 <lwip_netconn_do_writemore+0x2c8>)
 80072a8:	f240 6277 	movw	r2, #1655	@ 0x677
 80072ac:	493a      	ldr	r1, [pc, #232]	@ (8007398 <lwip_netconn_do_writemore+0x2d8>)
 80072ae:	4838      	ldr	r0, [pc, #224]	@ (8007390 <lwip_netconn_do_writemore+0x2d0>)
 80072b0:	f008 fe40 	bl	800ff34 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80072b4:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80072b8:	e726      	b.n	8007108 <lwip_netconn_do_writemore+0x48>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80072ba:	6999      	ldr	r1, [r3, #24]
 80072bc:	9d01      	ldr	r5, [sp, #4]
 80072be:	b961      	cbnz	r1, 80072da <lwip_netconn_do_writemore+0x21a>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80072c0:	695a      	ldr	r2, [r3, #20]
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80072c2:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80072c6:	bb32      	cbnz	r2, 8007316 <lwip_netconn_do_writemore+0x256>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80072c8:	b124      	cbz	r4, 80072d4 <lwip_netconn_do_writemore+0x214>
 80072ca:	2103      	movs	r1, #3
 80072cc:	4640      	mov	r0, r8
 80072ce:	47a0      	blx	r4
    if (err == ERR_OK) {
 80072d0:	f8d8 3020 	ldr.w	r3, [r8, #32]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80072d4:	f06f 0606 	mvn.w	r6, #6
 80072d8:	e7ae      	b.n	8007238 <lwip_netconn_do_writemore+0x178>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	4299      	cmp	r1, r3
 80072de:	d37b      	bcc.n	80073d8 <lwip_netconn_do_writemore+0x318>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80072e0:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 80072e4:	b34b      	cbz	r3, 800733a <lwip_netconn_do_writemore+0x27a>
 80072e6:	4672      	mov	r2, lr
 80072e8:	2103      	movs	r1, #3
 80072ea:	4640      	mov	r0, r8
 80072ec:	4798      	blx	r3
    if (err == ERR_OK) {
 80072ee:	f8d8 2004 	ldr.w	r2, [r8, #4]
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80072f2:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80072f6:	e9d3 3105 	ldrd	r3, r1, [r3, #20]
 80072fa:	4299      	cmp	r1, r3
 80072fc:	d01d      	beq.n	800733a <lwip_netconn_do_writemore+0x27a>
 80072fe:	f1b9 0f00 	cmp.w	r9, #0
 8007302:	d11a      	bne.n	800733a <lwip_netconn_do_writemore+0x27a>
      out_err = tcp_output(conn->pcb.tcp);
 8007304:	4610      	mov	r0, r2
 8007306:	f006 f97b 	bl	800d600 <tcp_output>
      if (out_err == ERR_RTE) {
 800730a:	1d02      	adds	r2, r0, #4
      out_err = tcp_output(conn->pcb.tcp);
 800730c:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 800730e:	d091      	beq.n	8007234 <lwip_netconn_do_writemore+0x174>
    return ERR_MEM;
 8007310:	f04f 30ff 	mov.w	r0, #4294967295
 8007314:	e799      	b.n	800724a <lwip_netconn_do_writemore+0x18a>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8007316:	2c00      	cmp	r4, #0
 8007318:	d063      	beq.n	80073e2 <lwip_netconn_do_writemore+0x322>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800731a:	f06f 0606 	mvn.w	r6, #6
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800731e:	2200      	movs	r2, #0
 8007320:	2103      	movs	r1, #3
 8007322:	4640      	mov	r0, r8
 8007324:	47a0      	blx	r4
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8007326:	f898 301c 	ldrb.w	r3, [r8, #28]
 800732a:	f043 0310 	orr.w	r3, r3, #16
 800732e:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 8007332:	2e00      	cmp	r6, #0
 8007334:	d163      	bne.n	80073fe <lwip_netconn_do_writemore+0x33e>
 8007336:	f8d8 2004 	ldr.w	r2, [r8, #4]
      out_err = tcp_output(conn->pcb.tcp);
 800733a:	4610      	mov	r0, r2
 800733c:	f006 f960 	bl	800d600 <tcp_output>
      if (out_err == ERR_RTE) {
 8007340:	1d01      	adds	r1, r0, #4
      out_err = tcp_output(conn->pcb.tcp);
 8007342:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 8007344:	f43f af76 	beq.w	8007234 <lwip_netconn_do_writemore+0x174>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007348:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800734c:	2600      	movs	r6, #0
 800734e:	e773      	b.n	8007238 <lwip_netconn_do_writemore+0x178>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8007350:	4b0d      	ldr	r3, [pc, #52]	@ (8007388 <lwip_netconn_do_writemore+0x2c8>)
 8007352:	f240 6273 	movw	r2, #1651	@ 0x673
 8007356:	4911      	ldr	r1, [pc, #68]	@ (800739c <lwip_netconn_do_writemore+0x2dc>)
 8007358:	480d      	ldr	r0, [pc, #52]	@ (8007390 <lwip_netconn_do_writemore+0x2d0>)
 800735a:	f008 fdeb 	bl	800ff34 <iprintf>
 800735e:	e6b7      	b.n	80070d0 <lwip_netconn_do_writemore+0x10>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007360:	4b09      	ldr	r3, [pc, #36]	@ (8007388 <lwip_netconn_do_writemore+0x2c8>)
 8007362:	f240 6275 	movw	r2, #1653	@ 0x675
 8007366:	490e      	ldr	r1, [pc, #56]	@ (80073a0 <lwip_netconn_do_writemore+0x2e0>)
 8007368:	4809      	ldr	r0, [pc, #36]	@ (8007390 <lwip_netconn_do_writemore+0x2d0>)
 800736a:	f008 fde3 	bl	800ff34 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800736e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	f47f aec1 	bne.w	80070fa <lwip_netconn_do_writemore+0x3a>
 8007378:	4b03      	ldr	r3, [pc, #12]	@ (8007388 <lwip_netconn_do_writemore+0x2c8>)
 800737a:	f240 6276 	movw	r2, #1654	@ 0x676
 800737e:	4909      	ldr	r1, [pc, #36]	@ (80073a4 <lwip_netconn_do_writemore+0x2e4>)
 8007380:	4803      	ldr	r0, [pc, #12]	@ (8007390 <lwip_netconn_do_writemore+0x2d0>)
 8007382:	f008 fdd7 	bl	800ff34 <iprintf>
 8007386:	e6b8      	b.n	80070fa <lwip_netconn_do_writemore+0x3a>
 8007388:	08011d10 	.word	0x08011d10
 800738c:	08011da8 	.word	0x08011da8
 8007390:	080110dc 	.word	0x080110dc
 8007394:	08011e3c 	.word	0x08011e3c
 8007398:	08011dfc 	.word	0x08011dfc
 800739c:	080111cc 	.word	0x080111cc
 80073a0:	08011dc8 	.word	0x08011dc8
 80073a4:	08011de4 	.word	0x08011de4
 80073a8:	08011e64 	.word	0x08011e64
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80073ac:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80073b0:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	f4bf aefe 	bcs.w	80071b6 <lwip_netconn_do_writemore+0xf6>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80073ba:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
 80073be:	2c00      	cmp	r4, #0
 80073c0:	d1ad      	bne.n	800731e <lwip_netconn_do_writemore+0x25e>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80073c2:	f898 301c 	ldrb.w	r3, [r8, #28]
 80073c6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80073ca:	f043 0310 	orr.w	r3, r3, #16
 80073ce:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 80073d2:	2e00      	cmp	r6, #0
 80073d4:	d0b1      	beq.n	800733a <lwip_netconn_do_writemore+0x27a>
 80073d6:	e706      	b.n	80071e6 <lwip_netconn_do_writemore+0x126>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80073d8:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
 80073dc:	b144      	cbz	r4, 80073f0 <lwip_netconn_do_writemore+0x330>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80073de:	4676      	mov	r6, lr
 80073e0:	e79d      	b.n	800731e <lwip_netconn_do_writemore+0x25e>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80073e2:	f898 201c 	ldrb.w	r2, [r8, #28]
 80073e6:	f042 0210 	orr.w	r2, r2, #16
 80073ea:	f888 201c 	strb.w	r2, [r8, #28]
    } else if (err == ERR_MEM) {
 80073ee:	e771      	b.n	80072d4 <lwip_netconn_do_writemore+0x214>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80073f0:	f898 301c 	ldrb.w	r3, [r8, #28]
 80073f4:	f043 0310 	orr.w	r3, r3, #16
 80073f8:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 80073fc:	e79d      	b.n	800733a <lwip_netconn_do_writemore+0x27a>
    } else if (err == ERR_MEM) {
 80073fe:	3601      	adds	r6, #1
 8007400:	d004      	beq.n	800740c <lwip_netconn_do_writemore+0x34c>
 8007402:	f8d8 3020 	ldr.w	r3, [r8, #32]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007406:	f06f 0606 	mvn.w	r6, #6
 800740a:	e715      	b.n	8007238 <lwip_netconn_do_writemore+0x178>
 800740c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007410:	e6e9      	b.n	80071e6 <lwip_netconn_do_writemore+0x126>
 8007412:	bf00      	nop

08007414 <lwip_netconn_do_close_internal>:
{
 8007414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8007418:	4604      	mov	r4, r0
{
 800741a:	460e      	mov	r6, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800741c:	2800      	cmp	r0, #0
 800741e:	f000 80e7 	beq.w	80075f0 <lwip_netconn_do_close_internal+0x1dc>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8007422:	7823      	ldrb	r3, [r4, #0]
 8007424:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007428:	2b10      	cmp	r3, #16
 800742a:	d006      	beq.n	800743a <lwip_netconn_do_close_internal+0x26>
 800742c:	4ba4      	ldr	r3, [pc, #656]	@ (80076c0 <lwip_netconn_do_close_internal+0x2ac>)
 800742e:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8007432:	49a4      	ldr	r1, [pc, #656]	@ (80076c4 <lwip_netconn_do_close_internal+0x2b0>)
 8007434:	48a4      	ldr	r0, [pc, #656]	@ (80076c8 <lwip_netconn_do_close_internal+0x2b4>)
 8007436:	f008 fd7d 	bl	800ff34 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800743a:	7863      	ldrb	r3, [r4, #1]
 800743c:	2b04      	cmp	r3, #4
 800743e:	d006      	beq.n	800744e <lwip_netconn_do_close_internal+0x3a>
 8007440:	4b9f      	ldr	r3, [pc, #636]	@ (80076c0 <lwip_netconn_do_close_internal+0x2ac>)
 8007442:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8007446:	49a1      	ldr	r1, [pc, #644]	@ (80076cc <lwip_netconn_do_close_internal+0x2b8>)
 8007448:	489f      	ldr	r0, [pc, #636]	@ (80076c8 <lwip_netconn_do_close_internal+0x2b4>)
 800744a:	f008 fd73 	bl	800ff34 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800744e:	6863      	ldr	r3, [r4, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 80b9 	beq.w	80075c8 <lwip_netconn_do_close_internal+0x1b4>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007456:	6a23      	ldr	r3, [r4, #32]
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 80c0 	beq.w	80075de <lwip_netconn_do_close_internal+0x1ca>
  shut = conn->current_msg->msg.sd.shut;
 800745e:	7a1b      	ldrb	r3, [r3, #8]
  tpcb = conn->pcb.tcp;
 8007460:	6865      	ldr	r5, [r4, #4]
  if (shut == NETCONN_SHUT_RDWR) {
 8007462:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8007464:	f003 0701 	and.w	r7, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8007468:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 800746c:	d03d      	beq.n	80074ea <lwip_netconn_do_close_internal+0xd6>
  } else if (shut_rx &&
 800746e:	b36f      	cbz	r7, 80074cc <lwip_netconn_do_close_internal+0xb8>
             ((tpcb->state == FIN_WAIT_1) ||
 8007470:	7d2b      	ldrb	r3, [r5, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8007472:	1f5a      	subs	r2, r3, #5
  } else if (shut_rx &&
 8007474:	2a01      	cmp	r2, #1
 8007476:	d978      	bls.n	800756a <lwip_netconn_do_close_internal+0x156>
 8007478:	2b08      	cmp	r3, #8
 800747a:	d076      	beq.n	800756a <lwip_netconn_do_close_internal+0x156>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800747c:	f1b8 0f00 	cmp.w	r8, #0
 8007480:	f040 80be 	bne.w	8007600 <lwip_netconn_do_close_internal+0x1ec>
  if (tpcb->state == LISTEN) {
 8007484:	2b01      	cmp	r3, #1
 8007486:	d06b      	beq.n	8007560 <lwip_netconn_do_close_internal+0x14c>
      tcp_recv(tpcb, NULL);
 8007488:	4641      	mov	r1, r8
 800748a:	4628      	mov	r0, r5
 800748c:	f002 fd18 	bl	8009ec0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007490:	4641      	mov	r1, r8
 8007492:	4628      	mov	r0, r5
 8007494:	f002 fd62 	bl	8009f5c <tcp_accept>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8007498:	4642      	mov	r2, r8
 800749a:	4639      	mov	r1, r7
 800749c:	4628      	mov	r0, r5
 800749e:	f003 fbcd 	bl	800ac3c <tcp_shutdown>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80074a2:	6a23      	ldr	r3, [r4, #32]
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80074a4:	4602      	mov	r2, r0
  if (err == ERR_OK) {
 80074a6:	2800      	cmp	r0, #0
 80074a8:	f000 8088 	beq.w	80075bc <lwip_netconn_do_close_internal+0x1a8>
    if (err == ERR_MEM) {
 80074ac:	1c41      	adds	r1, r0, #1
 80074ae:	d17e      	bne.n	80075ae <lwip_netconn_do_close_internal+0x19a>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80074b0:	7a5a      	ldrb	r2, [r3, #9]
 80074b2:	2a00      	cmp	r2, #0
 80074b4:	f040 80e0 	bne.w	8007678 <lwip_netconn_do_close_internal+0x264>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80074b8:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80074ba:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80074bc:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 80074be:	6222      	str	r2, [r4, #32]
    conn->state = NETCONN_NONE;
 80074c0:	7062      	strb	r2, [r4, #1]
    if (delayed)
 80074c2:	2e00      	cmp	r6, #0
 80074c4:	d145      	bne.n	8007552 <lwip_netconn_do_close_internal+0x13e>
    return ERR_OK;
 80074c6:	2000      	movs	r0, #0
}
 80074c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80074cc:	f1b8 0f00 	cmp.w	r8, #0
 80074d0:	d043      	beq.n	800755a <lwip_netconn_do_close_internal+0x146>
 80074d2:	8b6b      	ldrh	r3, [r5, #26]
 80074d4:	06d8      	lsls	r0, r3, #27
 80074d6:	f100 8097 	bmi.w	8007608 <lwip_netconn_do_close_internal+0x1f4>
  if (tpcb->state == LISTEN) {
 80074da:	7d2b      	ldrb	r3, [r5, #20]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d03f      	beq.n	8007560 <lwip_netconn_do_close_internal+0x14c>
      tcp_sent(tpcb, NULL);
 80074e0:	4639      	mov	r1, r7
 80074e2:	4628      	mov	r0, r5
 80074e4:	f002 fd06 	bl	8009ef4 <tcp_sent>
    if (shut_close) {
 80074e8:	e7d6      	b.n	8007498 <lwip_netconn_do_close_internal+0x84>
    tcp_arg(tpcb, NULL);
 80074ea:	2100      	movs	r1, #0
 80074ec:	4628      	mov	r0, r5
 80074ee:	f002 fcdf 	bl	8009eb0 <tcp_arg>
  if (tpcb->state == LISTEN) {
 80074f2:	7d2b      	ldrb	r3, [r5, #20]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	f040 80a8 	bne.w	800764a <lwip_netconn_do_close_internal+0x236>
    tcp_accept(tpcb, NULL);
 80074fa:	2100      	movs	r1, #0
 80074fc:	4628      	mov	r0, r5
 80074fe:	f002 fd2d 	bl	8009f5c <tcp_accept>
      err = tcp_close(tpcb);
 8007502:	4628      	mov	r0, r5
 8007504:	f003 fb78 	bl	800abf8 <tcp_close>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8007508:	6a23      	ldr	r3, [r4, #32]
      err = tcp_close(tpcb);
 800750a:	4602      	mov	r2, r0
  if (err == ERR_OK) {
 800750c:	2800      	cmp	r0, #0
 800750e:	d14c      	bne.n	80075aa <lwip_netconn_do_close_internal+0x196>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007510:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8007512:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007514:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 8007516:	2200      	movs	r2, #0
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007518:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    conn->current_msg = NULL;
 800751a:	6222      	str	r2, [r4, #32]
    conn->state = NETCONN_NONE;
 800751c:	7062      	strb	r2, [r4, #1]
        conn->pcb.tcp = NULL;
 800751e:	6062      	str	r2, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007520:	2b00      	cmp	r3, #0
 8007522:	d07f      	beq.n	8007624 <lwip_netconn_do_close_internal+0x210>
 8007524:	2104      	movs	r1, #4
 8007526:	4620      	mov	r0, r4
 8007528:	4798      	blx	r3
      if (shut_rx) {
 800752a:	b137      	cbz	r7, 800753a <lwip_netconn_do_close_internal+0x126>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800752c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800752e:	2b00      	cmp	r3, #0
 8007530:	d0c7      	beq.n	80074c2 <lwip_netconn_do_close_internal+0xae>
 8007532:	2200      	movs	r2, #0
 8007534:	4620      	mov	r0, r4
 8007536:	4611      	mov	r1, r2
 8007538:	4798      	blx	r3
      if (shut_tx) {
 800753a:	f1b8 0f00 	cmp.w	r8, #0
 800753e:	d0c0      	beq.n	80074c2 <lwip_netconn_do_close_internal+0xae>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007540:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0bd      	beq.n	80074c2 <lwip_netconn_do_close_internal+0xae>
 8007546:	2200      	movs	r2, #0
 8007548:	4620      	mov	r0, r4
 800754a:	2102      	movs	r1, #2
 800754c:	4798      	blx	r3
    if (delayed)
 800754e:	2e00      	cmp	r6, #0
 8007550:	d0b9      	beq.n	80074c6 <lwip_netconn_do_close_internal+0xb2>
      sys_sem_signal(op_completed_sem);
 8007552:	4628      	mov	r0, r5
 8007554:	f008 fa4e 	bl	800f9f4 <sys_sem_signal>
 8007558:	e7b5      	b.n	80074c6 <lwip_netconn_do_close_internal+0xb2>
  if (tpcb->state == LISTEN) {
 800755a:	7d2b      	ldrb	r3, [r5, #20]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d19b      	bne.n	8007498 <lwip_netconn_do_close_internal+0x84>
    tcp_accept(tpcb, NULL);
 8007560:	2100      	movs	r1, #0
 8007562:	4628      	mov	r0, r5
 8007564:	f002 fcfa 	bl	8009f5c <tcp_accept>
  if (shut_close) {
 8007568:	e796      	b.n	8007498 <lwip_netconn_do_close_internal+0x84>
    tcp_arg(tpcb, NULL);
 800756a:	2100      	movs	r1, #0
 800756c:	4628      	mov	r0, r5
 800756e:	f002 fc9f 	bl	8009eb0 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8007572:	7d2b      	ldrb	r3, [r5, #20]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d0c0      	beq.n	80074fa <lwip_netconn_do_close_internal+0xe6>
      tcp_recv(tpcb, NULL);
 8007578:	2100      	movs	r1, #0
 800757a:	4628      	mov	r0, r5
 800757c:	f002 fca0 	bl	8009ec0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007580:	2100      	movs	r1, #0
 8007582:	4628      	mov	r0, r5
 8007584:	f002 fcea 	bl	8009f5c <tcp_accept>
    if (shut_tx) {
 8007588:	f1b8 0f00 	cmp.w	r8, #0
 800758c:	d003      	beq.n	8007596 <lwip_netconn_do_close_internal+0x182>
      tcp_sent(tpcb, NULL);
 800758e:	2100      	movs	r1, #0
 8007590:	4628      	mov	r0, r5
 8007592:	f002 fcaf 	bl	8009ef4 <tcp_sent>
      tcp_poll(tpcb, NULL, 0);
 8007596:	2200      	movs	r2, #0
 8007598:	4628      	mov	r0, r5
 800759a:	4611      	mov	r1, r2
 800759c:	f002 fcea 	bl	8009f74 <tcp_poll>
      tcp_err(tpcb, NULL);
 80075a0:	2100      	movs	r1, #0
 80075a2:	4628      	mov	r0, r5
 80075a4:	f002 fcc0 	bl	8009f28 <tcp_err>
  if (shut_close) {
 80075a8:	e7ab      	b.n	8007502 <lwip_netconn_do_close_internal+0xee>
    if (err == ERR_MEM) {
 80075aa:	3001      	adds	r0, #1
 80075ac:	d056      	beq.n	800765c <lwip_netconn_do_close_internal+0x248>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80075ae:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80075b0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80075b2:	2300      	movs	r3, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80075b4:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 80075b6:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 80075b8:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 80075ba:	e782      	b.n	80074c2 <lwip_netconn_do_close_internal+0xae>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80075bc:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80075be:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80075c0:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 80075c2:	6220      	str	r0, [r4, #32]
    conn->state = NETCONN_NONE;
 80075c4:	7060      	strb	r0, [r4, #1]
 80075c6:	e7b0      	b.n	800752a <lwip_netconn_do_close_internal+0x116>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80075c8:	4b3d      	ldr	r3, [pc, #244]	@ (80076c0 <lwip_netconn_do_close_internal+0x2ac>)
 80075ca:	f240 32a5 	movw	r2, #933	@ 0x3a5
 80075ce:	4940      	ldr	r1, [pc, #256]	@ (80076d0 <lwip_netconn_do_close_internal+0x2bc>)
 80075d0:	483d      	ldr	r0, [pc, #244]	@ (80076c8 <lwip_netconn_do_close_internal+0x2b4>)
 80075d2:	f008 fcaf 	bl	800ff34 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80075d6:	6a23      	ldr	r3, [r4, #32]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f47f af40 	bne.w	800745e <lwip_netconn_do_close_internal+0x4a>
 80075de:	4b38      	ldr	r3, [pc, #224]	@ (80076c0 <lwip_netconn_do_close_internal+0x2ac>)
 80075e0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80075e4:	493b      	ldr	r1, [pc, #236]	@ (80076d4 <lwip_netconn_do_close_internal+0x2c0>)
 80075e6:	4838      	ldr	r0, [pc, #224]	@ (80076c8 <lwip_netconn_do_close_internal+0x2b4>)
 80075e8:	f008 fca4 	bl	800ff34 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 80075ec:	6a23      	ldr	r3, [r4, #32]
 80075ee:	e736      	b.n	800745e <lwip_netconn_do_close_internal+0x4a>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80075f0:	4b33      	ldr	r3, [pc, #204]	@ (80076c0 <lwip_netconn_do_close_internal+0x2ac>)
 80075f2:	f240 32a2 	movw	r2, #930	@ 0x3a2
 80075f6:	4938      	ldr	r1, [pc, #224]	@ (80076d8 <lwip_netconn_do_close_internal+0x2c4>)
 80075f8:	4833      	ldr	r0, [pc, #204]	@ (80076c8 <lwip_netconn_do_close_internal+0x2b4>)
 80075fa:	f008 fc9b 	bl	800ff34 <iprintf>
 80075fe:	e710      	b.n	8007422 <lwip_netconn_do_close_internal+0xe>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8007600:	8b69      	ldrh	r1, [r5, #26]
 8007602:	f011 0910 	ands.w	r9, r1, #16
 8007606:	d011      	beq.n	800762c <lwip_netconn_do_close_internal+0x218>
    tcp_arg(tpcb, NULL);
 8007608:	2100      	movs	r1, #0
 800760a:	4628      	mov	r0, r5
 800760c:	f002 fc50 	bl	8009eb0 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8007610:	7d2b      	ldrb	r3, [r5, #20]
 8007612:	2b01      	cmp	r3, #1
 8007614:	f43f af71 	beq.w	80074fa <lwip_netconn_do_close_internal+0xe6>
    if (shut_rx) {
 8007618:	2f00      	cmp	r7, #0
 800761a:	d1ad      	bne.n	8007578 <lwip_netconn_do_close_internal+0x164>
    if (shut_tx) {
 800761c:	f1b8 0f00 	cmp.w	r8, #0
 8007620:	d0b9      	beq.n	8007596 <lwip_netconn_do_close_internal+0x182>
 8007622:	e7b4      	b.n	800758e <lwip_netconn_do_close_internal+0x17a>
      if (shut_rx) {
 8007624:	2f00      	cmp	r7, #0
 8007626:	f47f af4c 	bne.w	80074c2 <lwip_netconn_do_close_internal+0xae>
 800762a:	e786      	b.n	800753a <lwip_netconn_do_close_internal+0x126>
  if (tpcb->state == LISTEN) {
 800762c:	2b01      	cmp	r3, #1
 800762e:	d097      	beq.n	8007560 <lwip_netconn_do_close_internal+0x14c>
      tcp_recv(tpcb, NULL);
 8007630:	4649      	mov	r1, r9
 8007632:	4628      	mov	r0, r5
 8007634:	f002 fc44 	bl	8009ec0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007638:	4649      	mov	r1, r9
 800763a:	4628      	mov	r0, r5
 800763c:	f002 fc8e 	bl	8009f5c <tcp_accept>
      tcp_sent(tpcb, NULL);
 8007640:	4649      	mov	r1, r9
 8007642:	4628      	mov	r0, r5
 8007644:	f002 fc56 	bl	8009ef4 <tcp_sent>
    if (shut_close) {
 8007648:	e726      	b.n	8007498 <lwip_netconn_do_close_internal+0x84>
      tcp_recv(tpcb, NULL);
 800764a:	4628      	mov	r0, r5
 800764c:	2100      	movs	r1, #0
 800764e:	f002 fc37 	bl	8009ec0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007652:	2100      	movs	r1, #0
 8007654:	4628      	mov	r0, r5
 8007656:	f002 fc81 	bl	8009f5c <tcp_accept>
    if (shut_tx) {
 800765a:	e798      	b.n	800758e <lwip_netconn_do_close_internal+0x17a>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800765c:	f893 9009 	ldrb.w	r9, [r3, #9]
 8007660:	f1b9 0f00 	cmp.w	r9, #0
 8007664:	d108      	bne.n	8007678 <lwip_netconn_do_close_internal+0x264>
          tcp_abort(tpcb);
 8007666:	4628      	mov	r0, r5
 8007668:	f003 f8e6 	bl	800a838 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800766c:	6a23      	ldr	r3, [r4, #32]
 800766e:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8007670:	f883 9004 	strb.w	r9, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007674:	350c      	adds	r5, #12
      if (shut_close) {
 8007676:	e74e      	b.n	8007516 <lwip_netconn_do_close_internal+0x102>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8007678:	7d2b      	ldrb	r3, [r5, #20]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d012      	beq.n	80076a4 <lwip_netconn_do_close_internal+0x290>
    if (shut_tx) {
 800767e:	f1b8 0f00 	cmp.w	r8, #0
 8007682:	d117      	bne.n	80076b4 <lwip_netconn_do_close_internal+0x2a0>
    tcp_poll(tpcb, poll_tcp, 1);
 8007684:	2201      	movs	r2, #1
 8007686:	4915      	ldr	r1, [pc, #84]	@ (80076dc <lwip_netconn_do_close_internal+0x2c8>)
 8007688:	4628      	mov	r0, r5
 800768a:	f002 fc73 	bl	8009f74 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800768e:	4914      	ldr	r1, [pc, #80]	@ (80076e0 <lwip_netconn_do_close_internal+0x2cc>)
 8007690:	4628      	mov	r0, r5
 8007692:	f002 fc49 	bl	8009f28 <tcp_err>
    tcp_arg(tpcb, conn);
 8007696:	4628      	mov	r0, r5
 8007698:	4621      	mov	r1, r4
 800769a:	f002 fc09 	bl	8009eb0 <tcp_arg>
  return err;
 800769e:	f04f 30ff 	mov.w	r0, #4294967295
 80076a2:	e711      	b.n	80074c8 <lwip_netconn_do_close_internal+0xb4>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80076a4:	4b06      	ldr	r3, [pc, #24]	@ (80076c0 <lwip_netconn_do_close_internal+0x2ac>)
 80076a6:	f240 4241 	movw	r2, #1089	@ 0x441
 80076aa:	490e      	ldr	r1, [pc, #56]	@ (80076e4 <lwip_netconn_do_close_internal+0x2d0>)
 80076ac:	4806      	ldr	r0, [pc, #24]	@ (80076c8 <lwip_netconn_do_close_internal+0x2b4>)
 80076ae:	f008 fc41 	bl	800ff34 <iprintf>
 80076b2:	e7e4      	b.n	800767e <lwip_netconn_do_close_internal+0x26a>
      tcp_sent(tpcb, sent_tcp);
 80076b4:	490c      	ldr	r1, [pc, #48]	@ (80076e8 <lwip_netconn_do_close_internal+0x2d4>)
 80076b6:	4628      	mov	r0, r5
 80076b8:	f002 fc1c 	bl	8009ef4 <tcp_sent>
 80076bc:	e7e2      	b.n	8007684 <lwip_netconn_do_close_internal+0x270>
 80076be:	bf00      	nop
 80076c0:	08011d10 	.word	0x08011d10
 80076c4:	08011e90 	.word	0x08011e90
 80076c8:	080110dc 	.word	0x080110dc
 80076cc:	08011eb0 	.word	0x08011eb0
 80076d0:	08011ed4 	.word	0x08011ed4
 80076d4:	08011dc8 	.word	0x08011dc8
 80076d8:	08011c40 	.word	0x08011c40
 80076dc:	080076ed 	.word	0x080076ed
 80076e0:	080078b5 	.word	0x080078b5
 80076e4:	08011ee8 	.word	0x08011ee8
 80076e8:	0800776d 	.word	0x0800776d

080076ec <poll_tcp>:
{
 80076ec:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80076ee:	4604      	mov	r4, r0
 80076f0:	b368      	cbz	r0, 800774e <poll_tcp+0x62>
  if (conn->state == NETCONN_WRITE) {
 80076f2:	7861      	ldrb	r1, [r4, #1]
 80076f4:	2901      	cmp	r1, #1
 80076f6:	d026      	beq.n	8007746 <poll_tcp+0x5a>
  } else if (conn->state == NETCONN_CLOSE) {
 80076f8:	2904      	cmp	r1, #4
 80076fa:	d019      	beq.n	8007730 <poll_tcp+0x44>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80076fc:	7f23      	ldrb	r3, [r4, #28]
 80076fe:	06da      	lsls	r2, r3, #27
 8007700:	d514      	bpl.n	800772c <poll_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007702:	6862      	ldr	r2, [r4, #4]
 8007704:	b192      	cbz	r2, 800772c <poll_tcp+0x40>
 8007706:	f8b2 0064 	ldrh.w	r0, [r2, #100]	@ 0x64
 800770a:	f640 3169 	movw	r1, #2921	@ 0xb69
 800770e:	4288      	cmp	r0, r1
 8007710:	d90c      	bls.n	800772c <poll_tcp+0x40>
 8007712:	f8b2 2066 	ldrh.w	r2, [r2, #102]	@ 0x66
 8007716:	2a07      	cmp	r2, #7
 8007718:	d808      	bhi.n	800772c <poll_tcp+0x40>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800771a:	f023 0310 	bic.w	r3, r3, #16
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800771e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007720:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007722:	b11d      	cbz	r5, 800772c <poll_tcp+0x40>
 8007724:	2200      	movs	r2, #0
 8007726:	2102      	movs	r1, #2
 8007728:	4620      	mov	r0, r4
 800772a:	47a8      	blx	r5
}
 800772c:	2000      	movs	r0, #0
 800772e:	bd38      	pop	{r3, r4, r5, pc}
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8007730:	6a23      	ldr	r3, [r4, #32]
 8007732:	b11b      	cbz	r3, 800773c <poll_tcp+0x50>
 8007734:	7a5a      	ldrb	r2, [r3, #9]
 8007736:	b10a      	cbz	r2, 800773c <poll_tcp+0x50>
      conn->current_msg->msg.sd.polls_left--;
 8007738:	3a01      	subs	r2, #1
 800773a:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800773c:	2101      	movs	r1, #1
 800773e:	4620      	mov	r0, r4
 8007740:	f7ff fe68 	bl	8007414 <lwip_netconn_do_close_internal>
 8007744:	e7da      	b.n	80076fc <poll_tcp+0x10>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007746:	4620      	mov	r0, r4
 8007748:	f7ff fcba 	bl	80070c0 <lwip_netconn_do_writemore>
 800774c:	e7d6      	b.n	80076fc <poll_tcp+0x10>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800774e:	4b04      	ldr	r3, [pc, #16]	@ (8007760 <poll_tcp+0x74>)
 8007750:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8007754:	4903      	ldr	r1, [pc, #12]	@ (8007764 <poll_tcp+0x78>)
 8007756:	4804      	ldr	r0, [pc, #16]	@ (8007768 <poll_tcp+0x7c>)
 8007758:	f008 fbec 	bl	800ff34 <iprintf>
 800775c:	e7c9      	b.n	80076f2 <poll_tcp+0x6>
 800775e:	bf00      	nop
 8007760:	08011d10 	.word	0x08011d10
 8007764:	080111cc 	.word	0x080111cc
 8007768:	080110dc 	.word	0x080110dc

0800776c <sent_tcp>:
{
 800776c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800776e:	b1f0      	cbz	r0, 80077ae <sent_tcp+0x42>
    if (conn->state == NETCONN_WRITE) {
 8007770:	7841      	ldrb	r1, [r0, #1]
 8007772:	4604      	mov	r4, r0
 8007774:	4615      	mov	r5, r2
 8007776:	2901      	cmp	r1, #1
 8007778:	d022      	beq.n	80077c0 <sent_tcp+0x54>
    } else if (conn->state == NETCONN_CLOSE) {
 800777a:	2904      	cmp	r1, #4
 800777c:	d023      	beq.n	80077c6 <sent_tcp+0x5a>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800777e:	6863      	ldr	r3, [r4, #4]
 8007780:	b19b      	cbz	r3, 80077aa <sent_tcp+0x3e>
 8007782:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 8007786:	f640 3269 	movw	r2, #2921	@ 0xb69
 800778a:	4291      	cmp	r1, r2
 800778c:	d90d      	bls.n	80077aa <sent_tcp+0x3e>
 800778e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8007792:	2b07      	cmp	r3, #7
 8007794:	d809      	bhi.n	80077aa <sent_tcp+0x3e>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007796:	7f23      	ldrb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8007798:	6a66      	ldr	r6, [r4, #36]	@ 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800779a:	f023 0310 	bic.w	r3, r3, #16
 800779e:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80077a0:	b11e      	cbz	r6, 80077aa <sent_tcp+0x3e>
 80077a2:	462a      	mov	r2, r5
 80077a4:	2102      	movs	r1, #2
 80077a6:	4620      	mov	r0, r4
 80077a8:	47b0      	blx	r6
}
 80077aa:	2000      	movs	r0, #0
 80077ac:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80077ae:	4b08      	ldr	r3, [pc, #32]	@ (80077d0 <sent_tcp+0x64>)
 80077b0:	f240 1293 	movw	r2, #403	@ 0x193
 80077b4:	4907      	ldr	r1, [pc, #28]	@ (80077d4 <sent_tcp+0x68>)
 80077b6:	4808      	ldr	r0, [pc, #32]	@ (80077d8 <sent_tcp+0x6c>)
 80077b8:	f008 fbbc 	bl	800ff34 <iprintf>
}
 80077bc:	2000      	movs	r0, #0
 80077be:	bd70      	pop	{r4, r5, r6, pc}
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80077c0:	f7ff fc7e 	bl	80070c0 <lwip_netconn_do_writemore>
 80077c4:	e7db      	b.n	800777e <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80077c6:	2101      	movs	r1, #1
 80077c8:	f7ff fe24 	bl	8007414 <lwip_netconn_do_close_internal>
 80077cc:	e7d7      	b.n	800777e <sent_tcp+0x12>
 80077ce:	bf00      	nop
 80077d0:	08011d10 	.word	0x08011d10
 80077d4:	080111cc 	.word	0x080111cc
 80077d8:	080110dc 	.word	0x080110dc

080077dc <recv_tcp>:
{
 80077dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077de:	4604      	mov	r4, r0
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80077e0:	460f      	mov	r7, r1
{
 80077e2:	4615      	mov	r5, r2
 80077e4:	461e      	mov	r6, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80077e6:	2900      	cmp	r1, #0
 80077e8:	d037      	beq.n	800785a <recv_tcp+0x7e>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80077ea:	2c00      	cmp	r4, #0
 80077ec:	d03e      	beq.n	800786c <recv_tcp+0x90>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80077ee:	bb4e      	cbnz	r6, 8007844 <recv_tcp+0x68>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80077f0:	6863      	ldr	r3, [r4, #4]
 80077f2:	42bb      	cmp	r3, r7
 80077f4:	d006      	beq.n	8007804 <recv_tcp+0x28>
 80077f6:	4b28      	ldr	r3, [pc, #160]	@ (8007898 <recv_tcp+0xbc>)
 80077f8:	f240 1235 	movw	r2, #309	@ 0x135
 80077fc:	4927      	ldr	r1, [pc, #156]	@ (800789c <recv_tcp+0xc0>)
 80077fe:	4828      	ldr	r0, [pc, #160]	@ (80078a0 <recv_tcp+0xc4>)
 8007800:	f008 fb98 	bl	800ff34 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007804:	f104 0610 	add.w	r6, r4, #16
 8007808:	4630      	mov	r0, r6
 800780a:	f008 f8b9 	bl	800f980 <sys_mbox_valid>
 800780e:	b178      	cbz	r0, 8007830 <recv_tcp+0x54>
  if (p != NULL) {
 8007810:	b305      	cbz	r5, 8007854 <recv_tcp+0x78>
    len = p->tot_len;
 8007812:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8007814:	4629      	mov	r1, r5
 8007816:	4630      	mov	r0, r6
 8007818:	f008 f878 	bl	800f90c <sys_mbox_trypost>
 800781c:	4601      	mov	r1, r0
 800781e:	2800      	cmp	r0, #0
 8007820:	d137      	bne.n	8007892 <recv_tcp+0xb6>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007822:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007824:	b113      	cbz	r3, 800782c <recv_tcp+0x50>
 8007826:	463a      	mov	r2, r7
 8007828:	4620      	mov	r0, r4
 800782a:	4798      	blx	r3
    return ERR_OK;
 800782c:	2000      	movs	r0, #0
}
 800782e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (p != NULL) {
 8007830:	2d00      	cmp	r5, #0
 8007832:	d0fb      	beq.n	800782c <recv_tcp+0x50>
      tcp_recved(pcb, p->tot_len);
 8007834:	4638      	mov	r0, r7
 8007836:	8929      	ldrh	r1, [r5, #8]
 8007838:	f002 fa04 	bl	8009c44 <tcp_recved>
      pbuf_free(p);
 800783c:	4628      	mov	r0, r5
 800783e:	f001 fd01 	bl	8009244 <pbuf_free>
 8007842:	e7f3      	b.n	800782c <recv_tcp+0x50>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8007844:	4b14      	ldr	r3, [pc, #80]	@ (8007898 <recv_tcp+0xbc>)
 8007846:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800784a:	4916      	ldr	r1, [pc, #88]	@ (80078a4 <recv_tcp+0xc8>)
 800784c:	4814      	ldr	r0, [pc, #80]	@ (80078a0 <recv_tcp+0xc4>)
 800784e:	f008 fb71 	bl	800ff34 <iprintf>
  if (conn == NULL) {
 8007852:	e7cd      	b.n	80077f0 <recv_tcp+0x14>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8007854:	4d14      	ldr	r5, [pc, #80]	@ (80078a8 <recv_tcp+0xcc>)
    len = 0;
 8007856:	2700      	movs	r7, #0
 8007858:	e7dc      	b.n	8007814 <recv_tcp+0x38>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800785a:	4b0f      	ldr	r3, [pc, #60]	@ (8007898 <recv_tcp+0xbc>)
 800785c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007860:	4912      	ldr	r1, [pc, #72]	@ (80078ac <recv_tcp+0xd0>)
 8007862:	480f      	ldr	r0, [pc, #60]	@ (80078a0 <recv_tcp+0xc4>)
 8007864:	f008 fb66 	bl	800ff34 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8007868:	2c00      	cmp	r4, #0
 800786a:	d1c0      	bne.n	80077ee <recv_tcp+0x12>
 800786c:	4b0a      	ldr	r3, [pc, #40]	@ (8007898 <recv_tcp+0xbc>)
 800786e:	f240 122d 	movw	r2, #301	@ 0x12d
 8007872:	490f      	ldr	r1, [pc, #60]	@ (80078b0 <recv_tcp+0xd4>)
 8007874:	480a      	ldr	r0, [pc, #40]	@ (80078a0 <recv_tcp+0xc4>)
 8007876:	f008 fb5d 	bl	800ff34 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800787a:	b916      	cbnz	r6, 8007882 <recv_tcp+0xa6>
    return ERR_VAL;
 800787c:	f06f 0005 	mvn.w	r0, #5
}
 8007880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8007882:	4b05      	ldr	r3, [pc, #20]	@ (8007898 <recv_tcp+0xbc>)
 8007884:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8007888:	4906      	ldr	r1, [pc, #24]	@ (80078a4 <recv_tcp+0xc8>)
 800788a:	4805      	ldr	r0, [pc, #20]	@ (80078a0 <recv_tcp+0xc4>)
 800788c:	f008 fb52 	bl	800ff34 <iprintf>
  if (conn == NULL) {
 8007890:	e7f4      	b.n	800787c <recv_tcp+0xa0>
    return ERR_MEM;
 8007892:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007898:	08011d10 	.word	0x08011d10
 800789c:	08011f68 	.word	0x08011f68
 80078a0:	080110dc 	.word	0x080110dc
 80078a4:	08011f30 	.word	0x08011f30
 80078a8:	0801212c 	.word	0x0801212c
 80078ac:	08011f0c 	.word	0x08011f0c
 80078b0:	08011f48 	.word	0x08011f48

080078b4 <err_tcp>:
{
 80078b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80078b8:	4604      	mov	r4, r0
{
 80078ba:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80078bc:	2800      	cmp	r0, #0
 80078be:	d073      	beq.n	80079a8 <err_tcp+0xf4>
  SYS_ARCH_PROTECT(lev);
 80078c0:	f008 f8e0 	bl	800fa84 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80078c4:	7f23      	ldrb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
 80078c6:	2600      	movs	r6, #0
  old_state = conn->state;
 80078c8:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80078ca:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 80078ce:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 80078d0:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80078d2:	7723      	strb	r3, [r4, #28]
  conn->state = NETCONN_NONE;
 80078d4:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 80078d6:	f008 f8e1 	bl	800fa9c <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80078da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80078dc:	b17b      	cbz	r3, 80078fe <err_tcp+0x4a>
 80078de:	4632      	mov	r2, r6
 80078e0:	2104      	movs	r1, #4
 80078e2:	4620      	mov	r0, r4
 80078e4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80078e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80078e8:	b14b      	cbz	r3, 80078fe <err_tcp+0x4a>
 80078ea:	4632      	mov	r2, r6
 80078ec:	4631      	mov	r1, r6
 80078ee:	4620      	mov	r0, r4
 80078f0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80078f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80078f4:	b11b      	cbz	r3, 80078fe <err_tcp+0x4a>
 80078f6:	4632      	mov	r2, r6
 80078f8:	2102      	movs	r1, #2
 80078fa:	4620      	mov	r0, r4
 80078fc:	4798      	blx	r3
  switch (err) {
 80078fe:	f105 030f 	add.w	r3, r5, #15
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b02      	cmp	r3, #2
 8007906:	d83b      	bhi.n	8007980 <err_tcp+0xcc>
 8007908:	4a34      	ldr	r2, [pc, #208]	@ (80079dc <err_tcp+0x128>)
 800790a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800790e:	f104 0610 	add.w	r6, r4, #16
 8007912:	4630      	mov	r0, r6
 8007914:	f008 f834 	bl	800f980 <sys_mbox_valid>
 8007918:	bb68      	cbnz	r0, 8007976 <err_tcp+0xc2>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800791a:	f104 0614 	add.w	r6, r4, #20
 800791e:	4630      	mov	r0, r6
 8007920:	f008 f82e 	bl	800f980 <sys_mbox_valid>
 8007924:	bb10      	cbnz	r0, 800796c <err_tcp+0xb8>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8007926:	1efb      	subs	r3, r7, #3
 8007928:	2b01      	cmp	r3, #1
 800792a:	d901      	bls.n	8007930 <err_tcp+0x7c>
 800792c:	2f01      	cmp	r7, #1
 800792e:	d119      	bne.n	8007964 <err_tcp+0xb0>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8007930:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8007932:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 8007936:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8007938:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 800793a:	d415      	bmi.n	8007968 <err_tcp+0xb4>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800793c:	6a23      	ldr	r3, [r4, #32]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d042      	beq.n	80079c8 <err_tcp+0x114>
      if (old_state == NETCONN_CLOSE) {
 8007942:	2f04      	cmp	r7, #4
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007944:	681e      	ldr	r6, [r3, #0]
 8007946:	bf08      	it	eq
 8007948:	2500      	moveq	r5, #0
 800794a:	360c      	adds	r6, #12
        conn->current_msg->err = ERR_OK;
 800794c:	711d      	strb	r5, [r3, #4]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800794e:	4630      	mov	r0, r6
 8007950:	f008 f858 	bl	800fa04 <sys_sem_valid>
 8007954:	b380      	cbz	r0, 80079b8 <err_tcp+0x104>
      conn->current_msg = NULL;
 8007956:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 8007958:	4630      	mov	r0, r6
      conn->current_msg = NULL;
 800795a:	6223      	str	r3, [r4, #32]
}
 800795c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8007960:	f008 b848 	b.w	800f9f4 <sys_sem_signal>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007964:	6a23      	ldr	r3, [r4, #32]
 8007966:	b97b      	cbnz	r3, 8007988 <err_tcp+0xd4>
}
 8007968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800796c:	4641      	mov	r1, r8
 800796e:	4630      	mov	r0, r6
 8007970:	f007 ffcc 	bl	800f90c <sys_mbox_trypost>
 8007974:	e7d7      	b.n	8007926 <err_tcp+0x72>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8007976:	4630      	mov	r0, r6
 8007978:	4641      	mov	r1, r8
 800797a:	f007 ffc7 	bl	800f90c <sys_mbox_trypost>
 800797e:	e7cc      	b.n	800791a <err_tcp+0x66>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8007980:	b95d      	cbnz	r5, 800799a <err_tcp+0xe6>
{
 8007982:	f04f 0800 	mov.w	r8, #0
 8007986:	e7c2      	b.n	800790e <err_tcp+0x5a>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007988:	4b15      	ldr	r3, [pc, #84]	@ (80079e0 <err_tcp+0x12c>)
 800798a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800798e:	4915      	ldr	r1, [pc, #84]	@ (80079e4 <err_tcp+0x130>)
 8007990:	4815      	ldr	r0, [pc, #84]	@ (80079e8 <err_tcp+0x134>)
}
 8007992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007996:	f008 bacd 	b.w	800ff34 <iprintf>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800799a:	4b11      	ldr	r3, [pc, #68]	@ (80079e0 <err_tcp+0x12c>)
 800799c:	227d      	movs	r2, #125	@ 0x7d
 800799e:	4913      	ldr	r1, [pc, #76]	@ (80079ec <err_tcp+0x138>)
 80079a0:	4811      	ldr	r0, [pc, #68]	@ (80079e8 <err_tcp+0x134>)
 80079a2:	f008 fac7 	bl	800ff34 <iprintf>
 80079a6:	e7ec      	b.n	8007982 <err_tcp+0xce>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80079a8:	4b0d      	ldr	r3, [pc, #52]	@ (80079e0 <err_tcp+0x12c>)
 80079aa:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80079ae:	4910      	ldr	r1, [pc, #64]	@ (80079f0 <err_tcp+0x13c>)
 80079b0:	480d      	ldr	r0, [pc, #52]	@ (80079e8 <err_tcp+0x134>)
 80079b2:	f008 fabf 	bl	800ff34 <iprintf>
 80079b6:	e783      	b.n	80078c0 <err_tcp+0xc>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80079b8:	4b09      	ldr	r3, [pc, #36]	@ (80079e0 <err_tcp+0x12c>)
 80079ba:	f240 12ef 	movw	r2, #495	@ 0x1ef
 80079be:	490d      	ldr	r1, [pc, #52]	@ (80079f4 <err_tcp+0x140>)
 80079c0:	4809      	ldr	r0, [pc, #36]	@ (80079e8 <err_tcp+0x134>)
 80079c2:	f008 fab7 	bl	800ff34 <iprintf>
 80079c6:	e7c6      	b.n	8007956 <err_tcp+0xa2>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80079c8:	4b05      	ldr	r3, [pc, #20]	@ (80079e0 <err_tcp+0x12c>)
 80079ca:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80079ce:	490a      	ldr	r1, [pc, #40]	@ (80079f8 <err_tcp+0x144>)
 80079d0:	4805      	ldr	r0, [pc, #20]	@ (80079e8 <err_tcp+0x134>)
 80079d2:	f008 faaf 	bl	800ff34 <iprintf>
        conn->current_msg->err = ERR_OK;
 80079d6:	6a23      	ldr	r3, [r4, #32]
 80079d8:	e7b3      	b.n	8007942 <err_tcp+0x8e>
 80079da:	bf00      	nop
 80079dc:	08012120 	.word	0x08012120
 80079e0:	08011d10 	.word	0x08011d10
 80079e4:	08011fb4 	.word	0x08011fb4
 80079e8:	080110dc 	.word	0x080110dc
 80079ec:	08011f88 	.word	0x08011f88
 80079f0:	080111cc 	.word	0x080111cc
 80079f4:	08011f98 	.word	0x08011f98
 80079f8:	08011dc8 	.word	0x08011dc8

080079fc <lwip_netconn_is_err_msg>:
{
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4604      	mov	r4, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8007a00:	460d      	mov	r5, r1
 8007a02:	b179      	cbz	r1, 8007a24 <lwip_netconn_is_err_msg+0x28>
  if (msg == &netconn_aborted) {
 8007a04:	4b0e      	ldr	r3, [pc, #56]	@ (8007a40 <lwip_netconn_is_err_msg+0x44>)
 8007a06:	429c      	cmp	r4, r3
 8007a08:	d007      	beq.n	8007a1a <lwip_netconn_is_err_msg+0x1e>
  } else if (msg == &netconn_reset) {
 8007a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8007a44 <lwip_netconn_is_err_msg+0x48>)
 8007a0c:	429c      	cmp	r4, r3
 8007a0e:	d010      	beq.n	8007a32 <lwip_netconn_is_err_msg+0x36>
  } else if (msg == &netconn_closed) {
 8007a10:	4b0d      	ldr	r3, [pc, #52]	@ (8007a48 <lwip_netconn_is_err_msg+0x4c>)
 8007a12:	429c      	cmp	r4, r3
 8007a14:	d010      	beq.n	8007a38 <lwip_netconn_is_err_msg+0x3c>
  return 0;
 8007a16:	2000      	movs	r0, #0
}
 8007a18:	bd38      	pop	{r3, r4, r5, pc}
 8007a1a:	f06f 030c 	mvn.w	r3, #12
    return 1;
 8007a1e:	2001      	movs	r0, #1
    *err = ERR_RST;
 8007a20:	702b      	strb	r3, [r5, #0]
}
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("err != NULL", err != NULL);
 8007a24:	4b09      	ldr	r3, [pc, #36]	@ (8007a4c <lwip_netconn_is_err_msg+0x50>)
 8007a26:	2285      	movs	r2, #133	@ 0x85
 8007a28:	4909      	ldr	r1, [pc, #36]	@ (8007a50 <lwip_netconn_is_err_msg+0x54>)
 8007a2a:	480a      	ldr	r0, [pc, #40]	@ (8007a54 <lwip_netconn_is_err_msg+0x58>)
 8007a2c:	f008 fa82 	bl	800ff34 <iprintf>
 8007a30:	e7e8      	b.n	8007a04 <lwip_netconn_is_err_msg+0x8>
 8007a32:	f06f 030d 	mvn.w	r3, #13
 8007a36:	e7f2      	b.n	8007a1e <lwip_netconn_is_err_msg+0x22>
 8007a38:	f06f 030e 	mvn.w	r3, #14
 8007a3c:	e7ef      	b.n	8007a1e <lwip_netconn_is_err_msg+0x22>
 8007a3e:	bf00      	nop
 8007a40:	0801212e 	.word	0x0801212e
 8007a44:	0801212d 	.word	0x0801212d
 8007a48:	0801212c 	.word	0x0801212c
 8007a4c:	08011d10 	.word	0x08011d10
 8007a50:	08011fd0 	.word	0x08011fd0
 8007a54:	080110dc 	.word	0x080110dc

08007a58 <lwip_netconn_do_newconn>:
{
 8007a58:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8007a5a:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8007a5c:	6805      	ldr	r5, [r0, #0]
{
 8007a5e:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8007a60:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8007a62:	6868      	ldr	r0, [r5, #4]
 8007a64:	b100      	cbz	r0, 8007a68 <lwip_netconn_do_newconn+0x10>
}
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007a68:	782b      	ldrb	r3, [r5, #0]
 8007a6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a6e:	2b10      	cmp	r3, #16
 8007a70:	d016      	beq.n	8007aa0 <lwip_netconn_do_newconn+0x48>
 8007a72:	2b20      	cmp	r3, #32
 8007a74:	d11f      	bne.n	8007ab6 <lwip_netconn_do_newconn+0x5e>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8007a76:	f006 fb39 	bl	800e0ec <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 8007a7a:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8007a7c:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8007a7e:	6850      	ldr	r0, [r2, #4]
 8007a80:	b158      	cbz	r0, 8007a9a <lwip_netconn_do_newconn+0x42>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8007a82:	7813      	ldrb	r3, [r2, #0]
 8007a84:	2b22      	cmp	r3, #34	@ 0x22
 8007a86:	d101      	bne.n	8007a8c <lwip_netconn_do_newconn+0x34>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8007a88:	2301      	movs	r3, #1
 8007a8a:	7403      	strb	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8007a8c:	490b      	ldr	r1, [pc, #44]	@ (8007abc <lwip_netconn_do_newconn+0x64>)
 8007a8e:	f006 fae3 	bl	800e058 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e5      	bne.n	8007a66 <lwip_netconn_do_newconn+0xe>
    msg->err = ERR_MEM;
 8007a9a:	23ff      	movs	r3, #255	@ 0xff
 8007a9c:	7123      	strb	r3, [r4, #4]
}
 8007a9e:	bd38      	pop	{r3, r4, r5, pc}
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8007aa0:	f002 ffd8 	bl	800aa54 <tcp_new_ip_type>
      if (msg->conn->pcb.tcp != NULL) {
 8007aa4:	6823      	ldr	r3, [r4, #0]
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8007aa6:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	2a00      	cmp	r2, #0
 8007aac:	d0f5      	beq.n	8007a9a <lwip_netconn_do_newconn+0x42>
        setup_tcp(msg->conn);
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff fae4 	bl	800707c <setup_tcp>
 8007ab4:	e7ed      	b.n	8007a92 <lwip_netconn_do_newconn+0x3a>
      msg->err = ERR_VAL;
 8007ab6:	23fa      	movs	r3, #250	@ 0xfa
 8007ab8:	7123      	strb	r3, [r4, #4]
}
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	08006fc5 	.word	0x08006fc5

08007ac0 <netconn_alloc>:
{
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007ac4:	2007      	movs	r0, #7
{
 8007ac6:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007ac8:	f001 f86a 	bl	8008ba0 <memp_malloc>
  if (conn == NULL) {
 8007acc:	b380      	cbz	r0, 8007b30 <netconn_alloc+0x70>
  conn->pending_err = ERR_OK;
 8007ace:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	4604      	mov	r4, r0
  conn->type = t;
 8007ad6:	7005      	strb	r5, [r0, #0]
  switch (NETCONNTYPE_GROUP(t)) {
 8007ad8:	2b10      	cmp	r3, #16
  conn->pending_err = ERR_OK;
 8007ada:	7202      	strb	r2, [r0, #8]
  conn->pcb.tcp = NULL;
 8007adc:	6042      	str	r2, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8007ade:	d001      	beq.n	8007ae4 <netconn_alloc+0x24>
 8007ae0:	2b20      	cmp	r3, #32
 8007ae2:	d11a      	bne.n	8007b1a <netconn_alloc+0x5a>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8007ae4:	f104 0710 	add.w	r7, r4, #16
 8007ae8:	2106      	movs	r1, #6
 8007aea:	4638      	mov	r0, r7
 8007aec:	f007 fef6 	bl	800f8dc <sys_mbox_new>
 8007af0:	4601      	mov	r1, r0
 8007af2:	b9c8      	cbnz	r0, 8007b28 <netconn_alloc+0x68>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8007af4:	f104 000c 	add.w	r0, r4, #12
 8007af8:	f007 ff4c 	bl	800f994 <sys_sem_new>
 8007afc:	4605      	mov	r5, r0
 8007afe:	b9d0      	cbnz	r0, 8007b36 <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8007b00:	f104 0014 	add.w	r0, r4, #20
 8007b04:	f007 ff42 	bl	800f98c <sys_mbox_set_invalid>
  conn->socket       = -1;
 8007b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b0c:	4620      	mov	r0, r4
  conn->state        = NETCONN_NONE;
 8007b0e:	7065      	strb	r5, [r4, #1]
  conn->callback     = callback;
 8007b10:	6266      	str	r6, [r4, #36]	@ 0x24
  conn->socket       = -1;
 8007b12:	61a3      	str	r3, [r4, #24]
  conn->current_msg  = NULL;
 8007b14:	6225      	str	r5, [r4, #32]
  conn->flags = init_flags;
 8007b16:	7725      	strb	r5, [r4, #28]
}
 8007b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8007b1a:	4b09      	ldr	r3, [pc, #36]	@ (8007b40 <netconn_alloc+0x80>)
 8007b1c:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8007b20:	4908      	ldr	r1, [pc, #32]	@ (8007b44 <netconn_alloc+0x84>)
 8007b22:	4809      	ldr	r0, [pc, #36]	@ (8007b48 <netconn_alloc+0x88>)
 8007b24:	f008 fa06 	bl	800ff34 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8007b28:	4621      	mov	r1, r4
 8007b2a:	2007      	movs	r0, #7
 8007b2c:	f001 f87e 	bl	8008c2c <memp_free>
    return NULL;
 8007b30:	2400      	movs	r4, #0
}
 8007b32:	4620      	mov	r0, r4
 8007b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys_mbox_free(&conn->recvmbox);
 8007b36:	4638      	mov	r0, r7
 8007b38:	f007 fede 	bl	800f8f8 <sys_mbox_free>
    goto free_and_return;
 8007b3c:	e7f4      	b.n	8007b28 <netconn_alloc+0x68>
 8007b3e:	bf00      	nop
 8007b40:	08011d10 	.word	0x08011d10
 8007b44:	08011fdc 	.word	0x08011fdc
 8007b48:	080110dc 	.word	0x080110dc

08007b4c <netconn_free>:
{
 8007b4c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007b4e:	6843      	ldr	r3, [r0, #4]
{
 8007b50:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007b52:	b133      	cbz	r3, 8007b62 <netconn_free+0x16>
 8007b54:	4b19      	ldr	r3, [pc, #100]	@ (8007bbc <netconn_free+0x70>)
 8007b56:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8007b5a:	4919      	ldr	r1, [pc, #100]	@ (8007bc0 <netconn_free+0x74>)
 8007b5c:	4819      	ldr	r0, [pc, #100]	@ (8007bc4 <netconn_free+0x78>)
 8007b5e:	f008 f9e9 	bl	800ff34 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8007b62:	f104 0010 	add.w	r0, r4, #16
 8007b66:	f007 ff0b 	bl	800f980 <sys_mbox_valid>
 8007b6a:	b990      	cbnz	r0, 8007b92 <netconn_free+0x46>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8007b6c:	f104 0014 	add.w	r0, r4, #20
 8007b70:	f007 ff06 	bl	800f980 <sys_mbox_valid>
 8007b74:	b9d0      	cbnz	r0, 8007bac <netconn_free+0x60>
  sys_sem_free(&conn->op_completed);
 8007b76:	f104 050c 	add.w	r5, r4, #12
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f007 ff3e 	bl	800f9fc <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8007b80:	4628      	mov	r0, r5
 8007b82:	f007 ff45 	bl	800fa10 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8007b86:	4621      	mov	r1, r4
 8007b88:	2007      	movs	r0, #7
}
 8007b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_NETCONN, conn);
 8007b8e:	f001 b84d 	b.w	8008c2c <memp_free>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8007b92:	4b0a      	ldr	r3, [pc, #40]	@ (8007bbc <netconn_free+0x70>)
 8007b94:	f240 3223 	movw	r2, #803	@ 0x323
 8007b98:	490b      	ldr	r1, [pc, #44]	@ (8007bc8 <netconn_free+0x7c>)
 8007b9a:	480a      	ldr	r0, [pc, #40]	@ (8007bc4 <netconn_free+0x78>)
 8007b9c:	f008 f9ca 	bl	800ff34 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8007ba0:	f104 0014 	add.w	r0, r4, #20
 8007ba4:	f007 feec 	bl	800f980 <sys_mbox_valid>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d0e4      	beq.n	8007b76 <netconn_free+0x2a>
 8007bac:	4b03      	ldr	r3, [pc, #12]	@ (8007bbc <netconn_free+0x70>)
 8007bae:	f240 3226 	movw	r2, #806	@ 0x326
 8007bb2:	4906      	ldr	r1, [pc, #24]	@ (8007bcc <netconn_free+0x80>)
 8007bb4:	4803      	ldr	r0, [pc, #12]	@ (8007bc4 <netconn_free+0x78>)
 8007bb6:	f008 f9bd 	bl	800ff34 <iprintf>
 8007bba:	e7dc      	b.n	8007b76 <netconn_free+0x2a>
 8007bbc:	08011d10 	.word	0x08011d10
 8007bc0:	08012004 	.word	0x08012004
 8007bc4:	080110dc 	.word	0x080110dc
 8007bc8:	08012034 	.word	0x08012034
 8007bcc:	08012070 	.word	0x08012070

08007bd0 <netconn_drain>:
{
 8007bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8007bd4:	f100 0610 	add.w	r6, r0, #16
{
 8007bd8:	b082      	sub	sp, #8
 8007bda:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8007bdc:	4630      	mov	r0, r6
 8007bde:	f007 fecf 	bl	800f980 <sys_mbox_valid>
 8007be2:	b300      	cbz	r0, 8007c26 <netconn_drain+0x56>
 8007be4:	ad01      	add	r5, sp, #4
  } else if (msg == &netconn_reset) {
 8007be6:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8007cac <netconn_drain+0xdc>
  if (msg == &netconn_aborted) {
 8007bea:	4f2f      	ldr	r7, [pc, #188]	@ (8007ca8 <netconn_drain+0xd8>)
  } else if (msg == &netconn_closed) {
 8007bec:	f8df 90c0 	ldr.w	r9, [pc, #192]	@ 8007cb0 <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f007 feb8 	bl	800f968 <sys_arch_mbox_tryfetch>
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d00e      	beq.n	8007c1a <netconn_drain+0x4a>
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007bfc:	7823      	ldrb	r3, [r4, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8007bfe:	9a01      	ldr	r2, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007c00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          netbuf_delete((struct netbuf *)mem);
 8007c04:	4610      	mov	r0, r2
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007c06:	2b10      	cmp	r3, #16
 8007c08:	d045      	beq.n	8007c96 <netconn_drain+0xc6>
          netbuf_delete((struct netbuf *)mem);
 8007c0a:	f000 fabb 	bl	8008184 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8007c0e:	4629      	mov	r1, r5
 8007c10:	4630      	mov	r0, r6
 8007c12:	f007 fea9 	bl	800f968 <sys_arch_mbox_tryfetch>
 8007c16:	3001      	adds	r0, #1
 8007c18:	d1f0      	bne.n	8007bfc <netconn_drain+0x2c>
    sys_mbox_free(&conn->recvmbox);
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f007 fe6c 	bl	800f8f8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8007c20:	4630      	mov	r0, r6
 8007c22:	f007 feb3 	bl	800f98c <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8007c26:	3414      	adds	r4, #20
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f007 fea9 	bl	800f980 <sys_mbox_valid>
 8007c2e:	b378      	cbz	r0, 8007c90 <netconn_drain+0xc0>
 8007c30:	ad01      	add	r5, sp, #4
  if (msg == &netconn_aborted) {
 8007c32:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 8007ca8 <netconn_drain+0xd8>
  } else if (msg == &netconn_reset) {
 8007c36:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8007cac <netconn_drain+0xdc>
  } else if (msg == &netconn_closed) {
 8007c3a:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8007cb0 <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007c3e:	4629      	mov	r1, r5
 8007c40:	4620      	mov	r0, r4
 8007c42:	f007 fe91 	bl	800f968 <sys_arch_mbox_tryfetch>
 8007c46:	3001      	adds	r0, #1
 8007c48:	d01c      	beq.n	8007c84 <netconn_drain+0xb4>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8007c4a:	9e01      	ldr	r6, [sp, #4]
  } else if (msg == &netconn_closed) {
 8007c4c:	4546      	cmp	r6, r8
 8007c4e:	bf18      	it	ne
 8007c50:	454e      	cmpne	r6, r9
          netconn_drain(newconn);
 8007c52:	4630      	mov	r0, r6
  } else if (msg == &netconn_closed) {
 8007c54:	d0f3      	beq.n	8007c3e <netconn_drain+0x6e>
 8007c56:	eba6 070a 	sub.w	r7, r6, sl
 8007c5a:	fab7 f787 	clz	r7, r7
 8007c5e:	097f      	lsrs	r7, r7, #5
 8007c60:	2f00      	cmp	r7, #0
 8007c62:	d1ec      	bne.n	8007c3e <netconn_drain+0x6e>
          netconn_drain(newconn);
 8007c64:	f7ff ffb4 	bl	8007bd0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8007c68:	6870      	ldr	r0, [r6, #4]
 8007c6a:	b110      	cbz	r0, 8007c72 <netconn_drain+0xa2>
            tcp_abort(newconn->pcb.tcp);
 8007c6c:	f002 fde4 	bl	800a838 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8007c70:	6077      	str	r7, [r6, #4]
          netconn_free(newconn);
 8007c72:	4630      	mov	r0, r6
 8007c74:	f7ff ff6a 	bl	8007b4c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007c78:	4629      	mov	r1, r5
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f007 fe74 	bl	800f968 <sys_arch_mbox_tryfetch>
 8007c80:	3001      	adds	r0, #1
 8007c82:	d1e2      	bne.n	8007c4a <netconn_drain+0x7a>
    sys_mbox_free(&conn->acceptmbox);
 8007c84:	4620      	mov	r0, r4
 8007c86:	f007 fe37 	bl	800f8f8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f007 fe7e 	bl	800f98c <sys_mbox_set_invalid>
}
 8007c90:	b002      	add	sp, #8
 8007c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (msg == &netconn_closed) {
 8007c96:	42ba      	cmp	r2, r7
 8007c98:	bf18      	it	ne
 8007c9a:	4542      	cmpne	r2, r8
 8007c9c:	d0a8      	beq.n	8007bf0 <netconn_drain+0x20>
 8007c9e:	454a      	cmp	r2, r9
 8007ca0:	d0a6      	beq.n	8007bf0 <netconn_drain+0x20>
            pbuf_free((struct pbuf *)mem);
 8007ca2:	f001 facf 	bl	8009244 <pbuf_free>
 8007ca6:	e7a3      	b.n	8007bf0 <netconn_drain+0x20>
 8007ca8:	0801212e 	.word	0x0801212e
 8007cac:	0801212d 	.word	0x0801212d
 8007cb0:	0801212c 	.word	0x0801212c

08007cb4 <accept_function>:
{
 8007cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (conn == NULL) {
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d066      	beq.n	8007d88 <accept_function+0xd4>
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8007cba:	f100 0714 	add.w	r7, r0, #20
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	460d      	mov	r5, r1
 8007cc2:	4616      	mov	r6, r2
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f007 fe5b 	bl	800f980 <sys_mbox_valid>
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d05c      	beq.n	8007d88 <accept_function+0xd4>
  if (newpcb == NULL) {
 8007cce:	2d00      	cmp	r5, #0
 8007cd0:	d054      	beq.n	8007d7c <accept_function+0xc8>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8007cd2:	b9be      	cbnz	r6, 8007d04 <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 8007cd4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007cd6:	7820      	ldrb	r0, [r4, #0]
 8007cd8:	f7ff fef2 	bl	8007ac0 <netconn_alloc>
  if (newconn == NULL) {
 8007cdc:	4606      	mov	r6, r0
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d03e      	beq.n	8007d60 <accept_function+0xac>
  newconn->pcb.tcp = newpcb;
 8007ce2:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 8007ce4:	f7ff f9ca 	bl	800707c <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4638      	mov	r0, r7
 8007cec:	f007 fe0e 	bl	800f90c <sys_mbox_trypost>
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	b978      	cbnz	r0, 8007d14 <accept_function+0x60>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007cf4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007cf6:	b11b      	cbz	r3, 8007d00 <accept_function+0x4c>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	4798      	blx	r3
}
 8007d00:	4628      	mov	r0, r5
 8007d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8007d04:	4b25      	ldr	r3, [pc, #148]	@ (8007d9c <accept_function+0xe8>)
 8007d06:	f240 222a 	movw	r2, #554	@ 0x22a
 8007d0a:	4925      	ldr	r1, [pc, #148]	@ (8007da0 <accept_function+0xec>)
 8007d0c:	4825      	ldr	r0, [pc, #148]	@ (8007da4 <accept_function+0xf0>)
 8007d0e:	f008 f911 	bl	800ff34 <iprintf>
 8007d12:	e7df      	b.n	8007cd4 <accept_function+0x20>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8007d14:	6874      	ldr	r4, [r6, #4]
    tcp_arg(pcb, NULL);
 8007d16:	2100      	movs	r1, #0
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f002 f8c9 	bl	8009eb0 <tcp_arg>
    tcp_recv(pcb, NULL);
 8007d1e:	4620      	mov	r0, r4
 8007d20:	2100      	movs	r1, #0
 8007d22:	f002 f8cd 	bl	8009ec0 <tcp_recv>
    tcp_sent(pcb, NULL);
 8007d26:	4620      	mov	r0, r4
 8007d28:	2100      	movs	r1, #0
 8007d2a:	f002 f8e3 	bl	8009ef4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	4620      	mov	r0, r4
 8007d32:	4611      	mov	r1, r2
 8007d34:	f002 f91e 	bl	8009f74 <tcp_poll>
    tcp_err(pcb, NULL);
 8007d38:	2100      	movs	r1, #0
 8007d3a:	4620      	mov	r0, r4
    sys_mbox_free(&newconn->recvmbox);
 8007d3c:	f106 0410 	add.w	r4, r6, #16
    tcp_err(pcb, NULL);
 8007d40:	f002 f8f2 	bl	8009f28 <tcp_err>
    newconn->pcb.tcp = NULL;
 8007d44:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8007d46:	4620      	mov	r0, r4
    newconn->pcb.tcp = NULL;
 8007d48:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8007d4a:	f007 fdd5 	bl	800f8f8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f007 fe1c 	bl	800f98c <sys_mbox_set_invalid>
    netconn_free(newconn);
 8007d54:	4630      	mov	r0, r6
 8007d56:	f7ff fef9 	bl	8007b4c <netconn_free>
    return ERR_MEM;
 8007d5a:	f04f 35ff 	mov.w	r5, #4294967295
 8007d5e:	e7cf      	b.n	8007d00 <accept_function+0x4c>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8007d60:	4911      	ldr	r1, [pc, #68]	@ (8007da8 <accept_function+0xf4>)
 8007d62:	4638      	mov	r0, r7
 8007d64:	f007 fdd2 	bl	800f90c <sys_mbox_trypost>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d1f6      	bne.n	8007d5a <accept_function+0xa6>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007d6c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0f3      	beq.n	8007d5a <accept_function+0xa6>
 8007d72:	4602      	mov	r2, r0
 8007d74:	4601      	mov	r1, r0
 8007d76:	4620      	mov	r0, r4
 8007d78:	4798      	blx	r3
 8007d7a:	e7ee      	b.n	8007d5a <accept_function+0xa6>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8007d7c:	490a      	ldr	r1, [pc, #40]	@ (8007da8 <accept_function+0xf4>)
 8007d7e:	4638      	mov	r0, r7
 8007d80:	f007 fdc4 	bl	800f90c <sys_mbox_trypost>
 8007d84:	4602      	mov	r2, r0
 8007d86:	b110      	cbz	r0, 8007d8e <accept_function+0xda>
    return ERR_VAL;
 8007d88:	f06f 0505 	mvn.w	r5, #5
 8007d8c:	e7b8      	b.n	8007d00 <accept_function+0x4c>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007d8e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d0f9      	beq.n	8007d88 <accept_function+0xd4>
 8007d94:	4601      	mov	r1, r0
 8007d96:	4620      	mov	r0, r4
 8007d98:	4798      	blx	r3
 8007d9a:	e7f5      	b.n	8007d88 <accept_function+0xd4>
 8007d9c:	08011d10 	.word	0x08011d10
 8007da0:	080120ac 	.word	0x080120ac
 8007da4:	080110dc 	.word	0x080110dc
 8007da8:	0801212e 	.word	0x0801212e

08007dac <lwip_netconn_do_delconn>:
{
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 8007db0:	6800      	ldr	r0, [r0, #0]
 8007db2:	7845      	ldrb	r5, [r0, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8007db4:	b195      	cbz	r5, 8007ddc <lwip_netconn_do_delconn+0x30>
 8007db6:	7803      	ldrb	r3, [r0, #0]
 8007db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007dbc:	2b10      	cmp	r3, #16
 8007dbe:	d135      	bne.n	8007e2c <lwip_netconn_do_delconn+0x80>
  if (((state != NETCONN_NONE) &&
 8007dc0:	2d02      	cmp	r5, #2
 8007dc2:	d00b      	beq.n	8007ddc <lwip_netconn_do_delconn+0x30>
       (state != NETCONN_LISTEN) &&
 8007dc4:	2d03      	cmp	r5, #3
 8007dc6:	d006      	beq.n	8007dd6 <lwip_netconn_do_delconn+0x2a>
    msg->err = ERR_INPROGRESS;
 8007dc8:	23fb      	movs	r3, #251	@ 0xfb
 8007dca:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8007dcc:	300c      	adds	r0, #12
}
 8007dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8007dd2:	f007 be17 	b.w	800fa04 <sys_sem_valid>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8007dd6:	7f03      	ldrb	r3, [r0, #28]
 8007dd8:	075b      	lsls	r3, r3, #29
 8007dda:	d5f5      	bpl.n	8007dc8 <lwip_netconn_do_delconn+0x1c>
    msg->err = ERR_OK;
 8007ddc:	2500      	movs	r5, #0
 8007dde:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8007de0:	f7ff fef6 	bl	8007bd0 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8007de4:	6820      	ldr	r0, [r4, #0]
 8007de6:	6842      	ldr	r2, [r0, #4]
 8007de8:	b16a      	cbz	r2, 8007e06 <lwip_netconn_do_delconn+0x5a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007dea:	7803      	ldrb	r3, [r0, #0]
 8007dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007df0:	2b10      	cmp	r3, #16
 8007df2:	d024      	beq.n	8007e3e <lwip_netconn_do_delconn+0x92>
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	d104      	bne.n	8007e02 <lwip_netconn_do_delconn+0x56>
          udp_remove(msg->conn->pcb.udp);
 8007df8:	4610      	mov	r0, r2
          msg->conn->pcb.udp->recv_arg = NULL;
 8007dfa:	61d5      	str	r5, [r2, #28]
          udp_remove(msg->conn->pcb.udp);
 8007dfc:	f006 f946 	bl	800e08c <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8007e00:	6820      	ldr	r0, [r4, #0]
 8007e02:	2300      	movs	r3, #0
 8007e04:	6043      	str	r3, [r0, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8007e06:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0df      	beq.n	8007dcc <lwip_netconn_do_delconn+0x20>
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8007e12:	6820      	ldr	r0, [r4, #0]
 8007e14:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0d8      	beq.n	8007dcc <lwip_netconn_do_delconn+0x20>
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2102      	movs	r1, #2
 8007e1e:	4798      	blx	r3
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8007e20:	6820      	ldr	r0, [r4, #0]
}
 8007e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8007e26:	300c      	adds	r0, #12
 8007e28:	f007 bdec 	b.w	800fa04 <sys_sem_valid>
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8007e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8007ea8 <lwip_netconn_do_delconn+0xfc>)
 8007e2e:	f240 425e 	movw	r2, #1118	@ 0x45e
 8007e32:	491e      	ldr	r1, [pc, #120]	@ (8007eac <lwip_netconn_do_delconn+0x100>)
 8007e34:	481e      	ldr	r0, [pc, #120]	@ (8007eb0 <lwip_netconn_do_delconn+0x104>)
 8007e36:	f008 f87d 	bl	800ff34 <iprintf>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8007e3a:	6820      	ldr	r0, [r4, #0]
 8007e3c:	e7c0      	b.n	8007dc0 <lwip_netconn_do_delconn+0x14>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007e3e:	6a03      	ldr	r3, [r0, #32]
 8007e40:	b13b      	cbz	r3, 8007e52 <lwip_netconn_do_delconn+0xa6>
 8007e42:	4b19      	ldr	r3, [pc, #100]	@ (8007ea8 <lwip_netconn_do_delconn+0xfc>)
 8007e44:	f240 4294 	movw	r2, #1172	@ 0x494
 8007e48:	491a      	ldr	r1, [pc, #104]	@ (8007eb4 <lwip_netconn_do_delconn+0x108>)
 8007e4a:	4819      	ldr	r0, [pc, #100]	@ (8007eb0 <lwip_netconn_do_delconn+0x104>)
 8007e4c:	f008 f872 	bl	800ff34 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8007e50:	6820      	ldr	r0, [r4, #0]
 8007e52:	2204      	movs	r2, #4
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8007e54:	2303      	movs	r3, #3
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007e56:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 8007e58:	7042      	strb	r2, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8007e5a:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 8007e5c:	6204      	str	r4, [r0, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007e5e:	f7ff fad9 	bl	8007414 <lwip_netconn_do_close_internal>
 8007e62:	b178      	cbz	r0, 8007e84 <lwip_netconn_do_delconn+0xd8>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d10c      	bne.n	8007e86 <lwip_netconn_do_delconn+0xda>
            UNLOCK_TCPIP_CORE();
 8007e6c:	f7fc f926 	bl	80040bc <sys_unlock_tcpip_core>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007e70:	6820      	ldr	r0, [r4, #0]
 8007e72:	2100      	movs	r1, #0
 8007e74:	300c      	adds	r0, #12
 8007e76:	f007 fda1 	bl	800f9bc <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8007e7a:	f7fc f8a1 	bl	8003fc0 <sys_lock_tcpip_core>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	785b      	ldrb	r3, [r3, #1]
 8007e82:	b943      	cbnz	r3, 8007e96 <lwip_netconn_do_delconn+0xea>
}
 8007e84:	bd70      	pop	{r4, r5, r6, pc}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8007e86:	4b08      	ldr	r3, [pc, #32]	@ (8007ea8 <lwip_netconn_do_delconn+0xfc>)
 8007e88:	f240 429a 	movw	r2, #1178	@ 0x49a
 8007e8c:	490a      	ldr	r1, [pc, #40]	@ (8007eb8 <lwip_netconn_do_delconn+0x10c>)
 8007e8e:	4808      	ldr	r0, [pc, #32]	@ (8007eb0 <lwip_netconn_do_delconn+0x104>)
 8007e90:	f008 f850 	bl	800ff34 <iprintf>
 8007e94:	e7ea      	b.n	8007e6c <lwip_netconn_do_delconn+0xc0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007e96:	4b04      	ldr	r3, [pc, #16]	@ (8007ea8 <lwip_netconn_do_delconn+0xfc>)
 8007e98:	f240 429e 	movw	r2, #1182	@ 0x49e
 8007e9c:	4906      	ldr	r1, [pc, #24]	@ (8007eb8 <lwip_netconn_do_delconn+0x10c>)
 8007e9e:	4804      	ldr	r0, [pc, #16]	@ (8007eb0 <lwip_netconn_do_delconn+0x104>)
}
 8007ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007ea4:	f008 b846 	b.w	800ff34 <iprintf>
 8007ea8:	08011d10 	.word	0x08011d10
 8007eac:	080120d4 	.word	0x080120d4
 8007eb0:	080110dc 	.word	0x080110dc
 8007eb4:	080120e8 	.word	0x080120e8
 8007eb8:	08012104 	.word	0x08012104

08007ebc <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 8007ebc:	6803      	ldr	r3, [r0, #0]
{
 8007ebe:	b510      	push	{r4, lr}
 8007ec0:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8007ec2:	6858      	ldr	r0, [r3, #4]
 8007ec4:	b130      	cbz	r0, 8007ed4 <lwip_netconn_do_bind+0x18>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ecc:	2b10      	cmp	r3, #16
 8007ece:	d00b      	beq.n	8007ee8 <lwip_netconn_do_bind+0x2c>
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	d003      	beq.n	8007edc <lwip_netconn_do_bind+0x20>
 8007ed4:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 8007ed8:	7120      	strb	r0, [r4, #4]
}
 8007eda:	bd10      	pop	{r4, pc}
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007edc:	89a2      	ldrh	r2, [r4, #12]
 8007ede:	68a1      	ldr	r1, [r4, #8]
 8007ee0:	f006 f83a 	bl	800df58 <udp_bind>
  msg->err = err;
 8007ee4:	7120      	strb	r0, [r4, #4]
}
 8007ee6:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007ee8:	89a2      	ldrh	r2, [r4, #12]
 8007eea:	68a1      	ldr	r1, [r4, #8]
 8007eec:	f001 fd78 	bl	80099e0 <tcp_bind>
  msg->err = err;
 8007ef0:	7120      	strb	r0, [r4, #4]
}
 8007ef2:	bd10      	pop	{r4, pc}

08007ef4 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 8007ef4:	6803      	ldr	r3, [r0, #0]
{
 8007ef6:	b530      	push	{r4, r5, lr}
 8007ef8:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8007efa:	6858      	ldr	r0, [r3, #4]
{
 8007efc:	b083      	sub	sp, #12
  if (msg->conn->pcb.tcp != NULL) {
 8007efe:	b180      	cbz	r0, 8007f22 <lwip_netconn_do_listen+0x2e>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007f00:	781a      	ldrb	r2, [r3, #0]
 8007f02:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8007f06:	2a10      	cmp	r2, #16
 8007f08:	d004      	beq.n	8007f14 <lwip_netconn_do_listen+0x20>
 8007f0a:	f06f 030f 	mvn.w	r3, #15
  msg->err = err;
 8007f0e:	7123      	strb	r3, [r4, #4]
}
 8007f10:	b003      	add	sp, #12
 8007f12:	bd30      	pop	{r4, r5, pc}
      if (msg->conn->state == NETCONN_NONE) {
 8007f14:	785b      	ldrb	r3, [r3, #1]
 8007f16:	b94b      	cbnz	r3, 8007f2c <lwip_netconn_do_listen+0x38>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8007f18:	7d03      	ldrb	r3, [r0, #20]
 8007f1a:	b17b      	cbz	r3, 8007f3c <lwip_netconn_do_listen+0x48>
 8007f1c:	f06f 0305 	mvn.w	r3, #5
 8007f20:	e7f5      	b.n	8007f0e <lwip_netconn_do_listen+0x1a>
 8007f22:	f06f 030a 	mvn.w	r3, #10
  msg->err = err;
 8007f26:	7123      	strb	r3, [r4, #4]
}
 8007f28:	b003      	add	sp, #12
 8007f2a:	bd30      	pop	{r4, r5, pc}
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	bf14      	ite	ne
 8007f30:	f06f 030a 	mvnne.w	r3, #10
 8007f34:	2300      	moveq	r3, #0
  msg->err = err;
 8007f36:	7123      	strb	r3, [r4, #4]
}
 8007f38:	b003      	add	sp, #12
 8007f3a:	bd30      	pop	{r4, r5, pc}
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8007f3c:	f10d 0207 	add.w	r2, sp, #7
 8007f40:	21ff      	movs	r1, #255	@ 0xff
 8007f42:	f001 fdb5 	bl	8009ab0 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 8007f46:	4605      	mov	r5, r0
 8007f48:	b1d8      	cbz	r0, 8007f82 <lwip_netconn_do_listen+0x8e>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8007f4a:	6820      	ldr	r0, [r4, #0]
 8007f4c:	3010      	adds	r0, #16
 8007f4e:	f007 fd17 	bl	800f980 <sys_mbox_valid>
 8007f52:	bb50      	cbnz	r0, 8007faa <lwip_netconn_do_listen+0xb6>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8007f54:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 8007f56:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8007f58:	3014      	adds	r0, #20
            err = ERR_OK;
 8007f5a:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8007f5e:	f007 fd0f 	bl	800f980 <sys_mbox_valid>
 8007f62:	b1d0      	cbz	r0, 8007f9a <lwip_netconn_do_listen+0xa6>
            if (err == ERR_OK) {
 8007f64:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 8007f68:	b970      	cbnz	r0, 8007f88 <lwip_netconn_do_listen+0x94>
              msg->conn->state = NETCONN_LISTEN;
 8007f6a:	6821      	ldr	r1, [r4, #0]
 8007f6c:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8007f6e:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 8007f70:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 8007f72:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8007f74:	f001 ff9c 	bl	8009eb0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	4910      	ldr	r1, [pc, #64]	@ (8007fbc <lwip_netconn_do_listen+0xc8>)
 8007f7c:	6858      	ldr	r0, [r3, #4]
 8007f7e:	f001 ffed 	bl	8009f5c <tcp_accept>
  msg->err = err;
 8007f82:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8007f86:	e7c2      	b.n	8007f0e <lwip_netconn_do_listen+0x1a>
              tcp_close(lpcb);
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f002 fe35 	bl	800abf8 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8007f8e:	6822      	ldr	r2, [r4, #0]
 8007f90:	2100      	movs	r1, #0
  msg->err = err;
 8007f92:	f99d 3007 	ldrsb.w	r3, [sp, #7]
              msg->conn->pcb.tcp = NULL;
 8007f96:	6051      	str	r1, [r2, #4]
 8007f98:	e7b9      	b.n	8007f0e <lwip_netconn_do_listen+0x1a>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8007f9a:	6820      	ldr	r0, [r4, #0]
 8007f9c:	2106      	movs	r1, #6
 8007f9e:	3014      	adds	r0, #20
 8007fa0:	f007 fc9c 	bl	800f8dc <sys_mbox_new>
 8007fa4:	f88d 0007 	strb.w	r0, [sp, #7]
 8007fa8:	e7de      	b.n	8007f68 <lwip_netconn_do_listen+0x74>
              sys_mbox_free(&msg->conn->recvmbox);
 8007faa:	6820      	ldr	r0, [r4, #0]
 8007fac:	3010      	adds	r0, #16
 8007fae:	f007 fca3 	bl	800f8f8 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8007fb2:	6820      	ldr	r0, [r4, #0]
 8007fb4:	3010      	adds	r0, #16
 8007fb6:	f007 fce9 	bl	800f98c <sys_mbox_set_invalid>
 8007fba:	e7cb      	b.n	8007f54 <lwip_netconn_do_listen+0x60>
 8007fbc:	08007cb5 	.word	0x08007cb5

08007fc0 <lwip_netconn_do_recv>:
{
 8007fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8007fc2:	2200      	movs	r2, #0
  if (msg->conn->pcb.tcp != NULL) {
 8007fc4:	6803      	ldr	r3, [r0, #0]
{
 8007fc6:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 8007fc8:	7102      	strb	r2, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8007fca:	6858      	ldr	r0, [r3, #4]
 8007fcc:	b120      	cbz	r0, 8007fd8 <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007fd4:	2b10      	cmp	r3, #16
 8007fd6:	d000      	beq.n	8007fda <lwip_netconn_do_recv+0x1a>
}
 8007fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      size_t remaining = msg->msg.r.len;
 8007fda:	68b4      	ldr	r4, [r6, #8]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8007fdc:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8007fe0:	e001      	b.n	8007fe6 <lwip_netconn_do_recv+0x26>
        tcp_recved(msg->conn->pcb.tcp, recved);
 8007fe2:	6833      	ldr	r3, [r6, #0]
 8007fe4:	6858      	ldr	r0, [r3, #4]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8007fe6:	42bc      	cmp	r4, r7
 8007fe8:	4625      	mov	r5, r4
 8007fea:	bf28      	it	cs
 8007fec:	463d      	movcs	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 8007fee:	b2a9      	uxth	r1, r5
 8007ff0:	f001 fe28 	bl	8009c44 <tcp_recved>
      } while (remaining != 0);
 8007ff4:	1b64      	subs	r4, r4, r5
 8007ff6:	d1f4      	bne.n	8007fe2 <lwip_netconn_do_recv+0x22>
}
 8007ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ffa:	bf00      	nop

08007ffc <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8007ffc:	b510      	push	{r4, lr}
 8007ffe:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 8008000:	6800      	ldr	r0, [r0, #0]
 8008002:	f7fe ffcf 	bl	8006fa4 <netconn_err>
  if (err == ERR_OK) {
 8008006:	b938      	cbnz	r0, 8008018 <lwip_netconn_do_write+0x1c>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008008:	6822      	ldr	r2, [r4, #0]
 800800a:	7813      	ldrb	r3, [r2, #0]
 800800c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008010:	2b10      	cmp	r3, #16
 8008012:	d003      	beq.n	800801c <lwip_netconn_do_write+0x20>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8008014:	f06f 0005 	mvn.w	r0, #5
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8008018:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800801a:	bd10      	pop	{r4, pc}
      if (msg->conn->state != NETCONN_NONE) {
 800801c:	7853      	ldrb	r3, [r2, #1]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d137      	bne.n	8008092 <lwip_netconn_do_write+0x96>
      } else if (msg->conn->pcb.tcp != NULL) {
 8008022:	6853      	ldr	r3, [r2, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d038      	beq.n	800809a <lwip_netconn_do_write+0x9e>
        msg->conn->state = NETCONN_WRITE;
 8008028:	2101      	movs	r1, #1
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800802a:	6a13      	ldr	r3, [r2, #32]
        msg->conn->state = NETCONN_WRITE;
 800802c:	7051      	strb	r1, [r2, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800802e:	b133      	cbz	r3, 800803e <lwip_netconn_do_write+0x42>
 8008030:	4b20      	ldr	r3, [pc, #128]	@ (80080b4 <lwip_netconn_do_write+0xb8>)
 8008032:	f240 7223 	movw	r2, #1827	@ 0x723
 8008036:	4920      	ldr	r1, [pc, #128]	@ (80080b8 <lwip_netconn_do_write+0xbc>)
 8008038:	4820      	ldr	r0, [pc, #128]	@ (80080bc <lwip_netconn_do_write+0xc0>)
 800803a:	f007 ff7b 	bl	800ff34 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800803e:	6963      	ldr	r3, [r4, #20]
 8008040:	b37b      	cbz	r3, 80080a2 <lwip_netconn_do_write+0xa6>
        msg->conn->current_msg = msg;
 8008042:	6820      	ldr	r0, [r4, #0]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8008044:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8008046:	6204      	str	r4, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8008048:	f7ff f83a 	bl	80070c0 <lwip_netconn_do_writemore>
 800804c:	2800      	cmp	r0, #0
 800804e:	d0e4      	beq.n	800801a <lwip_netconn_do_write+0x1e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	785b      	ldrb	r3, [r3, #1]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d006      	beq.n	8008066 <lwip_netconn_do_write+0x6a>
 8008058:	4b16      	ldr	r3, [pc, #88]	@ (80080b4 <lwip_netconn_do_write+0xb8>)
 800805a:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800805e:	4918      	ldr	r1, [pc, #96]	@ (80080c0 <lwip_netconn_do_write+0xc4>)
 8008060:	4816      	ldr	r0, [pc, #88]	@ (80080bc <lwip_netconn_do_write+0xc0>)
 8008062:	f007 ff67 	bl	800ff34 <iprintf>
          UNLOCK_TCPIP_CORE();
 8008066:	f7fc f829 	bl	80040bc <sys_unlock_tcpip_core>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800806a:	6820      	ldr	r0, [r4, #0]
 800806c:	2100      	movs	r1, #0
 800806e:	300c      	adds	r0, #12
 8008070:	f007 fca4 	bl	800f9bc <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8008074:	f7fb ffa4 	bl	8003fc0 <sys_lock_tcpip_core>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	785b      	ldrb	r3, [r3, #1]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d1cc      	bne.n	800801a <lwip_netconn_do_write+0x1e>
 8008080:	4b0c      	ldr	r3, [pc, #48]	@ (80080b4 <lwip_netconn_do_write+0xb8>)
 8008082:	f240 722c 	movw	r2, #1836	@ 0x72c
 8008086:	490e      	ldr	r1, [pc, #56]	@ (80080c0 <lwip_netconn_do_write+0xc4>)
 8008088:	480c      	ldr	r0, [pc, #48]	@ (80080bc <lwip_netconn_do_write+0xc0>)
}
 800808a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800808e:	f007 bf51 	b.w	800ff34 <iprintf>
        err = ERR_INPROGRESS;
 8008092:	f06f 0004 	mvn.w	r0, #4
  msg->err = err;
 8008096:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8008098:	e7bf      	b.n	800801a <lwip_netconn_do_write+0x1e>
        err = ERR_CONN;
 800809a:	f06f 000a 	mvn.w	r0, #10
  msg->err = err;
 800809e:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 80080a0:	e7bb      	b.n	800801a <lwip_netconn_do_write+0x1e>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80080a2:	4b04      	ldr	r3, [pc, #16]	@ (80080b4 <lwip_netconn_do_write+0xb8>)
 80080a4:	f240 7224 	movw	r2, #1828	@ 0x724
 80080a8:	4906      	ldr	r1, [pc, #24]	@ (80080c4 <lwip_netconn_do_write+0xc8>)
 80080aa:	4804      	ldr	r0, [pc, #16]	@ (80080bc <lwip_netconn_do_write+0xc0>)
 80080ac:	f007 ff42 	bl	800ff34 <iprintf>
 80080b0:	e7c7      	b.n	8008042 <lwip_netconn_do_write+0x46>
 80080b2:	bf00      	nop
 80080b4:	08011d10 	.word	0x08011d10
 80080b8:	080120e8 	.word	0x080120e8
 80080bc:	080110dc 	.word	0x080110dc
 80080c0:	08012104 	.word	0x08012104
 80080c4:	0801210c 	.word	0x0801210c

080080c8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80080c8:	b510      	push	{r4, lr}
 80080ca:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80080cc:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80080ce:	6843      	ldr	r3, [r0, #4]
  enum netconn_state state = msg->conn->state;
 80080d0:	7842      	ldrb	r2, [r0, #1]
  if ((msg->conn->pcb.tcp != NULL) &&
 80080d2:	b123      	cbz	r3, 80080de <lwip_netconn_do_close+0x16>
 80080d4:	7803      	ldrb	r3, [r0, #0]
 80080d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080da:	2b10      	cmp	r3, #16
 80080dc:	d002      	beq.n	80080e4 <lwip_netconn_do_close+0x1c>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80080de:	23f5      	movs	r3, #245	@ 0xf5
 80080e0:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 80080e2:	bd10      	pop	{r4, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80080e4:	7a23      	ldrb	r3, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d039      	beq.n	800815e <lwip_netconn_do_close+0x96>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80080ea:	1e91      	subs	r1, r2, #2
 80080ec:	2901      	cmp	r1, #1
 80080ee:	d9f6      	bls.n	80080de <lwip_netconn_do_close+0x16>
    } else if (state == NETCONN_WRITE) {
 80080f0:	2a01      	cmp	r2, #1
 80080f2:	d038      	beq.n	8008166 <lwip_netconn_do_close+0x9e>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80080f4:	07db      	lsls	r3, r3, #31
 80080f6:	d439      	bmi.n	800816c <lwip_netconn_do_close+0xa4>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80080f8:	6a03      	ldr	r3, [r0, #32]
 80080fa:	b13b      	cbz	r3, 800810c <lwip_netconn_do_close+0x44>
 80080fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008174 <lwip_netconn_do_close+0xac>)
 80080fe:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8008102:	491d      	ldr	r1, [pc, #116]	@ (8008178 <lwip_netconn_do_close+0xb0>)
 8008104:	481d      	ldr	r0, [pc, #116]	@ (800817c <lwip_netconn_do_close+0xb4>)
 8008106:	f007 ff15 	bl	800ff34 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800810a:	6820      	ldr	r0, [r4, #0]
 800810c:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800810e:	2100      	movs	r1, #0
      msg->conn->current_msg = msg;
 8008110:	6204      	str	r4, [r0, #32]
      msg->conn->state = NETCONN_CLOSE;
 8008112:	7043      	strb	r3, [r0, #1]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008114:	f7ff f97e 	bl	8007414 <lwip_netconn_do_close_internal>
 8008118:	2800      	cmp	r0, #0
 800811a:	d0e2      	beq.n	80080e2 <lwip_netconn_do_close+0x1a>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	2b04      	cmp	r3, #4
 8008122:	d006      	beq.n	8008132 <lwip_netconn_do_close+0x6a>
 8008124:	4b13      	ldr	r3, [pc, #76]	@ (8008174 <lwip_netconn_do_close+0xac>)
 8008126:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800812a:	4915      	ldr	r1, [pc, #84]	@ (8008180 <lwip_netconn_do_close+0xb8>)
 800812c:	4813      	ldr	r0, [pc, #76]	@ (800817c <lwip_netconn_do_close+0xb4>)
 800812e:	f007 ff01 	bl	800ff34 <iprintf>
        UNLOCK_TCPIP_CORE();
 8008132:	f7fb ffc3 	bl	80040bc <sys_unlock_tcpip_core>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008136:	6820      	ldr	r0, [r4, #0]
 8008138:	2100      	movs	r1, #0
 800813a:	300c      	adds	r0, #12
 800813c:	f007 fc3e 	bl	800f9bc <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8008140:	f7fb ff3e 	bl	8003fc0 <sys_lock_tcpip_core>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	785b      	ldrb	r3, [r3, #1]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0ca      	beq.n	80080e2 <lwip_netconn_do_close+0x1a>
 800814c:	4b09      	ldr	r3, [pc, #36]	@ (8008174 <lwip_netconn_do_close+0xac>)
 800814e:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8008152:	490b      	ldr	r1, [pc, #44]	@ (8008180 <lwip_netconn_do_close+0xb8>)
 8008154:	4809      	ldr	r0, [pc, #36]	@ (800817c <lwip_netconn_do_close+0xb4>)
}
 8008156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800815a:	f007 beeb 	b.w	800ff34 <iprintf>
    if (state == NETCONN_CONNECT) {
 800815e:	2a03      	cmp	r2, #3
 8008160:	d0bd      	beq.n	80080de <lwip_netconn_do_close+0x16>
    } else if (state == NETCONN_WRITE) {
 8008162:	2a01      	cmp	r2, #1
 8008164:	d102      	bne.n	800816c <lwip_netconn_do_close+0xa4>
      msg->err = ERR_INPROGRESS;
 8008166:	23fb      	movs	r3, #251	@ 0xfb
 8008168:	7123      	strb	r3, [r4, #4]
}
 800816a:	bd10      	pop	{r4, pc}
        netconn_drain(msg->conn);
 800816c:	f7ff fd30 	bl	8007bd0 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008170:	6820      	ldr	r0, [r4, #0]
 8008172:	e7c1      	b.n	80080f8 <lwip_netconn_do_close+0x30>
 8008174:	08011d10 	.word	0x08011d10
 8008178:	080120e8 	.word	0x080120e8
 800817c:	080110dc 	.word	0x080110dc
 8008180:	08012104 	.word	0x08012104

08008184 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 8008184:	b170      	cbz	r0, 80081a4 <netbuf_delete+0x20>
{
 8008186:	b510      	push	{r4, lr}
 8008188:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 800818a:	6800      	ldr	r0, [r0, #0]
 800818c:	b120      	cbz	r0, 8008198 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 800818e:	f001 f859 	bl	8009244 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8008192:	2300      	movs	r3, #0
 8008194:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 8008198:	4621      	mov	r1, r4
 800819a:	2006      	movs	r0, #6
  }
}
 800819c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 80081a0:	f000 bd44 	b.w	8008c2c <memp_free>
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop

080081a8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80081a8:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80081aa:	b1f0      	cbz	r0, 80081ea <netbuf_data+0x42>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80081ac:	b1b1      	cbz	r1, 80081dc <netbuf_data+0x34>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80081ae:	b162      	cbz	r2, 80081ca <netbuf_data+0x22>

  if (buf->ptr == NULL) {
 80081b0:	4603      	mov	r3, r0
 80081b2:	6840      	ldr	r0, [r0, #4]
 80081b4:	b130      	cbz	r0, 80081c4 <netbuf_data+0x1c>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 80081b6:	6840      	ldr	r0, [r0, #4]
 80081b8:	6008      	str	r0, [r1, #0]
  *len = buf->ptr->len;
  return ERR_OK;
 80081ba:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	895b      	ldrh	r3, [r3, #10]
 80081c0:	8013      	strh	r3, [r2, #0]
}
 80081c2:	bd08      	pop	{r3, pc}
    return ERR_BUF;
 80081c4:	f06f 0001 	mvn.w	r0, #1
}
 80081c8:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80081ca:	4b0b      	ldr	r3, [pc, #44]	@ (80081f8 <netbuf_data+0x50>)
 80081cc:	22c8      	movs	r2, #200	@ 0xc8
 80081ce:	490b      	ldr	r1, [pc, #44]	@ (80081fc <netbuf_data+0x54>)
 80081d0:	480b      	ldr	r0, [pc, #44]	@ (8008200 <netbuf_data+0x58>)
 80081d2:	f007 feaf 	bl	800ff34 <iprintf>
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80081d6:	f06f 000f 	mvn.w	r0, #15
}
 80081da:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80081dc:	4b06      	ldr	r3, [pc, #24]	@ (80081f8 <netbuf_data+0x50>)
 80081de:	22c7      	movs	r2, #199	@ 0xc7
 80081e0:	4908      	ldr	r1, [pc, #32]	@ (8008204 <netbuf_data+0x5c>)
 80081e2:	4807      	ldr	r0, [pc, #28]	@ (8008200 <netbuf_data+0x58>)
 80081e4:	f007 fea6 	bl	800ff34 <iprintf>
 80081e8:	e7f5      	b.n	80081d6 <netbuf_data+0x2e>
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80081ea:	4b03      	ldr	r3, [pc, #12]	@ (80081f8 <netbuf_data+0x50>)
 80081ec:	22c6      	movs	r2, #198	@ 0xc6
 80081ee:	4906      	ldr	r1, [pc, #24]	@ (8008208 <netbuf_data+0x60>)
 80081f0:	4803      	ldr	r0, [pc, #12]	@ (8008200 <netbuf_data+0x58>)
 80081f2:	f007 fe9f 	bl	800ff34 <iprintf>
 80081f6:	e7ee      	b.n	80081d6 <netbuf_data+0x2e>
 80081f8:	08012130 	.word	0x08012130
 80081fc:	080121e0 	.word	0x080121e0
 8008200:	080110dc 	.word	0x080110dc
 8008204:	080121c0 	.word	0x080121c0
 8008208:	080121a4 	.word	0x080121a4

0800820c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 8008210:	f7fb ff90 	bl	8004134 <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 8008214:	f7fb fed4 	bl	8003fc0 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 8008218:	4b2c      	ldr	r3, [pc, #176]	@ (80082cc <tcpip_thread+0xc0>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	b113      	cbz	r3, 8008224 <tcpip_thread+0x18>
    tcpip_init_done(tcpip_init_done_arg);
 800821e:	4a2c      	ldr	r2, [pc, #176]	@ (80082d0 <tcpip_thread+0xc4>)
 8008220:	6810      	ldr	r0, [r2, #0]
 8008222:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8008224:	4d2b      	ldr	r5, [pc, #172]	@ (80082d4 <tcpip_thread+0xc8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008226:	4f2c      	ldr	r7, [pc, #176]	@ (80082d8 <tcpip_thread+0xcc>)
 8008228:	4e2c      	ldr	r6, [pc, #176]	@ (80082dc <tcpip_thread+0xd0>)
 800822a:	e00e      	b.n	800824a <tcpip_thread+0x3e>
  } else if (sleeptime == 0) {
 800822c:	b158      	cbz	r0, 8008246 <tcpip_thread+0x3a>
  UNLOCK_TCPIP_CORE();
 800822e:	f7fb ff45 	bl	80040bc <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8008232:	4622      	mov	r2, r4
 8008234:	a901      	add	r1, sp, #4
 8008236:	4628      	mov	r0, r5
 8008238:	f007 fb78 	bl	800f92c <sys_arch_mbox_fetch>
 800823c:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800823e:	f7fb febf 	bl	8003fc0 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 8008242:	3401      	adds	r4, #1
 8008244:	d111      	bne.n	800826a <tcpip_thread+0x5e>
    sys_check_timeouts();
 8008246:	f005 fd3b 	bl	800dcc0 <sys_check_timeouts>
  LWIP_ASSERT_CORE_LOCKED();
 800824a:	f7fb ff41 	bl	80040d0 <sys_check_core_locking>
  sleeptime = sys_timeouts_sleeptime();
 800824e:	f005 fd61 	bl	800dd14 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8008252:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8008254:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8008256:	d1e9      	bne.n	800822c <tcpip_thread+0x20>
    UNLOCK_TCPIP_CORE();
 8008258:	f7fb ff30 	bl	80040bc <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800825c:	2200      	movs	r2, #0
 800825e:	a901      	add	r1, sp, #4
 8008260:	4628      	mov	r0, r5
 8008262:	f007 fb63 	bl	800f92c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008266:	f7fb feab 	bl	8003fc0 <sys_lock_tcpip_core>
    if (msg == NULL) {
 800826a:	9c01      	ldr	r4, [sp, #4]
 800826c:	b164      	cbz	r4, 8008288 <tcpip_thread+0x7c>
  switch (msg->type) {
 800826e:	7823      	ldrb	r3, [r4, #0]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d01e      	beq.n	80082b2 <tcpip_thread+0xa6>
 8008274:	2b02      	cmp	r3, #2
 8008276:	d018      	beq.n	80082aa <tcpip_thread+0x9e>
 8008278:	b16b      	cbz	r3, 8008296 <tcpip_thread+0x8a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800827a:	463b      	mov	r3, r7
 800827c:	22cf      	movs	r2, #207	@ 0xcf
 800827e:	4631      	mov	r1, r6
 8008280:	4817      	ldr	r0, [pc, #92]	@ (80082e0 <tcpip_thread+0xd4>)
 8008282:	f007 fe57 	bl	800ff34 <iprintf>
      break;
 8008286:	e7e0      	b.n	800824a <tcpip_thread+0x3e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008288:	463b      	mov	r3, r7
 800828a:	2291      	movs	r2, #145	@ 0x91
 800828c:	4631      	mov	r1, r6
 800828e:	4814      	ldr	r0, [pc, #80]	@ (80082e0 <tcpip_thread+0xd4>)
 8008290:	f007 fe50 	bl	800ff34 <iprintf>
      continue;
 8008294:	e7d9      	b.n	800824a <tcpip_thread+0x3e>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8008296:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800829a:	6860      	ldr	r0, [r4, #4]
 800829c:	4798      	blx	r3
 800829e:	b980      	cbnz	r0, 80082c2 <tcpip_thread+0xb6>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80082a0:	4621      	mov	r1, r4
 80082a2:	2009      	movs	r0, #9
 80082a4:	f000 fcc2 	bl	8008c2c <memp_free>
      break;
 80082a8:	e7cf      	b.n	800824a <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80082aa:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80082ae:	4798      	blx	r3
      break;
 80082b0:	e7cb      	b.n	800824a <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80082b2:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80082b6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80082b8:	4621      	mov	r1, r4
 80082ba:	2008      	movs	r0, #8
 80082bc:	f000 fcb6 	bl	8008c2c <memp_free>
      break;
 80082c0:	e7c3      	b.n	800824a <tcpip_thread+0x3e>
        pbuf_free(msg->msg.inp.p);
 80082c2:	6860      	ldr	r0, [r4, #4]
 80082c4:	f000 ffbe 	bl	8009244 <pbuf_free>
 80082c8:	e7ea      	b.n	80082a0 <tcpip_thread+0x94>
 80082ca:	bf00      	nop
 80082cc:	24019c94 	.word	0x24019c94
 80082d0:	24019c90 	.word	0x24019c90
 80082d4:	24019c8c 	.word	0x24019c8c
 80082d8:	080121fc 	.word	0x080121fc
 80082dc:	0801222c 	.word	0x0801222c
 80082e0:	080110dc 	.word	0x080110dc

080082e4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80082e8:	4811      	ldr	r0, [pc, #68]	@ (8008330 <tcpip_inpkt+0x4c>)
{
 80082ea:	460e      	mov	r6, r1
 80082ec:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80082ee:	f007 fb47 	bl	800f980 <sys_mbox_valid>
 80082f2:	b178      	cbz	r0, 8008314 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80082f4:	2009      	movs	r0, #9
 80082f6:	f000 fc53 	bl	8008ba0 <memp_malloc>
  if (msg == NULL) {
 80082fa:	4604      	mov	r4, r0
 80082fc:	b1a8      	cbz	r0, 800832a <tcpip_inpkt+0x46>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80082fe:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 8008300:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8008302:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008304:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8008306:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008308:	4809      	ldr	r0, [pc, #36]	@ (8008330 <tcpip_inpkt+0x4c>)
  msg->msg.inp.input_fn = input_fn;
 800830a:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800830c:	f007 fafe 	bl	800f90c <sys_mbox_trypost>
 8008310:	b938      	cbnz	r0, 8008322 <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008314:	4b07      	ldr	r3, [pc, #28]	@ (8008334 <tcpip_inpkt+0x50>)
 8008316:	22fc      	movs	r2, #252	@ 0xfc
 8008318:	4907      	ldr	r1, [pc, #28]	@ (8008338 <tcpip_inpkt+0x54>)
 800831a:	4808      	ldr	r0, [pc, #32]	@ (800833c <tcpip_inpkt+0x58>)
 800831c:	f007 fe0a 	bl	800ff34 <iprintf>
 8008320:	e7e8      	b.n	80082f4 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008322:	4621      	mov	r1, r4
 8008324:	2009      	movs	r0, #9
 8008326:	f000 fc81 	bl	8008c2c <memp_free>
    return ERR_MEM;
 800832a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800832e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008330:	24019c8c 	.word	0x24019c8c
 8008334:	080121fc 	.word	0x080121fc
 8008338:	0801224c 	.word	0x0801224c
 800833c:	080110dc 	.word	0x080110dc

08008340 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008340:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 8008344:	f013 0f18 	tst.w	r3, #24
 8008348:	d002      	beq.n	8008350 <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 800834a:	4a03      	ldr	r2, [pc, #12]	@ (8008358 <tcpip_input+0x18>)
 800834c:	f7ff bfca 	b.w	80082e4 <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008350:	4a02      	ldr	r2, [pc, #8]	@ (800835c <tcpip_input+0x1c>)
 8008352:	f7ff bfc7 	b.w	80082e4 <tcpip_inpkt>
 8008356:	bf00      	nop
 8008358:	0800f7c1 	.word	0x0800f7c1
 800835c:	0800ebf5 	.word	0x0800ebf5

08008360 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008364:	4811      	ldr	r0, [pc, #68]	@ (80083ac <tcpip_try_callback+0x4c>)
{
 8008366:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008368:	f007 fb0a 	bl	800f980 <sys_mbox_valid>
 800836c:	b170      	cbz	r0, 800838c <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800836e:	2008      	movs	r0, #8
 8008370:	f000 fc16 	bl	8008ba0 <memp_malloc>
  if (msg == NULL) {
 8008374:	4604      	mov	r4, r0
 8008376:	b1a8      	cbz	r0, 80083a4 <tcpip_try_callback+0x44>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008378:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800837a:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 800837c:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008380:	480a      	ldr	r0, [pc, #40]	@ (80083ac <tcpip_try_callback+0x4c>)
  msg->type = TCPIP_MSG_CALLBACK;
 8008382:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008384:	f007 fac2 	bl	800f90c <sys_mbox_trypost>
 8008388:	b940      	cbnz	r0, 800839c <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 800838a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800838c:	4b08      	ldr	r3, [pc, #32]	@ (80083b0 <tcpip_try_callback+0x50>)
 800838e:	f240 125d 	movw	r2, #349	@ 0x15d
 8008392:	4908      	ldr	r1, [pc, #32]	@ (80083b4 <tcpip_try_callback+0x54>)
 8008394:	4808      	ldr	r0, [pc, #32]	@ (80083b8 <tcpip_try_callback+0x58>)
 8008396:	f007 fdcd 	bl	800ff34 <iprintf>
 800839a:	e7e8      	b.n	800836e <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800839c:	4621      	mov	r1, r4
 800839e:	2008      	movs	r0, #8
 80083a0:	f000 fc44 	bl	8008c2c <memp_free>
    return ERR_MEM;
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80083a8:	bd70      	pop	{r4, r5, r6, pc}
 80083aa:	bf00      	nop
 80083ac:	24019c8c 	.word	0x24019c8c
 80083b0:	080121fc 	.word	0x080121fc
 80083b4:	0801224c 	.word	0x0801224c
 80083b8:	080110dc 	.word	0x080110dc

080083bc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	460d      	mov	r5, r1
 80083c0:	4604      	mov	r4, r0
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80083c2:	f7fb fdfd 	bl	8003fc0 <sys_lock_tcpip_core>
  fn(apimsg);
 80083c6:	4628      	mov	r0, r5
 80083c8:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 80083ca:	f7fb fe77 	bl	80040bc <sys_unlock_tcpip_core>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80083ce:	2000      	movs	r0, #0
 80083d0:	bd38      	pop	{r3, r4, r5, pc}
 80083d2:	bf00      	nop

080083d4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80083d4:	b530      	push	{r4, r5, lr}
 80083d6:	b083      	sub	sp, #12
 80083d8:	4605      	mov	r5, r0
 80083da:	460c      	mov	r4, r1
  lwip_init();
 80083dc:	f000 f8b2 	bl	8008544 <lwip_init>

  tcpip_init_done = initfunc;
 80083e0:	4a15      	ldr	r2, [pc, #84]	@ (8008438 <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80083e2:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 80083e4:	4b15      	ldr	r3, [pc, #84]	@ (800843c <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80083e6:	4816      	ldr	r0, [pc, #88]	@ (8008440 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 80083e8:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 80083ea:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80083ec:	f007 fa76 	bl	800f8dc <sys_mbox_new>
 80083f0:	b970      	cbnz	r0, 8008410 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80083f2:	4814      	ldr	r0, [pc, #80]	@ (8008444 <tcpip_init+0x70>)
 80083f4:	f007 fb1a 	bl	800fa2c <sys_mutex_new>
 80083f8:	b9b0      	cbnz	r0, 8008428 <tcpip_init+0x54>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80083fa:	2418      	movs	r4, #24
 80083fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008400:	2200      	movs	r2, #0
 8008402:	4911      	ldr	r1, [pc, #68]	@ (8008448 <tcpip_init+0x74>)
 8008404:	9400      	str	r4, [sp, #0]
 8008406:	4811      	ldr	r0, [pc, #68]	@ (800844c <tcpip_init+0x78>)
 8008408:	f007 fb26 	bl	800fa58 <sys_thread_new>
}
 800840c:	b003      	add	sp, #12
 800840e:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008410:	4b0f      	ldr	r3, [pc, #60]	@ (8008450 <tcpip_init+0x7c>)
 8008412:	f240 2261 	movw	r2, #609	@ 0x261
 8008416:	490f      	ldr	r1, [pc, #60]	@ (8008454 <tcpip_init+0x80>)
 8008418:	480f      	ldr	r0, [pc, #60]	@ (8008458 <tcpip_init+0x84>)
 800841a:	f007 fd8b 	bl	800ff34 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800841e:	4809      	ldr	r0, [pc, #36]	@ (8008444 <tcpip_init+0x70>)
 8008420:	f007 fb04 	bl	800fa2c <sys_mutex_new>
 8008424:	2800      	cmp	r0, #0
 8008426:	d0e8      	beq.n	80083fa <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008428:	4b09      	ldr	r3, [pc, #36]	@ (8008450 <tcpip_init+0x7c>)
 800842a:	f240 2265 	movw	r2, #613	@ 0x265
 800842e:	490b      	ldr	r1, [pc, #44]	@ (800845c <tcpip_init+0x88>)
 8008430:	4809      	ldr	r0, [pc, #36]	@ (8008458 <tcpip_init+0x84>)
 8008432:	f007 fd7f 	bl	800ff34 <iprintf>
 8008436:	e7e0      	b.n	80083fa <tcpip_init+0x26>
 8008438:	24019c94 	.word	0x24019c94
 800843c:	24019c90 	.word	0x24019c90
 8008440:	24019c8c 	.word	0x24019c8c
 8008444:	24019c88 	.word	0x24019c88
 8008448:	0800820d 	.word	0x0800820d
 800844c:	080122a4 	.word	0x080122a4
 8008450:	080121fc 	.word	0x080121fc
 8008454:	0801225c 	.word	0x0801225c
 8008458:	080110dc 	.word	0x080110dc
 800845c:	08012280 	.word	0x08012280

08008460 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8008460:	ba40      	rev16	r0, r0
}
 8008462:	b280      	uxth	r0, r0
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop

08008468 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8008468:	ba00      	rev	r0, r0
 800846a:	4770      	bx	lr

0800846c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800846c:	b530      	push	{r4, r5, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 800846e:	f04f 0e00 	mov.w	lr, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
 8008472:	f000 0501 	and.w	r5, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8008476:	4571      	cmp	r1, lr
 8008478:	dd05      	ble.n	8008486 <lwip_standard_chksum+0x1a>
 800847a:	b125      	cbz	r5, 8008486 <lwip_standard_chksum+0x1a>
    ((u8_t *)&t)[1] = *pb++;
 800847c:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8008480:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8008482:	f363 2e1f 	bfi	lr, r3, #8, #24
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8008486:	2901      	cmp	r1, #1
 8008488:	dd27      	ble.n	80084da <lwip_standard_chksum+0x6e>
 800848a:	3902      	subs	r1, #2
  u32_t sum = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	084c      	lsrs	r4, r1, #1
 8008490:	f104 0c01 	add.w	ip, r4, #1
 8008494:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 8008498:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 800849c:	4584      	cmp	ip, r0
    sum += *ps++;
 800849e:	4413      	add	r3, r2
  while (len > 1) {
 80084a0:	d1fa      	bne.n	8008498 <lwip_standard_chksum+0x2c>
    len -= 2;
 80084a2:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 80084a6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80084aa:	2901      	cmp	r1, #1
 80084ac:	d105      	bne.n	80084ba <lwip_standard_chksum+0x4e>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80084ae:	f89c 2000 	ldrb.w	r2, [ip]
 80084b2:	f362 0e07 	bfi	lr, r2, #0, #8
 80084b6:	fa1f fe8e 	uxth.w	lr, lr
  }

  /* Add end bytes */
  sum += t;
 80084ba:	449e      	add	lr, r3

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80084bc:	fa1f f38e 	uxth.w	r3, lr
 80084c0:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  sum = FOLD_U32T(sum);
 80084c4:	b298      	uxth	r0, r3
 80084c6:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80084ca:	b125      	cbz	r5, 80084d6 <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
 80084cc:	0203      	lsls	r3, r0, #8
 80084ce:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80084d6:	b280      	uxth	r0, r0
 80084d8:	bd30      	pop	{r4, r5, pc}
  ps = (const u16_t *)(const void *)pb;
 80084da:	4684      	mov	ip, r0
  u32_t sum = 0;
 80084dc:	2300      	movs	r3, #0
 80084de:	e7e4      	b.n	80084aa <lwip_standard_chksum+0x3e>

080084e0 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80084e0:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80084e2:	f7ff ffc3 	bl	800846c <lwip_standard_chksum>
 80084e6:	43c0      	mvns	r0, r0
}
 80084e8:	b280      	uxth	r0, r0
 80084ea:	bd08      	pop	{r3, pc}

080084ec <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 80084ec:	b338      	cbz	r0, 800853e <inet_chksum_pbuf+0x52>
{
 80084ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int swapped = 0;
 80084f0:	2700      	movs	r7, #0
 80084f2:	4605      	mov	r5, r0
  acc = 0;
 80084f4:	463c      	mov	r4, r7
    acc += LWIP_CHKSUM(q->payload, q->len);
 80084f6:	896e      	ldrh	r6, [r5, #10]
 80084f8:	6868      	ldr	r0, [r5, #4]
 80084fa:	4631      	mov	r1, r6
 80084fc:	f7ff ffb6 	bl	800846c <lwip_standard_chksum>
 8008500:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8008502:	f016 0f01 	tst.w	r6, #1
    acc = FOLD_U32T(acc);
 8008506:	b2a3      	uxth	r3, r4
 8008508:	eb03 4414 	add.w	r4, r3, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 800850c:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8008510:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8008514:	d004      	beq.n	8008520 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 8008516:	b29b      	uxth	r3, r3
 8008518:	f087 0701 	eor.w	r7, r7, #1
 800851c:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8008520:	682d      	ldr	r5, [r5, #0]
 8008522:	2d00      	cmp	r5, #0
 8008524:	d1e7      	bne.n	80084f6 <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8008526:	b13f      	cbz	r7, 8008538 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8008528:	0220      	lsls	r0, r4, #8
 800852a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800852e:	b280      	uxth	r0, r0
 8008530:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 8008532:	43c0      	mvns	r0, r0
 8008534:	b280      	uxth	r0, r0
}
 8008536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (u16_t)~(acc & 0xffffUL);
 8008538:	43e4      	mvns	r4, r4
 800853a:	b2a0      	uxth	r0, r4
}
 800853c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (q = p; q != NULL; q = q->next) {
 800853e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 8008542:	4770      	bx	lr

08008544 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008544:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008546:	f007 fa67 	bl	800fa18 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800854a:	f000 f80d 	bl	8008568 <mem_init>
  memp_init();
 800854e:	f000 fae5 	bl	8008b1c <memp_init>
  pbuf_init();
  netif_init();
 8008552:	f000 fbbf 	bl	8008cd4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008556:	f005 fbf1 	bl	800dd3c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800855a:	f001 fa17 	bl	800998c <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800855e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8008562:	f005 bb8f 	b.w	800dc84 <sys_timeouts_init>
 8008566:	bf00      	nop

08008568 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008568:	4b13      	ldr	r3, [pc, #76]	@ (80085b8 <mem_init+0x50>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800856a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800856e:	4813      	ldr	r0, [pc, #76]	@ (80085bc <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 8008570:	f647 51e8 	movw	r1, #32232	@ 0x7de8
{
 8008574:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008576:	6003      	str	r3, [r0, #0]
  mem->prev = 0;
  mem->used = 0;
 8008578:	2400      	movs	r4, #0
  mem->next = MEM_SIZE_ALIGNED;
 800857a:	f8c2 1200 	str.w	r1, [r2, #512]	@ 0x200
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800857e:	4419      	add	r1, r3
 8008580:	4a0f      	ldr	r2, [pc, #60]	@ (80085c0 <mem_init+0x58>)
  mem->used = 0;
 8008582:	711c      	strb	r4, [r3, #4]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8008584:	480f      	ldr	r0, [pc, #60]	@ (80085c4 <mem_init+0x5c>)
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008586:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 8008588:	2101      	movs	r1, #1
 800858a:	4a0f      	ldr	r2, [pc, #60]	@ (80085c8 <mem_init+0x60>)
  ram_end->next = MEM_SIZE_ALIGNED;
 800858c:	4c0f      	ldr	r4, [pc, #60]	@ (80085cc <mem_init+0x64>)
 800858e:	f8c0 4fe8 	str.w	r4, [r0, #4072]	@ 0xfe8
  ram_end->used = 1;
 8008592:	f882 10ec 	strb.w	r1, [r2, #236]	@ 0xec
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008596:	4a0e      	ldr	r2, [pc, #56]	@ (80085d0 <mem_init+0x68>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008598:	480e      	ldr	r0, [pc, #56]	@ (80085d4 <mem_init+0x6c>)
  lfree = (struct mem *)(void *)ram;
 800859a:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800859c:	f007 fa46 	bl	800fa2c <sys_mutex_new>
 80085a0:	b900      	cbnz	r0, 80085a4 <mem_init+0x3c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80085a2:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80085a4:	4b0c      	ldr	r3, [pc, #48]	@ (80085d8 <mem_init+0x70>)
 80085a6:	f240 221f 	movw	r2, #543	@ 0x21f
 80085aa:	490c      	ldr	r1, [pc, #48]	@ (80085dc <mem_init+0x74>)
 80085ac:	480c      	ldr	r0, [pc, #48]	@ (80085e0 <mem_init+0x78>)
}
 80085ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80085b2:	f007 bcbf 	b.w	800ff34 <iprintf>
 80085b6:	bf00      	nop
 80085b8:	30000200 	.word	0x30000200
 80085bc:	24019cbc 	.word	0x24019cbc
 80085c0:	24019cb8 	.word	0x24019cb8
 80085c4:	30007000 	.word	0x30007000
 80085c8:	30007f00 	.word	0x30007f00
 80085cc:	7de87de8 	.word	0x7de87de8
 80085d0:	24019cb0 	.word	0x24019cb0
 80085d4:	24019cb4 	.word	0x24019cb4
 80085d8:	080122b4 	.word	0x080122b4
 80085dc:	080122e4 	.word	0x080122e4
 80085e0:	080110dc 	.word	0x080110dc

080085e4 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80085e4:	2800      	cmp	r0, #0
 80085e6:	f000 8099 	beq.w	800871c <mem_free+0x138>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80085ea:	0783      	lsls	r3, r0, #30
{
 80085ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f0:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80085f2:	f040 808e 	bne.w	8008712 <mem_free+0x12e>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80085f6:	4e62      	ldr	r6, [pc, #392]	@ (8008780 <mem_free+0x19c>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80085f8:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80085fc:	6833      	ldr	r3, [r6, #0]
 80085fe:	42ab      	cmp	r3, r5
 8008600:	d805      	bhi.n	800860e <mem_free+0x2a>
 8008602:	4f60      	ldr	r7, [pc, #384]	@ (8008784 <mem_free+0x1a0>)
 8008604:	f100 030c 	add.w	r3, r0, #12
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d20c      	bcs.n	8008628 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800860e:	4b5e      	ldr	r3, [pc, #376]	@ (8008788 <mem_free+0x1a4>)
 8008610:	f240 227f 	movw	r2, #639	@ 0x27f
 8008614:	495d      	ldr	r1, [pc, #372]	@ (800878c <mem_free+0x1a8>)
 8008616:	485e      	ldr	r0, [pc, #376]	@ (8008790 <mem_free+0x1ac>)
 8008618:	f007 fc8c 	bl	800ff34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800861c:	f007 fa32 	bl	800fa84 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8008624:	f007 ba3a 	b.w	800fa9c <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8008628:	485a      	ldr	r0, [pc, #360]	@ (8008794 <mem_free+0x1b0>)
 800862a:	f007 fa0b 	bl	800fa44 <sys_mutex_lock>
  if (!mem->used) {
 800862e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 809e 	beq.w	8008774 <mem_free+0x190>
  pmem = ptr_to_mem(mem->prev);
 8008638:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800863c:	f647 50e8 	movw	r0, #32232	@ 0x7de8
  return (mem_size_t)((u8_t *)mem - ram);
 8008640:	6832      	ldr	r2, [r6, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008642:	4281      	cmp	r1, r0
  nmem = ptr_to_mem(mem->next);
 8008644:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008648:	d808      	bhi.n	800865c <mem_free+0x78>
 800864a:	4283      	cmp	r3, r0
 800864c:	d806      	bhi.n	800865c <mem_free+0x78>
  return (mem_size_t)((u8_t *)mem - ram);
 800864e:	1aa8      	subs	r0, r5, r2
 8008650:	b280      	uxth	r0, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008652:	4288      	cmp	r0, r1
 8008654:	d012      	beq.n	800867c <mem_free+0x98>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008656:	5a51      	ldrh	r1, [r2, r1]
 8008658:	4281      	cmp	r1, r0
 800865a:	d00f      	beq.n	800867c <mem_free+0x98>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800865c:	4b4a      	ldr	r3, [pc, #296]	@ (8008788 <mem_free+0x1a4>)
 800865e:	f240 2295 	movw	r2, #661	@ 0x295
 8008662:	494d      	ldr	r1, [pc, #308]	@ (8008798 <mem_free+0x1b4>)
 8008664:	484a      	ldr	r0, [pc, #296]	@ (8008790 <mem_free+0x1ac>)
 8008666:	f007 fc65 	bl	800ff34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800866a:	484a      	ldr	r0, [pc, #296]	@ (8008794 <mem_free+0x1b0>)
 800866c:	f007 f9f0 	bl	800fa50 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8008670:	f007 fa08 	bl	800fa84 <sys_arch_protect>
}
 8008674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8008678:	f007 ba10 	b.w	800fa9c <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 800867c:	18d1      	adds	r1, r2, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800867e:	f8d7 c000 	ldr.w	ip, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008682:	4561      	cmp	r1, ip
 8008684:	d002      	beq.n	800868c <mem_free+0xa8>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008686:	8849      	ldrh	r1, [r1, #2]
 8008688:	4281      	cmp	r1, r0
 800868a:	d1e7      	bne.n	800865c <mem_free+0x78>
  if (mem < lfree) {
 800868c:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 80087b4 <mem_free+0x1d0>
  mem->used = 0;
 8008690:	2100      	movs	r1, #0
 8008692:	f804 1c04 	strb.w	r1, [r4, #-4]
  if (mem < lfree) {
 8008696:	f8d8 1000 	ldr.w	r1, [r8]
 800869a:	42a9      	cmp	r1, r5
    lfree = mem;
 800869c:	bf88      	it	hi
 800869e:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80086a2:	4295      	cmp	r5, r2
 80086a4:	d33b      	bcc.n	800871e <mem_free+0x13a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80086a6:	4565      	cmp	r5, ip
 80086a8:	d243      	bcs.n	8008732 <mem_free+0x14e>
  return (struct mem *)(void *)&ram[ptr];
 80086aa:	6832      	ldr	r2, [r6, #0]
 80086ac:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80086ae:	429d      	cmp	r5, r3
 80086b0:	d014      	beq.n	80086dc <mem_free+0xf8>
 80086b2:	7919      	ldrb	r1, [r3, #4]
 80086b4:	b991      	cbnz	r1, 80086dc <mem_free+0xf8>
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	428b      	cmp	r3, r1
 80086ba:	d00f      	beq.n	80086dc <mem_free+0xf8>
    if (lfree == nmem) {
 80086bc:	f8d8 1000 	ldr.w	r1, [r8]
 80086c0:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 80086c2:	881b      	ldrh	r3, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80086c4:	f647 51e8 	movw	r1, #32232	@ 0x7de8
      lfree = mem;
 80086c8:	bf08      	it	eq
 80086ca:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80086ce:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 80086d0:	f824 3c08 	strh.w	r3, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80086d4:	d002      	beq.n	80086dc <mem_free+0xf8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80086d6:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 80086d8:	1aa9      	subs	r1, r5, r2
 80086da:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 80086dc:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 80086e0:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 80086e2:	429d      	cmp	r5, r3
 80086e4:	d010      	beq.n	8008708 <mem_free+0x124>
 80086e6:	7918      	ldrb	r0, [r3, #4]
 80086e8:	b970      	cbnz	r0, 8008708 <mem_free+0x124>
    if (lfree == mem) {
 80086ea:	f8d8 0000 	ldr.w	r0, [r8]
 80086ee:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
 80086f0:	f647 50e8 	movw	r0, #32232	@ 0x7de8
      lfree = pmem;
 80086f4:	bf08      	it	eq
 80086f6:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 80086fa:	f834 3c08 	ldrh.w	r3, [r4, #-8]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80086fe:	4283      	cmp	r3, r0
    pmem->next = mem->next;
 8008700:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008702:	d001      	beq.n	8008708 <mem_free+0x124>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008704:	441a      	add	r2, r3
 8008706:	8051      	strh	r1, [r2, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8008708:	4822      	ldr	r0, [pc, #136]	@ (8008794 <mem_free+0x1b0>)
}
 800870a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800870e:	f007 b99f 	b.w	800fa50 <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008712:	4b1d      	ldr	r3, [pc, #116]	@ (8008788 <mem_free+0x1a4>)
 8008714:	f240 2273 	movw	r2, #627	@ 0x273
 8008718:	4920      	ldr	r1, [pc, #128]	@ (800879c <mem_free+0x1b8>)
 800871a:	e77c      	b.n	8008616 <mem_free+0x32>
 800871c:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800871e:	4b1a      	ldr	r3, [pc, #104]	@ (8008788 <mem_free+0x1a4>)
 8008720:	f240 12df 	movw	r2, #479	@ 0x1df
 8008724:	491e      	ldr	r1, [pc, #120]	@ (80087a0 <mem_free+0x1bc>)
 8008726:	481a      	ldr	r0, [pc, #104]	@ (8008790 <mem_free+0x1ac>)
 8008728:	f007 fc04 	bl	800ff34 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	429d      	cmp	r5, r3
 8008730:	d306      	bcc.n	8008740 <mem_free+0x15c>
 8008732:	4b15      	ldr	r3, [pc, #84]	@ (8008788 <mem_free+0x1a4>)
 8008734:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8008738:	491a      	ldr	r1, [pc, #104]	@ (80087a4 <mem_free+0x1c0>)
 800873a:	4815      	ldr	r0, [pc, #84]	@ (8008790 <mem_free+0x1ac>)
 800873c:	f007 fbfa 	bl	800ff34 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008740:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8008744:	b133      	cbz	r3, 8008754 <mem_free+0x170>
 8008746:	4b10      	ldr	r3, [pc, #64]	@ (8008788 <mem_free+0x1a4>)
 8008748:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800874c:	4916      	ldr	r1, [pc, #88]	@ (80087a8 <mem_free+0x1c4>)
 800874e:	4810      	ldr	r0, [pc, #64]	@ (8008790 <mem_free+0x1ac>)
 8008750:	f007 fbf0 	bl	800ff34 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008754:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8008758:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800875c:	4293      	cmp	r3, r2
 800875e:	d9a4      	bls.n	80086aa <mem_free+0xc6>
 8008760:	4b09      	ldr	r3, [pc, #36]	@ (8008788 <mem_free+0x1a4>)
 8008762:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8008766:	4911      	ldr	r1, [pc, #68]	@ (80087ac <mem_free+0x1c8>)
 8008768:	4809      	ldr	r0, [pc, #36]	@ (8008790 <mem_free+0x1ac>)
 800876a:	f007 fbe3 	bl	800ff34 <iprintf>
  nmem = ptr_to_mem(mem->next);
 800876e:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8008772:	e79a      	b.n	80086aa <mem_free+0xc6>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008774:	4b04      	ldr	r3, [pc, #16]	@ (8008788 <mem_free+0x1a4>)
 8008776:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800877a:	490d      	ldr	r1, [pc, #52]	@ (80087b0 <mem_free+0x1cc>)
 800877c:	e772      	b.n	8008664 <mem_free+0x80>
 800877e:	bf00      	nop
 8008780:	24019cbc 	.word	0x24019cbc
 8008784:	24019cb8 	.word	0x24019cb8
 8008788:	080122b4 	.word	0x080122b4
 800878c:	08012324 	.word	0x08012324
 8008790:	080110dc 	.word	0x080110dc
 8008794:	24019cb4 	.word	0x24019cb4
 8008798:	08012368 	.word	0x08012368
 800879c:	08012300 	.word	0x08012300
 80087a0:	0801239c 	.word	0x0801239c
 80087a4:	080123b4 	.word	0x080123b4
 80087a8:	080123d0 	.word	0x080123d0
 80087ac:	080123ec 	.word	0x080123ec
 80087b0:	08012340 	.word	0x08012340
 80087b4:	24019cb0 	.word	0x24019cb0

080087b8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80087b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80087bc:	1ccb      	adds	r3, r1, #3
 80087be:	f023 0303 	bic.w	r3, r3, #3
 80087c2:	b29b      	uxth	r3, r3
  if (newsize < MIN_SIZE_ALIGNED) {
 80087c4:	2b0c      	cmp	r3, #12
 80087c6:	461d      	mov	r5, r3
 80087c8:	bf38      	it	cc
 80087ca:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80087cc:	428d      	cmp	r5, r1
 80087ce:	f0c0 8087 	bcc.w	80088e0 <mem_trim+0x128>
 80087d2:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80087d6:	4293      	cmp	r3, r2
 80087d8:	f200 8082 	bhi.w	80088e0 <mem_trim+0x128>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80087dc:	4f4c      	ldr	r7, [pc, #304]	@ (8008910 <mem_trim+0x158>)
 80087de:	4604      	mov	r4, r0
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	4283      	cmp	r3, r0
 80087e4:	d841      	bhi.n	800886a <mem_trim+0xb2>
 80087e6:	4a4b      	ldr	r2, [pc, #300]	@ (8008914 <mem_trim+0x15c>)
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	4282      	cmp	r2, r0
 80087ec:	d93d      	bls.n	800886a <mem_trim+0xb2>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80087ee:	f1a4 0808 	sub.w	r8, r4, #8
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80087f2:	f834 6c08 	ldrh.w	r6, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 80087f6:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80087fa:	3e08      	subs	r6, #8
  return (mem_size_t)((u8_t *)mem - ram);
 80087fc:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008800:	eba6 0608 	sub.w	r6, r6, r8
 8008804:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008806:	42b5      	cmp	r5, r6
 8008808:	d863      	bhi.n	80088d2 <mem_trim+0x11a>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800880a:	d02c      	beq.n	8008866 <mem_trim+0xae>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800880c:	4842      	ldr	r0, [pc, #264]	@ (8008918 <mem_trim+0x160>)
 800880e:	f007 f919 	bl	800fa44 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8008812:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 800881c:	f899 1004 	ldrb.w	r1, [r9, #4]
 8008820:	2900      	cmp	r1, #0
 8008822:	d136      	bne.n	8008892 <mem_trim+0xda>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008824:	f647 51e8 	movw	r1, #32232	@ 0x7de8
 8008828:	428a      	cmp	r2, r1
 800882a:	d067      	beq.n	80088fc <mem_trim+0x144>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800882c:	3508      	adds	r5, #8
    if (lfree == mem2) {
 800882e:	493b      	ldr	r1, [pc, #236]	@ (800891c <mem_trim+0x164>)
    next = mem2->next;
 8008830:	f8b9 6000 	ldrh.w	r6, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008834:	4445      	add	r5, r8
    if (lfree == mem2) {
 8008836:	6808      	ldr	r0, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008838:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 800883a:	4548      	cmp	r0, r9
  return (struct mem *)(void *)&ram[ptr];
 800883c:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 8008840:	bf08      	it	eq
 8008842:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 8008844:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
 8008846:	8016      	strh	r6, [r2, #0]
    mem2->used = 0;
 8008848:	7111      	strb	r1, [r2, #4]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800884a:	f647 51e8 	movw	r1, #32232	@ 0x7de8
    mem2->prev = ptr;
 800884e:	f8a2 8002 	strh.w	r8, [r2, #2]
    mem->next = ptr2;
 8008852:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008856:	8812      	ldrh	r2, [r2, #0]
 8008858:	428a      	cmp	r2, r1
 800885a:	d001      	beq.n	8008860 <mem_trim+0xa8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800885c:	441a      	add	r2, r3
 800885e:	8055      	strh	r5, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008860:	482d      	ldr	r0, [pc, #180]	@ (8008918 <mem_trim+0x160>)
 8008862:	f007 f8f5 	bl	800fa50 <sys_mutex_unlock>
    return NULL;
 8008866:	4620      	mov	r0, r4
 8008868:	e03b      	b.n	80088e2 <mem_trim+0x12a>
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800886a:	4b2d      	ldr	r3, [pc, #180]	@ (8008920 <mem_trim+0x168>)
 800886c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8008870:	492c      	ldr	r1, [pc, #176]	@ (8008924 <mem_trim+0x16c>)
 8008872:	482d      	ldr	r0, [pc, #180]	@ (8008928 <mem_trim+0x170>)
 8008874:	f007 fb5e 	bl	800ff34 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	42a3      	cmp	r3, r4
 800887c:	d803      	bhi.n	8008886 <mem_trim+0xce>
 800887e:	4a25      	ldr	r2, [pc, #148]	@ (8008914 <mem_trim+0x15c>)
 8008880:	6812      	ldr	r2, [r2, #0]
 8008882:	42a2      	cmp	r2, r4
 8008884:	d8b3      	bhi.n	80087ee <mem_trim+0x36>
    MEM_STATS_INC_LOCKED(illegal);
 8008886:	f007 f8fd 	bl	800fa84 <sys_arch_protect>
 800888a:	f007 f907 	bl	800fa9c <sys_arch_unprotect>
    return NULL;
 800888e:	4620      	mov	r0, r4
 8008890:	e027      	b.n	80088e2 <mem_trim+0x12a>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008892:	f105 0114 	add.w	r1, r5, #20
 8008896:	42b1      	cmp	r1, r6
 8008898:	d8e2      	bhi.n	8008860 <mem_trim+0xa8>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800889a:	3508      	adds	r5, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800889c:	f647 51e8 	movw	r1, #32232	@ 0x7de8
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80088a0:	4445      	add	r5, r8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80088a2:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80088a4:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80088a6:	d01e      	beq.n	80088e6 <mem_trim+0x12e>
    if (mem2 < lfree) {
 80088a8:	481c      	ldr	r0, [pc, #112]	@ (800891c <mem_trim+0x164>)
  return (struct mem *)(void *)&ram[ptr];
 80088aa:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 80088ac:	6806      	ldr	r6, [r0, #0]
    mem2->next = mem->next;
 80088ae:	800a      	strh	r2, [r1, #0]
    mem2->used = 0;
 80088b0:	2200      	movs	r2, #0
    if (mem2 < lfree) {
 80088b2:	428e      	cmp	r6, r1
    mem2->prev = ptr;
 80088b4:	f8a1 8002 	strh.w	r8, [r1, #2]
    mem2->used = 0;
 80088b8:	710a      	strb	r2, [r1, #4]
      lfree = mem2;
 80088ba:	bf88      	it	hi
 80088bc:	6001      	strhi	r1, [r0, #0]
    mem->next = ptr2;
 80088be:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80088c2:	880a      	ldrh	r2, [r1, #0]
 80088c4:	f647 51e8 	movw	r1, #32232	@ 0x7de8
 80088c8:	428a      	cmp	r2, r1
 80088ca:	d0c9      	beq.n	8008860 <mem_trim+0xa8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80088cc:	4413      	add	r3, r2
 80088ce:	805d      	strh	r5, [r3, #2]
 80088d0:	e7c6      	b.n	8008860 <mem_trim+0xa8>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80088d2:	4b13      	ldr	r3, [pc, #76]	@ (8008920 <mem_trim+0x168>)
 80088d4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80088d8:	4914      	ldr	r1, [pc, #80]	@ (800892c <mem_trim+0x174>)
 80088da:	4813      	ldr	r0, [pc, #76]	@ (8008928 <mem_trim+0x170>)
 80088dc:	f007 fb2a 	bl	800ff34 <iprintf>
    return NULL;
 80088e0:	2000      	movs	r0, #0
  return rmem;
}
 80088e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80088e6:	4b0e      	ldr	r3, [pc, #56]	@ (8008920 <mem_trim+0x168>)
 80088e8:	f240 3216 	movw	r2, #790	@ 0x316
 80088ec:	4910      	ldr	r1, [pc, #64]	@ (8008930 <mem_trim+0x178>)
 80088ee:	480e      	ldr	r0, [pc, #56]	@ (8008928 <mem_trim+0x170>)
 80088f0:	f007 fb20 	bl	800ff34 <iprintf>
    mem2->next = mem->next;
 80088f4:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	e7d5      	b.n	80088a8 <mem_trim+0xf0>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80088fc:	4b08      	ldr	r3, [pc, #32]	@ (8008920 <mem_trim+0x168>)
 80088fe:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8008902:	490b      	ldr	r1, [pc, #44]	@ (8008930 <mem_trim+0x178>)
 8008904:	4808      	ldr	r0, [pc, #32]	@ (8008928 <mem_trim+0x170>)
 8008906:	f007 fb15 	bl	800ff34 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	e78e      	b.n	800882c <mem_trim+0x74>
 800890e:	bf00      	nop
 8008910:	24019cbc 	.word	0x24019cbc
 8008914:	24019cb8 	.word	0x24019cb8
 8008918:	24019cb4 	.word	0x24019cb4
 800891c:	24019cb0 	.word	0x24019cb0
 8008920:	080122b4 	.word	0x080122b4
 8008924:	08012418 	.word	0x08012418
 8008928:	080110dc 	.word	0x080110dc
 800892c:	08012430 	.word	0x08012430
 8008930:	08012450 	.word	0x08012450

08008934 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008934:	2800      	cmp	r0, #0
 8008936:	d06c      	beq.n	8008a12 <mem_malloc+0xde>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008938:	1cc3      	adds	r3, r0, #3
 800893a:	f023 0303 	bic.w	r3, r3, #3
 800893e:	b29b      	uxth	r3, r3
  if (size < MIN_SIZE_ALIGNED) {
 8008940:	2b0c      	cmp	r3, #12
{
 8008942:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (size < MIN_SIZE_ALIGNED) {
 8008946:	4698      	mov	r8, r3
 8008948:	bf38      	it	cc
 800894a:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800894e:	4580      	cmp	r8, r0
 8008950:	d327      	bcc.n	80089a2 <mem_malloc+0x6e>
 8008952:	f647 54e8 	movw	r4, #32232	@ 0x7de8
 8008956:	42a3      	cmp	r3, r4
 8008958:	d823      	bhi.n	80089a2 <mem_malloc+0x6e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800895a:	4f47      	ldr	r7, [pc, #284]	@ (8008a78 <mem_malloc+0x144>)
  return (mem_size_t)((u8_t *)mem - ram);
 800895c:	f8df a13c 	ldr.w	sl, [pc, #316]	@ 8008a9c <mem_malloc+0x168>
  sys_mutex_lock(&mem_mutex);
 8008960:	4846      	ldr	r0, [pc, #280]	@ (8008a7c <mem_malloc+0x148>)
 8008962:	f007 f86f 	bl	800fa44 <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008966:	f8d7 c000 	ldr.w	ip, [r7]
  return (mem_size_t)((u8_t *)mem - ram);
 800896a:	f8da 0000 	ldr.w	r0, [sl]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800896e:	eba4 0e08 	sub.w	lr, r4, r8
  return (mem_size_t)((u8_t *)mem - ram);
 8008972:	ebac 0300 	sub.w	r3, ip, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008976:	b299      	uxth	r1, r3
 8008978:	4571      	cmp	r1, lr
  return (mem_size_t)((u8_t *)mem - ram);
 800897a:	460b      	mov	r3, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800897c:	d20e      	bcs.n	800899c <mem_malloc+0x68>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800897e:	f06f 0907 	mvn.w	r9, #7
  return (struct mem *)(void *)&ram[ptr];
 8008982:	1844      	adds	r4, r0, r1
      if ((!mem->used) &&
 8008984:	461d      	mov	r5, r3
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008986:	5a43      	ldrh	r3, [r0, r1]
 8008988:	eba9 0201 	sub.w	r2, r9, r1
      if ((!mem->used) &&
 800898c:	7926      	ldrb	r6, [r4, #4]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800898e:	4619      	mov	r1, r3
      if ((!mem->used) &&
 8008990:	b916      	cbnz	r6, 8008998 <mem_malloc+0x64>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008992:	441a      	add	r2, r3
      if ((!mem->used) &&
 8008994:	4542      	cmp	r2, r8
 8008996:	d207      	bcs.n	80089a8 <mem_malloc+0x74>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008998:	459e      	cmp	lr, r3
 800899a:	d8f2      	bhi.n	8008982 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800899c:	4837      	ldr	r0, [pc, #220]	@ (8008a7c <mem_malloc+0x148>)
 800899e:	f007 f857 	bl	800fa50 <sys_mutex_unlock>
    return NULL;
 80089a2:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 80089a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80089a8:	f108 0114 	add.w	r1, r8, #20
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80089ac:	f108 0808 	add.w	r8, r8, #8
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80089b0:	428a      	cmp	r2, r1
 80089b2:	d32b      	bcc.n	8008a0c <mem_malloc+0xd8>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80089b4:	eb05 0908 	add.w	r9, r5, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80089b8:	f647 52e8 	movw	r2, #32232	@ 0x7de8
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80089bc:	fa1f f989 	uxth.w	r9, r9
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80089c0:	4591      	cmp	r9, r2
 80089c2:	d04c      	beq.n	8008a5e <mem_malloc+0x12a>
  return (struct mem *)(void *)&ram[ptr];
 80089c4:	eb00 0209 	add.w	r2, r0, r9
          mem2->used = 0;
 80089c8:	2100      	movs	r1, #0
 80089ca:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 80089cc:	f820 3009 	strh.w	r3, [r0, r9]
          mem->used = 1;
 80089d0:	2301      	movs	r3, #1
          mem2->prev = ptr;
 80089d2:	8055      	strh	r5, [r2, #2]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80089d4:	f647 52e8 	movw	r2, #32232	@ 0x7de8
          mem->next = ptr2;
 80089d8:	f8a4 9000 	strh.w	r9, [r4]
          mem->used = 1;
 80089dc:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80089de:	f830 3009 	ldrh.w	r3, [r0, r9]
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d002      	beq.n	80089ec <mem_malloc+0xb8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80089e6:	4418      	add	r0, r3
 80089e8:	f8a0 9002 	strh.w	r9, [r0, #2]
        if (mem == lfree) {
 80089ec:	4564      	cmp	r4, ip
          while (cur->used && cur != ram_end) {
 80089ee:	4d24      	ldr	r5, [pc, #144]	@ (8008a80 <mem_malloc+0x14c>)
        if (mem == lfree) {
 80089f0:	d028      	beq.n	8008a44 <mem_malloc+0x110>
        sys_mutex_unlock(&mem_mutex);
 80089f2:	4822      	ldr	r0, [pc, #136]	@ (8008a7c <mem_malloc+0x148>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80089f4:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 80089f6:	f007 f82b 	bl	800fa50 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80089fa:	682b      	ldr	r3, [r5, #0]
 80089fc:	4543      	cmp	r3, r8
 80089fe:	d319      	bcc.n	8008a34 <mem_malloc+0x100>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008a00:	07a3      	lsls	r3, r4, #30
 8008a02:	d108      	bne.n	8008a16 <mem_malloc+0xe2>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008a04:	f104 0008 	add.w	r0, r4, #8
}
 8008a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          mem->used = 1;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	7123      	strb	r3, [r4, #4]
 8008a10:	e7ec      	b.n	80089ec <mem_malloc+0xb8>
    return NULL;
 8008a12:	2000      	movs	r0, #0
}
 8008a14:	4770      	bx	lr
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008a16:	4b1b      	ldr	r3, [pc, #108]	@ (8008a84 <mem_malloc+0x150>)
 8008a18:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8008a1c:	491a      	ldr	r1, [pc, #104]	@ (8008a88 <mem_malloc+0x154>)
 8008a1e:	481b      	ldr	r0, [pc, #108]	@ (8008a8c <mem_malloc+0x158>)
 8008a20:	f007 fa88 	bl	800ff34 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008a24:	4b17      	ldr	r3, [pc, #92]	@ (8008a84 <mem_malloc+0x150>)
 8008a26:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8008a2a:	4919      	ldr	r1, [pc, #100]	@ (8008a90 <mem_malloc+0x15c>)
 8008a2c:	4817      	ldr	r0, [pc, #92]	@ (8008a8c <mem_malloc+0x158>)
 8008a2e:	f007 fa81 	bl	800ff34 <iprintf>
 8008a32:	e7e7      	b.n	8008a04 <mem_malloc+0xd0>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008a34:	4b13      	ldr	r3, [pc, #76]	@ (8008a84 <mem_malloc+0x150>)
 8008a36:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8008a3a:	4916      	ldr	r1, [pc, #88]	@ (8008a94 <mem_malloc+0x160>)
 8008a3c:	4813      	ldr	r0, [pc, #76]	@ (8008a8c <mem_malloc+0x158>)
 8008a3e:	f007 fa79 	bl	800ff34 <iprintf>
 8008a42:	e7dd      	b.n	8008a00 <mem_malloc+0xcc>
  return (struct mem *)(void *)&ram[ptr];
 8008a44:	f8da 0000 	ldr.w	r0, [sl]
 8008a48:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 8008a4a:	6829      	ldr	r1, [r5, #0]
 8008a4c:	e003      	b.n	8008a56 <mem_malloc+0x122>
  return (struct mem *)(void *)&ram[ptr];
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8008a52:	791a      	ldrb	r2, [r3, #4]
 8008a54:	b10a      	cbz	r2, 8008a5a <mem_malloc+0x126>
 8008a56:	4299      	cmp	r1, r3
 8008a58:	d1f9      	bne.n	8008a4e <mem_malloc+0x11a>
          lfree = cur;
 8008a5a:	603b      	str	r3, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008a5c:	e7c9      	b.n	80089f2 <mem_malloc+0xbe>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008a5e:	4b09      	ldr	r3, [pc, #36]	@ (8008a84 <mem_malloc+0x150>)
 8008a60:	f240 3287 	movw	r2, #903	@ 0x387
 8008a64:	490c      	ldr	r1, [pc, #48]	@ (8008a98 <mem_malloc+0x164>)
 8008a66:	4809      	ldr	r0, [pc, #36]	@ (8008a8c <mem_malloc+0x158>)
 8008a68:	f007 fa64 	bl	800ff34 <iprintf>
          mem2->next = mem->next;
 8008a6c:	8823      	ldrh	r3, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 8008a6e:	f8da 0000 	ldr.w	r0, [sl]
        if (mem == lfree) {
 8008a72:	f8d7 c000 	ldr.w	ip, [r7]
 8008a76:	e7a5      	b.n	80089c4 <mem_malloc+0x90>
 8008a78:	24019cb0 	.word	0x24019cb0
 8008a7c:	24019cb4 	.word	0x24019cb4
 8008a80:	24019cb8 	.word	0x24019cb8
 8008a84:	080122b4 	.word	0x080122b4
 8008a88:	08012494 	.word	0x08012494
 8008a8c:	080110dc 	.word	0x080110dc
 8008a90:	080124c4 	.word	0x080124c4
 8008a94:	08012464 	.word	0x08012464
 8008a98:	08012450 	.word	0x08012450
 8008a9c:	24019cbc 	.word	0x24019cbc

08008aa0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008aa4:	f006 ffee 	bl	800fa84 <sys_arch_protect>

  memp = *desc->tab;
 8008aa8:	68a3      	ldr	r3, [r4, #8]
 8008aaa:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008aac:	b18c      	cbz	r4, 8008ad2 <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008aae:	6822      	ldr	r2, [r4, #0]
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008ab4:	07a3      	lsls	r3, r4, #30
 8008ab6:	d104      	bne.n	8008ac2 <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008ab8:	4628      	mov	r0, r5
 8008aba:	f006 ffef 	bl	800fa9c <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8008abe:	4620      	mov	r0, r4
 8008ac0:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008ac2:	4b06      	ldr	r3, [pc, #24]	@ (8008adc <do_memp_malloc_pool+0x3c>)
 8008ac4:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8008ac8:	4905      	ldr	r1, [pc, #20]	@ (8008ae0 <do_memp_malloc_pool+0x40>)
 8008aca:	4806      	ldr	r0, [pc, #24]	@ (8008ae4 <do_memp_malloc_pool+0x44>)
 8008acc:	f007 fa32 	bl	800ff34 <iprintf>
 8008ad0:	e7f2      	b.n	8008ab8 <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 8008ad2:	f006 ffe3 	bl	800fa9c <sys_arch_unprotect>
}
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	bd38      	pop	{r3, r4, r5, pc}
 8008ada:	bf00      	nop
 8008adc:	080124e8 	.word	0x080124e8
 8008ae0:	08012518 	.word	0x08012518
 8008ae4:	080110dc 	.word	0x080110dc

08008ae8 <memp_init_pool>:
{
 8008ae8:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 8008aea:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 8008aec:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8008aee:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8008af2:	6029      	str	r1, [r5, #0]
  for (i = 0; i < desc->num; ++i) {
 8008af4:	b17c      	cbz	r4, 8008b16 <memp_init_pool+0x2e>
 8008af6:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008af8:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 8008afc:	460a      	mov	r2, r1
 8008afe:	f023 0303 	bic.w	r3, r3, #3
 8008b02:	e000      	b.n	8008b06 <memp_init_pool+0x1e>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008b04:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 8008b06:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8008b08:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008b0a:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 8008b0e:	4619      	mov	r1, r3
 8008b10:	42a2      	cmp	r2, r4
 8008b12:	d1f7      	bne.n	8008b04 <memp_init_pool+0x1c>
 8008b14:	602b      	str	r3, [r5, #0]
}
 8008b16:	bc30      	pop	{r4, r5}
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop

08008b1c <memp_init>:
{
 8008b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b1e:	f8df e054 	ldr.w	lr, [pc, #84]	@ 8008b74 <memp_init+0x58>
 8008b22:	2404      	movs	r4, #4
 8008b24:	4b11      	ldr	r3, [pc, #68]	@ (8008b6c <memp_init+0x50>)
  *desc->tab = NULL;
 8008b26:	2600      	movs	r6, #0
{
 8008b28:	4d11      	ldr	r5, [pc, #68]	@ (8008b70 <memp_init+0x54>)
 8008b2a:	f10e 0734 	add.w	r7, lr, #52	@ 0x34
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008b2e:	3303      	adds	r3, #3
    memp_init_pool(memp_pools[i]);
 8008b30:	f85e 2b04 	ldr.w	r2, [lr], #4
  *desc->tab = NULL;
 8008b34:	602e      	str	r6, [r5, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008b36:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8008b3a:	b16c      	cbz	r4, 8008b58 <memp_init+0x3c>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 8008b42:	460a      	mov	r2, r1
 8008b44:	e000      	b.n	8008b48 <memp_init+0x2c>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008b46:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 8008b48:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8008b4a:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008b4c:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 8008b50:	4619      	mov	r1, r3
 8008b52:	42a2      	cmp	r2, r4
 8008b54:	d1f7      	bne.n	8008b46 <memp_init+0x2a>
 8008b56:	602b      	str	r3, [r5, #0]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008b58:	4577      	cmp	r7, lr
 8008b5a:	d005      	beq.n	8008b68 <memp_init+0x4c>
    memp_init_pool(memp_pools[i]);
 8008b5c:	f8de 2000 	ldr.w	r2, [lr]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008b60:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 8008b64:	8854      	ldrh	r4, [r2, #2]
 8008b66:	e7e2      	b.n	8008b2e <memp_init+0x12>
}
 8008b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	240206c8 	.word	0x240206c8
 8008b70:	240206c4 	.word	0x240206c4
 8008b74:	080125ac 	.word	0x080125ac

08008b78 <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008b78:	b108      	cbz	r0, 8008b7e <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008b7a:	f7ff bf91 	b.w	8008aa0 <do_memp_malloc_pool>
{
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008b82:	4b04      	ldr	r3, [pc, #16]	@ (8008b94 <memp_malloc_pool+0x1c>)
 8008b84:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8008b88:	4903      	ldr	r1, [pc, #12]	@ (8008b98 <memp_malloc_pool+0x20>)
 8008b8a:	4804      	ldr	r0, [pc, #16]	@ (8008b9c <memp_malloc_pool+0x24>)
 8008b8c:	f007 f9d2 	bl	800ff34 <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008b90:	4620      	mov	r0, r4
 8008b92:	bd10      	pop	{r4, pc}
 8008b94:	080124e8 	.word	0x080124e8
 8008b98:	0801253c 	.word	0x0801253c
 8008b9c:	080110dc 	.word	0x080110dc

08008ba0 <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008ba0:	280c      	cmp	r0, #12
{
 8008ba2:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008ba4:	d806      	bhi.n	8008bb4 <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008ba6:	4b08      	ldr	r3, [pc, #32]	@ (8008bc8 <memp_malloc+0x28>)
 8008ba8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 8008bac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008bb0:	f7ff bf76 	b.w	8008aa0 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008bb4:	4b05      	ldr	r3, [pc, #20]	@ (8008bcc <memp_malloc+0x2c>)
 8008bb6:	f240 1257 	movw	r2, #343	@ 0x157
 8008bba:	4905      	ldr	r1, [pc, #20]	@ (8008bd0 <memp_malloc+0x30>)
 8008bbc:	4805      	ldr	r0, [pc, #20]	@ (8008bd4 <memp_malloc+0x34>)
 8008bbe:	f007 f9b9 	bl	800ff34 <iprintf>
}
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	bd08      	pop	{r3, pc}
 8008bc6:	bf00      	nop
 8008bc8:	080125ac 	.word	0x080125ac
 8008bcc:	080124e8 	.word	0x080124e8
 8008bd0:	08012550 	.word	0x08012550
 8008bd4:	080110dc 	.word	0x080110dc

08008bd8 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008bd8:	b1c0      	cbz	r0, 8008c0c <memp_free_pool+0x34>
{
 8008bda:	b570      	push	{r4, r5, r6, lr}
 8008bdc:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 8008bde:	b161      	cbz	r1, 8008bfa <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8008be0:	078b      	lsls	r3, r1, #30
 8008be2:	4605      	mov	r5, r0
 8008be4:	d10a      	bne.n	8008bfc <memp_free_pool+0x24>
  SYS_ARCH_PROTECT(old_level);
 8008be6:	f006 ff4d 	bl	800fa84 <sys_arch_protect>
  memp->next = *desc->tab;
 8008bea:	68ab      	ldr	r3, [r5, #8]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8008bf0:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 8008bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8008bf6:	f006 bf51 	b.w	800fa9c <sys_arch_unprotect>
}
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8008bfc:	4b07      	ldr	r3, [pc, #28]	@ (8008c1c <memp_free_pool+0x44>)
 8008bfe:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8008c02:	4907      	ldr	r1, [pc, #28]	@ (8008c20 <memp_free_pool+0x48>)
 8008c04:	4807      	ldr	r0, [pc, #28]	@ (8008c24 <memp_free_pool+0x4c>)
 8008c06:	f007 f995 	bl	800ff34 <iprintf>
 8008c0a:	e7ec      	b.n	8008be6 <memp_free_pool+0xe>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008c0c:	4b03      	ldr	r3, [pc, #12]	@ (8008c1c <memp_free_pool+0x44>)
 8008c0e:	f240 1295 	movw	r2, #405	@ 0x195
 8008c12:	4905      	ldr	r1, [pc, #20]	@ (8008c28 <memp_free_pool+0x50>)
 8008c14:	4803      	ldr	r0, [pc, #12]	@ (8008c24 <memp_free_pool+0x4c>)
 8008c16:	f007 b98d 	b.w	800ff34 <iprintf>
 8008c1a:	bf00      	nop
 8008c1c:	080124e8 	.word	0x080124e8
 8008c20:	08012570 	.word	0x08012570
 8008c24:	080110dc 	.word	0x080110dc
 8008c28:	0801253c 	.word	0x0801253c

08008c2c <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008c2c:	280c      	cmp	r0, #12
 8008c2e:	d812      	bhi.n	8008c56 <memp_free+0x2a>
{
 8008c30:	b570      	push	{r4, r5, r6, lr}
 8008c32:	460c      	mov	r4, r1

  if (mem == NULL) {
 8008c34:	b171      	cbz	r1, 8008c54 <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008c36:	4b0f      	ldr	r3, [pc, #60]	@ (8008c74 <memp_free+0x48>)
 8008c38:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 8008c3c:	078b      	lsls	r3, r1, #30
 8008c3e:	d111      	bne.n	8008c64 <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 8008c40:	f006 ff20 	bl	800fa84 <sys_arch_protect>
  memp->next = *desc->tab;
 8008c44:	68ab      	ldr	r3, [r5, #8]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8008c4a:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8008c50:	f006 bf24 	b.w	800fa9c <sys_arch_unprotect>
}
 8008c54:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008c56:	4b08      	ldr	r3, [pc, #32]	@ (8008c78 <memp_free+0x4c>)
 8008c58:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8008c5c:	4907      	ldr	r1, [pc, #28]	@ (8008c7c <memp_free+0x50>)
 8008c5e:	4808      	ldr	r0, [pc, #32]	@ (8008c80 <memp_free+0x54>)
 8008c60:	f007 b968 	b.w	800ff34 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8008c64:	4b04      	ldr	r3, [pc, #16]	@ (8008c78 <memp_free+0x4c>)
 8008c66:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8008c6a:	4906      	ldr	r1, [pc, #24]	@ (8008c84 <memp_free+0x58>)
 8008c6c:	4804      	ldr	r0, [pc, #16]	@ (8008c80 <memp_free+0x54>)
 8008c6e:	f007 f961 	bl	800ff34 <iprintf>
 8008c72:	e7e5      	b.n	8008c40 <memp_free+0x14>
 8008c74:	080125ac 	.word	0x080125ac
 8008c78:	080124e8 	.word	0x080124e8
 8008c7c:	08012590 	.word	0x08012590
 8008c80:	080110dc 	.word	0x080110dc
 8008c84:	08012570 	.word	0x08012570

08008c88 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8008c88:	f06f 000b 	mvn.w	r0, #11
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop

08008c90 <netif_issue_reports>:
{
 8008c90:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008c92:	4604      	mov	r4, r0
 8008c94:	b150      	cbz	r0, 8008cac <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008c96:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8008c9a:	f003 0205 	and.w	r2, r3, #5
 8008c9e:	2a05      	cmp	r2, #5
 8008ca0:	d103      	bne.n	8008caa <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008ca2:	6862      	ldr	r2, [r4, #4]
 8008ca4:	b10a      	cbz	r2, 8008caa <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008ca6:	071b      	lsls	r3, r3, #28
 8008ca8:	d408      	bmi.n	8008cbc <netif_issue_reports+0x2c>
}
 8008caa:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008cac:	4b06      	ldr	r3, [pc, #24]	@ (8008cc8 <netif_issue_reports+0x38>)
 8008cae:	f240 326d 	movw	r2, #877	@ 0x36d
 8008cb2:	4906      	ldr	r1, [pc, #24]	@ (8008ccc <netif_issue_reports+0x3c>)
 8008cb4:	4806      	ldr	r0, [pc, #24]	@ (8008cd0 <netif_issue_reports+0x40>)
 8008cb6:	f007 f93d 	bl	800ff34 <iprintf>
 8008cba:	e7ec      	b.n	8008c96 <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 8008cbc:	1d21      	adds	r1, r4, #4
 8008cbe:	4620      	mov	r0, r4
}
 8008cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8008cc4:	f005 be4c 	b.w	800e960 <etharp_request>
 8008cc8:	0801267c 	.word	0x0801267c
 8008ccc:	080126b0 	.word	0x080126b0
 8008cd0:	080110dc 	.word	0x080110dc

08008cd4 <netif_init>:
}
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop

08008cd8 <netif_set_addr>:
{
 8008cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cda:	460d      	mov	r5, r1
 8008cdc:	b083      	sub	sp, #12
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4617      	mov	r7, r2
 8008ce2:	461e      	mov	r6, r3
  LWIP_ASSERT_CORE_LOCKED();
 8008ce4:	f7fb f9f4 	bl	80040d0 <sys_check_core_locking>
  if (ipaddr == NULL) {
 8008ce8:	b1e5      	cbz	r5, 8008d24 <netif_set_addr+0x4c>
  if (netmask == NULL) {
 8008cea:	b187      	cbz	r7, 8008d0e <netif_set_addr+0x36>
  if (gw == NULL) {
 8008cec:	b196      	cbz	r6, 8008d14 <netif_set_addr+0x3c>
  remove = ip4_addr_isany(ipaddr);
 8008cee:	682b      	ldr	r3, [r5, #0]
 8008cf0:	b1a3      	cbz	r3, 8008d1c <netif_set_addr+0x44>
 8008cf2:	2100      	movs	r1, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	68a2      	ldr	r2, [r4, #8]
 8008cf8:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008cfa:	68e2      	ldr	r2, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008cfc:	bf18      	it	ne
 8008cfe:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008d00:	6833      	ldr	r3, [r6, #0]
 8008d02:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008d04:	bf18      	it	ne
 8008d06:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 8008d08:	b181      	cbz	r1, 8008d2c <netif_set_addr+0x54>
}
 8008d0a:	b003      	add	sp, #12
 8008d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netmask = IP4_ADDR_ANY4;
 8008d0e:	4f1b      	ldr	r7, [pc, #108]	@ (8008d7c <netif_set_addr+0xa4>)
  if (gw == NULL) {
 8008d10:	2e00      	cmp	r6, #0
 8008d12:	d1ec      	bne.n	8008cee <netif_set_addr+0x16>
  remove = ip4_addr_isany(ipaddr);
 8008d14:	682b      	ldr	r3, [r5, #0]
    gw = IP4_ADDR_ANY4;
 8008d16:	4e19      	ldr	r6, [pc, #100]	@ (8008d7c <netif_set_addr+0xa4>)
  remove = ip4_addr_isany(ipaddr);
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1ea      	bne.n	8008cf2 <netif_set_addr+0x1a>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008d1c:	6862      	ldr	r2, [r4, #4]
 8008d1e:	b9da      	cbnz	r2, 8008d58 <netif_set_addr+0x80>
  remove = ip4_addr_isany(ipaddr);
 8008d20:	2101      	movs	r1, #1
 8008d22:	e7e7      	b.n	8008cf4 <netif_set_addr+0x1c>
    ipaddr = IP4_ADDR_ANY4;
 8008d24:	4d15      	ldr	r5, [pc, #84]	@ (8008d7c <netif_set_addr+0xa4>)
  if (netmask == NULL) {
 8008d26:	2f00      	cmp	r7, #0
 8008d28:	d1e0      	bne.n	8008cec <netif_set_addr+0x14>
 8008d2a:	e7f0      	b.n	8008d0e <netif_set_addr+0x36>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008d2c:	6863      	ldr	r3, [r4, #4]
 8008d2e:	682a      	ldr	r2, [r5, #0]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d0ea      	beq.n	8008d0a <netif_set_addr+0x32>
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008d34:	a901      	add	r1, sp, #4
 8008d36:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008d38:	e9cd 3200 	strd	r3, r2, [sp]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008d3c:	f002 f8c2 	bl	800aec4 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008d40:	a901      	add	r1, sp, #4
 8008d42:	4668      	mov	r0, sp
 8008d44:	f005 f9e4 	bl	800e110 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008d48:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008d4e:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008d50:	f7ff ff9e 	bl	8008c90 <netif_issue_reports>
}
 8008d54:	b003      	add	sp, #12
 8008d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008d58:	a901      	add	r1, sp, #4
 8008d5a:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008d5c:	e9cd 2300 	strd	r2, r3, [sp]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008d60:	f002 f8b0 	bl	800aec4 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008d64:	a901      	add	r1, sp, #4
 8008d66:	4668      	mov	r0, sp
 8008d68:	f005 f9d2 	bl	800e110 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008d6c:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008d6e:	2101      	movs	r1, #1
 8008d70:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008d72:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008d74:	f7ff ff8c 	bl	8008c90 <netif_issue_reports>
    return 1; /* address changed */
 8008d78:	e7d2      	b.n	8008d20 <netif_set_addr+0x48>
 8008d7a:	bf00      	nop
 8008d7c:	0801406c 	.word	0x0801406c

08008d80 <netif_add>:
{
 8008d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d84:	4606      	mov	r6, r0
 8008d86:	460c      	mov	r4, r1
 8008d88:	4615      	mov	r5, r2
 8008d8a:	461f      	mov	r7, r3
 8008d8c:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
  LWIP_ASSERT_CORE_LOCKED();
 8008d90:	f7fb f99e 	bl	80040d0 <sys_check_core_locking>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008d94:	2e00      	cmp	r6, #0
 8008d96:	d07f      	beq.n	8008e98 <netif_add+0x118>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008d98:	f1b8 0f00 	cmp.w	r8, #0
 8008d9c:	f000 8085 	beq.w	8008eaa <netif_add+0x12a>
  if (ipaddr == NULL) {
 8008da0:	2c00      	cmp	r4, #0
 8008da2:	d070      	beq.n	8008e86 <netif_add+0x106>
  if (netmask == NULL) {
 8008da4:	2d00      	cmp	r5, #0
 8008da6:	d069      	beq.n	8008e7c <netif_add+0xfc>
  if (gw == NULL) {
 8008da8:	2f00      	cmp	r7, #0
 8008daa:	d06a      	beq.n	8008e82 <netif_add+0x102>
  netif->state = state;
 8008dac:	980a      	ldr	r0, [sp, #40]	@ 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008dae:	463b      	mov	r3, r7
  netif->num = netif_num;
 8008db0:	f8df b124 	ldr.w	fp, [pc, #292]	@ 8008ed8 <netif_add+0x158>
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008db4:	462a      	mov	r2, r5
  netif->state = state;
 8008db6:	6230      	str	r0, [r6, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008db8:	4621      	mov	r1, r4
  netif->input = input;
 8008dba:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008dbc:	6130      	str	r0, [r6, #16]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	e9c6 0001 	strd	r0, r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->gw);
 8008dc4:	60f0      	str	r0, [r6, #12]
  netif->mtu = 0;
 8008dc6:	84b0      	strh	r0, [r6, #36]	@ 0x24
  netif->flags = 0;
 8008dc8:	f886 002d 	strb.w	r0, [r6, #45]	@ 0x2d
  netif->link_callback = NULL;
 8008dcc:	61f0      	str	r0, [r6, #28]
  netif->num = netif_num;
 8008dce:	f89b 0000 	ldrb.w	r0, [fp]
 8008dd2:	f886 0030 	strb.w	r0, [r6, #48]	@ 0x30
  netif->output = netif_null_output_ip4;
 8008dd6:	4839      	ldr	r0, [pc, #228]	@ (8008ebc <netif_add+0x13c>)
 8008dd8:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f7ff ff7c 	bl	8008cd8 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8008de0:	4630      	mov	r0, r6
 8008de2:	47c0      	blx	r8
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d15e      	bne.n	8008ea6 <netif_add+0x126>
      if (netif->num == 255) {
 8008de8:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
 8008dec:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8008edc <netif_add+0x15c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008df0:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8008ecc <netif_add+0x14c>
 8008df4:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 8008ee0 <netif_add+0x160>
 8008df8:	4f31      	ldr	r7, [pc, #196]	@ (8008ec0 <netif_add+0x140>)
      if (netif->num == 255) {
 8008dfa:	2bff      	cmp	r3, #255	@ 0xff
 8008dfc:	d102      	bne.n	8008e04 <netif_add+0x84>
        netif->num = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f886 3030 	strb.w	r3, [r6, #48]	@ 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008e04:	f8d9 4000 	ldr.w	r4, [r9]
 8008e08:	2c00      	cmp	r4, #0
 8008e0a:	d042      	beq.n	8008e92 <netif_add+0x112>
      num_netifs = 0;
 8008e0c:	2500      	movs	r5, #0
 8008e0e:	e007      	b.n	8008e20 <netif_add+0xa0>
        if (netif2->num == netif->num) {
 8008e10:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8008e14:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d014      	beq.n	8008e46 <netif_add+0xc6>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008e1c:	6824      	ldr	r4, [r4, #0]
 8008e1e:	b1fc      	cbz	r4, 8008e60 <netif_add+0xe0>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008e20:	42a6      	cmp	r6, r4
        num_netifs++;
 8008e22:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008e26:	d013      	beq.n	8008e50 <netif_add+0xd0>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008e28:	2dff      	cmp	r5, #255	@ 0xff
 8008e2a:	ddf1      	ble.n	8008e10 <netif_add+0x90>
 8008e2c:	4643      	mov	r3, r8
 8008e2e:	f240 128d 	movw	r2, #397	@ 0x18d
 8008e32:	4924      	ldr	r1, [pc, #144]	@ (8008ec4 <netif_add+0x144>)
 8008e34:	4638      	mov	r0, r7
 8008e36:	f007 f87d 	bl	800ff34 <iprintf>
        if (netif2->num == netif->num) {
 8008e3a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8008e3e:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d1ea      	bne.n	8008e1c <netif_add+0x9c>
          netif->num++;
 8008e46:	3301      	adds	r3, #1
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	f886 3030 	strb.w	r3, [r6, #48]	@ 0x30
    } while (netif2 != NULL);
 8008e4e:	e7d4      	b.n	8008dfa <netif_add+0x7a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008e50:	4643      	mov	r3, r8
 8008e52:	f240 128b 	movw	r2, #395	@ 0x18b
 8008e56:	4651      	mov	r1, sl
 8008e58:	4638      	mov	r0, r7
 8008e5a:	f007 f86b 	bl	800ff34 <iprintf>
 8008e5e:	e7e3      	b.n	8008e28 <netif_add+0xa8>
  netif->next = netif_list;
 8008e60:	f8d9 4000 	ldr.w	r4, [r9]
  if (netif->num == 254) {
 8008e64:	2afe      	cmp	r2, #254	@ 0xfe
 8008e66:	d012      	beq.n	8008e8e <netif_add+0x10e>
    netif_num = (u8_t)(netif->num + 1);
 8008e68:	1c53      	adds	r3, r2, #1
 8008e6a:	b2db      	uxtb	r3, r3
  return netif;
 8008e6c:	4630      	mov	r0, r6
  netif->next = netif_list;
 8008e6e:	6034      	str	r4, [r6, #0]
 8008e70:	f88b 3000 	strb.w	r3, [fp]
  netif_list = netif;
 8008e74:	f8c9 6000 	str.w	r6, [r9]
}
 8008e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008e7c:	4d12      	ldr	r5, [pc, #72]	@ (8008ec8 <netif_add+0x148>)
  if (gw == NULL) {
 8008e7e:	2f00      	cmp	r7, #0
 8008e80:	d194      	bne.n	8008dac <netif_add+0x2c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008e82:	4f11      	ldr	r7, [pc, #68]	@ (8008ec8 <netif_add+0x148>)
 8008e84:	e792      	b.n	8008dac <netif_add+0x2c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008e86:	4c10      	ldr	r4, [pc, #64]	@ (8008ec8 <netif_add+0x148>)
  if (netmask == NULL) {
 8008e88:	2d00      	cmp	r5, #0
 8008e8a:	d18d      	bne.n	8008da8 <netif_add+0x28>
 8008e8c:	e7f6      	b.n	8008e7c <netif_add+0xfc>
    netif_num = 0;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	e7ec      	b.n	8008e6c <netif_add+0xec>
  if (netif->num == 254) {
 8008e92:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 8008e96:	e7e5      	b.n	8008e64 <netif_add+0xe4>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008e98:	4b0c      	ldr	r3, [pc, #48]	@ (8008ecc <netif_add+0x14c>)
 8008e9a:	f240 1227 	movw	r2, #295	@ 0x127
 8008e9e:	490c      	ldr	r1, [pc, #48]	@ (8008ed0 <netif_add+0x150>)
 8008ea0:	4807      	ldr	r0, [pc, #28]	@ (8008ec0 <netif_add+0x140>)
 8008ea2:	f007 f847 	bl	800ff34 <iprintf>
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	e7e6      	b.n	8008e78 <netif_add+0xf8>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008eaa:	4b08      	ldr	r3, [pc, #32]	@ (8008ecc <netif_add+0x14c>)
 8008eac:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008eb0:	4908      	ldr	r1, [pc, #32]	@ (8008ed4 <netif_add+0x154>)
 8008eb2:	4803      	ldr	r0, [pc, #12]	@ (8008ec0 <netif_add+0x140>)
 8008eb4:	f007 f83e 	bl	800ff34 <iprintf>
 8008eb8:	e7f5      	b.n	8008ea6 <netif_add+0x126>
 8008eba:	bf00      	nop
 8008ebc:	08008c89 	.word	0x08008c89
 8008ec0:	080110dc 	.word	0x080110dc
 8008ec4:	08012728 	.word	0x08012728
 8008ec8:	0801406c 	.word	0x0801406c
 8008ecc:	0801267c 	.word	0x0801267c
 8008ed0:	080126d4 	.word	0x080126d4
 8008ed4:	080126f0 	.word	0x080126f0
 8008ed8:	2402074b 	.word	0x2402074b
 8008edc:	24020750 	.word	0x24020750
 8008ee0:	08012714 	.word	0x08012714

08008ee4 <netif_set_default>:
{
 8008ee4:	b510      	push	{r4, lr}
 8008ee6:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8008ee8:	f7fb f8f2 	bl	80040d0 <sys_check_core_locking>
  netif_default = netif;
 8008eec:	4b01      	ldr	r3, [pc, #4]	@ (8008ef4 <netif_set_default+0x10>)
 8008eee:	601c      	str	r4, [r3, #0]
}
 8008ef0:	bd10      	pop	{r4, pc}
 8008ef2:	bf00      	nop
 8008ef4:	2402074c 	.word	0x2402074c

08008ef8 <netif_set_up>:
{
 8008ef8:	b510      	push	{r4, lr}
 8008efa:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8008efc:	f7fb f8e8 	bl	80040d0 <sys_check_core_locking>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008f00:	b174      	cbz	r4, 8008f20 <netif_set_up+0x28>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008f02:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8008f06:	07da      	lsls	r2, r3, #31
 8008f08:	d500      	bpl.n	8008f0c <netif_set_up+0x14>
}
 8008f0a:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008f0c:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008f10:	4620      	mov	r0, r4
 8008f12:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008f14:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8008f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008f1c:	f7ff beb8 	b.w	8008c90 <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008f20:	4b04      	ldr	r3, [pc, #16]	@ (8008f34 <netif_set_up+0x3c>)
 8008f22:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8008f26:	4904      	ldr	r1, [pc, #16]	@ (8008f38 <netif_set_up+0x40>)
 8008f28:	4804      	ldr	r0, [pc, #16]	@ (8008f3c <netif_set_up+0x44>)
}
 8008f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008f2e:	f007 b801 	b.w	800ff34 <iprintf>
 8008f32:	bf00      	nop
 8008f34:	0801267c 	.word	0x0801267c
 8008f38:	08012758 	.word	0x08012758
 8008f3c:	080110dc 	.word	0x080110dc

08008f40 <netif_set_down>:
{
 8008f40:	b510      	push	{r4, lr}
 8008f42:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8008f44:	f7fb f8c4 	bl	80040d0 <sys_check_core_locking>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008f48:	b17c      	cbz	r4, 8008f6a <netif_set_down+0x2a>
  if (netif->flags & NETIF_FLAG_UP) {
 8008f4a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8008f4e:	07da      	lsls	r2, r3, #31
 8008f50:	d505      	bpl.n	8008f5e <netif_set_down+0x1e>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008f52:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008f56:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008f58:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008f5c:	d400      	bmi.n	8008f60 <netif_set_down+0x20>
}
 8008f5e:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 8008f60:	4620      	mov	r0, r4
}
 8008f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_cleanup_netif(netif);
 8008f66:	f005 bac3 	b.w	800e4f0 <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008f6a:	4b04      	ldr	r3, [pc, #16]	@ (8008f7c <netif_set_down+0x3c>)
 8008f6c:	f240 329b 	movw	r2, #923	@ 0x39b
 8008f70:	4903      	ldr	r1, [pc, #12]	@ (8008f80 <netif_set_down+0x40>)
 8008f72:	4804      	ldr	r0, [pc, #16]	@ (8008f84 <netif_set_down+0x44>)
}
 8008f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008f78:	f006 bfdc 	b.w	800ff34 <iprintf>
 8008f7c:	0801267c 	.word	0x0801267c
 8008f80:	08012774 	.word	0x08012774
 8008f84:	080110dc 	.word	0x080110dc

08008f88 <netif_set_link_up>:
{
 8008f88:	b510      	push	{r4, lr}
 8008f8a:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8008f8c:	f7fb f8a0 	bl	80040d0 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008f90:	b19c      	cbz	r4, 8008fba <netif_set_link_up+0x32>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008f92:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8008f96:	075a      	lsls	r2, r3, #29
 8008f98:	d500      	bpl.n	8008f9c <netif_set_link_up+0x14>
}
 8008f9a:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008f9c:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008fa0:	2103      	movs	r1, #3
 8008fa2:	4620      	mov	r0, r4
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008fa4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008fa8:	f7ff fe72 	bl	8008c90 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8008fac:	69e3      	ldr	r3, [r4, #28]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0f3      	beq.n	8008f9a <netif_set_link_up+0x12>
 8008fb2:	4620      	mov	r0, r4
}
 8008fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8008fb8:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008fba:	4b04      	ldr	r3, [pc, #16]	@ (8008fcc <netif_set_link_up+0x44>)
 8008fbc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8008fc0:	4903      	ldr	r1, [pc, #12]	@ (8008fd0 <netif_set_link_up+0x48>)
 8008fc2:	4804      	ldr	r0, [pc, #16]	@ (8008fd4 <netif_set_link_up+0x4c>)
}
 8008fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008fc8:	f006 bfb4 	b.w	800ff34 <iprintf>
 8008fcc:	0801267c 	.word	0x0801267c
 8008fd0:	08012794 	.word	0x08012794
 8008fd4:	080110dc 	.word	0x080110dc

08008fd8 <netif_set_link_down>:
{
 8008fd8:	b510      	push	{r4, lr}
 8008fda:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8008fdc:	f7fb f878 	bl	80040d0 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008fe0:	b174      	cbz	r4, 8009000 <netif_set_link_down+0x28>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008fe2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8008fe6:	075a      	lsls	r2, r3, #29
 8008fe8:	d509      	bpl.n	8008ffe <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008fea:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 8008fee:	69e2      	ldr	r2, [r4, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008ff0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008ff4:	b11a      	cbz	r2, 8008ffe <netif_set_link_down+0x26>
 8008ff6:	4620      	mov	r0, r4
}
 8008ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8008ffc:	4710      	bx	r2
}
 8008ffe:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009000:	4b04      	ldr	r3, [pc, #16]	@ (8009014 <netif_set_link_down+0x3c>)
 8009002:	f240 4206 	movw	r2, #1030	@ 0x406
 8009006:	4904      	ldr	r1, [pc, #16]	@ (8009018 <netif_set_link_down+0x40>)
 8009008:	4804      	ldr	r0, [pc, #16]	@ (800901c <netif_set_link_down+0x44>)
}
 800900a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800900e:	f006 bf91 	b.w	800ff34 <iprintf>
 8009012:	bf00      	nop
 8009014:	0801267c 	.word	0x0801267c
 8009018:	080127b8 	.word	0x080127b8
 800901c:	080110dc 	.word	0x080110dc

08009020 <netif_set_link_callback>:
{
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4604      	mov	r4, r0
 8009024:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8009026:	f7fb f853 	bl	80040d0 <sys_check_core_locking>
  if (netif) {
 800902a:	b104      	cbz	r4, 800902e <netif_set_link_callback+0xe>
    netif->link_callback = link_callback;
 800902c:	61e5      	str	r5, [r4, #28]
}
 800902e:	bd38      	pop	{r3, r4, r5, pc}

08009030 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009030:	b510      	push	{r4, lr}
 8009032:	4604      	mov	r4, r0
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8009034:	f7fb f84c 	bl	80040d0 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 8009038:	b164      	cbz	r4, 8009054 <netif_get_by_index+0x24>
    NETIF_FOREACH(netif) {
 800903a:	4b07      	ldr	r3, [pc, #28]	@ (8009058 <netif_get_by_index+0x28>)
 800903c:	6818      	ldr	r0, [r3, #0]
 800903e:	b910      	cbnz	r0, 8009046 <netif_get_by_index+0x16>
 8009040:	e007      	b.n	8009052 <netif_get_by_index+0x22>
 8009042:	6800      	ldr	r0, [r0, #0]
 8009044:	b128      	cbz	r0, 8009052 <netif_get_by_index+0x22>
      if (idx == netif_get_index(netif)) {
 8009046:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800904a:	3301      	adds	r3, #1
 800904c:	b2db      	uxtb	r3, r3
 800904e:	42a3      	cmp	r3, r4
 8009050:	d1f7      	bne.n	8009042 <netif_get_by_index+0x12>
      }
    }
  }

  return NULL;
}
 8009052:	bd10      	pop	{r4, pc}
  return NULL;
 8009054:	4620      	mov	r0, r4
}
 8009056:	bd10      	pop	{r4, pc}
 8009058:	24020750 	.word	0x24020750

0800905c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800905c:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800905e:	f006 fd11 	bl	800fa84 <sys_arch_protect>
 8009062:	4b09      	ldr	r3, [pc, #36]	@ (8009088 <pbuf_free_ooseq_callback+0x2c>)
 8009064:	2200      	movs	r2, #0
 8009066:	701a      	strb	r2, [r3, #0]
 8009068:	f006 fd18 	bl	800fa9c <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800906c:	4b07      	ldr	r3, [pc, #28]	@ (800908c <pbuf_free_ooseq_callback+0x30>)
 800906e:	6818      	ldr	r0, [r3, #0]
 8009070:	b910      	cbnz	r0, 8009078 <pbuf_free_ooseq_callback+0x1c>
 8009072:	e008      	b.n	8009086 <pbuf_free_ooseq_callback+0x2a>
 8009074:	68c0      	ldr	r0, [r0, #12]
 8009076:	b130      	cbz	r0, 8009086 <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 8009078:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0fa      	beq.n	8009074 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 800907e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 8009082:	f001 bf49 	b.w	800af18 <tcp_free_ooseq>
}
 8009086:	bd08      	pop	{r3, pc}
 8009088:	24020754 	.word	0x24020754
 800908c:	2402075c 	.word	0x2402075c

08009090 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009090:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009092:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 8009096:	2500      	movs	r5, #0
{
 8009098:	4614      	mov	r4, r2
 800909a:	4606      	mov	r6, r0
 800909c:	f361 050f 	bfi	r5, r1, #0, #16
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	f361 451f 	bfi	r5, r1, #16, #16
 80090a6:	d10c      	bne.n	80090c2 <pbuf_alloc_reference+0x32>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80090a8:	200b      	movs	r0, #11
 80090aa:	f7ff fd79 	bl	8008ba0 <memp_malloc>
  if (p == NULL) {
 80090ae:	b138      	cbz	r0, 80090c0 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 80090b0:	2300      	movs	r3, #0
  p->ref = 1;
 80090b2:	2201      	movs	r2, #1
  p->payload = payload;
 80090b4:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 80090b6:	6085      	str	r5, [r0, #8]
  p->next = NULL;
 80090b8:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 80090ba:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 80090bc:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 80090be:	81c2      	strh	r2, [r0, #14]
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
  return p;
}
 80090c0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80090c2:	4b04      	ldr	r3, [pc, #16]	@ (80090d4 <pbuf_alloc_reference+0x44>)
 80090c4:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80090c8:	4903      	ldr	r1, [pc, #12]	@ (80090d8 <pbuf_alloc_reference+0x48>)
 80090ca:	4804      	ldr	r0, [pc, #16]	@ (80090dc <pbuf_alloc_reference+0x4c>)
 80090cc:	f006 ff32 	bl	800ff34 <iprintf>
 80090d0:	e7ea      	b.n	80090a8 <pbuf_alloc_reference+0x18>
 80090d2:	bf00      	nop
 80090d4:	080127dc 	.word	0x080127dc
 80090d8:	0801280c 	.word	0x0801280c
 80090dc:	080110dc 	.word	0x080110dc

080090e0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80090e0:	b430      	push	{r4, r5}
  u16_t offset = (u16_t)l;
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80090e2:	3003      	adds	r0, #3
 80090e4:	2400      	movs	r4, #0
{
 80090e6:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 80090ea:	f361 040f 	bfi	r4, r1, #0, #16
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80090ee:	f020 0003 	bic.w	r0, r0, #3
{
 80090f2:	9d02      	ldr	r5, [sp, #8]
 80090f4:	f361 441f 	bfi	r4, r1, #16, #16
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80090f8:	4401      	add	r1, r0
 80090fa:	4561      	cmp	r1, ip
 80090fc:	d80d      	bhi.n	800911a <pbuf_alloced_custom+0x3a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  }

  if (payload_mem != NULL) {
 80090fe:	b105      	cbz	r5, 8009102 <pbuf_alloced_custom+0x22>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009100:	4405      	add	r5, r0
  } else {
    payload = NULL;
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009102:	4618      	mov	r0, r3
  p->next = NULL;
 8009104:	2300      	movs	r3, #0
  p->flags = flags;
 8009106:	2102      	movs	r1, #2
  p->next = NULL;
 8009108:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 800910a:	2301      	movs	r3, #1
  p->payload = payload;
 800910c:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 800910e:	6084      	str	r4, [r0, #8]
  p->type_internal = (u8_t)type;
 8009110:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 8009112:	7341      	strb	r1, [r0, #13]
  p->ref = 1;
 8009114:	81c3      	strh	r3, [r0, #14]
  return &p->pbuf;
}
 8009116:	bc30      	pop	{r4, r5}
 8009118:	4770      	bx	lr
    return NULL;
 800911a:	2000      	movs	r0, #0
}
 800911c:	bc30      	pop	{r4, r5}
 800911e:	4770      	bx	lr

08009120 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009120:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8009122:	b1f0      	cbz	r0, 8009162 <pbuf_add_header+0x42>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009124:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8009128:	d20b      	bcs.n	8009142 <pbuf_add_header+0x22>
  if (header_size_increment == 0) {
 800912a:	b1c1      	cbz	r1, 800915e <pbuf_add_header+0x3e>
  increment_magnitude = (u16_t)header_size_increment;
 800912c:	b28a      	uxth	r2, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800912e:	8903      	ldrh	r3, [r0, #8]
 8009130:	4413      	add	r3, r2
 8009132:	b29b      	uxth	r3, r3
 8009134:	429a      	cmp	r2, r3
 8009136:	d804      	bhi.n	8009142 <pbuf_add_header+0x22>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009138:	f990 c00c 	ldrsb.w	ip, [r0, #12]
 800913c:	f1bc 0f00 	cmp.w	ip, #0
 8009140:	db01      	blt.n	8009146 <pbuf_add_header+0x26>
    return 1;
 8009142:	2001      	movs	r0, #1
  return pbuf_add_header_impl(p, header_size_increment, 0);
}
 8009144:	bd10      	pop	{r4, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 8009146:	6844      	ldr	r4, [r0, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009148:	f100 0c10 	add.w	ip, r0, #16
    payload = (u8_t *)p->payload - header_size_increment;
 800914c:	1a61      	subs	r1, r4, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800914e:	4561      	cmp	r1, ip
 8009150:	d3f7      	bcc.n	8009142 <pbuf_add_header+0x22>
  p->len = (u16_t)(p->len + increment_magnitude);
 8009152:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
  p->payload = payload;
 8009156:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009158:	4462      	add	r2, ip
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800915a:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800915c:	8142      	strh	r2, [r0, #10]
    return 0;
 800915e:	2000      	movs	r0, #0
}
 8009160:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8009162:	4b04      	ldr	r3, [pc, #16]	@ (8009174 <pbuf_add_header+0x54>)
 8009164:	f240 12df 	movw	r2, #479	@ 0x1df
 8009168:	4903      	ldr	r1, [pc, #12]	@ (8009178 <pbuf_add_header+0x58>)
 800916a:	4804      	ldr	r0, [pc, #16]	@ (800917c <pbuf_add_header+0x5c>)
 800916c:	f006 fee2 	bl	800ff34 <iprintf>
    return 1;
 8009170:	2001      	movs	r0, #1
 8009172:	e7e7      	b.n	8009144 <pbuf_add_header+0x24>
 8009174:	080127dc 	.word	0x080127dc
 8009178:	08011df0 	.word	0x08011df0
 800917c:	080110dc 	.word	0x080110dc

08009180 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009180:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009182:	b188      	cbz	r0, 80091a8 <pbuf_remove_header+0x28>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009184:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8009188:	d215      	bcs.n	80091b6 <pbuf_remove_header+0x36>
    return 1;
  }
  if (header_size_decrement == 0) {
 800918a:	b159      	cbz	r1, 80091a4 <pbuf_remove_header+0x24>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800918c:	b28a      	uxth	r2, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800918e:	8943      	ldrh	r3, [r0, #10]
 8009190:	4293      	cmp	r3, r2
 8009192:	d312      	bcc.n	80091ba <pbuf_remove_header+0x3a>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009194:	6844      	ldr	r4, [r0, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009196:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009198:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800919a:	8901      	ldrh	r1, [r0, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
 800919c:	8143      	strh	r3, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800919e:	1a8b      	subs	r3, r1, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80091a0:	6044      	str	r4, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80091a2:	8103      	strh	r3, [r0, #8]
    return 0;
 80091a4:	2000      	movs	r0, #0

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
}
 80091a6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80091a8:	4b08      	ldr	r3, [pc, #32]	@ (80091cc <pbuf_remove_header+0x4c>)
 80091aa:	f240 224b 	movw	r2, #587	@ 0x24b
 80091ae:	4908      	ldr	r1, [pc, #32]	@ (80091d0 <pbuf_remove_header+0x50>)
 80091b0:	4808      	ldr	r0, [pc, #32]	@ (80091d4 <pbuf_remove_header+0x54>)
 80091b2:	f006 febf 	bl	800ff34 <iprintf>
    return 1;
 80091b6:	2001      	movs	r0, #1
}
 80091b8:	bd10      	pop	{r4, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80091ba:	4b04      	ldr	r3, [pc, #16]	@ (80091cc <pbuf_remove_header+0x4c>)
 80091bc:	f240 2255 	movw	r2, #597	@ 0x255
 80091c0:	4905      	ldr	r1, [pc, #20]	@ (80091d8 <pbuf_remove_header+0x58>)
 80091c2:	4804      	ldr	r0, [pc, #16]	@ (80091d4 <pbuf_remove_header+0x54>)
 80091c4:	f006 feb6 	bl	800ff34 <iprintf>
 80091c8:	e7f5      	b.n	80091b6 <pbuf_remove_header+0x36>
 80091ca:	bf00      	nop
 80091cc:	080127dc 	.word	0x080127dc
 80091d0:	08011df0 	.word	0x08011df0
 80091d4:	080110dc 	.word	0x080110dc
 80091d8:	08012820 	.word	0x08012820

080091dc <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 80091dc:	2900      	cmp	r1, #0
 80091de:	db19      	blt.n	8009214 <pbuf_header_force+0x38>
  LWIP_ASSERT("p != NULL", p != NULL);
 80091e0:	4603      	mov	r3, r0
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80091e2:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80091e4:	b1c8      	cbz	r0, 800921a <pbuf_header_force+0x3e>
  if (header_size_increment == 0) {
 80091e6:	b199      	cbz	r1, 8009210 <pbuf_header_force+0x34>
  increment_magnitude = (u16_t)header_size_increment;
 80091e8:	b288      	uxth	r0, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80091ea:	891a      	ldrh	r2, [r3, #8]
 80091ec:	4402      	add	r2, r0
 80091ee:	b292      	uxth	r2, r2
 80091f0:	4290      	cmp	r0, r2
 80091f2:	d819      	bhi.n	8009228 <pbuf_header_force+0x4c>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80091f4:	f993 c00c 	ldrsb.w	ip, [r3, #12]
    payload = (u8_t *)p->payload - header_size_increment;
 80091f8:	685c      	ldr	r4, [r3, #4]
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80091fa:	f1bc 0f00 	cmp.w	ip, #0
    payload = (u8_t *)p->payload - header_size_increment;
 80091fe:	eba4 0101 	sub.w	r1, r4, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009202:	db13      	blt.n	800922c <pbuf_header_force+0x50>
  p->len = (u16_t)(p->len + increment_magnitude);
 8009204:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
  p->payload = payload;
 8009208:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800920a:	4460      	add	r0, ip
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800920c:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800920e:	8158      	strh	r0, [r3, #10]
    return 0;
 8009210:	2000      	movs	r0, #0
  return pbuf_header_impl(p, header_size_increment, 1);
}
 8009212:	bd10      	pop	{r4, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009214:	4249      	negs	r1, r1
 8009216:	f7ff bfb3 	b.w	8009180 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 800921a:	4b07      	ldr	r3, [pc, #28]	@ (8009238 <pbuf_header_force+0x5c>)
 800921c:	f240 12df 	movw	r2, #479	@ 0x1df
 8009220:	4906      	ldr	r1, [pc, #24]	@ (800923c <pbuf_header_force+0x60>)
 8009222:	4807      	ldr	r0, [pc, #28]	@ (8009240 <pbuf_header_force+0x64>)
 8009224:	f006 fe86 	bl	800ff34 <iprintf>
    return 1;
 8009228:	2001      	movs	r0, #1
}
 800922a:	bd10      	pop	{r4, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800922c:	f103 0c10 	add.w	ip, r3, #16
 8009230:	4561      	cmp	r1, ip
 8009232:	d2e7      	bcs.n	8009204 <pbuf_header_force+0x28>
 8009234:	e7f8      	b.n	8009228 <pbuf_header_force+0x4c>
 8009236:	bf00      	nop
 8009238:	080127dc 	.word	0x080127dc
 800923c:	08011df0 	.word	0x08011df0
 8009240:	080110dc 	.word	0x080110dc

08009244 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009248:	4605      	mov	r5, r0
 800924a:	2800      	cmp	r0, #0
 800924c:	d055      	beq.n	80092fa <pbuf_free+0xb6>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800924e:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009250:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8009314 <pbuf_free+0xd0>
 8009254:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 8009320 <pbuf_free+0xdc>
 8009258:	4f2c      	ldr	r7, [pc, #176]	@ (800930c <pbuf_free+0xc8>)
 800925a:	e008      	b.n	800926e <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800925c:	692b      	ldr	r3, [r5, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d03d      	beq.n	80092de <pbuf_free+0x9a>
        pc->custom_free_function(p);
 8009262:	4628      	mov	r0, r5
 8009264:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 8009266:	3601      	adds	r6, #1
 8009268:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800926a:	b1fc      	cbz	r4, 80092ac <pbuf_free+0x68>
      /* proceed to next pbuf */
      p = q;
 800926c:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 800926e:	f006 fc09 	bl	800fa84 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009272:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 8009274:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009276:	b1e3      	cbz	r3, 80092b2 <pbuf_free+0x6e>
    ref = --(p->ref);
 8009278:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 800927a:	4620      	mov	r0, r4
    ref = --(p->ref);
 800927c:	b2dc      	uxtb	r4, r3
 800927e:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8009280:	f006 fc0c 	bl	800fa9c <sys_arch_unprotect>
    if (ref == 0) {
 8009284:	b994      	cbnz	r4, 80092ac <pbuf_free+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009286:	7b6a      	ldrb	r2, [r5, #13]
      q = p->next;
 8009288:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800928a:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 800928c:	7b2b      	ldrb	r3, [r5, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800928e:	d4e5      	bmi.n	800925c <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 8009290:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009294:	2b02      	cmp	r3, #2
 8009296:	d01d      	beq.n	80092d4 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009298:	2b01      	cmp	r3, #1
 800929a:	d029      	beq.n	80092f0 <pbuf_free+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800929c:	b993      	cbnz	r3, 80092c4 <pbuf_free+0x80>
      count++;
 800929e:	3601      	adds	r6, #1
          mem_free(p);
 80092a0:	4628      	mov	r0, r5
 80092a2:	f7ff f99f 	bl	80085e4 <mem_free>
      count++;
 80092a6:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 80092a8:	2c00      	cmp	r4, #0
 80092aa:	d1df      	bne.n	800926c <pbuf_free+0x28>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80092ac:	4630      	mov	r0, r6
 80092ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80092b2:	4643      	mov	r3, r8
 80092b4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80092b8:	4649      	mov	r1, r9
 80092ba:	4638      	mov	r0, r7
 80092bc:	f006 fe3a 	bl	800ff34 <iprintf>
    ref = --(p->ref);
 80092c0:	7bab      	ldrb	r3, [r5, #14]
 80092c2:	e7d9      	b.n	8009278 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 80092c4:	4643      	mov	r3, r8
 80092c6:	f240 320f 	movw	r2, #783	@ 0x30f
 80092ca:	4911      	ldr	r1, [pc, #68]	@ (8009310 <pbuf_free+0xcc>)
 80092cc:	4638      	mov	r0, r7
 80092ce:	f006 fe31 	bl	800ff34 <iprintf>
 80092d2:	e7c8      	b.n	8009266 <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 80092d4:	4629      	mov	r1, r5
 80092d6:	200c      	movs	r0, #12
 80092d8:	f7ff fca8 	bl	8008c2c <memp_free>
 80092dc:	e7c3      	b.n	8009266 <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80092de:	4b0d      	ldr	r3, [pc, #52]	@ (8009314 <pbuf_free+0xd0>)
 80092e0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80092e4:	490c      	ldr	r1, [pc, #48]	@ (8009318 <pbuf_free+0xd4>)
 80092e6:	4809      	ldr	r0, [pc, #36]	@ (800930c <pbuf_free+0xc8>)
 80092e8:	f006 fe24 	bl	800ff34 <iprintf>
        pc->custom_free_function(p);
 80092ec:	692b      	ldr	r3, [r5, #16]
 80092ee:	e7b8      	b.n	8009262 <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 80092f0:	4629      	mov	r1, r5
 80092f2:	200b      	movs	r0, #11
 80092f4:	f7ff fc9a 	bl	8008c2c <memp_free>
 80092f8:	e7b5      	b.n	8009266 <pbuf_free+0x22>
    LWIP_ASSERT("p != NULL", p != NULL);
 80092fa:	4b06      	ldr	r3, [pc, #24]	@ (8009314 <pbuf_free+0xd0>)
 80092fc:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8009300:	4906      	ldr	r1, [pc, #24]	@ (800931c <pbuf_free+0xd8>)
    return 0;
 8009302:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 8009304:	4801      	ldr	r0, [pc, #4]	@ (800930c <pbuf_free+0xc8>)
 8009306:	f006 fe15 	bl	800ff34 <iprintf>
    return 0;
 800930a:	e7cf      	b.n	80092ac <pbuf_free+0x68>
 800930c:	080110dc 	.word	0x080110dc
 8009310:	0801287c 	.word	0x0801287c
 8009314:	080127dc 	.word	0x080127dc
 8009318:	08012858 	.word	0x08012858
 800931c:	08011df0 	.word	0x08011df0
 8009320:	08012840 	.word	0x08012840

08009324 <pbuf_alloc>:
  switch (type) {
 8009324:	f5b2 7fc1 	cmp.w	r2, #386	@ 0x182
{
 8009328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800932c:	4688      	mov	r8, r1
 800932e:	b083      	sub	sp, #12
  switch (type) {
 8009330:	d041      	beq.n	80093b6 <pbuf_alloc+0x92>
 8009332:	d80f      	bhi.n	8009354 <pbuf_alloc+0x30>
 8009334:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 8009338:	2b01      	cmp	r3, #1
 800933a:	d036      	beq.n	80093aa <pbuf_alloc+0x86>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800933c:	4b46      	ldr	r3, [pc, #280]	@ (8009458 <pbuf_alloc+0x134>)
 800933e:	f240 1227 	movw	r2, #295	@ 0x127
 8009342:	4946      	ldr	r1, [pc, #280]	@ (800945c <pbuf_alloc+0x138>)
 8009344:	4846      	ldr	r0, [pc, #280]	@ (8009460 <pbuf_alloc+0x13c>)
 8009346:	f006 fdf5 	bl	800ff34 <iprintf>
          return NULL;
 800934a:	2400      	movs	r4, #0
}
 800934c:	4620      	mov	r0, r4
 800934e:	b003      	add	sp, #12
 8009350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 8009354:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 8009358:	d1f0      	bne.n	800933c <pbuf_alloc+0x18>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800935a:	1cc3      	adds	r3, r0, #3
 800935c:	1cca      	adds	r2, r1, #3
 800935e:	4605      	mov	r5, r0
 8009360:	f022 0203 	bic.w	r2, r2, #3
 8009364:	f023 0303 	bic.w	r3, r3, #3
 8009368:	4413      	add	r3, r2
 800936a:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800936c:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009370:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009372:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009374:	d3e9      	bcc.n	800934a <pbuf_alloc+0x26>
 8009376:	4282      	cmp	r2, r0
 8009378:	d8e7      	bhi.n	800934a <pbuf_alloc+0x26>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800937a:	f7ff fadb 	bl	8008934 <mem_malloc>
      if (p == NULL) {
 800937e:	4604      	mov	r4, r0
 8009380:	2800      	cmp	r0, #0
 8009382:	d0e3      	beq.n	800934c <pbuf_alloc+0x28>
  p->next = NULL;
 8009384:	2100      	movs	r1, #0
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009386:	1943      	adds	r3, r0, r5
  p->type_internal = (u8_t)type;
 8009388:	4836      	ldr	r0, [pc, #216]	@ (8009464 <pbuf_alloc+0x140>)
  p->tot_len = tot_len;
 800938a:	460a      	mov	r2, r1
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800938c:	3313      	adds	r3, #19
  p->type_internal = (u8_t)type;
 800938e:	60e0      	str	r0, [r4, #12]
}
 8009390:	4620      	mov	r0, r4
  p->tot_len = tot_len;
 8009392:	f368 020f 	bfi	r2, r8, #0, #16
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009396:	f023 0303 	bic.w	r3, r3, #3
  p->tot_len = tot_len;
 800939a:	f368 421f 	bfi	r2, r8, #16, #16
  p->payload = payload;
 800939e:	e9c4 1300 	strd	r1, r3, [r4]
  p->tot_len = tot_len;
 80093a2:	60a2      	str	r2, [r4, #8]
}
 80093a4:	b003      	add	sp, #12
 80093a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 80093aa:	2000      	movs	r0, #0
}
 80093ac:	b003      	add	sp, #12
 80093ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 80093b2:	f7ff be6d 	b.w	8009090 <pbuf_alloc_reference>
  switch (type) {
 80093b6:	2100      	movs	r1, #0
 80093b8:	4681      	mov	r9, r0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80093ba:	f240 56ec 	movw	r6, #1516	@ 0x5ec
  p->type_internal = (u8_t)type;
 80093be:	4d2a      	ldr	r5, [pc, #168]	@ (8009468 <pbuf_alloc+0x144>)
  switch (type) {
 80093c0:	460c      	mov	r4, r1
 80093c2:	e009      	b.n	80093d8 <pbuf_alloc+0xb4>
          last->next = q;
 80093c4:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 80093c6:	eba8 0303 	sub.w	r3, r8, r3
        offset = 0;
 80093ca:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 80093ce:	fa1f f883 	uxth.w	r8, r3
      } while (rem_len > 0);
 80093d2:	f1b8 0f00 	cmp.w	r8, #0
 80093d6:	d0b9      	beq.n	800934c <pbuf_alloc+0x28>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80093d8:	200c      	movs	r0, #12
 80093da:	460f      	mov	r7, r1
 80093dc:	f7ff fbe0 	bl	8008ba0 <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80093e0:	f109 0203 	add.w	r2, r9, #3
  p->next = NULL;
 80093e4:	f04f 0c00 	mov.w	ip, #0
        if (q == NULL) {
 80093e8:	4601      	mov	r1, r0
 80093ea:	b1b0      	cbz	r0, 800941a <pbuf_alloc+0xf6>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80093ec:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80093f0:	eb00 0209 	add.w	r2, r0, r9
  p->tot_len = tot_len;
 80093f4:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80093f8:	1af3      	subs	r3, r6, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80093fa:	3213      	adds	r2, #19
  p->next = NULL;
 80093fc:	f8c0 c000 	str.w	ip, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009400:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009402:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 8009406:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009408:	4543      	cmp	r3, r8
  p->payload = payload;
 800940a:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800940c:	bf28      	it	cs
 800940e:	4643      	movcs	r3, r8
  p->len = len;
 8009410:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8009412:	2c00      	cmp	r4, #0
 8009414:	d1d6      	bne.n	80093c4 <pbuf_alloc+0xa0>
 8009416:	4604      	mov	r4, r0
 8009418:	e7d5      	b.n	80093c6 <pbuf_alloc+0xa2>
  queued = pbuf_free_ooseq_pending;
 800941a:	4e14      	ldr	r6, [pc, #80]	@ (800946c <pbuf_alloc+0x148>)
 800941c:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 800941e:	f006 fb31 	bl	800fa84 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8009422:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 8009424:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8009426:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 8009428:	7033      	strb	r3, [r6, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800942a:	f006 fb37 	bl	800fa9c <sys_arch_unprotect>
  if (!queued) {
 800942e:	9901      	ldr	r1, [sp, #4]
 8009430:	b12d      	cbz	r5, 800943e <pbuf_alloc+0x11a>
          if (p) {
 8009432:	2c00      	cmp	r4, #0
 8009434:	d089      	beq.n	800934a <pbuf_alloc+0x26>
            pbuf_free(p);
 8009436:	4620      	mov	r0, r4
 8009438:	f7ff ff04 	bl	8009244 <pbuf_free>
 800943c:	e785      	b.n	800934a <pbuf_alloc+0x26>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800943e:	480c      	ldr	r0, [pc, #48]	@ (8009470 <pbuf_alloc+0x14c>)
 8009440:	f7fe ff8e 	bl	8008360 <tcpip_try_callback>
 8009444:	2800      	cmp	r0, #0
 8009446:	d0f4      	beq.n	8009432 <pbuf_alloc+0x10e>
 8009448:	f006 fb1c 	bl	800fa84 <sys_arch_protect>
 800944c:	9901      	ldr	r1, [sp, #4]
 800944e:	7031      	strb	r1, [r6, #0]
 8009450:	f006 fb24 	bl	800fa9c <sys_arch_unprotect>
 8009454:	e7ed      	b.n	8009432 <pbuf_alloc+0x10e>
 8009456:	bf00      	nop
 8009458:	080127dc 	.word	0x080127dc
 800945c:	08012890 	.word	0x08012890
 8009460:	080110dc 	.word	0x080110dc
 8009464:	00010080 	.word	0x00010080
 8009468:	00010082 	.word	0x00010082
 800946c:	24020754 	.word	0x24020754
 8009470:	0800905d 	.word	0x0800905d

08009474 <pbuf_realloc>:
{
 8009474:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009476:	4604      	mov	r4, r0
{
 8009478:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800947a:	2800      	cmp	r0, #0
 800947c:	d03b      	beq.n	80094f6 <pbuf_realloc+0x82>
  if (new_len >= p->tot_len) {
 800947e:	8922      	ldrh	r2, [r4, #8]
 8009480:	42aa      	cmp	r2, r5
 8009482:	d91f      	bls.n	80094c4 <pbuf_realloc+0x50>
  while (rem_len > q->len) {
 8009484:	8963      	ldrh	r3, [r4, #10]
 8009486:	429d      	cmp	r5, r3
 8009488:	d90d      	bls.n	80094a6 <pbuf_realloc+0x32>
 800948a:	1aa9      	subs	r1, r5, r2
 800948c:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800948e:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 8009490:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009492:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 8009494:	b29d      	uxth	r5, r3
    q = q->next;
 8009496:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009498:	2c00      	cmp	r4, #0
 800949a:	d034      	beq.n	8009506 <pbuf_realloc+0x92>
  while (rem_len > q->len) {
 800949c:	8963      	ldrh	r3, [r4, #10]
 800949e:	42ab      	cmp	r3, r5
 80094a0:	d201      	bcs.n	80094a6 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80094a2:	8922      	ldrh	r2, [r4, #8]
 80094a4:	e7f3      	b.n	800948e <pbuf_realloc+0x1a>
 80094a6:	2600      	movs	r6, #0
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80094a8:	7b22      	ldrb	r2, [r4, #12]
 80094aa:	f365 060f 	bfi	r6, r5, #0, #16
 80094ae:	0712      	lsls	r2, r2, #28
 80094b0:	f365 461f 	bfi	r6, r5, #16, #16
 80094b4:	d007      	beq.n	80094c6 <pbuf_realloc+0x52>
  if (q->next != NULL) {
 80094b6:	6820      	ldr	r0, [r4, #0]
  q->tot_len = q->len;
 80094b8:	60a6      	str	r6, [r4, #8]
  if (q->next != NULL) {
 80094ba:	b108      	cbz	r0, 80094c0 <pbuf_realloc+0x4c>
    pbuf_free(q->next);
 80094bc:	f7ff fec2 	bl	8009244 <pbuf_free>
  q->next = NULL;
 80094c0:	2300      	movs	r3, #0
 80094c2:	6023      	str	r3, [r4, #0]
}
 80094c4:	bd70      	pop	{r4, r5, r6, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80094c6:	42ab      	cmp	r3, r5
 80094c8:	d0f5      	beq.n	80094b6 <pbuf_realloc+0x42>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80094ca:	7b63      	ldrb	r3, [r4, #13]
 80094cc:	079b      	lsls	r3, r3, #30
 80094ce:	d4f2      	bmi.n	80094b6 <pbuf_realloc+0x42>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80094d0:	6863      	ldr	r3, [r4, #4]
 80094d2:	4620      	mov	r0, r4
 80094d4:	1b1b      	subs	r3, r3, r4
 80094d6:	18e9      	adds	r1, r5, r3
 80094d8:	b289      	uxth	r1, r1
 80094da:	f7ff f96d 	bl	80087b8 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80094de:	4604      	mov	r4, r0
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d1e8      	bne.n	80094b6 <pbuf_realloc+0x42>
 80094e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009518 <pbuf_realloc+0xa4>)
 80094e6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80094ea:	490c      	ldr	r1, [pc, #48]	@ (800951c <pbuf_realloc+0xa8>)
 80094ec:	480c      	ldr	r0, [pc, #48]	@ (8009520 <pbuf_realloc+0xac>)
 80094ee:	f006 fd21 	bl	800ff34 <iprintf>
  q->len = rem_len;
 80094f2:	8164      	strh	r4, [r4, #10]
 80094f4:	deff      	udf	#255	@ 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80094f6:	4b08      	ldr	r3, [pc, #32]	@ (8009518 <pbuf_realloc+0xa4>)
 80094f8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80094fc:	4909      	ldr	r1, [pc, #36]	@ (8009524 <pbuf_realloc+0xb0>)
 80094fe:	4808      	ldr	r0, [pc, #32]	@ (8009520 <pbuf_realloc+0xac>)
 8009500:	f006 fd18 	bl	800ff34 <iprintf>
 8009504:	e7bb      	b.n	800947e <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009506:	4b04      	ldr	r3, [pc, #16]	@ (8009518 <pbuf_realloc+0xa4>)
 8009508:	f240 12af 	movw	r2, #431	@ 0x1af
 800950c:	4906      	ldr	r1, [pc, #24]	@ (8009528 <pbuf_realloc+0xb4>)
 800950e:	4804      	ldr	r0, [pc, #16]	@ (8009520 <pbuf_realloc+0xac>)
 8009510:	f006 fd10 	bl	800ff34 <iprintf>
  while (rem_len > q->len) {
 8009514:	8963      	ldrh	r3, [r4, #10]
 8009516:	deff      	udf	#255	@ 0xff
 8009518:	080127dc 	.word	0x080127dc
 800951c:	080128dc 	.word	0x080128dc
 8009520:	080110dc 	.word	0x080110dc
 8009524:	080128ac 	.word	0x080128ac
 8009528:	080128c4 	.word	0x080128c4

0800952c <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 800952c:	4603      	mov	r3, r0
 800952e:	b130      	cbz	r0, 800953e <pbuf_clen+0x12>
  len = 0;
 8009530:	2000      	movs	r0, #0
    ++len;
 8009532:	3001      	adds	r0, #1
    p = p->next;
 8009534:	681b      	ldr	r3, [r3, #0]
    ++len;
 8009536:	b280      	uxth	r0, r0
  while (p != NULL) {
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1fa      	bne.n	8009532 <pbuf_clen+0x6>
 800953c:	4770      	bx	lr
  }
  return len;
}
 800953e:	4770      	bx	lr

08009540 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8009540:	b158      	cbz	r0, 800955a <pbuf_ref+0x1a>
{
 8009542:	b510      	push	{r4, lr}
 8009544:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009546:	f006 fa9d 	bl	800fa84 <sys_arch_protect>
 800954a:	7ba3      	ldrb	r3, [r4, #14]
 800954c:	3301      	adds	r3, #1
 800954e:	73a3      	strb	r3, [r4, #14]
 8009550:	f006 faa4 	bl	800fa9c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009554:	7ba3      	ldrb	r3, [r4, #14]
 8009556:	b10b      	cbz	r3, 800955c <pbuf_ref+0x1c>
  }
}
 8009558:	bd10      	pop	{r4, pc}
 800955a:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800955c:	4b04      	ldr	r3, [pc, #16]	@ (8009570 <pbuf_ref+0x30>)
 800955e:	f240 3242 	movw	r2, #834	@ 0x342
 8009562:	4904      	ldr	r1, [pc, #16]	@ (8009574 <pbuf_ref+0x34>)
 8009564:	4804      	ldr	r0, [pc, #16]	@ (8009578 <pbuf_ref+0x38>)
}
 8009566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800956a:	f006 bce3 	b.w	800ff34 <iprintf>
 800956e:	bf00      	nop
 8009570:	080127dc 	.word	0x080127dc
 8009574:	080128f8 	.word	0x080128f8
 8009578:	080110dc 	.word	0x080110dc

0800957c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800957c:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800957e:	2800      	cmp	r0, #0
 8009580:	d02d      	beq.n	80095de <pbuf_cat+0x62>
 8009582:	460d      	mov	r5, r1
 8009584:	2900      	cmp	r1, #0
 8009586:	d02a      	beq.n	80095de <pbuf_cat+0x62>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009588:	6803      	ldr	r3, [r0, #0]
 800958a:	4604      	mov	r4, r0
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800958c:	8902      	ldrh	r2, [r0, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800958e:	b18b      	cbz	r3, 80095b4 <pbuf_cat+0x38>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009590:	8922      	ldrh	r2, [r4, #8]
 8009592:	8928      	ldrh	r0, [r5, #8]
 8009594:	4402      	add	r2, r0
 8009596:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009598:	461c      	mov	r4, r3
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1f7      	bne.n	8009590 <pbuf_cat+0x14>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80095a0:	8922      	ldrh	r2, [r4, #8]
 80095a2:	8963      	ldrh	r3, [r4, #10]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d108      	bne.n	80095ba <pbuf_cat+0x3e>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80095a8:	8922      	ldrh	r2, [r4, #8]
 80095aa:	892b      	ldrh	r3, [r5, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80095ac:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80095ae:	441a      	add	r2, r3
 80095b0:	8122      	strh	r2, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80095b2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80095b4:	8943      	ldrh	r3, [r0, #10]
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d0f7      	beq.n	80095aa <pbuf_cat+0x2e>
 80095ba:	4b0d      	ldr	r3, [pc, #52]	@ (80095f0 <pbuf_cat+0x74>)
 80095bc:	f240 3262 	movw	r2, #866	@ 0x362
 80095c0:	490c      	ldr	r1, [pc, #48]	@ (80095f4 <pbuf_cat+0x78>)
 80095c2:	480d      	ldr	r0, [pc, #52]	@ (80095f8 <pbuf_cat+0x7c>)
 80095c4:	f006 fcb6 	bl	800ff34 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0ec      	beq.n	80095a8 <pbuf_cat+0x2c>
 80095ce:	4b08      	ldr	r3, [pc, #32]	@ (80095f0 <pbuf_cat+0x74>)
 80095d0:	f240 3263 	movw	r2, #867	@ 0x363
 80095d4:	4909      	ldr	r1, [pc, #36]	@ (80095fc <pbuf_cat+0x80>)
 80095d6:	4808      	ldr	r0, [pc, #32]	@ (80095f8 <pbuf_cat+0x7c>)
 80095d8:	f006 fcac 	bl	800ff34 <iprintf>
 80095dc:	e7e4      	b.n	80095a8 <pbuf_cat+0x2c>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80095de:	4b04      	ldr	r3, [pc, #16]	@ (80095f0 <pbuf_cat+0x74>)
 80095e0:	f240 3259 	movw	r2, #857	@ 0x359
 80095e4:	4906      	ldr	r1, [pc, #24]	@ (8009600 <pbuf_cat+0x84>)
 80095e6:	4804      	ldr	r0, [pc, #16]	@ (80095f8 <pbuf_cat+0x7c>)
}
 80095e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80095ec:	f006 bca2 	b.w	800ff34 <iprintf>
 80095f0:	080127dc 	.word	0x080127dc
 80095f4:	08012944 	.word	0x08012944
 80095f8:	080110dc 	.word	0x080110dc
 80095fc:	08012974 	.word	0x08012974
 8009600:	0801290c 	.word	0x0801290c

08009604 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009608:	2800      	cmp	r0, #0
 800960a:	f000 80ad 	beq.w	8009768 <pbuf_copy+0x164>
 800960e:	fab1 f581 	clz	r5, r1
 8009612:	460e      	mov	r6, r1
 8009614:	096d      	lsrs	r5, r5, #5
 8009616:	2900      	cmp	r1, #0
 8009618:	f000 80a6 	beq.w	8009768 <pbuf_copy+0x164>
 800961c:	8902      	ldrh	r2, [r0, #8]
 800961e:	4604      	mov	r4, r0
 8009620:	890b      	ldrh	r3, [r1, #8]
 8009622:	429a      	cmp	r2, r3
 8009624:	f0c0 80a0 	bcc.w	8009768 <pbuf_copy+0x164>
 8009628:	8942      	ldrh	r2, [r0, #10]
  size_t offset_to = 0, offset_from = 0, len;
 800962a:	462f      	mov	r7, r5
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800962c:	f8df 914c 	ldr.w	r9, [pc, #332]	@ 800977c <pbuf_copy+0x178>
 8009630:	f8df a15c 	ldr.w	sl, [pc, #348]	@ 8009790 <pbuf_copy+0x18c>
 8009634:	f8df 814c 	ldr.w	r8, [pc, #332]	@ 8009784 <pbuf_copy+0x180>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009638:	8973      	ldrh	r3, [r6, #10]
 800963a:	eba2 0b07 	sub.w	fp, r2, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800963e:	6860      	ldr	r0, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009640:	1b5b      	subs	r3, r3, r5
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009642:	6871      	ldr	r1, [r6, #4]
 8009644:	4438      	add	r0, r7
 8009646:	459b      	cmp	fp, r3
 8009648:	4429      	add	r1, r5
 800964a:	bf28      	it	cs
 800964c:	469b      	movcs	fp, r3
 800964e:	465a      	mov	r2, fp
    offset_to += len;
 8009650:	445f      	add	r7, fp
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009652:	f006 fe2c 	bl	80102ae <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009656:	8963      	ldrh	r3, [r4, #10]
    offset_from += len;
 8009658:	445d      	add	r5, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800965a:	42bb      	cmp	r3, r7
 800965c:	d328      	bcc.n	80096b0 <pbuf_copy+0xac>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800965e:	8973      	ldrh	r3, [r6, #10]
 8009660:	42ab      	cmp	r3, r5
 8009662:	d31c      	bcc.n	800969e <pbuf_copy+0x9a>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 8009664:	8962      	ldrh	r2, [r4, #10]
    if (offset_from >= p_from->len) {
 8009666:	42ab      	cmp	r3, r5
    if (offset_to == p_to->len) {
 8009668:	4611      	mov	r1, r2
    if (offset_from >= p_from->len) {
 800966a:	d90c      	bls.n	8009686 <pbuf_copy+0x82>
    if (offset_to == p_to->len) {
 800966c:	4297      	cmp	r7, r2
 800966e:	d027      	beq.n	80096c0 <pbuf_copy+0xbc>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009670:	8931      	ldrh	r1, [r6, #8]
 8009672:	4299      	cmp	r1, r3
 8009674:	d053      	beq.n	800971e <pbuf_copy+0x11a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009676:	8923      	ldrh	r3, [r4, #8]
 8009678:	4293      	cmp	r3, r2
 800967a:	d1dd      	bne.n	8009638 <pbuf_copy+0x34>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d137      	bne.n	80096f2 <pbuf_copy+0xee>
 8009682:	8962      	ldrh	r2, [r4, #10]
 8009684:	e7d8      	b.n	8009638 <pbuf_copy+0x34>
    if (offset_to == p_to->len) {
 8009686:	4297      	cmp	r7, r2
      p_from = p_from->next;
 8009688:	6836      	ldr	r6, [r6, #0]
    if (offset_to == p_to->len) {
 800968a:	d025      	beq.n	80096d8 <pbuf_copy+0xd4>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800968c:	2e00      	cmp	r6, #0
 800968e:	d138      	bne.n	8009702 <pbuf_copy+0xfe>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009690:	8923      	ldrh	r3, [r4, #8]
 8009692:	428b      	cmp	r3, r1
 8009694:	d02a      	beq.n	80096ec <pbuf_copy+0xe8>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009696:	2400      	movs	r4, #0
}
 8009698:	4620      	mov	r0, r4
 800969a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800969e:	464b      	mov	r3, r9
 80096a0:	f240 32da 	movw	r2, #986	@ 0x3da
 80096a4:	4934      	ldr	r1, [pc, #208]	@ (8009778 <pbuf_copy+0x174>)
 80096a6:	4640      	mov	r0, r8
 80096a8:	f006 fc44 	bl	800ff34 <iprintf>
    if (offset_from >= p_from->len) {
 80096ac:	8973      	ldrh	r3, [r6, #10]
 80096ae:	e7d9      	b.n	8009664 <pbuf_copy+0x60>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80096b0:	464b      	mov	r3, r9
 80096b2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80096b6:	4651      	mov	r1, sl
 80096b8:	4640      	mov	r0, r8
 80096ba:	f006 fc3b 	bl	800ff34 <iprintf>
 80096be:	e7ce      	b.n	800965e <pbuf_copy+0x5a>
      p_to = p_to->next;
 80096c0:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80096c2:	2c00      	cmp	r4, #0
 80096c4:	d044      	beq.n	8009750 <pbuf_copy+0x14c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80096c6:	8932      	ldrh	r2, [r6, #8]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d136      	bne.n	800973a <pbuf_copy+0x136>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80096cc:	6833      	ldr	r3, [r6, #0]
 80096ce:	bb43      	cbnz	r3, 8009722 <pbuf_copy+0x11e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80096d0:	2c00      	cmp	r4, #0
 80096d2:	d132      	bne.n	800973a <pbuf_copy+0x136>
 80096d4:	4627      	mov	r7, r4
 80096d6:	e7d4      	b.n	8009682 <pbuf_copy+0x7e>
      p_to = p_to->next;
 80096d8:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80096da:	b9c4      	cbnz	r4, 800970e <pbuf_copy+0x10a>
 80096dc:	2e00      	cmp	r6, #0
 80096de:	d137      	bne.n	8009750 <pbuf_copy+0x14c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80096e0:	2c00      	cmp	r4, #0
 80096e2:	d0d9      	beq.n	8009698 <pbuf_copy+0x94>
 80096e4:	8961      	ldrh	r1, [r4, #10]
 80096e6:	8923      	ldrh	r3, [r4, #8]
 80096e8:	428b      	cmp	r3, r1
 80096ea:	d1d4      	bne.n	8009696 <pbuf_copy+0x92>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80096ec:	6824      	ldr	r4, [r4, #0]
 80096ee:	2c00      	cmp	r4, #0
 80096f0:	d0d2      	beq.n	8009698 <pbuf_copy+0x94>
 80096f2:	4b22      	ldr	r3, [pc, #136]	@ (800977c <pbuf_copy+0x178>)
 80096f4:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80096f8:	4921      	ldr	r1, [pc, #132]	@ (8009780 <pbuf_copy+0x17c>)
 80096fa:	4822      	ldr	r0, [pc, #136]	@ (8009784 <pbuf_copy+0x180>)
 80096fc:	f006 fc1a 	bl	800ff34 <iprintf>
 8009700:	e016      	b.n	8009730 <pbuf_copy+0x12c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009702:	8971      	ldrh	r1, [r6, #10]
 8009704:	8933      	ldrh	r3, [r6, #8]
 8009706:	4299      	cmp	r1, r3
 8009708:	d01e      	beq.n	8009748 <pbuf_copy+0x144>
      offset_from = 0;
 800970a:	2500      	movs	r5, #0
 800970c:	e7b3      	b.n	8009676 <pbuf_copy+0x72>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800970e:	2e00      	cmp	r6, #0
 8009710:	d0e6      	beq.n	80096e0 <pbuf_copy+0xdc>
 8009712:	8932      	ldrh	r2, [r6, #8]
      offset_from = 0;
 8009714:	2500      	movs	r5, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009716:	8973      	ldrh	r3, [r6, #10]
 8009718:	429a      	cmp	r2, r3
 800971a:	d1d9      	bne.n	80096d0 <pbuf_copy+0xcc>
 800971c:	e7d6      	b.n	80096cc <pbuf_copy+0xc8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800971e:	6833      	ldr	r3, [r6, #0]
 8009720:	b163      	cbz	r3, 800973c <pbuf_copy+0x138>
 8009722:	4b16      	ldr	r3, [pc, #88]	@ (800977c <pbuf_copy+0x178>)
 8009724:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8009728:	4915      	ldr	r1, [pc, #84]	@ (8009780 <pbuf_copy+0x17c>)
 800972a:	4816      	ldr	r0, [pc, #88]	@ (8009784 <pbuf_copy+0x180>)
 800972c:	f006 fc02 	bl	800ff34 <iprintf>
 8009730:	f06f 0405 	mvn.w	r4, #5
}
 8009734:	4620      	mov	r0, r4
 8009736:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973a:	2700      	movs	r7, #0
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800973c:	8923      	ldrh	r3, [r4, #8]
 800973e:	8962      	ldrh	r2, [r4, #10]
 8009740:	4293      	cmp	r3, r2
 8009742:	f47f af79 	bne.w	8009638 <pbuf_copy+0x34>
 8009746:	e799      	b.n	800967c <pbuf_copy+0x78>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009748:	6835      	ldr	r5, [r6, #0]
 800974a:	2d00      	cmp	r5, #0
 800974c:	d093      	beq.n	8009676 <pbuf_copy+0x72>
 800974e:	e7e8      	b.n	8009722 <pbuf_copy+0x11e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009750:	4b0a      	ldr	r3, [pc, #40]	@ (800977c <pbuf_copy+0x178>)
 8009752:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8009756:	490c      	ldr	r1, [pc, #48]	@ (8009788 <pbuf_copy+0x184>)
 8009758:	480a      	ldr	r0, [pc, #40]	@ (8009784 <pbuf_copy+0x180>)
 800975a:	f006 fbeb 	bl	800ff34 <iprintf>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800975e:	f06f 040f 	mvn.w	r4, #15
}
 8009762:	4620      	mov	r0, r4
 8009764:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009768:	4b04      	ldr	r3, [pc, #16]	@ (800977c <pbuf_copy+0x178>)
 800976a:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800976e:	4907      	ldr	r1, [pc, #28]	@ (800978c <pbuf_copy+0x188>)
 8009770:	4804      	ldr	r0, [pc, #16]	@ (8009784 <pbuf_copy+0x180>)
 8009772:	f006 fbdf 	bl	800ff34 <iprintf>
 8009776:	e7f2      	b.n	800975e <pbuf_copy+0x15a>
 8009778:	080129cc 	.word	0x080129cc
 800977c:	080127dc 	.word	0x080127dc
 8009780:	080129f8 	.word	0x080129f8
 8009784:	080110dc 	.word	0x080110dc
 8009788:	080129e8 	.word	0x080129e8
 800978c:	08012984 	.word	0x08012984
 8009790:	080129b4 	.word	0x080129b4

08009794 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009798:	b378      	cbz	r0, 80097fa <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800979a:	460f      	mov	r7, r1
 800979c:	2900      	cmp	r1, #0
 800979e:	d035      	beq.n	800980c <pbuf_copy_partial+0x78>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80097a0:	4690      	mov	r8, r2
 80097a2:	b38a      	cbz	r2, 8009808 <pbuf_copy_partial+0x74>
 80097a4:	4605      	mov	r5, r0
 80097a6:	4619      	mov	r1, r3
  u16_t left = 0;
 80097a8:	2600      	movs	r6, #0
 80097aa:	e005      	b.n	80097b8 <pbuf_copy_partial+0x24>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80097ac:	b299      	uxth	r1, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80097ae:	682d      	ldr	r5, [r5, #0]
 80097b0:	f1b8 0f00 	cmp.w	r8, #0
 80097b4:	d01e      	beq.n	80097f4 <pbuf_copy_partial+0x60>
 80097b6:	b1ed      	cbz	r5, 80097f4 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80097b8:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 80097ba:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 80097be:	b119      	cbz	r1, 80097c8 <pbuf_copy_partial+0x34>
 80097c0:	4561      	cmp	r1, ip
      offset = (u16_t)(offset - p->len);
 80097c2:	eba1 030c 	sub.w	r3, r1, ip
    if ((offset != 0) && (offset >= p->len)) {
 80097c6:	d2f1      	bcs.n	80097ac <pbuf_copy_partial+0x18>
      buf_copy_len = (u16_t)(p->len - offset);
 80097c8:	ebac 0401 	sub.w	r4, ip, r1
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80097cc:	686a      	ldr	r2, [r5, #4]
 80097ce:	b2a4      	uxth	r4, r4
 80097d0:	4411      	add	r1, r2
 80097d2:	4544      	cmp	r4, r8
 80097d4:	bf28      	it	cs
 80097d6:	4644      	movcs	r4, r8
 80097d8:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80097da:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 80097dc:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80097e0:	f006 fd65 	bl	80102ae <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80097e4:	b2b6      	uxth	r6, r6
      offset = 0;
 80097e6:	2100      	movs	r1, #0
      len = (u16_t)(len - buf_copy_len);
 80097e8:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80097ec:	682d      	ldr	r5, [r5, #0]
 80097ee:	f1b8 0f00 	cmp.w	r8, #0
 80097f2:	d1e0      	bne.n	80097b6 <pbuf_copy_partial+0x22>
    }
  }
  return copied_total;
}
 80097f4:	4630      	mov	r0, r6
 80097f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80097fa:	4b08      	ldr	r3, [pc, #32]	@ (800981c <pbuf_copy_partial+0x88>)
 80097fc:	f240 420a 	movw	r2, #1034	@ 0x40a
 8009800:	4907      	ldr	r1, [pc, #28]	@ (8009820 <pbuf_copy_partial+0x8c>)
 8009802:	4808      	ldr	r0, [pc, #32]	@ (8009824 <pbuf_copy_partial+0x90>)
 8009804:	f006 fb96 	bl	800ff34 <iprintf>
 8009808:	2600      	movs	r6, #0
 800980a:	e7f3      	b.n	80097f4 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800980c:	4b03      	ldr	r3, [pc, #12]	@ (800981c <pbuf_copy_partial+0x88>)
 800980e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8009812:	4905      	ldr	r1, [pc, #20]	@ (8009828 <pbuf_copy_partial+0x94>)
 8009814:	4803      	ldr	r0, [pc, #12]	@ (8009824 <pbuf_copy_partial+0x90>)
 8009816:	f006 fb8d 	bl	800ff34 <iprintf>
 800981a:	e7f5      	b.n	8009808 <pbuf_copy_partial+0x74>
 800981c:	080127dc 	.word	0x080127dc
 8009820:	08012a24 	.word	0x08012a24
 8009824:	080110dc 	.word	0x080110dc
 8009828:	08012a44 	.word	0x08012a44

0800982c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4615      	mov	r5, r2
 8009830:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009832:	8929      	ldrh	r1, [r5, #8]
 8009834:	f7ff fd76 	bl	8009324 <pbuf_alloc>
  if (q == NULL) {
 8009838:	4604      	mov	r4, r0
 800983a:	b118      	cbz	r0, 8009844 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800983c:	4629      	mov	r1, r5
 800983e:	f7ff fee1 	bl	8009604 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009842:	b908      	cbnz	r0, 8009848 <pbuf_clone+0x1c>
  return q;
}
 8009844:	4620      	mov	r0, r4
 8009846:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009848:	4b04      	ldr	r3, [pc, #16]	@ (800985c <pbuf_clone+0x30>)
 800984a:	f240 5224 	movw	r2, #1316	@ 0x524
 800984e:	4904      	ldr	r1, [pc, #16]	@ (8009860 <pbuf_clone+0x34>)
 8009850:	4804      	ldr	r0, [pc, #16]	@ (8009864 <pbuf_clone+0x38>)
 8009852:	f006 fb6f 	bl	800ff34 <iprintf>
}
 8009856:	4620      	mov	r0, r4
 8009858:	bd38      	pop	{r3, r4, r5, pc}
 800985a:	bf00      	nop
 800985c:	080127dc 	.word	0x080127dc
 8009860:	08012a68 	.word	0x08012a68
 8009864:	080110dc 	.word	0x080110dc

08009868 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 8009868:	b530      	push	{r4, r5, lr}
 800986a:	4604      	mov	r4, r0
 800986c:	461d      	mov	r5, r3
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800986e:	8900      	ldrh	r0, [r0, #8]
 8009870:	18cb      	adds	r3, r1, r3
 8009872:	4298      	cmp	r0, r3
 8009874:	da03      	bge.n	800987e <pbuf_memcmp+0x16>
 8009876:	e028      	b.n	80098ca <pbuf_memcmp+0x62>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
    q = q->next;
 8009878:	6824      	ldr	r4, [r4, #0]
    start = (u16_t)(start - q->len);
 800987a:	b281      	uxth	r1, r0
  while ((q != NULL) && (q->len <= start)) {
 800987c:	b124      	cbz	r4, 8009888 <pbuf_memcmp+0x20>
 800987e:	8960      	ldrh	r0, [r4, #10]
 8009880:	4288      	cmp	r0, r1
    start = (u16_t)(start - q->len);
 8009882:	eba1 0000 	sub.w	r0, r1, r0
  while ((q != NULL) && (q->len <= start)) {
 8009886:	d9f7      	bls.n	8009878 <pbuf_memcmp+0x10>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 8009888:	b1ed      	cbz	r5, 80098c6 <pbuf_memcmp+0x5e>
 800988a:	f102 3eff 	add.w	lr, r2, #4294967295
 800988e:	2000      	movs	r0, #0
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 8009890:	eb01 0c00 	add.w	ip, r1, r0
  const struct pbuf *q = in;
 8009894:	4623      	mov	r3, r4
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 8009896:	fa1f fc8c 	uxth.w	ip, ip
  while ((q != NULL) && (q->len <= offset_left)) {
 800989a:	b924      	cbnz	r4, 80098a6 <pbuf_memcmp+0x3e>
 800989c:	e00b      	b.n	80098b6 <pbuf_memcmp+0x4e>
    q = q->next;
 800989e:	681b      	ldr	r3, [r3, #0]
    offset_left = (u16_t)(offset_left - q->len);
 80098a0:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 80098a4:	b13b      	cbz	r3, 80098b6 <pbuf_memcmp+0x4e>
 80098a6:	895a      	ldrh	r2, [r3, #10]
 80098a8:	4562      	cmp	r2, ip
    offset_left = (u16_t)(offset_left - q->len);
 80098aa:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 80098ae:	d9f6      	bls.n	800989e <pbuf_memcmp+0x36>
    return ((u8_t *)q->payload)[q_idx];
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f813 300c 	ldrb.w	r3, [r3, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 80098b6:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 80098ba:	3001      	adds	r0, #1
    if (a != b) {
 80098bc:	429a      	cmp	r2, r3
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 80098be:	b280      	uxth	r0, r0
    if (a != b) {
 80098c0:	d102      	bne.n	80098c8 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 80098c2:	42a8      	cmp	r0, r5
 80098c4:	d1e4      	bne.n	8009890 <pbuf_memcmp+0x28>
    }
  }
  return 0;
 80098c6:	2000      	movs	r0, #0
}
 80098c8:	bd30      	pop	{r4, r5, pc}
    return 0xffff;
 80098ca:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 80098ce:	bd30      	pop	{r4, r5, pc}

080098d0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80098d0:	b470      	push	{r4, r5, r6}
 80098d2:	4e12      	ldr	r6, [pc, #72]	@ (800991c <tcp_new_port+0x4c>)
 80098d4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80098d8:	4d11      	ldr	r5, [pc, #68]	@ (8009920 <tcp_new_port+0x50>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80098da:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80098de:	8831      	ldrh	r1, [r6, #0]
  tcp_port++;
 80098e0:	3101      	adds	r1, #1
 80098e2:	4c10      	ldr	r4, [pc, #64]	@ (8009924 <tcp_new_port+0x54>)
 80098e4:	b289      	uxth	r1, r1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80098e6:	4561      	cmp	r1, ip
 80098e8:	bf08      	it	eq
 80098ea:	f44f 4140 	moveq.w	r1, #49152	@ 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	b913      	cbnz	r3, 80098fa <tcp_new_port+0x2a>
 80098f4:	e00b      	b.n	800990e <tcp_new_port+0x3e>
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	b14b      	cbz	r3, 800990e <tcp_new_port+0x3e>
      if (pcb->local_port == tcp_port) {
 80098fa:	8ada      	ldrh	r2, [r3, #22]
 80098fc:	428a      	cmp	r2, r1
 80098fe:	d1fa      	bne.n	80098f6 <tcp_new_port+0x26>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009900:	3801      	subs	r0, #1
 8009902:	b280      	uxth	r0, r0
 8009904:	2800      	cmp	r0, #0
 8009906:	d1eb      	bne.n	80098e0 <tcp_new_port+0x10>
 8009908:	8031      	strh	r1, [r6, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800990a:	bc70      	pop	{r4, r5, r6}
 800990c:	4770      	bx	lr
 800990e:	3404      	adds	r4, #4
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009910:	42ac      	cmp	r4, r5
 8009912:	d1ec      	bne.n	80098ee <tcp_new_port+0x1e>
 8009914:	4608      	mov	r0, r1
 8009916:	8031      	strh	r1, [r6, #0]
}
 8009918:	bc70      	pop	{r4, r5, r6}
 800991a:	4770      	bx	lr
 800991c:	2400002c 	.word	0x2400002c
 8009920:	08013160 	.word	0x08013160
 8009924:	08013150 	.word	0x08013150

08009928 <tcp_close_shutdown_fin>:
{
 8009928:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800992a:	4604      	mov	r4, r0
 800992c:	b1f8      	cbz	r0, 800996e <tcp_close_shutdown_fin+0x46>
  switch (pcb->state) {
 800992e:	7d23      	ldrb	r3, [r4, #20]
 8009930:	2b04      	cmp	r3, #4
 8009932:	d005      	beq.n	8009940 <tcp_close_shutdown_fin+0x18>
 8009934:	2b07      	cmp	r3, #7
 8009936:	d00d      	beq.n	8009954 <tcp_close_shutdown_fin+0x2c>
 8009938:	2b03      	cmp	r3, #3
 800993a:	d001      	beq.n	8009940 <tcp_close_shutdown_fin+0x18>
      return ERR_OK;
 800993c:	2000      	movs	r0, #0
}
 800993e:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8009940:	4620      	mov	r0, r4
 8009942:	f003 fcef 	bl	800d324 <tcp_send_fin>
      if (err == ERR_OK) {
 8009946:	b948      	cbnz	r0, 800995c <tcp_close_shutdown_fin+0x34>
  if (err == ERR_OK) {
 8009948:	2305      	movs	r3, #5
    tcp_output(pcb);
 800994a:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800994c:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800994e:	f003 fe57 	bl	800d600 <tcp_output>
 8009952:	e7f3      	b.n	800993c <tcp_close_shutdown_fin+0x14>
      err = tcp_send_fin(pcb);
 8009954:	4620      	mov	r0, r4
 8009956:	f003 fce5 	bl	800d324 <tcp_send_fin>
      if (err == ERR_OK) {
 800995a:	b130      	cbz	r0, 800996a <tcp_close_shutdown_fin+0x42>
  } else if (err == ERR_MEM) {
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d1ee      	bne.n	800993e <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009960:	8b63      	ldrh	r3, [r4, #26]
 8009962:	f043 0308 	orr.w	r3, r3, #8
 8009966:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8009968:	e7e8      	b.n	800993c <tcp_close_shutdown_fin+0x14>
 800996a:	2309      	movs	r3, #9
 800996c:	e7ed      	b.n	800994a <tcp_close_shutdown_fin+0x22>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800996e:	4b04      	ldr	r3, [pc, #16]	@ (8009980 <tcp_close_shutdown_fin+0x58>)
 8009970:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8009974:	4903      	ldr	r1, [pc, #12]	@ (8009984 <tcp_close_shutdown_fin+0x5c>)
 8009976:	4804      	ldr	r0, [pc, #16]	@ (8009988 <tcp_close_shutdown_fin+0x60>)
 8009978:	f006 fadc 	bl	800ff34 <iprintf>
 800997c:	e7d7      	b.n	800992e <tcp_close_shutdown_fin+0x6>
 800997e:	bf00      	nop
 8009980:	08012a7c 	.word	0x08012a7c
 8009984:	08012aac 	.word	0x08012aac
 8009988:	080110dc 	.word	0x080110dc

0800998c <tcp_init>:
{
 800998c:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800998e:	f006 f94d 	bl	800fc2c <rand>
 8009992:	4b02      	ldr	r3, [pc, #8]	@ (800999c <tcp_init+0x10>)
 8009994:	4a02      	ldr	r2, [pc, #8]	@ (80099a0 <tcp_init+0x14>)
 8009996:	4303      	orrs	r3, r0
 8009998:	8013      	strh	r3, [r2, #0]
}
 800999a:	bd08      	pop	{r3, pc}
 800999c:	ffffc000 	.word	0xffffc000
 80099a0:	2400002c 	.word	0x2400002c

080099a4 <tcp_free>:
{
 80099a4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80099a6:	7d03      	ldrb	r3, [r0, #20]
{
 80099a8:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d005      	beq.n	80099ba <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 80099ae:	4621      	mov	r1, r4
 80099b0:	2001      	movs	r0, #1
}
 80099b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 80099b6:	f7ff b939 	b.w	8008c2c <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80099ba:	4906      	ldr	r1, [pc, #24]	@ (80099d4 <tcp_free+0x30>)
 80099bc:	22d4      	movs	r2, #212	@ 0xd4
 80099be:	4b06      	ldr	r3, [pc, #24]	@ (80099d8 <tcp_free+0x34>)
 80099c0:	4806      	ldr	r0, [pc, #24]	@ (80099dc <tcp_free+0x38>)
 80099c2:	f006 fab7 	bl	800ff34 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 80099c6:	4621      	mov	r1, r4
 80099c8:	2001      	movs	r0, #1
}
 80099ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 80099ce:	f7ff b92d 	b.w	8008c2c <memp_free>
 80099d2:	bf00      	nop
 80099d4:	08012ab8 	.word	0x08012ab8
 80099d8:	08012a7c 	.word	0x08012a7c
 80099dc:	080110dc 	.word	0x080110dc

080099e0 <tcp_bind>:
{
 80099e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e4:	460f      	mov	r7, r1
 80099e6:	4680      	mov	r8, r0
 80099e8:	4614      	mov	r4, r2
  LWIP_ASSERT_CORE_LOCKED();
 80099ea:	f7fa fb71 	bl	80040d0 <sys_check_core_locking>
  if (ipaddr == NULL) {
 80099ee:	b1f7      	cbz	r7, 8009a2e <tcp_bind+0x4e>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80099f0:	f1b8 0f00 	cmp.w	r8, #0
 80099f4:	d043      	beq.n	8009a7e <tcp_bind+0x9e>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80099f6:	f898 3014 	ldrb.w	r3, [r8, #20]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d135      	bne.n	8009a6a <tcp_bind+0x8a>
  if (port == 0) {
 80099fe:	b364      	cbz	r4, 8009a5a <tcp_bind+0x7a>
 8009a00:	4e24      	ldr	r6, [pc, #144]	@ (8009a94 <tcp_bind+0xb4>)
 8009a02:	f106 0110 	add.w	r1, r6, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009a06:	6833      	ldr	r3, [r6, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	b913      	cbnz	r3, 8009a12 <tcp_bind+0x32>
 8009a0c:	e011      	b.n	8009a32 <tcp_bind+0x52>
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	b17b      	cbz	r3, 8009a32 <tcp_bind+0x52>
        if (cpcb->local_port == port) {
 8009a12:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 8009a16:	45a4      	cmp	ip, r4
 8009a18:	d1f9      	bne.n	8009a0e <tcp_bind+0x2e>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	b11a      	cbz	r2, 8009a26 <tcp_bind+0x46>
                 ip_addr_isany(ipaddr) ||
 8009a1e:	683d      	ldr	r5, [r7, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009a20:	b10d      	cbz	r5, 8009a26 <tcp_bind+0x46>
 8009a22:	42aa      	cmp	r2, r5
 8009a24:	d1f3      	bne.n	8009a0e <tcp_bind+0x2e>
              return ERR_USE;
 8009a26:	f06f 0007 	mvn.w	r0, #7
}
 8009a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY;
 8009a2e:	4f1a      	ldr	r7, [pc, #104]	@ (8009a98 <tcp_bind+0xb8>)
 8009a30:	e7de      	b.n	80099f0 <tcp_bind+0x10>
 8009a32:	3604      	adds	r6, #4
    for (i = 0; i < max_pcb_list; i++) {
 8009a34:	428e      	cmp	r6, r1
 8009a36:	d1e6      	bne.n	8009a06 <tcp_bind+0x26>
  if (!ip_addr_isany(ipaddr)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	b10b      	cbz	r3, 8009a40 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009a3c:	f8c8 3000 	str.w	r3, [r8]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009a40:	4b16      	ldr	r3, [pc, #88]	@ (8009a9c <tcp_bind+0xbc>)
  pcb->local_port = port;
 8009a42:	f8a8 4016 	strh.w	r4, [r8, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	f8c3 8000 	str.w	r8, [r3]
 8009a4c:	f8c8 200c 	str.w	r2, [r8, #12]
 8009a50:	f004 f8f4 	bl	800dc3c <tcp_timer_needed>
  return ERR_OK;
 8009a54:	2000      	movs	r0, #0
}
 8009a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    port = tcp_new_port();
 8009a5a:	f7ff ff39 	bl	80098d0 <tcp_new_port>
    if (port == 0) {
 8009a5e:	4604      	mov	r4, r0
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d1e9      	bne.n	8009a38 <tcp_bind+0x58>
      return ERR_BUF;
 8009a64:	f06f 0001 	mvn.w	r0, #1
 8009a68:	e7df      	b.n	8009a2a <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa0 <tcp_bind+0xc0>)
 8009a6c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8009a70:	490c      	ldr	r1, [pc, #48]	@ (8009aa4 <tcp_bind+0xc4>)
 8009a72:	480d      	ldr	r0, [pc, #52]	@ (8009aa8 <tcp_bind+0xc8>)
 8009a74:	f006 fa5e 	bl	800ff34 <iprintf>
 8009a78:	f06f 0005 	mvn.w	r0, #5
 8009a7c:	e7d5      	b.n	8009a2a <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a7e:	4b08      	ldr	r3, [pc, #32]	@ (8009aa0 <tcp_bind+0xc0>)
 8009a80:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8009a84:	4909      	ldr	r1, [pc, #36]	@ (8009aac <tcp_bind+0xcc>)
 8009a86:	4808      	ldr	r0, [pc, #32]	@ (8009aa8 <tcp_bind+0xc8>)
 8009a88:	f006 fa54 	bl	800ff34 <iprintf>
 8009a8c:	f06f 000f 	mvn.w	r0, #15
 8009a90:	e7cb      	b.n	8009a2a <tcp_bind+0x4a>
 8009a92:	bf00      	nop
 8009a94:	08013150 	.word	0x08013150
 8009a98:	0801406c 	.word	0x0801406c
 8009a9c:	24020764 	.word	0x24020764
 8009aa0:	08012a7c 	.word	0x08012a7c
 8009aa4:	08012ae4 	.word	0x08012ae4
 8009aa8:	080110dc 	.word	0x080110dc
 8009aac:	08012acc 	.word	0x08012acc

08009ab0 <tcp_listen_with_backlog_and_err>:
{
 8009ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4617      	mov	r7, r2
  LWIP_ASSERT_CORE_LOCKED();
 8009ab6:	f7fa fb0b 	bl	80040d0 <sys_check_core_locking>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009aba:	2c00      	cmp	r4, #0
 8009abc:	d05d      	beq.n	8009b7a <tcp_listen_with_backlog_and_err+0xca>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009abe:	7d25      	ldrb	r5, [r4, #20]
 8009ac0:	2d00      	cmp	r5, #0
 8009ac2:	d147      	bne.n	8009b54 <tcp_listen_with_backlog_and_err+0xa4>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009ac4:	2002      	movs	r0, #2
 8009ac6:	f7ff f86b 	bl	8008ba0 <memp_malloc>
  if (lpcb == NULL) {
 8009aca:	4606      	mov	r6, r0
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d051      	beq.n	8009b74 <tcp_listen_with_backlog_and_err+0xc4>
  lpcb->callback_arg = pcb->callback_arg;
 8009ad0:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 8009ad2:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 8009ad4:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8009ad6:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 8009ad8:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 8009ada:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8009adc:	7d62      	ldrb	r2, [r4, #21]
 8009ade:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8009ae0:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8009ae2:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8009ae4:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8009ae6:	7ae2      	ldrb	r2, [r4, #11]
 8009ae8:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8009aea:	7aa2      	ldrb	r2, [r4, #10]
 8009aec:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009aee:	6822      	ldr	r2, [r4, #0]
 8009af0:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8009af2:	b99b      	cbnz	r3, 8009b1c <tcp_listen_with_backlog_and_err+0x6c>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009af4:	7d23      	ldrb	r3, [r4, #20]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d020      	beq.n	8009b3c <tcp_listen_with_backlog_and_err+0x8c>
  memp_free(MEMP_TCP_PCB, pcb);
 8009afa:	4621      	mov	r1, r4
 8009afc:	2001      	movs	r0, #1
 8009afe:	f7ff f895 	bl	8008c2c <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009b02:	4b23      	ldr	r3, [pc, #140]	@ (8009b90 <tcp_listen_with_backlog_and_err+0xe0>)
  lpcb->accept = tcp_accept_null;
 8009b04:	4923      	ldr	r1, [pc, #140]	@ (8009b94 <tcp_listen_with_backlog_and_err+0xe4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009b06:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 8009b08:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009b0a:	60f2      	str	r2, [r6, #12]
 8009b0c:	601e      	str	r6, [r3, #0]
 8009b0e:	f004 f895 	bl	800dc3c <tcp_timer_needed>
  res = ERR_OK;
 8009b12:	2300      	movs	r3, #0
  if (err != NULL) {
 8009b14:	b107      	cbz	r7, 8009b18 <tcp_listen_with_backlog_and_err+0x68>
    *err = res;
 8009b16:	703b      	strb	r3, [r7, #0]
}
 8009b18:	4630      	mov	r0, r6
 8009b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8009b98 <tcp_listen_with_backlog_and_err+0xe8>)
 8009b1e:	6813      	ldr	r3, [r2, #0]
 8009b20:	42a3      	cmp	r3, r4
 8009b22:	d012      	beq.n	8009b4a <tcp_listen_with_backlog_and_err+0x9a>
 8009b24:	b12b      	cbz	r3, 8009b32 <tcp_listen_with_backlog_and_err+0x82>
 8009b26:	68d9      	ldr	r1, [r3, #12]
 8009b28:	42a1      	cmp	r1, r4
 8009b2a:	d01e      	beq.n	8009b6a <tcp_listen_with_backlog_and_err+0xba>
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1f9      	bne.n	8009b26 <tcp_listen_with_backlog_and_err+0x76>
 8009b32:	2300      	movs	r3, #0
 8009b34:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009b36:	7d23      	ldrb	r3, [r4, #20]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d1de      	bne.n	8009afa <tcp_listen_with_backlog_and_err+0x4a>
 8009b3c:	4b17      	ldr	r3, [pc, #92]	@ (8009b9c <tcp_listen_with_backlog_and_err+0xec>)
 8009b3e:	22d4      	movs	r2, #212	@ 0xd4
 8009b40:	4917      	ldr	r1, [pc, #92]	@ (8009ba0 <tcp_listen_with_backlog_and_err+0xf0>)
 8009b42:	4818      	ldr	r0, [pc, #96]	@ (8009ba4 <tcp_listen_with_backlog_and_err+0xf4>)
 8009b44:	f006 f9f6 	bl	800ff34 <iprintf>
 8009b48:	e7d7      	b.n	8009afa <tcp_listen_with_backlog_and_err+0x4a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b4a:	68e3      	ldr	r3, [r4, #12]
 8009b4c:	6013      	str	r3, [r2, #0]
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60e3      	str	r3, [r4, #12]
 8009b52:	e7f0      	b.n	8009b36 <tcp_listen_with_backlog_and_err+0x86>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009b54:	4b11      	ldr	r3, [pc, #68]	@ (8009b9c <tcp_listen_with_backlog_and_err+0xec>)
 8009b56:	f240 325a 	movw	r2, #858	@ 0x35a
 8009b5a:	4913      	ldr	r1, [pc, #76]	@ (8009ba8 <tcp_listen_with_backlog_and_err+0xf8>)
  struct tcp_pcb_listen *lpcb = NULL;
 8009b5c:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009b5e:	4811      	ldr	r0, [pc, #68]	@ (8009ba4 <tcp_listen_with_backlog_and_err+0xf4>)
 8009b60:	f006 f9e8 	bl	800ff34 <iprintf>
 8009b64:	f06f 030e 	mvn.w	r3, #14
 8009b68:	e7d4      	b.n	8009b14 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009b6a:	68e2      	ldr	r2, [r4, #12]
 8009b6c:	60da      	str	r2, [r3, #12]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60e3      	str	r3, [r4, #12]
 8009b72:	e7e0      	b.n	8009b36 <tcp_listen_with_backlog_and_err+0x86>
    res = ERR_MEM;
 8009b74:	f04f 33ff 	mov.w	r3, #4294967295
 8009b78:	e7cc      	b.n	8009b14 <tcp_listen_with_backlog_and_err+0x64>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009b7a:	4b08      	ldr	r3, [pc, #32]	@ (8009b9c <tcp_listen_with_backlog_and_err+0xec>)
 8009b7c:	f240 3259 	movw	r2, #857	@ 0x359
 8009b80:	490a      	ldr	r1, [pc, #40]	@ (8009bac <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 8009b82:	4626      	mov	r6, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009b84:	4807      	ldr	r0, [pc, #28]	@ (8009ba4 <tcp_listen_with_backlog_and_err+0xf4>)
 8009b86:	f006 f9d5 	bl	800ff34 <iprintf>
 8009b8a:	f06f 030f 	mvn.w	r3, #15
 8009b8e:	e7c1      	b.n	8009b14 <tcp_listen_with_backlog_and_err+0x64>
 8009b90:	24020760 	.word	0x24020760
 8009b94:	0800a841 	.word	0x0800a841
 8009b98:	24020764 	.word	0x24020764
 8009b9c:	08012a7c 	.word	0x08012a7c
 8009ba0:	08012ab8 	.word	0x08012ab8
 8009ba4:	080110dc 	.word	0x080110dc
 8009ba8:	08012b3c 	.word	0x08012b3c
 8009bac:	08012b0c 	.word	0x08012b0c

08009bb0 <tcp_listen_with_backlog>:
{
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8009bb6:	f7fa fa8b 	bl	80040d0 <sys_check_core_locking>
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009bba:	2200      	movs	r2, #0
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	4620      	mov	r0, r4
}
 8009bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009bc4:	f7ff bf74 	b.w	8009ab0 <tcp_listen_with_backlog_and_err>

08009bc8 <tcp_update_rcv_ann_wnd>:
{
 8009bc8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009bca:	4604      	mov	r4, r0
 8009bcc:	b1c8      	cbz	r0, 8009c02 <tcp_update_rcv_ann_wnd+0x3a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009bce:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009bd0:	f640 3c68 	movw	ip, #2920	@ 0xb68
 8009bd4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009bd6:	f8b4 e032 	ldrh.w	lr, [r4, #50]	@ 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009bda:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009bdc:	1a58      	subs	r0, r3, r1
 8009bde:	45e6      	cmp	lr, ip
 8009be0:	4410      	add	r0, r2
 8009be2:	bf94      	ite	ls
 8009be4:	eba0 050e 	subls.w	r5, r0, lr
 8009be8:	eba0 050c 	subhi.w	r5, r0, ip
 8009bec:	2d00      	cmp	r5, #0
 8009bee:	db01      	blt.n	8009bf4 <tcp_update_rcv_ann_wnd+0x2c>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009bf0:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 8009bf2:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009bf4:	1a53      	subs	r3, r2, r1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	dd0b      	ble.n	8009c12 <tcp_update_rcv_ann_wnd+0x4a>
 8009bfa:	2300      	movs	r3, #0
    return 0;
 8009bfc:	4618      	mov	r0, r3
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009bfe:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 8009c00:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009c02:	4b0c      	ldr	r3, [pc, #48]	@ (8009c34 <tcp_update_rcv_ann_wnd+0x6c>)
 8009c04:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009c08:	490b      	ldr	r1, [pc, #44]	@ (8009c38 <tcp_update_rcv_ann_wnd+0x70>)
 8009c0a:	480c      	ldr	r0, [pc, #48]	@ (8009c3c <tcp_update_rcv_ann_wnd+0x74>)
 8009c0c:	f006 f992 	bl	800ff34 <iprintf>
 8009c10:	e7dd      	b.n	8009bce <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009c12:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009c14:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 8009c18:	d203      	bcs.n	8009c22 <tcp_update_rcv_ann_wnd+0x5a>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009c1a:	b2ab      	uxth	r3, r5
    return 0;
 8009c1c:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009c1e:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 8009c20:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009c22:	4b04      	ldr	r3, [pc, #16]	@ (8009c34 <tcp_update_rcv_ann_wnd+0x6c>)
 8009c24:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8009c28:	4905      	ldr	r1, [pc, #20]	@ (8009c40 <tcp_update_rcv_ann_wnd+0x78>)
 8009c2a:	4804      	ldr	r0, [pc, #16]	@ (8009c3c <tcp_update_rcv_ann_wnd+0x74>)
 8009c2c:	f006 f982 	bl	800ff34 <iprintf>
 8009c30:	e7f3      	b.n	8009c1a <tcp_update_rcv_ann_wnd+0x52>
 8009c32:	bf00      	nop
 8009c34:	08012a7c 	.word	0x08012a7c
 8009c38:	08012b74 	.word	0x08012b74
 8009c3c:	080110dc 	.word	0x080110dc
 8009c40:	08012b98 	.word	0x08012b98

08009c44 <tcp_recved>:
{
 8009c44:	b570      	push	{r4, r5, r6, lr}
 8009c46:	4605      	mov	r5, r0
 8009c48:	460c      	mov	r4, r1
  LWIP_ASSERT_CORE_LOCKED();
 8009c4a:	f7fa fa41 	bl	80040d0 <sys_check_core_locking>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009c4e:	b33d      	cbz	r5, 8009ca0 <tcp_recved+0x5c>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009c50:	7d2b      	ldrb	r3, [r5, #20]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d01c      	beq.n	8009c90 <tcp_recved+0x4c>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009c56:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 8009c58:	1919      	adds	r1, r3, r4
 8009c5a:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009c5c:	428b      	cmp	r3, r1
 8009c5e:	d803      	bhi.n	8009c68 <tcp_recved+0x24>
 8009c60:	f241 63d0 	movw	r3, #5840	@ 0x16d0
 8009c64:	4299      	cmp	r1, r3
 8009c66:	d901      	bls.n	8009c6c <tcp_recved+0x28>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009c68:	f241 61d0 	movw	r1, #5840	@ 0x16d0
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	8529      	strh	r1, [r5, #40]	@ 0x28
 8009c70:	f7ff ffaa 	bl	8009bc8 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009c74:	f240 53b3 	movw	r3, #1459	@ 0x5b3
 8009c78:	4298      	cmp	r0, r3
 8009c7a:	d800      	bhi.n	8009c7e <tcp_recved+0x3a>
}
 8009c7c:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 8009c7e:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 8009c80:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 8009c82:	f043 0302 	orr.w	r3, r3, #2
 8009c86:	836b      	strh	r3, [r5, #26]
}
 8009c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8009c8c:	f003 bcb8 	b.w	800d600 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009c90:	4b08      	ldr	r3, [pc, #32]	@ (8009cb4 <tcp_recved+0x70>)
 8009c92:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8009c96:	4908      	ldr	r1, [pc, #32]	@ (8009cb8 <tcp_recved+0x74>)
 8009c98:	4808      	ldr	r0, [pc, #32]	@ (8009cbc <tcp_recved+0x78>)
 8009c9a:	f006 f94b 	bl	800ff34 <iprintf>
 8009c9e:	e7da      	b.n	8009c56 <tcp_recved+0x12>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009ca0:	4b04      	ldr	r3, [pc, #16]	@ (8009cb4 <tcp_recved+0x70>)
 8009ca2:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8009ca6:	4906      	ldr	r1, [pc, #24]	@ (8009cc0 <tcp_recved+0x7c>)
 8009ca8:	4804      	ldr	r0, [pc, #16]	@ (8009cbc <tcp_recved+0x78>)
}
 8009caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009cae:	f006 b941 	b.w	800ff34 <iprintf>
 8009cb2:	bf00      	nop
 8009cb4:	08012a7c 	.word	0x08012a7c
 8009cb8:	08012bcc 	.word	0x08012bcc
 8009cbc:	080110dc 	.word	0x080110dc
 8009cc0:	08012bb4 	.word	0x08012bb4

08009cc4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	460e      	mov	r6, r1
 8009cca:	4617      	mov	r7, r2
 8009ccc:	461d      	mov	r5, r3
  struct netif *netif = NULL;
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 8009cce:	f7fa f9ff 	bl	80040d0 <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8009cd2:	2c00      	cmp	r4, #0
 8009cd4:	f000 808a 	beq.w	8009dec <tcp_connect+0x128>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8009cd8:	2e00      	cmp	r6, #0
 8009cda:	d07d      	beq.n	8009dd8 <tcp_connect+0x114>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8009cdc:	7d23      	ldrb	r3, [r4, #20]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d16a      	bne.n	8009db8 <tcp_connect+0xf4>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8009ce2:	6833      	ldr	r3, [r6, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8009ce4:	7a20      	ldrb	r0, [r4, #8]
  pcb->remote_port = port;
 8009ce6:	8327      	strh	r7, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8009ce8:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d049      	beq.n	8009d82 <tcp_connect+0xbe>
    netif = netif_get_by_index(pcb->netif_idx);
 8009cee:	f7ff f99f 	bl	8009030 <netif_get_by_index>
 8009cf2:	4607      	mov	r7, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 8009cf4:	2f00      	cmp	r7, #0
 8009cf6:	d06c      	beq.n	8009dd2 <tcp_connect+0x10e>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	b90b      	cbnz	r3, 8009d00 <tcp_connect+0x3c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8009d00:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 8009d02:	b926      	cbnz	r6, 8009d0e <tcp_connect+0x4a>
    pcb->local_port = tcp_new_port();
 8009d04:	f7ff fde4 	bl	80098d0 <tcp_new_port>
 8009d08:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d05e      	beq.n	8009dcc <tcp_connect+0x108>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8009dfc <tcp_connect+0x138>)
 8009d10:	4a3b      	ldr	r2, [pc, #236]	@ (8009e00 <tcp_connect+0x13c>)
 8009d12:	6811      	ldr	r1, [r2, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	440a      	add	r2, r1
 8009d18:	601a      	str	r2, [r3, #0]
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009d1a:	4b3a      	ldr	r3, [pc, #232]	@ (8009e04 <tcp_connect+0x140>)
  pcb->snd_nxt = iss;
 8009d1c:	6522      	str	r2, [r4, #80]	@ 0x50
  pcb->lastack = iss - 1;
 8009d1e:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009d20:	62a3      	str	r3, [r4, #40]	@ 0x28
  pcb->snd_wnd = TCP_WND;
 8009d22:	f241 63d0 	movw	r3, #5840	@ 0x16d0
  pcb->lastack = iss - 1;
 8009d26:	6462      	str	r2, [r4, #68]	@ 0x44
  pcb->snd_lbb = iss - 1;
 8009d28:	e9c4 2216 	strd	r2, r2, [r4, #88]	@ 0x58
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 8009d2c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
  pcb->snd_wnd = TCP_WND;
 8009d2e:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
  pcb->rcv_nxt = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	6263      	str	r3, [r4, #36]	@ 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009d36:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009d38:	2a00      	cmp	r2, #0
 8009d3a:	d037      	beq.n	8009dac <tcp_connect+0xe8>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009d3c:	2a28      	cmp	r2, #40	@ 0x28
 8009d3e:	bf38      	it	cc
 8009d40:	2228      	movcc	r2, #40	@ 0x28
 8009d42:	3a28      	subs	r2, #40	@ 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009d44:	b292      	uxth	r2, r2
 8009d46:	f5b2 7f06 	cmp.w	r2, #536	@ 0x218
 8009d4a:	bf28      	it	cs
 8009d4c:	f44f 7206 	movcs.w	r2, #536	@ 0x218
  pcb->cwnd = 1;
 8009d50:	2301      	movs	r3, #1
  pcb->connected = connected;
 8009d52:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8009d56:	2102      	movs	r1, #2
 8009d58:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8009d5a:	8662      	strh	r2, [r4, #50]	@ 0x32
  pcb->cwnd = 1;
 8009d5c:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8009d60:	f003 fa40 	bl	800d1e4 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8009d64:	4605      	mov	r5, r0
 8009d66:	b9f8      	cbnz	r0, 8009da8 <tcp_connect+0xe4>
    pcb->state = SYN_SENT;
 8009d68:	2302      	movs	r3, #2
 8009d6a:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 8009d6c:	b186      	cbz	r6, 8009d90 <tcp_connect+0xcc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009d6e:	4a26      	ldr	r2, [pc, #152]	@ (8009e08 <tcp_connect+0x144>)
 8009d70:	6813      	ldr	r3, [r2, #0]
 8009d72:	42a3      	cmp	r3, r4
 8009d74:	d01d      	beq.n	8009db2 <tcp_connect+0xee>
 8009d76:	b15b      	cbz	r3, 8009d90 <tcp_connect+0xcc>
 8009d78:	68da      	ldr	r2, [r3, #12]
 8009d7a:	42a2      	cmp	r2, r4
 8009d7c:	d006      	beq.n	8009d8c <tcp_connect+0xc8>
 8009d7e:	4613      	mov	r3, r2
 8009d80:	e7f9      	b.n	8009d76 <tcp_connect+0xb2>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009d82:	1d20      	adds	r0, r4, #4
 8009d84:	f004 ff02 	bl	800eb8c <ip4_route>
 8009d88:	4607      	mov	r7, r0
 8009d8a:	e7b3      	b.n	8009cf4 <tcp_connect+0x30>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009d8c:	68e2      	ldr	r2, [r4, #12]
 8009d8e:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 8009d90:	4b1e      	ldr	r3, [pc, #120]	@ (8009e0c <tcp_connect+0x148>)
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	601c      	str	r4, [r3, #0]
 8009d96:	60e2      	str	r2, [r4, #12]
 8009d98:	f003 ff50 	bl	800dc3c <tcp_timer_needed>
 8009d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8009e10 <tcp_connect+0x14c>)
 8009d9e:	2201      	movs	r2, #1
    tcp_output(pcb);
 8009da0:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 8009da2:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8009da4:	f003 fc2c 	bl	800d600 <tcp_output>
}
 8009da8:	4628      	mov	r0, r5
 8009daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return sendmss;
 8009dac:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009db0:	e7ce      	b.n	8009d50 <tcp_connect+0x8c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009db2:	68e3      	ldr	r3, [r4, #12]
 8009db4:	6013      	str	r3, [r2, #0]
 8009db6:	e7eb      	b.n	8009d90 <tcp_connect+0xcc>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8009db8:	4b16      	ldr	r3, [pc, #88]	@ (8009e14 <tcp_connect+0x150>)
 8009dba:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 8009dbe:	4916      	ldr	r1, [pc, #88]	@ (8009e18 <tcp_connect+0x154>)
 8009dc0:	f06f 0509 	mvn.w	r5, #9
 8009dc4:	4815      	ldr	r0, [pc, #84]	@ (8009e1c <tcp_connect+0x158>)
 8009dc6:	f006 f8b5 	bl	800ff34 <iprintf>
 8009dca:	e7ed      	b.n	8009da8 <tcp_connect+0xe4>
      return ERR_BUF;
 8009dcc:	f06f 0501 	mvn.w	r5, #1
 8009dd0:	e7ea      	b.n	8009da8 <tcp_connect+0xe4>
    return ERR_RTE;
 8009dd2:	f06f 0503 	mvn.w	r5, #3
 8009dd6:	e7e7      	b.n	8009da8 <tcp_connect+0xe4>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8009dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8009e14 <tcp_connect+0x150>)
 8009dda:	f240 4236 	movw	r2, #1078	@ 0x436
 8009dde:	4910      	ldr	r1, [pc, #64]	@ (8009e20 <tcp_connect+0x15c>)
 8009de0:	480e      	ldr	r0, [pc, #56]	@ (8009e1c <tcp_connect+0x158>)
 8009de2:	f006 f8a7 	bl	800ff34 <iprintf>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8009de6:	f06f 050f 	mvn.w	r5, #15
 8009dea:	e7dd      	b.n	8009da8 <tcp_connect+0xe4>
 8009dec:	4b09      	ldr	r3, [pc, #36]	@ (8009e14 <tcp_connect+0x150>)
 8009dee:	f240 4235 	movw	r2, #1077	@ 0x435
 8009df2:	490c      	ldr	r1, [pc, #48]	@ (8009e24 <tcp_connect+0x160>)
 8009df4:	4809      	ldr	r0, [pc, #36]	@ (8009e1c <tcp_connect+0x158>)
 8009df6:	f006 f89d 	bl	800ff34 <iprintf>
 8009dfa:	e7f4      	b.n	8009de6 <tcp_connect+0x122>
 8009dfc:	24000028 	.word	0x24000028
 8009e00:	24020768 	.word	0x24020768
 8009e04:	16d016d0 	.word	0x16d016d0
 8009e08:	24020764 	.word	0x24020764
 8009e0c:	2402075c 	.word	0x2402075c
 8009e10:	24020757 	.word	0x24020757
 8009e14:	08012a7c 	.word	0x08012a7c
 8009e18:	08012c2c 	.word	0x08012c2c
 8009e1c:	080110dc 	.word	0x080110dc
 8009e20:	08012c10 	.word	0x08012c10
 8009e24:	08012bf4 	.word	0x08012bf4

08009e28 <tcp_segs_free>:
  while (seg != NULL) {
 8009e28:	b170      	cbz	r0, 8009e48 <tcp_segs_free+0x20>
{
 8009e2a:	b538      	push	{r3, r4, r5, lr}
 8009e2c:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 8009e2e:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 8009e30:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8009e32:	6868      	ldr	r0, [r5, #4]
 8009e34:	b108      	cbz	r0, 8009e3a <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 8009e36:	f7ff fa05 	bl	8009244 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	2003      	movs	r0, #3
 8009e3e:	f7fe fef5 	bl	8008c2c <memp_free>
  while (seg != NULL) {
 8009e42:	2c00      	cmp	r4, #0
 8009e44:	d1f3      	bne.n	8009e2e <tcp_segs_free+0x6>
}
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop

08009e4c <tcp_seg_free>:
  if (seg != NULL) {
 8009e4c:	b158      	cbz	r0, 8009e66 <tcp_seg_free+0x1a>
{
 8009e4e:	b510      	push	{r4, lr}
 8009e50:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8009e52:	6840      	ldr	r0, [r0, #4]
 8009e54:	b108      	cbz	r0, 8009e5a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8009e56:	f7ff f9f5 	bl	8009244 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	2003      	movs	r0, #3
}
 8009e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8009e62:	f7fe bee3 	b.w	8008c2c <memp_free>
 8009e66:	4770      	bx	lr

08009e68 <tcp_seg_copy>:
{
 8009e68:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	b188      	cbz	r0, 8009e92 <tcp_seg_copy+0x2a>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009e6e:	2003      	movs	r0, #3
 8009e70:	f7fe fe96 	bl	8008ba0 <memp_malloc>
  if (cseg == NULL) {
 8009e74:	4604      	mov	r4, r0
 8009e76:	b150      	cbz	r0, 8009e8e <tcp_seg_copy+0x26>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009e78:	6868      	ldr	r0, [r5, #4]
 8009e7a:	6829      	ldr	r1, [r5, #0]
 8009e7c:	68aa      	ldr	r2, [r5, #8]
 8009e7e:	68eb      	ldr	r3, [r5, #12]
 8009e80:	6060      	str	r0, [r4, #4]
 8009e82:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 8009e84:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009e86:	60a2      	str	r2, [r4, #8]
 8009e88:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8009e8a:	f7ff fb59 	bl	8009540 <pbuf_ref>
}
 8009e8e:	4620      	mov	r0, r4
 8009e90:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009e92:	4b04      	ldr	r3, [pc, #16]	@ (8009ea4 <tcp_seg_copy+0x3c>)
 8009e94:	f240 6282 	movw	r2, #1666	@ 0x682
 8009e98:	4903      	ldr	r1, [pc, #12]	@ (8009ea8 <tcp_seg_copy+0x40>)
 8009e9a:	4804      	ldr	r0, [pc, #16]	@ (8009eac <tcp_seg_copy+0x44>)
 8009e9c:	f006 f84a 	bl	800ff34 <iprintf>
 8009ea0:	e7e5      	b.n	8009e6e <tcp_seg_copy+0x6>
 8009ea2:	bf00      	nop
 8009ea4:	08012a7c 	.word	0x08012a7c
 8009ea8:	08012c5c 	.word	0x08012c5c
 8009eac:	080110dc 	.word	0x080110dc

08009eb0 <tcp_arg>:
{
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8009eb6:	f7fa f90b 	bl	80040d0 <sys_check_core_locking>
  if (pcb != NULL) {
 8009eba:	b104      	cbz	r4, 8009ebe <tcp_arg+0xe>
    pcb->callback_arg = arg;
 8009ebc:	6125      	str	r5, [r4, #16]
}
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}

08009ec0 <tcp_recv>:
{
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8009ec6:	f7fa f903 	bl	80040d0 <sys_check_core_locking>
  if (pcb != NULL) {
 8009eca:	b124      	cbz	r4, 8009ed6 <tcp_recv+0x16>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009ecc:	7d23      	ldrb	r3, [r4, #20]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d002      	beq.n	8009ed8 <tcp_recv+0x18>
    pcb->recv = recv;
 8009ed2:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009ed8:	4b03      	ldr	r3, [pc, #12]	@ (8009ee8 <tcp_recv+0x28>)
 8009eda:	f240 72df 	movw	r2, #2015	@ 0x7df
 8009ede:	4903      	ldr	r1, [pc, #12]	@ (8009eec <tcp_recv+0x2c>)
 8009ee0:	4803      	ldr	r0, [pc, #12]	@ (8009ef0 <tcp_recv+0x30>)
 8009ee2:	f006 f827 	bl	800ff34 <iprintf>
 8009ee6:	e7f4      	b.n	8009ed2 <tcp_recv+0x12>
 8009ee8:	08012a7c 	.word	0x08012a7c
 8009eec:	08012c78 	.word	0x08012c78
 8009ef0:	080110dc 	.word	0x080110dc

08009ef4 <tcp_sent>:
{
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8009efa:	f7fa f8e9 	bl	80040d0 <sys_check_core_locking>
  if (pcb != NULL) {
 8009efe:	b124      	cbz	r4, 8009f0a <tcp_sent+0x16>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009f00:	7d23      	ldrb	r3, [r4, #20]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d002      	beq.n	8009f0c <tcp_sent+0x18>
    pcb->sent = sent;
 8009f06:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
}
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009f0c:	4b03      	ldr	r3, [pc, #12]	@ (8009f1c <tcp_sent+0x28>)
 8009f0e:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8009f12:	4903      	ldr	r1, [pc, #12]	@ (8009f20 <tcp_sent+0x2c>)
 8009f14:	4803      	ldr	r0, [pc, #12]	@ (8009f24 <tcp_sent+0x30>)
 8009f16:	f006 f80d 	bl	800ff34 <iprintf>
 8009f1a:	e7f4      	b.n	8009f06 <tcp_sent+0x12>
 8009f1c:	08012a7c 	.word	0x08012a7c
 8009f20:	08012ca0 	.word	0x08012ca0
 8009f24:	080110dc 	.word	0x080110dc

08009f28 <tcp_err>:
{
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8009f2e:	f7fa f8cf 	bl	80040d0 <sys_check_core_locking>
  if (pcb != NULL) {
 8009f32:	b124      	cbz	r4, 8009f3e <tcp_err+0x16>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009f34:	7d23      	ldrb	r3, [r4, #20]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d002      	beq.n	8009f40 <tcp_err+0x18>
    pcb->errf = err;
 8009f3a:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 8009f3e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009f40:	4b03      	ldr	r3, [pc, #12]	@ (8009f50 <tcp_err+0x28>)
 8009f42:	f640 020d 	movw	r2, #2061	@ 0x80d
 8009f46:	4903      	ldr	r1, [pc, #12]	@ (8009f54 <tcp_err+0x2c>)
 8009f48:	4803      	ldr	r0, [pc, #12]	@ (8009f58 <tcp_err+0x30>)
 8009f4a:	f005 fff3 	bl	800ff34 <iprintf>
 8009f4e:	e7f4      	b.n	8009f3a <tcp_err+0x12>
 8009f50:	08012a7c 	.word	0x08012a7c
 8009f54:	08012cc8 	.word	0x08012cc8
 8009f58:	080110dc 	.word	0x080110dc

08009f5c <tcp_accept>:
{
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4604      	mov	r4, r0
 8009f60:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8009f62:	f7fa f8b5 	bl	80040d0 <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009f66:	b11c      	cbz	r4, 8009f70 <tcp_accept+0x14>
 8009f68:	7d23      	ldrb	r3, [r4, #20]
 8009f6a:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 8009f6c:	bf08      	it	eq
 8009f6e:	61a5      	streq	r5, [r4, #24]
}
 8009f70:	bd38      	pop	{r3, r4, r5, pc}
 8009f72:	bf00      	nop

08009f74 <tcp_poll>:
{
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	4604      	mov	r4, r0
 8009f78:	460e      	mov	r6, r1
 8009f7a:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 8009f7c:	f7fa f8a8 	bl	80040d0 <sys_check_core_locking>
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009f80:	b18c      	cbz	r4, 8009fa6 <tcp_poll+0x32>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009f82:	7d23      	ldrb	r3, [r4, #20]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d003      	beq.n	8009f90 <tcp_poll+0x1c>
  pcb->poll = poll;
 8009f88:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  pcb->pollinterval = interval;
 8009f8c:	7765      	strb	r5, [r4, #29]
}
 8009f8e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009f90:	4b09      	ldr	r3, [pc, #36]	@ (8009fb8 <tcp_poll+0x44>)
 8009f92:	f640 023e 	movw	r2, #2110	@ 0x83e
 8009f96:	4909      	ldr	r1, [pc, #36]	@ (8009fbc <tcp_poll+0x48>)
 8009f98:	4809      	ldr	r0, [pc, #36]	@ (8009fc0 <tcp_poll+0x4c>)
 8009f9a:	f005 ffcb 	bl	800ff34 <iprintf>
  pcb->poll = poll;
 8009f9e:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  pcb->pollinterval = interval;
 8009fa2:	7765      	strb	r5, [r4, #29]
}
 8009fa4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009fa6:	4b04      	ldr	r3, [pc, #16]	@ (8009fb8 <tcp_poll+0x44>)
 8009fa8:	f640 023d 	movw	r2, #2109	@ 0x83d
 8009fac:	4905      	ldr	r1, [pc, #20]	@ (8009fc4 <tcp_poll+0x50>)
 8009fae:	4804      	ldr	r0, [pc, #16]	@ (8009fc0 <tcp_poll+0x4c>)
}
 8009fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009fb4:	f005 bfbe 	b.w	800ff34 <iprintf>
 8009fb8:	08012a7c 	.word	0x08012a7c
 8009fbc:	08012d08 	.word	0x08012d08
 8009fc0:	080110dc 	.word	0x080110dc
 8009fc4:	08012cf0 	.word	0x08012cf0

08009fc8 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d041      	beq.n	800a050 <tcp_pcb_purge+0x88>
{
 8009fcc:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 8009fce:	7d03      	ldrb	r3, [r0, #20]
 8009fd0:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 8009fd2:	2b0a      	cmp	r3, #10
 8009fd4:	d001      	beq.n	8009fda <tcp_pcb_purge+0x12>
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d800      	bhi.n	8009fdc <tcp_pcb_purge+0x14>
}
 8009fda:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 8009fdc:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8009fde:	b118      	cbz	r0, 8009fe8 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 8009fe0:	f7ff f930 	bl	8009244 <pbuf_free>
      pcb->refused_data = NULL;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	67ab      	str	r3, [r5, #120]	@ 0x78
    if (pcb->ooseq != NULL) {
 8009fe8:	6f6c      	ldr	r4, [r5, #116]	@ 0x74
 8009fea:	b164      	cbz	r4, 800a006 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 8009fec:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 8009fee:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8009ff0:	6870      	ldr	r0, [r6, #4]
 8009ff2:	b108      	cbz	r0, 8009ff8 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 8009ff4:	f7ff f926 	bl	8009244 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8009ff8:	4631      	mov	r1, r6
 8009ffa:	2003      	movs	r0, #3
 8009ffc:	f7fe fe16 	bl	8008c2c <memp_free>
  while (seg != NULL) {
 800a000:	2c00      	cmp	r4, #0
 800a002:	d1f3      	bne.n	8009fec <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 800a004:	676c      	str	r4, [r5, #116]	@ 0x74
    pcb->rtime = -1;
 800a006:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    tcp_segs_free(pcb->unsent);
 800a00a:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
    pcb->rtime = -1;
 800a00c:	862b      	strh	r3, [r5, #48]	@ 0x30
  while (seg != NULL) {
 800a00e:	b15c      	cbz	r4, 800a028 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 800a010:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800a012:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800a014:	6870      	ldr	r0, [r6, #4]
 800a016:	b108      	cbz	r0, 800a01c <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 800a018:	f7ff f914 	bl	8009244 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800a01c:	4631      	mov	r1, r6
 800a01e:	2003      	movs	r0, #3
 800a020:	f7fe fe04 	bl	8008c2c <memp_free>
  while (seg != NULL) {
 800a024:	2c00      	cmp	r4, #0
 800a026:	d1f3      	bne.n	800a010 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 800a028:	6f2c      	ldr	r4, [r5, #112]	@ 0x70
  while (seg != NULL) {
 800a02a:	b15c      	cbz	r4, 800a044 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 800a02c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800a02e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800a030:	6870      	ldr	r0, [r6, #4]
 800a032:	b108      	cbz	r0, 800a038 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 800a034:	f7ff f906 	bl	8009244 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800a038:	4631      	mov	r1, r6
 800a03a:	2003      	movs	r0, #3
 800a03c:	f7fe fdf6 	bl	8008c2c <memp_free>
  while (seg != NULL) {
 800a040:	2c00      	cmp	r4, #0
 800a042:	d1f3      	bne.n	800a02c <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 800a044:	2300      	movs	r3, #0
 800a046:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
    pcb->unsent_oversize = 0;
 800a04a:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
}
 800a04e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a050:	4b03      	ldr	r3, [pc, #12]	@ (800a060 <tcp_pcb_purge+0x98>)
 800a052:	f640 0251 	movw	r2, #2129	@ 0x851
 800a056:	4903      	ldr	r1, [pc, #12]	@ (800a064 <tcp_pcb_purge+0x9c>)
 800a058:	4803      	ldr	r0, [pc, #12]	@ (800a068 <tcp_pcb_purge+0xa0>)
 800a05a:	f005 bf6b 	b.w	800ff34 <iprintf>
 800a05e:	bf00      	nop
 800a060:	08012a7c 	.word	0x08012a7c
 800a064:	08012d28 	.word	0x08012d28
 800a068:	080110dc 	.word	0x080110dc

0800a06c <tcp_slowtmr>:
{
 800a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800a070:	4da7      	ldr	r5, [pc, #668]	@ (800a310 <tcp_slowtmr+0x2a4>)
{
 800a072:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800a074:	4ea7      	ldr	r6, [pc, #668]	@ (800a314 <tcp_slowtmr+0x2a8>)
  ++tcp_ticks;
 800a076:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a078:	f8df b2c4 	ldr.w	fp, [pc, #708]	@ 800a340 <tcp_slowtmr+0x2d4>
  ++tcp_ticks;
 800a07c:	3301      	adds	r3, #1
 800a07e:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800a080:	7833      	ldrb	r3, [r6, #0]
 800a082:	3301      	adds	r3, #1
 800a084:	7033      	strb	r3, [r6, #0]
  pcb = tcp_active_pcbs;
 800a086:	4ba4      	ldr	r3, [pc, #656]	@ (800a318 <tcp_slowtmr+0x2ac>)
 800a088:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800a08a:	2c00      	cmp	r4, #0
 800a08c:	d05f      	beq.n	800a14e <tcp_slowtmr+0xe2>
  prev = NULL;
 800a08e:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a090:	46b9      	mov	r9, r7
 800a092:	7d23      	ldrb	r3, [r4, #20]
 800a094:	2b00      	cmp	r3, #0
 800a096:	f000 80e4 	beq.w	800a262 <tcp_slowtmr+0x1f6>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	f000 80ec 	beq.w	800a278 <tcp_slowtmr+0x20c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a0a0:	2b0a      	cmp	r3, #10
 800a0a2:	f000 80f4 	beq.w	800a28e <tcp_slowtmr+0x222>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a0a6:	7833      	ldrb	r3, [r6, #0]
 800a0a8:	7fa2      	ldrb	r2, [r4, #30]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	f000 80fb 	beq.w	800a2a6 <tcp_slowtmr+0x23a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a0b0:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800a0b2:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a0b4:	2a02      	cmp	r2, #2
 800a0b6:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800a0ba:	f000 809e 	beq.w	800a1fa <tcp_slowtmr+0x18e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a0be:	2b0b      	cmp	r3, #11
 800a0c0:	f240 80a2 	bls.w	800a208 <tcp_slowtmr+0x19c>
      ++pcb_remove;
 800a0c4:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800a0c8:	2a06      	cmp	r2, #6
 800a0ca:	f000 80bb 	beq.w	800a244 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a0ce:	7a63      	ldrb	r3, [r4, #9]
 800a0d0:	071b      	lsls	r3, r3, #28
 800a0d2:	f140 8096 	bpl.w	800a202 <tcp_slowtmr+0x196>
 800a0d6:	2a04      	cmp	r2, #4
 800a0d8:	d002      	beq.n	800a0e0 <tcp_slowtmr+0x74>
 800a0da:	2a07      	cmp	r2, #7
 800a0dc:	f040 8091 	bne.w	800a202 <tcp_slowtmr+0x196>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a0e0:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800a0e4:	4b8d      	ldr	r3, [pc, #564]	@ (800a31c <tcp_slowtmr+0x2b0>)
 800a0e6:	498e      	ldr	r1, [pc, #568]	@ (800a320 <tcp_slowtmr+0x2b4>)
 800a0e8:	4403      	add	r3, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a0ea:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a0ec:	fba1 1303 	umull	r1, r3, r1, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a0f0:	6a21      	ldr	r1, [r4, #32]
 800a0f2:	1a52      	subs	r2, r2, r1
 800a0f4:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800a0f8:	f240 8189 	bls.w	800a40e <tcp_slowtmr+0x3a2>
        ++pcb_remove;
 800a0fc:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 800a100:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800a104:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 800a108:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 800a10a:	b157      	cbz	r7, 800a122 <tcp_slowtmr+0xb6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a10c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800a110:	682a      	ldr	r2, [r5, #0]
 800a112:	6a21      	ldr	r1, [r4, #32]
 800a114:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a118:	1a52      	subs	r2, r2, r1
    if (pcb->ooseq != NULL &&
 800a11a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800a11e:	f080 80e7 	bcs.w	800a2f0 <tcp_slowtmr+0x284>
    if (pcb->state == SYN_RCVD) {
 800a122:	7d23      	ldrb	r3, [r4, #20]
 800a124:	2b03      	cmp	r3, #3
 800a126:	f000 80c4 	beq.w	800a2b2 <tcp_slowtmr+0x246>
    if (pcb->state == LAST_ACK) {
 800a12a:	2b09      	cmp	r3, #9
 800a12c:	d030      	beq.n	800a190 <tcp_slowtmr+0x124>
    if (pcb_remove) {
 800a12e:	f1b8 0f00 	cmp.w	r8, #0
 800a132:	d132      	bne.n	800a19a <tcp_slowtmr+0x12e>
      ++prev->polltmr;
 800a134:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a136:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800a138:	3301      	adds	r3, #1
      pcb = pcb->next;
 800a13a:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 800a13c:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800a13e:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800a140:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a142:	f240 80bd 	bls.w	800a2c0 <tcp_slowtmr+0x254>
    pcb_reset = 0;
 800a146:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800a148:	463c      	mov	r4, r7
  while (pcb != NULL) {
 800a14a:	2c00      	cmp	r4, #0
 800a14c:	d1a1      	bne.n	800a092 <tcp_slowtmr+0x26>
  pcb = tcp_tw_pcbs;
 800a14e:	4f75      	ldr	r7, [pc, #468]	@ (800a324 <tcp_slowtmr+0x2b8>)
 800a150:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 800a152:	b1d4      	cbz	r4, 800a18a <tcp_slowtmr+0x11e>
  prev = NULL;
 800a154:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a156:	f8df a1e8 	ldr.w	sl, [pc, #488]	@ 800a340 <tcp_slowtmr+0x2d4>
 800a15a:	f8df 91e8 	ldr.w	r9, [pc, #488]	@ 800a344 <tcp_slowtmr+0x2d8>
 800a15e:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 800a330 <tcp_slowtmr+0x2c4>
 800a162:	7d23      	ldrb	r3, [r4, #20]
 800a164:	2b0a      	cmp	r3, #10
 800a166:	d006      	beq.n	800a176 <tcp_slowtmr+0x10a>
 800a168:	4653      	mov	r3, sl
 800a16a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800a16e:	4649      	mov	r1, r9
 800a170:	4640      	mov	r0, r8
 800a172:	f005 fedf 	bl	800ff34 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a176:	682b      	ldr	r3, [r5, #0]
 800a178:	6a22      	ldr	r2, [r4, #32]
 800a17a:	1a9b      	subs	r3, r3, r2
 800a17c:	2bf0      	cmp	r3, #240	@ 0xf0
 800a17e:	f200 812b 	bhi.w	800a3d8 <tcp_slowtmr+0x36c>
      pcb = pcb->next;
 800a182:	4626      	mov	r6, r4
 800a184:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800a186:	2c00      	cmp	r4, #0
 800a188:	d1eb      	bne.n	800a162 <tcp_slowtmr+0xf6>
}
 800a18a:	b007      	add	sp, #28
 800a18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a190:	682b      	ldr	r3, [r5, #0]
 800a192:	6a22      	ldr	r2, [r4, #32]
 800a194:	1a9b      	subs	r3, r3, r2
 800a196:	2bf0      	cmp	r3, #240	@ 0xf0
 800a198:	d9c9      	bls.n	800a12e <tcp_slowtmr+0xc2>
      tcp_pcb_purge(pcb);
 800a19a:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800a19c:	f8d4 7090 	ldr.w	r7, [r4, #144]	@ 0x90
      tcp_pcb_purge(pcb);
 800a1a0:	f7ff ff12 	bl	8009fc8 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a1a4:	4b5c      	ldr	r3, [pc, #368]	@ (800a318 <tcp_slowtmr+0x2ac>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 800a1a8:	f1b9 0f00 	cmp.w	r9, #0
 800a1ac:	f000 8176 	beq.w	800a49c <tcp_slowtmr+0x430>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a1b0:	42a3      	cmp	r3, r4
 800a1b2:	f000 819d 	beq.w	800a4f0 <tcp_slowtmr+0x484>
        prev->next = pcb->next;
 800a1b6:	68e3      	ldr	r3, [r4, #12]
 800a1b8:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800a1bc:	f1ba 0f00 	cmp.w	sl, #0
 800a1c0:	f040 813f 	bne.w	800a442 <tcp_slowtmr+0x3d6>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a1c4:	7d23      	ldrb	r3, [r4, #20]
 800a1c6:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800a1c8:	e9d4 a803 	ldrd	sl, r8, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a1cc:	f000 814b 	beq.w	800a466 <tcp_slowtmr+0x3fa>
  memp_free(MEMP_TCP_PCB, pcb);
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	2001      	movs	r0, #1
 800a1d4:	f7fe fd2a 	bl	8008c2c <memp_free>
      tcp_active_pcbs_changed = 0;
 800a1d8:	4c53      	ldr	r4, [pc, #332]	@ (800a328 <tcp_slowtmr+0x2bc>)
 800a1da:	2300      	movs	r3, #0
 800a1dc:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a1de:	b13f      	cbz	r7, 800a1f0 <tcp_slowtmr+0x184>
 800a1e0:	f06f 010c 	mvn.w	r1, #12
 800a1e4:	4640      	mov	r0, r8
 800a1e6:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 800a1e8:	7823      	ldrb	r3, [r4, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f47f af4b 	bne.w	800a086 <tcp_slowtmr+0x1a>
      pcb = pcb->next;
 800a1f0:	4654      	mov	r4, sl
  while (pcb != NULL) {
 800a1f2:	2c00      	cmp	r4, #0
 800a1f4:	f47f af4d 	bne.w	800a092 <tcp_slowtmr+0x26>
 800a1f8:	e7a9      	b.n	800a14e <tcp_slowtmr+0xe2>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a1fa:	2b05      	cmp	r3, #5
 800a1fc:	d904      	bls.n	800a208 <tcp_slowtmr+0x19c>
      ++pcb_remove;
 800a1fe:	f04f 0801 	mov.w	r8, #1
    pcb_reset = 0;
 800a202:	f04f 0a00 	mov.w	sl, #0
 800a206:	e77f      	b.n	800a108 <tcp_slowtmr+0x9c>
      if (pcb->persist_backoff > 0) {
 800a208:	f894 8099 	ldrb.w	r8, [r4, #153]	@ 0x99
 800a20c:	f1b8 0f00 	cmp.w	r8, #0
 800a210:	f000 809a 	beq.w	800a348 <tcp_slowtmr+0x2dc>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a214:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a216:	b133      	cbz	r3, 800a226 <tcp_slowtmr+0x1ba>
 800a218:	465b      	mov	r3, fp
 800a21a:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800a21e:	4943      	ldr	r1, [pc, #268]	@ (800a32c <tcp_slowtmr+0x2c0>)
 800a220:	4843      	ldr	r0, [pc, #268]	@ (800a330 <tcp_slowtmr+0x2c4>)
 800a222:	f005 fe87 	bl	800ff34 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a226:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 8182 	beq.w	800a532 <tcp_slowtmr+0x4c6>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a22e:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 800a232:	2b0b      	cmp	r3, #11
 800a234:	f240 811e 	bls.w	800a474 <tcp_slowtmr+0x408>
    if (pcb->state == FIN_WAIT_2) {
 800a238:	7d22      	ldrb	r2, [r4, #20]
      ++pcb_remove;
 800a23a:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800a23e:	2a06      	cmp	r2, #6
 800a240:	f47f af45 	bne.w	800a0ce <tcp_slowtmr+0x62>
      if (pcb->flags & TF_RXCLOSED) {
 800a244:	8b63      	ldrh	r3, [r4, #26]
 800a246:	06da      	lsls	r2, r3, #27
 800a248:	d5db      	bpl.n	800a202 <tcp_slowtmr+0x196>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a24a:	682b      	ldr	r3, [r5, #0]
 800a24c:	6a22      	ldr	r2, [r4, #32]
 800a24e:	1a9b      	subs	r3, r3, r2
 800a250:	2b28      	cmp	r3, #40	@ 0x28
 800a252:	d9d6      	bls.n	800a202 <tcp_slowtmr+0x196>
          ++pcb_remove;
 800a254:	f108 0801 	add.w	r8, r8, #1
    pcb_reset = 0;
 800a258:	f04f 0a00 	mov.w	sl, #0
          ++pcb_remove;
 800a25c:	fa5f f888 	uxtb.w	r8, r8
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a260:	e752      	b.n	800a108 <tcp_slowtmr+0x9c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a262:	465b      	mov	r3, fp
 800a264:	f240 42be 	movw	r2, #1214	@ 0x4be
 800a268:	4932      	ldr	r1, [pc, #200]	@ (800a334 <tcp_slowtmr+0x2c8>)
 800a26a:	4831      	ldr	r0, [pc, #196]	@ (800a330 <tcp_slowtmr+0x2c4>)
 800a26c:	f005 fe62 	bl	800ff34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a270:	7d23      	ldrb	r3, [r4, #20]
 800a272:	2b01      	cmp	r3, #1
 800a274:	f47f af14 	bne.w	800a0a0 <tcp_slowtmr+0x34>
 800a278:	465b      	mov	r3, fp
 800a27a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800a27e:	492e      	ldr	r1, [pc, #184]	@ (800a338 <tcp_slowtmr+0x2cc>)
 800a280:	482b      	ldr	r0, [pc, #172]	@ (800a330 <tcp_slowtmr+0x2c4>)
 800a282:	f005 fe57 	bl	800ff34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a286:	7d23      	ldrb	r3, [r4, #20]
 800a288:	2b0a      	cmp	r3, #10
 800a28a:	f47f af0c 	bne.w	800a0a6 <tcp_slowtmr+0x3a>
 800a28e:	465b      	mov	r3, fp
 800a290:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800a294:	4929      	ldr	r1, [pc, #164]	@ (800a33c <tcp_slowtmr+0x2d0>)
 800a296:	4826      	ldr	r0, [pc, #152]	@ (800a330 <tcp_slowtmr+0x2c4>)
 800a298:	f005 fe4c 	bl	800ff34 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a29c:	7833      	ldrb	r3, [r6, #0]
 800a29e:	7fa2      	ldrb	r2, [r4, #30]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	f47f af05 	bne.w	800a0b0 <tcp_slowtmr+0x44>
      continue;
 800a2a6:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800a2a8:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800a2aa:	2c00      	cmp	r4, #0
 800a2ac:	f47f aef1 	bne.w	800a092 <tcp_slowtmr+0x26>
 800a2b0:	e74d      	b.n	800a14e <tcp_slowtmr+0xe2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a2b2:	682b      	ldr	r3, [r5, #0]
 800a2b4:	6a22      	ldr	r2, [r4, #32]
 800a2b6:	1a9b      	subs	r3, r3, r2
 800a2b8:	2b28      	cmp	r3, #40	@ 0x28
 800a2ba:	f63f af6e 	bhi.w	800a19a <tcp_slowtmr+0x12e>
 800a2be:	e736      	b.n	800a12e <tcp_slowtmr+0xc2>
        tcp_active_pcbs_changed = 0;
 800a2c0:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800a328 <tcp_slowtmr+0x2bc>
        TCP_EVENT_POLL(prev, err);
 800a2c4:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
        prev->polltmr = 0;
 800a2c8:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800a2cc:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 800a2d0:	b153      	cbz	r3, 800a2e8 <tcp_slowtmr+0x27c>
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	6920      	ldr	r0, [r4, #16]
 800a2d6:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800a2d8:	f899 3000 	ldrb.w	r3, [r9]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f47f aed2 	bne.w	800a086 <tcp_slowtmr+0x1a>
        if (err == ERR_OK) {
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	f47f af2f 	bne.w	800a146 <tcp_slowtmr+0xda>
          tcp_output(prev);
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f003 f989 	bl	800d600 <tcp_output>
 800a2ee:	e72a      	b.n	800a146 <tcp_slowtmr+0xda>
 800a2f0:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 800a2f2:	463c      	mov	r4, r7
    struct tcp_seg *next = seg->next;
 800a2f4:	683f      	ldr	r7, [r7, #0]
    if (seg->p != NULL) {
 800a2f6:	6860      	ldr	r0, [r4, #4]
 800a2f8:	b108      	cbz	r0, 800a2fe <tcp_slowtmr+0x292>
      pbuf_free(seg->p);
 800a2fa:	f7fe ffa3 	bl	8009244 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800a2fe:	4621      	mov	r1, r4
 800a300:	2003      	movs	r0, #3
 800a302:	f7fe fc93 	bl	8008c2c <memp_free>
  while (seg != NULL) {
 800a306:	2f00      	cmp	r7, #0
 800a308:	d1f3      	bne.n	800a2f2 <tcp_slowtmr+0x286>
    pcb->ooseq = NULL;
 800a30a:	9c05      	ldr	r4, [sp, #20]
 800a30c:	6767      	str	r7, [r4, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a30e:	e708      	b.n	800a122 <tcp_slowtmr+0xb6>
 800a310:	24020768 	.word	0x24020768
 800a314:	24020755 	.word	0x24020755
 800a318:	2402075c 	.word	0x2402075c
 800a31c:	000a4cb8 	.word	0x000a4cb8
 800a320:	10624dd3 	.word	0x10624dd3
 800a324:	24020758 	.word	0x24020758
 800a328:	24020757 	.word	0x24020757
 800a32c:	08012dcc 	.word	0x08012dcc
 800a330:	080110dc 	.word	0x080110dc
 800a334:	08012d44 	.word	0x08012d44
 800a338:	08012d70 	.word	0x08012d70
 800a33c:	08012d9c 	.word	0x08012d9c
 800a340:	08012a7c 	.word	0x08012a7c
 800a344:	08012e90 	.word	0x08012e90
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a348:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 800a34c:	f647 70fe 	movw	r0, #32766	@ 0x7ffe
 800a350:	b299      	uxth	r1, r3
 800a352:	4281      	cmp	r1, r0
 800a354:	d802      	bhi.n	800a35c <tcp_slowtmr+0x2f0>
          ++pcb->rtime;
 800a356:	3101      	adds	r1, #1
 800a358:	b20b      	sxth	r3, r1
 800a35a:	8623      	strh	r3, [r4, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800a35c:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	@ 0x40
 800a360:	4299      	cmp	r1, r3
 800a362:	f73f aeb1 	bgt.w	800a0c8 <tcp_slowtmr+0x5c>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a366:	4620      	mov	r0, r4
 800a368:	f003 f80e 	bl	800d388 <tcp_rexmit_rto_prepare>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	f040 80e8 	bne.w	800a542 <tcp_slowtmr+0x4d6>
 800a372:	7d23      	ldrb	r3, [r4, #20]
            if (pcb->state != SYN_SENT) {
 800a374:	2b02      	cmp	r3, #2
 800a376:	d014      	beq.n	800a3a2 <tcp_slowtmr+0x336>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a378:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a37c:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	@ 0x3c
 800a380:	2a0c      	cmp	r2, #12
 800a382:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 800a386:	bf28      	it	cs
 800a388:	220c      	movcs	r2, #12
 800a38a:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800a38e:	497a      	ldr	r1, [pc, #488]	@ (800a578 <tcp_slowtmr+0x50c>)
 800a390:	5c8a      	ldrb	r2, [r1, r2]
 800a392:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a394:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a398:	4293      	cmp	r3, r2
 800a39a:	bfa8      	it	ge
 800a39c:	4613      	movge	r3, r2
 800a39e:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a3a2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
            tcp_rexmit_rto_commit(pcb);
 800a3a4:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a3a6:	f8b4 1048 	ldrh.w	r1, [r4, #72]	@ 0x48
            pcb->cwnd = pcb->mss;
 800a3aa:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a3ae:	005b      	lsls	r3, r3, #1
 800a3b0:	b29a      	uxth	r2, r3
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a3b2:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
            pcb->ssthresh = eff_wnd >> 1;
 800a3b6:	428b      	cmp	r3, r1
 800a3b8:	bf28      	it	cs
 800a3ba:	460b      	movcs	r3, r1
 800a3bc:	085b      	lsrs	r3, r3, #1
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	bf38      	it	cc
 800a3c2:	4613      	movcc	r3, r2
 800a3c4:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
            pcb->rtime = 0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	8623      	strh	r3, [r4, #48]	@ 0x30
            pcb->bytes_acked = 0;
 800a3cc:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800a3d0:	f003 faea 	bl	800d9a8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800a3d4:	7d22      	ldrb	r2, [r4, #20]
 800a3d6:	e677      	b.n	800a0c8 <tcp_slowtmr+0x5c>
      tcp_pcb_purge(pcb);
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f7ff fdf5 	bl	8009fc8 <tcp_pcb_purge>
      if (prev != NULL) {
 800a3de:	2e00      	cmp	r6, #0
 800a3e0:	f000 808e 	beq.w	800a500 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	42a3      	cmp	r3, r4
 800a3e8:	f000 80b6 	beq.w	800a558 <tcp_slowtmr+0x4ec>
        prev->next = pcb->next;
 800a3ec:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800a3f0:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a3f4:	7d23      	ldrb	r3, [r4, #20]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	f000 8094 	beq.w	800a524 <tcp_slowtmr+0x4b8>
  memp_free(MEMP_TCP_PCB, pcb);
 800a3fc:	4621      	mov	r1, r4
      pcb = pcb->next;
 800a3fe:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 800a400:	2001      	movs	r0, #1
 800a402:	f7fe fc13 	bl	8008c2c <memp_free>
  while (pcb != NULL) {
 800a406:	2c00      	cmp	r4, #0
 800a408:	f47f aeab 	bne.w	800a162 <tcp_slowtmr+0xf6>
 800a40c:	e6bd      	b.n	800a18a <tcp_slowtmr+0x11e>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a40e:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 800a412:	495a      	ldr	r1, [pc, #360]	@ (800a57c <tcp_slowtmr+0x510>)
 800a414:	fb01 0003 	mla	r0, r1, r3, r0
                 / TCP_SLOW_INTERVAL) {
 800a418:	4b59      	ldr	r3, [pc, #356]	@ (800a580 <tcp_slowtmr+0x514>)
 800a41a:	fba3 3000 	umull	r3, r0, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a41e:	ebb2 1f50 	cmp.w	r2, r0, lsr #5
 800a422:	f67f aeee 	bls.w	800a202 <tcp_slowtmr+0x196>
        err = tcp_keepalive(pcb);
 800a426:	4620      	mov	r0, r4
 800a428:	f003 fb0a 	bl	800da40 <tcp_keepalive>
        if (err == ERR_OK) {
 800a42c:	2800      	cmp	r0, #0
 800a42e:	f47f aee8 	bne.w	800a202 <tcp_slowtmr+0x196>
          pcb->keep_cnt_sent++;
 800a432:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
    pcb_reset = 0;
 800a436:	f04f 0a00 	mov.w	sl, #0
          pcb->keep_cnt_sent++;
 800a43a:	3301      	adds	r3, #1
 800a43c:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a440:	e662      	b.n	800a108 <tcp_slowtmr+0x9c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a442:	8b23      	ldrh	r3, [r4, #24]
 800a444:	4620      	mov	r0, r4
 800a446:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a448:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800a44a:	9302      	str	r3, [sp, #8]
 800a44c:	8ae3      	ldrh	r3, [r4, #22]
 800a44e:	9301      	str	r3, [sp, #4]
 800a450:	1d23      	adds	r3, r4, #4
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	4623      	mov	r3, r4
 800a456:	f003 f859 	bl	800d50c <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a45a:	7d23      	ldrb	r3, [r4, #20]
 800a45c:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800a45e:	e9d4 a803 	ldrd	sl, r8, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a462:	f47f aeb5 	bne.w	800a1d0 <tcp_slowtmr+0x164>
 800a466:	465b      	mov	r3, fp
 800a468:	22d4      	movs	r2, #212	@ 0xd4
 800a46a:	4946      	ldr	r1, [pc, #280]	@ (800a584 <tcp_slowtmr+0x518>)
 800a46c:	4846      	ldr	r0, [pc, #280]	@ (800a588 <tcp_slowtmr+0x51c>)
 800a46e:	f005 fd61 	bl	800ff34 <iprintf>
 800a472:	e6ad      	b.n	800a1d0 <tcp_slowtmr+0x164>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a474:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 800a478:	4a44      	ldr	r2, [pc, #272]	@ (800a58c <tcp_slowtmr+0x520>)
 800a47a:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 800a47c:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a480:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800a484:	4293      	cmp	r3, r2
 800a486:	d216      	bcs.n	800a4b6 <tcp_slowtmr+0x44a>
            pcb->persist_cnt++;
 800a488:	3301      	adds	r3, #1
 800a48a:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800a48c:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800a48e:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800a492:	d210      	bcs.n	800a4b6 <tcp_slowtmr+0x44a>
    if (pcb->state == FIN_WAIT_2) {
 800a494:	7d22      	ldrb	r2, [r4, #20]
    pcb_remove = 0;
 800a496:	f04f 0800 	mov.w	r8, #0
 800a49a:	e615      	b.n	800a0c8 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a49c:	42a3      	cmp	r3, r4
 800a49e:	d006      	beq.n	800a4ae <tcp_slowtmr+0x442>
 800a4a0:	465b      	mov	r3, fp
 800a4a2:	f240 5271 	movw	r2, #1393	@ 0x571
 800a4a6:	493a      	ldr	r1, [pc, #232]	@ (800a590 <tcp_slowtmr+0x524>)
 800a4a8:	4837      	ldr	r0, [pc, #220]	@ (800a588 <tcp_slowtmr+0x51c>)
 800a4aa:	f005 fd43 	bl	800ff34 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a4ae:	68e3      	ldr	r3, [r4, #12]
 800a4b0:	4a38      	ldr	r2, [pc, #224]	@ (800a594 <tcp_slowtmr+0x528>)
 800a4b2:	6013      	str	r3, [r2, #0]
 800a4b4:	e682      	b.n	800a1bc <tcp_slowtmr+0x150>
            if (pcb->snd_wnd == 0) {
 800a4b6:	f8b4 7060 	ldrh.w	r7, [r4, #96]	@ 0x60
 800a4ba:	b937      	cbnz	r7, 800a4ca <tcp_slowtmr+0x45e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f003 fae5 	bl	800da8c <tcp_zero_window_probe>
 800a4c2:	b140      	cbz	r0, 800a4d6 <tcp_slowtmr+0x46a>
    pcb_remove = 0;
 800a4c4:	46b8      	mov	r8, r7
    if (pcb->state == FIN_WAIT_2) {
 800a4c6:	7d22      	ldrb	r2, [r4, #20]
 800a4c8:	e5fe      	b.n	800a0c8 <tcp_slowtmr+0x5c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f002 fdaf 	bl	800d030 <tcp_split_unsent_seg>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d048      	beq.n	800a568 <tcp_slowtmr+0x4fc>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a4d6:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
              pcb->persist_cnt = 0;
 800a4da:	f04f 0800 	mov.w	r8, #0
    if (pcb->state == FIN_WAIT_2) {
 800a4de:	7d22      	ldrb	r2, [r4, #20]
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a4e0:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800a4e2:	f884 8098 	strb.w	r8, [r4, #152]	@ 0x98
                pcb->persist_backoff++;
 800a4e6:	bf9c      	itt	ls
 800a4e8:	3301      	addls	r3, #1
 800a4ea:	f884 3099 	strbls.w	r3, [r4, #153]	@ 0x99
 800a4ee:	e5eb      	b.n	800a0c8 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a4f0:	4b29      	ldr	r3, [pc, #164]	@ (800a598 <tcp_slowtmr+0x52c>)
 800a4f2:	f240 526d 	movw	r2, #1389	@ 0x56d
 800a4f6:	4929      	ldr	r1, [pc, #164]	@ (800a59c <tcp_slowtmr+0x530>)
 800a4f8:	4823      	ldr	r0, [pc, #140]	@ (800a588 <tcp_slowtmr+0x51c>)
 800a4fa:	f005 fd1b 	bl	800ff34 <iprintf>
 800a4fe:	e65a      	b.n	800a1b6 <tcp_slowtmr+0x14a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	42a3      	cmp	r3, r4
 800a504:	d006      	beq.n	800a514 <tcp_slowtmr+0x4a8>
 800a506:	4b24      	ldr	r3, [pc, #144]	@ (800a598 <tcp_slowtmr+0x52c>)
 800a508:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800a50c:	4924      	ldr	r1, [pc, #144]	@ (800a5a0 <tcp_slowtmr+0x534>)
 800a50e:	481e      	ldr	r0, [pc, #120]	@ (800a588 <tcp_slowtmr+0x51c>)
 800a510:	f005 fd10 	bl	800ff34 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a514:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 800a516:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a51a:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 800a51c:	f8c7 b000 	str.w	fp, [r7]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a520:	f47f af6c 	bne.w	800a3fc <tcp_slowtmr+0x390>
 800a524:	4b1c      	ldr	r3, [pc, #112]	@ (800a598 <tcp_slowtmr+0x52c>)
 800a526:	22d4      	movs	r2, #212	@ 0xd4
 800a528:	4916      	ldr	r1, [pc, #88]	@ (800a584 <tcp_slowtmr+0x518>)
 800a52a:	4817      	ldr	r0, [pc, #92]	@ (800a588 <tcp_slowtmr+0x51c>)
 800a52c:	f005 fd02 	bl	800ff34 <iprintf>
 800a530:	e764      	b.n	800a3fc <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a532:	4b19      	ldr	r3, [pc, #100]	@ (800a598 <tcp_slowtmr+0x52c>)
 800a534:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800a538:	491a      	ldr	r1, [pc, #104]	@ (800a5a4 <tcp_slowtmr+0x538>)
 800a53a:	4813      	ldr	r0, [pc, #76]	@ (800a588 <tcp_slowtmr+0x51c>)
 800a53c:	f005 fcfa 	bl	800ff34 <iprintf>
 800a540:	e675      	b.n	800a22e <tcp_slowtmr+0x1c2>
            if (pcb->state != SYN_SENT) {
 800a542:	7d22      	ldrb	r2, [r4, #20]
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a544:	6f21      	ldr	r1, [r4, #112]	@ 0x70
            if (pcb->state != SYN_SENT) {
 800a546:	4613      	mov	r3, r2
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a548:	2900      	cmp	r1, #0
 800a54a:	f47f adbd 	bne.w	800a0c8 <tcp_slowtmr+0x5c>
 800a54e:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800a550:	2900      	cmp	r1, #0
 800a552:	f47f af0f 	bne.w	800a374 <tcp_slowtmr+0x308>
 800a556:	e5b7      	b.n	800a0c8 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a558:	4b0f      	ldr	r3, [pc, #60]	@ (800a598 <tcp_slowtmr+0x52c>)
 800a55a:	f240 52af 	movw	r2, #1455	@ 0x5af
 800a55e:	4912      	ldr	r1, [pc, #72]	@ (800a5a8 <tcp_slowtmr+0x53c>)
 800a560:	4809      	ldr	r0, [pc, #36]	@ (800a588 <tcp_slowtmr+0x51c>)
 800a562:	f005 fce7 	bl	800ff34 <iprintf>
 800a566:	e741      	b.n	800a3ec <tcp_slowtmr+0x380>
                if (tcp_output(pcb) == ERR_OK) {
 800a568:	4620      	mov	r0, r4
 800a56a:	f003 f849 	bl	800d600 <tcp_output>
 800a56e:	2800      	cmp	r0, #0
 800a570:	d1b1      	bne.n	800a4d6 <tcp_slowtmr+0x46a>
    pcb_remove = 0;
 800a572:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 800a574:	7d22      	ldrb	r2, [r4, #20]
 800a576:	e5a7      	b.n	800a0c8 <tcp_slowtmr+0x5c>
 800a578:	08013168 	.word	0x08013168
 800a57c:	000124f8 	.word	0x000124f8
 800a580:	10624dd3 	.word	0x10624dd3
 800a584:	08012ab8 	.word	0x08012ab8
 800a588:	080110dc 	.word	0x080110dc
 800a58c:	08013160 	.word	0x08013160
 800a590:	08012e64 	.word	0x08012e64
 800a594:	2402075c 	.word	0x2402075c
 800a598:	08012a7c 	.word	0x08012a7c
 800a59c:	08012e38 	.word	0x08012e38
 800a5a0:	08012ee8 	.word	0x08012ee8
 800a5a4:	08012e00 	.word	0x08012e00
 800a5a8:	08012ec0 	.word	0x08012ec0

0800a5ac <tcp_pcb_remove>:
{
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	2900      	cmp	r1, #0
 800a5b4:	d04a      	beq.n	800a64c <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a5b6:	2d00      	cmp	r5, #0
 800a5b8:	d051      	beq.n	800a65e <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 800a5ba:	682b      	ldr	r3, [r5, #0]
 800a5bc:	42a3      	cmp	r3, r4
 800a5be:	d032      	beq.n	800a626 <tcp_pcb_remove+0x7a>
 800a5c0:	b12b      	cbz	r3, 800a5ce <tcp_pcb_remove+0x22>
 800a5c2:	68da      	ldr	r2, [r3, #12]
 800a5c4:	42a2      	cmp	r2, r4
 800a5c6:	d03e      	beq.n	800a646 <tcp_pcb_remove+0x9a>
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1f9      	bne.n	800a5c2 <tcp_pcb_remove+0x16>
 800a5ce:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 800a5d0:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800a5d2:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800a5d4:	f7ff fcf8 	bl	8009fc8 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800a5d8:	7d23      	ldrb	r3, [r4, #20]
 800a5da:	2b0a      	cmp	r3, #10
 800a5dc:	d02d      	beq.n	800a63a <tcp_pcb_remove+0x8e>
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d01d      	beq.n	800a61e <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 800a5e2:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800a5e4:	07da      	lsls	r2, r3, #31
 800a5e6:	d421      	bmi.n	800a62c <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a5e8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800a5ea:	b133      	cbz	r3, 800a5fa <tcp_pcb_remove+0x4e>
 800a5ec:	4b20      	ldr	r3, [pc, #128]	@ (800a670 <tcp_pcb_remove+0xc4>)
 800a5ee:	f640 0293 	movw	r2, #2195	@ 0x893
 800a5f2:	4920      	ldr	r1, [pc, #128]	@ (800a674 <tcp_pcb_remove+0xc8>)
 800a5f4:	4820      	ldr	r0, [pc, #128]	@ (800a678 <tcp_pcb_remove+0xcc>)
 800a5f6:	f005 fc9d 	bl	800ff34 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a5fa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a5fc:	b133      	cbz	r3, 800a60c <tcp_pcb_remove+0x60>
 800a5fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a670 <tcp_pcb_remove+0xc4>)
 800a600:	f640 0294 	movw	r2, #2196	@ 0x894
 800a604:	491d      	ldr	r1, [pc, #116]	@ (800a67c <tcp_pcb_remove+0xd0>)
 800a606:	481c      	ldr	r0, [pc, #112]	@ (800a678 <tcp_pcb_remove+0xcc>)
 800a608:	f005 fc94 	bl	800ff34 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a60c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800a60e:	b133      	cbz	r3, 800a61e <tcp_pcb_remove+0x72>
 800a610:	4b17      	ldr	r3, [pc, #92]	@ (800a670 <tcp_pcb_remove+0xc4>)
 800a612:	f640 0296 	movw	r2, #2198	@ 0x896
 800a616:	491a      	ldr	r1, [pc, #104]	@ (800a680 <tcp_pcb_remove+0xd4>)
 800a618:	4817      	ldr	r0, [pc, #92]	@ (800a678 <tcp_pcb_remove+0xcc>)
 800a61a:	f005 fc8b 	bl	800ff34 <iprintf>
  pcb->state = CLOSED;
 800a61e:	2300      	movs	r3, #0
 800a620:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 800a622:	82e3      	strh	r3, [r4, #22]
}
 800a624:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 800a626:	68e3      	ldr	r3, [r4, #12]
 800a628:	602b      	str	r3, [r5, #0]
 800a62a:	e7d0      	b.n	800a5ce <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 800a62c:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800a630:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800a632:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800a634:	f002 ffe4 	bl	800d600 <tcp_output>
  if (pcb->state != LISTEN) {
 800a638:	7d23      	ldrb	r3, [r4, #20]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d0ef      	beq.n	800a61e <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a63e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1d3      	bne.n	800a5ec <tcp_pcb_remove+0x40>
 800a644:	e7d9      	b.n	800a5fa <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 800a646:	68e2      	ldr	r2, [r4, #12]
 800a648:	60da      	str	r2, [r3, #12]
 800a64a:	e7c0      	b.n	800a5ce <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a64c:	4b08      	ldr	r3, [pc, #32]	@ (800a670 <tcp_pcb_remove+0xc4>)
 800a64e:	f640 0283 	movw	r2, #2179	@ 0x883
 800a652:	490c      	ldr	r1, [pc, #48]	@ (800a684 <tcp_pcb_remove+0xd8>)
 800a654:	4808      	ldr	r0, [pc, #32]	@ (800a678 <tcp_pcb_remove+0xcc>)
 800a656:	f005 fc6d 	bl	800ff34 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a65a:	2d00      	cmp	r5, #0
 800a65c:	d1ad      	bne.n	800a5ba <tcp_pcb_remove+0xe>
 800a65e:	4b04      	ldr	r3, [pc, #16]	@ (800a670 <tcp_pcb_remove+0xc4>)
 800a660:	f640 0284 	movw	r2, #2180	@ 0x884
 800a664:	4908      	ldr	r1, [pc, #32]	@ (800a688 <tcp_pcb_remove+0xdc>)
 800a666:	4804      	ldr	r0, [pc, #16]	@ (800a678 <tcp_pcb_remove+0xcc>)
 800a668:	f005 fc64 	bl	800ff34 <iprintf>
 800a66c:	e7a5      	b.n	800a5ba <tcp_pcb_remove+0xe>
 800a66e:	bf00      	nop
 800a670:	08012a7c 	.word	0x08012a7c
 800a674:	08012f4c 	.word	0x08012f4c
 800a678:	080110dc 	.word	0x080110dc
 800a67c:	08012f64 	.word	0x08012f64
 800a680:	08012f80 	.word	0x08012f80
 800a684:	08012f10 	.word	0x08012f10
 800a688:	08012f2c 	.word	0x08012f2c

0800a68c <tcp_abandon>:
{
 800a68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a690:	4605      	mov	r5, r0
 800a692:	b087      	sub	sp, #28
 800a694:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();
 800a696:	f7f9 fd1b 	bl	80040d0 <sys_check_core_locking>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a69a:	2d00      	cmp	r5, #0
 800a69c:	f000 80a9 	beq.w	800a7f2 <tcp_abandon+0x166>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a6a0:	7d2b      	ldrb	r3, [r5, #20]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	f000 808c 	beq.w	800a7c0 <tcp_abandon+0x134>
  if (pcb->state == TIME_WAIT) {
 800a6a8:	2b0a      	cmp	r3, #10
 800a6aa:	f000 8094 	beq.w	800a7d6 <tcp_abandon+0x14a>
    seqno = pcb->snd_nxt;
 800a6ae:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
    ackno = pcb->rcv_nxt;
 800a6b0:	f8d5 b024 	ldr.w	fp, [r5, #36]	@ 0x24
    errf = pcb->errf;
 800a6b4:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
    errf_arg = pcb->callback_arg;
 800a6b8:	f8d5 9010 	ldr.w	r9, [r5, #16]
      if (pcb->local_port != 0) {
 800a6bc:	f8b5 8016 	ldrh.w	r8, [r5, #22]
    seqno = pcb->snd_nxt;
 800a6c0:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d144      	bne.n	800a750 <tcp_abandon+0xc4>
      if (pcb->local_port != 0) {
 800a6c6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ca:	d149      	bne.n	800a760 <tcp_abandon+0xd4>
    u16_t local_port = 0;
 800a6cc:	f04f 0800 	mov.w	r8, #0
    int send_rst = 0;
 800a6d0:	4646      	mov	r6, r8
    if (pcb->unacked != NULL) {
 800a6d2:	6f2c      	ldr	r4, [r5, #112]	@ 0x70
 800a6d4:	b164      	cbz	r4, 800a6f0 <tcp_abandon+0x64>
      pbuf_free(seg->p);
 800a6d6:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800a6d8:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800a6da:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a6de:	b108      	cbz	r0, 800a6e4 <tcp_abandon+0x58>
      pbuf_free(seg->p);
 800a6e0:	f7fe fdb0 	bl	8009244 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800a6e4:	4651      	mov	r1, sl
 800a6e6:	2003      	movs	r0, #3
 800a6e8:	f7fe faa0 	bl	8008c2c <memp_free>
  while (seg != NULL) {
 800a6ec:	2c00      	cmp	r4, #0
 800a6ee:	d1f2      	bne.n	800a6d6 <tcp_abandon+0x4a>
    if (pcb->unsent != NULL) {
 800a6f0:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
 800a6f2:	b164      	cbz	r4, 800a70e <tcp_abandon+0x82>
      pbuf_free(seg->p);
 800a6f4:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800a6f6:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800a6f8:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a6fc:	b108      	cbz	r0, 800a702 <tcp_abandon+0x76>
      pbuf_free(seg->p);
 800a6fe:	f7fe fda1 	bl	8009244 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800a702:	4651      	mov	r1, sl
 800a704:	2003      	movs	r0, #3
 800a706:	f7fe fa91 	bl	8008c2c <memp_free>
  while (seg != NULL) {
 800a70a:	2c00      	cmp	r4, #0
 800a70c:	d1f2      	bne.n	800a6f4 <tcp_abandon+0x68>
    if (pcb->ooseq != NULL) {
 800a70e:	6f6c      	ldr	r4, [r5, #116]	@ 0x74
 800a710:	b164      	cbz	r4, 800a72c <tcp_abandon+0xa0>
      pbuf_free(seg->p);
 800a712:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800a714:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800a716:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a71a:	b108      	cbz	r0, 800a720 <tcp_abandon+0x94>
      pbuf_free(seg->p);
 800a71c:	f7fe fd92 	bl	8009244 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800a720:	4651      	mov	r1, sl
 800a722:	2003      	movs	r0, #3
 800a724:	f7fe fa82 	bl	8008c2c <memp_free>
  while (seg != NULL) {
 800a728:	2c00      	cmp	r4, #0
 800a72a:	d1f2      	bne.n	800a712 <tcp_abandon+0x86>
    if (send_rst) {
 800a72c:	bb3e      	cbnz	r6, 800a77e <tcp_abandon+0xf2>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a72e:	7d2b      	ldrb	r3, [r5, #20]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d033      	beq.n	800a79c <tcp_abandon+0x110>
  memp_free(MEMP_TCP_PCB, pcb);
 800a734:	4629      	mov	r1, r5
 800a736:	2001      	movs	r0, #1
 800a738:	f7fe fa78 	bl	8008c2c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a73c:	2f00      	cmp	r7, #0
 800a73e:	d039      	beq.n	800a7b4 <tcp_abandon+0x128>
 800a740:	f06f 010c 	mvn.w	r1, #12
 800a744:	4648      	mov	r0, r9
 800a746:	463b      	mov	r3, r7
}
 800a748:	b007      	add	sp, #28
 800a74a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a74e:	4718      	bx	r3
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a750:	4629      	mov	r1, r5
 800a752:	4830      	ldr	r0, [pc, #192]	@ (800a814 <tcp_abandon+0x188>)
 800a754:	f7ff ff2a 	bl	800a5ac <tcp_pcb_remove>
 800a758:	4b2f      	ldr	r3, [pc, #188]	@ (800a818 <tcp_abandon+0x18c>)
 800a75a:	2201      	movs	r2, #1
 800a75c:	701a      	strb	r2, [r3, #0]
 800a75e:	e7b8      	b.n	800a6d2 <tcp_abandon+0x46>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a760:	4a2e      	ldr	r2, [pc, #184]	@ (800a81c <tcp_abandon+0x190>)
 800a762:	6813      	ldr	r3, [r2, #0]
 800a764:	42ab      	cmp	r3, r5
 800a766:	d028      	beq.n	800a7ba <tcp_abandon+0x12e>
 800a768:	b133      	cbz	r3, 800a778 <tcp_abandon+0xec>
 800a76a:	68da      	ldr	r2, [r3, #12]
 800a76c:	42aa      	cmp	r2, r5
 800a76e:	d001      	beq.n	800a774 <tcp_abandon+0xe8>
 800a770:	4613      	mov	r3, r2
 800a772:	e7f9      	b.n	800a768 <tcp_abandon+0xdc>
 800a774:	68ea      	ldr	r2, [r5, #12]
 800a776:	60da      	str	r2, [r3, #12]
 800a778:	2300      	movs	r3, #0
 800a77a:	60eb      	str	r3, [r5, #12]
 800a77c:	e7a6      	b.n	800a6cc <tcp_abandon+0x40>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a77e:	f8cd 8004 	str.w	r8, [sp, #4]
 800a782:	465a      	mov	r2, fp
 800a784:	8b2b      	ldrh	r3, [r5, #24]
 800a786:	4628      	mov	r0, r5
 800a788:	9905      	ldr	r1, [sp, #20]
 800a78a:	9302      	str	r3, [sp, #8]
 800a78c:	1d2b      	adds	r3, r5, #4
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	462b      	mov	r3, r5
 800a792:	f002 febb 	bl	800d50c <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a796:	7d2b      	ldrb	r3, [r5, #20]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d1cb      	bne.n	800a734 <tcp_abandon+0xa8>
 800a79c:	4920      	ldr	r1, [pc, #128]	@ (800a820 <tcp_abandon+0x194>)
 800a79e:	22d4      	movs	r2, #212	@ 0xd4
 800a7a0:	4b20      	ldr	r3, [pc, #128]	@ (800a824 <tcp_abandon+0x198>)
 800a7a2:	4821      	ldr	r0, [pc, #132]	@ (800a828 <tcp_abandon+0x19c>)
 800a7a4:	f005 fbc6 	bl	800ff34 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	2001      	movs	r0, #1
 800a7ac:	f7fe fa3e 	bl	8008c2c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a7b0:	2f00      	cmp	r7, #0
 800a7b2:	d1c5      	bne.n	800a740 <tcp_abandon+0xb4>
}
 800a7b4:	b007      	add	sp, #28
 800a7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a7ba:	68eb      	ldr	r3, [r5, #12]
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	e7db      	b.n	800a778 <tcp_abandon+0xec>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a7c0:	4b18      	ldr	r3, [pc, #96]	@ (800a824 <tcp_abandon+0x198>)
 800a7c2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800a7c6:	4919      	ldr	r1, [pc, #100]	@ (800a82c <tcp_abandon+0x1a0>)
 800a7c8:	4817      	ldr	r0, [pc, #92]	@ (800a828 <tcp_abandon+0x19c>)
 800a7ca:	f005 fbb3 	bl	800ff34 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800a7ce:	7d2b      	ldrb	r3, [r5, #20]
 800a7d0:	2b0a      	cmp	r3, #10
 800a7d2:	f47f af6c 	bne.w	800a6ae <tcp_abandon+0x22>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4815      	ldr	r0, [pc, #84]	@ (800a830 <tcp_abandon+0x1a4>)
 800a7da:	f7ff fee7 	bl	800a5ac <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a7de:	7d2b      	ldrb	r3, [r5, #20]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d010      	beq.n	800a806 <tcp_abandon+0x17a>
  memp_free(MEMP_TCP_PCB, pcb);
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	2001      	movs	r0, #1
}
 800a7e8:	b007      	add	sp, #28
 800a7ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800a7ee:	f7fe ba1d 	b.w	8008c2c <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a7f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a824 <tcp_abandon+0x198>)
 800a7f4:	f240 223d 	movw	r2, #573	@ 0x23d
 800a7f8:	490e      	ldr	r1, [pc, #56]	@ (800a834 <tcp_abandon+0x1a8>)
 800a7fa:	480b      	ldr	r0, [pc, #44]	@ (800a828 <tcp_abandon+0x19c>)
}
 800a7fc:	b007      	add	sp, #28
 800a7fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a802:	f005 bb97 	b.w	800ff34 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a806:	4b07      	ldr	r3, [pc, #28]	@ (800a824 <tcp_abandon+0x198>)
 800a808:	22d4      	movs	r2, #212	@ 0xd4
 800a80a:	4905      	ldr	r1, [pc, #20]	@ (800a820 <tcp_abandon+0x194>)
 800a80c:	4806      	ldr	r0, [pc, #24]	@ (800a828 <tcp_abandon+0x19c>)
 800a80e:	f005 fb91 	bl	800ff34 <iprintf>
 800a812:	e7e7      	b.n	800a7e4 <tcp_abandon+0x158>
 800a814:	2402075c 	.word	0x2402075c
 800a818:	24020757 	.word	0x24020757
 800a81c:	24020764 	.word	0x24020764
 800a820:	08012ab8 	.word	0x08012ab8
 800a824:	08012a7c 	.word	0x08012a7c
 800a828:	080110dc 	.word	0x080110dc
 800a82c:	08012fb4 	.word	0x08012fb4
 800a830:	24020758 	.word	0x24020758
 800a834:	08012f98 	.word	0x08012f98

0800a838 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800a838:	2101      	movs	r1, #1
 800a83a:	f7ff bf27 	b.w	800a68c <tcp_abandon>
 800a83e:	bf00      	nop

0800a840 <tcp_accept_null>:
{
 800a840:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800a842:	460c      	mov	r4, r1
 800a844:	b131      	cbz	r1, 800a854 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 800a846:	4620      	mov	r0, r4
 800a848:	2101      	movs	r1, #1
 800a84a:	f7ff ff1f 	bl	800a68c <tcp_abandon>
}
 800a84e:	f06f 000c 	mvn.w	r0, #12
 800a852:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800a854:	4b06      	ldr	r3, [pc, #24]	@ (800a870 <tcp_accept_null+0x30>)
 800a856:	f240 320f 	movw	r2, #783	@ 0x30f
 800a85a:	4906      	ldr	r1, [pc, #24]	@ (800a874 <tcp_accept_null+0x34>)
 800a85c:	4806      	ldr	r0, [pc, #24]	@ (800a878 <tcp_accept_null+0x38>)
 800a85e:	f005 fb69 	bl	800ff34 <iprintf>
  tcp_abandon(pcb, 1);
 800a862:	4620      	mov	r0, r4
 800a864:	2101      	movs	r1, #1
 800a866:	f7ff ff11 	bl	800a68c <tcp_abandon>
}
 800a86a:	f06f 000c 	mvn.w	r0, #12
 800a86e:	bd10      	pop	{r4, pc}
 800a870:	08012a7c 	.word	0x08012a7c
 800a874:	08012fe8 	.word	0x08012fe8
 800a878:	080110dc 	.word	0x080110dc

0800a87c <tcp_netif_ip_addr_changed_pcblist>:
{
 800a87c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a87e:	4605      	mov	r5, r0
{
 800a880:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a882:	b160      	cbz	r0, 800a89e <tcp_netif_ip_addr_changed_pcblist+0x22>
  while (pcb != NULL) {
 800a884:	b154      	cbz	r4, 800a89c <tcp_netif_ip_addr_changed_pcblist+0x20>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a886:	6822      	ldr	r2, [r4, #0]
 800a888:	4620      	mov	r0, r4
 800a88a:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 800a88c:	68e4      	ldr	r4, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a88e:	429a      	cmp	r2, r3
 800a890:	d1f8      	bne.n	800a884 <tcp_netif_ip_addr_changed_pcblist+0x8>
  tcp_abandon(pcb, 1);
 800a892:	2101      	movs	r1, #1
 800a894:	f7ff fefa 	bl	800a68c <tcp_abandon>
  while (pcb != NULL) {
 800a898:	2c00      	cmp	r4, #0
 800a89a:	d1f4      	bne.n	800a886 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 800a89c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a89e:	4b04      	ldr	r3, [pc, #16]	@ (800a8b0 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800a8a0:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800a8a4:	4903      	ldr	r1, [pc, #12]	@ (800a8b4 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800a8a6:	4804      	ldr	r0, [pc, #16]	@ (800a8b8 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 800a8a8:	f005 fb44 	bl	800ff34 <iprintf>
 800a8ac:	e7ea      	b.n	800a884 <tcp_netif_ip_addr_changed_pcblist+0x8>
 800a8ae:	bf00      	nop
 800a8b0:	08012a7c 	.word	0x08012a7c
 800a8b4:	08013008 	.word	0x08013008
 800a8b8:	080110dc 	.word	0x080110dc

0800a8bc <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8bc:	4b10      	ldr	r3, [pc, #64]	@ (800a900 <tcp_kill_state+0x44>)
 800a8be:	6819      	ldr	r1, [r3, #0]
 800a8c0:	b1e9      	cbz	r1, 800a8fe <tcp_kill_state+0x42>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a8c2:	4b10      	ldr	r3, [pc, #64]	@ (800a904 <tcp_kill_state+0x48>)
  inactivity = 0;
 800a8c4:	f04f 0c00 	mov.w	ip, #0
 800a8c8:	4602      	mov	r2, r0
  inactive = NULL;
 800a8ca:	4660      	mov	r0, ip
{
 800a8cc:	b410      	push	{r4}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a8ce:	681c      	ldr	r4, [r3, #0]
 800a8d0:	e001      	b.n	800a8d6 <tcp_kill_state+0x1a>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8d2:	68c9      	ldr	r1, [r1, #12]
 800a8d4:	b159      	cbz	r1, 800a8ee <tcp_kill_state+0x32>
    if (pcb->state == state) {
 800a8d6:	7d0b      	ldrb	r3, [r1, #20]
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d1fa      	bne.n	800a8d2 <tcp_kill_state+0x16>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a8dc:	6a0b      	ldr	r3, [r1, #32]
 800a8de:	1ae3      	subs	r3, r4, r3
 800a8e0:	459c      	cmp	ip, r3
 800a8e2:	d8f6      	bhi.n	800a8d2 <tcp_kill_state+0x16>
 800a8e4:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8e6:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a8e8:	469c      	mov	ip, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8ea:	2900      	cmp	r1, #0
 800a8ec:	d1f3      	bne.n	800a8d6 <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 800a8ee:	b118      	cbz	r0, 800a8f8 <tcp_kill_state+0x3c>
}
 800a8f0:	f85d 4b04 	ldr.w	r4, [sp], #4
    tcp_abandon(inactive, 0);
 800a8f4:	f7ff beca 	b.w	800a68c <tcp_abandon>
}
 800a8f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	4770      	bx	lr
 800a900:	2402075c 	.word	0x2402075c
 800a904:	24020768 	.word	0x24020768

0800a908 <tcp_alloc>:
{
 800a908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90a:	4606      	mov	r6, r0
  LWIP_ASSERT_CORE_LOCKED();
 800a90c:	f7f9 fbe0 	bl	80040d0 <sys_check_core_locking>
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a910:	2001      	movs	r0, #1
 800a912:	f7fe f945 	bl	8008ba0 <memp_malloc>
  if (pcb == NULL) {
 800a916:	4604      	mov	r4, r0
 800a918:	b318      	cbz	r0, 800a962 <tcp_alloc+0x5a>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a91a:	229c      	movs	r2, #156	@ 0x9c
 800a91c:	2100      	movs	r1, #0
 800a91e:	4620      	mov	r0, r4
 800a920:	f005 fbbb 	bl	801009a <memset>
    pcb->tmr = tcp_ticks;
 800a924:	4b42      	ldr	r3, [pc, #264]	@ (800aa30 <tcp_alloc+0x128>)
    pcb->last_timer = tcp_timer_ctr;
 800a926:	4943      	ldr	r1, [pc, #268]	@ (800aa34 <tcp_alloc+0x12c>)
    pcb->snd_buf = TCP_SND_BUF;
 800a928:	f241 60d0 	movw	r0, #5840	@ 0x16d0
    pcb->tmr = tcp_ticks;
 800a92c:	681a      	ldr	r2, [r3, #0]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a92e:	4b42      	ldr	r3, [pc, #264]	@ (800aa38 <tcp_alloc+0x130>)
    pcb->last_timer = tcp_timer_ctr;
 800a930:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 800a932:	6222      	str	r2, [r4, #32]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a934:	62a3      	str	r3, [r4, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800a936:	23ff      	movs	r3, #255	@ 0xff
    pcb->cwnd = 1;
 800a938:	4a40      	ldr	r2, [pc, #256]	@ (800aa3c <tcp_alloc+0x134>)
    pcb->snd_buf = TCP_SND_BUF;
 800a93a:	f8a4 0064 	strh.w	r0, [r4, #100]	@ 0x64
    pcb->last_timer = tcp_timer_ctr;
 800a93e:	77a1      	strb	r1, [r4, #30]
    pcb->recv = tcp_recv_null;
 800a940:	483f      	ldr	r0, [pc, #252]	@ (800aa40 <tcp_alloc+0x138>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a942:	4940      	ldr	r1, [pc, #256]	@ (800aa44 <tcp_alloc+0x13c>)
    pcb->cwnd = 1;
 800a944:	64a2      	str	r2, [r4, #72]	@ 0x48
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a946:	f04f 1206 	mov.w	r2, #393222	@ 0x60006
    pcb->ttl = TCP_TTL;
 800a94a:	72e3      	strb	r3, [r4, #11]
    pcb->rtime = -1;
 800a94c:	4b3e      	ldr	r3, [pc, #248]	@ (800aa48 <tcp_alloc+0x140>)
    pcb->prio = prio;
 800a94e:	7566      	strb	r6, [r4, #21]
    pcb->recv = tcp_recv_null;
 800a950:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a954:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a958:	f8c4 203e 	str.w	r2, [r4, #62]	@ 0x3e
    pcb->rtime = -1;
 800a95c:	6323      	str	r3, [r4, #48]	@ 0x30
}
 800a95e:	4620      	mov	r0, r4
 800a960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a962:	4f3a      	ldr	r7, [pc, #232]	@ (800aa4c <tcp_alloc+0x144>)
 800a964:	683d      	ldr	r5, [r7, #0]
  while (pcb != NULL) {
 800a966:	b15d      	cbz	r5, 800a980 <tcp_alloc+0x78>
    struct tcp_pcb *next = pcb->next;
 800a968:	4628      	mov	r0, r5
 800a96a:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800a96c:	8b43      	ldrh	r3, [r0, #26]
 800a96e:	071a      	lsls	r2, r3, #28
 800a970:	d5f9      	bpl.n	800a966 <tcp_alloc+0x5e>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a972:	f023 0308 	bic.w	r3, r3, #8
 800a976:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800a978:	f7fe ffd6 	bl	8009928 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 800a97c:	2d00      	cmp	r5, #0
 800a97e:	d1f3      	bne.n	800a968 <tcp_alloc+0x60>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a980:	4b33      	ldr	r3, [pc, #204]	@ (800aa50 <tcp_alloc+0x148>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	b183      	cbz	r3, 800a9a8 <tcp_alloc+0xa0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a986:	4a2a      	ldr	r2, [pc, #168]	@ (800aa30 <tcp_alloc+0x128>)
  inactivity = 0;
 800a988:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a98a:	6810      	ldr	r0, [r2, #0]
 800a98c:	6a1a      	ldr	r2, [r3, #32]
 800a98e:	1a82      	subs	r2, r0, r2
 800a990:	428a      	cmp	r2, r1
 800a992:	d301      	bcc.n	800a998 <tcp_alloc+0x90>
 800a994:	461c      	mov	r4, r3
 800a996:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1f6      	bne.n	800a98c <tcp_alloc+0x84>
  if (inactive != NULL) {
 800a99e:	b11c      	cbz	r4, 800a9a8 <tcp_alloc+0xa0>
  tcp_abandon(pcb, 1);
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f7ff fe72 	bl	800a68c <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a9a8:	2001      	movs	r0, #1
 800a9aa:	f7fe f8f9 	bl	8008ba0 <memp_malloc>
    if (pcb == NULL) {
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d1b2      	bne.n	800a91a <tcp_alloc+0x12>
      tcp_kill_state(LAST_ACK);
 800a9b4:	2009      	movs	r0, #9
 800a9b6:	f7ff ff81 	bl	800a8bc <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a9ba:	2001      	movs	r0, #1
 800a9bc:	f7fe f8f0 	bl	8008ba0 <memp_malloc>
      if (pcb == NULL) {
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d1a9      	bne.n	800a91a <tcp_alloc+0x12>
        tcp_kill_state(CLOSING);
 800a9c6:	2008      	movs	r0, #8
 800a9c8:	f7ff ff78 	bl	800a8bc <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	f7fe f8e7 	bl	8008ba0 <memp_malloc>
        if (pcb == NULL) {
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d1a0      	bne.n	800a91a <tcp_alloc+0x12>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a9d8:	0633      	lsls	r3, r6, #24
 800a9da:	d426      	bmi.n	800aa2a <tcp_alloc+0x122>
  if (mprio == 0) {
 800a9dc:	b1ee      	cbz	r6, 800aa1a <tcp_alloc+0x112>
 800a9de:	4633      	mov	r3, r6
  mprio--;
 800a9e0:	1e5a      	subs	r2, r3, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9e2:	683b      	ldr	r3, [r7, #0]
  mprio--;
 800a9e4:	b2d2      	uxtb	r2, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9e6:	b1c3      	cbz	r3, 800aa1a <tcp_alloc+0x112>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a9e8:	4911      	ldr	r1, [pc, #68]	@ (800aa30 <tcp_alloc+0x128>)
  inactivity = 0;
 800a9ea:	2500      	movs	r5, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a9ec:	680f      	ldr	r7, [r1, #0]
 800a9ee:	e005      	b.n	800a9fc <tcp_alloc+0xf4>
 800a9f0:	6a18      	ldr	r0, [r3, #32]
      inactivity = tcp_ticks - pcb->tmr;
 800a9f2:	1a3d      	subs	r5, r7, r0
    if ((pcb->prio < mprio) ||
 800a9f4:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 800a9f6:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	b14b      	cbz	r3, 800aa10 <tcp_alloc+0x108>
    if ((pcb->prio < mprio) ||
 800a9fc:	7d59      	ldrb	r1, [r3, #21]
 800a9fe:	428a      	cmp	r2, r1
 800aa00:	d8f6      	bhi.n	800a9f0 <tcp_alloc+0xe8>
 800aa02:	d1f9      	bne.n	800a9f8 <tcp_alloc+0xf0>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800aa04:	6a18      	ldr	r0, [r3, #32]
 800aa06:	eba7 0c00 	sub.w	ip, r7, r0
 800aa0a:	45ac      	cmp	ip, r5
 800aa0c:	d3f4      	bcc.n	800a9f8 <tcp_alloc+0xf0>
 800aa0e:	e7f0      	b.n	800a9f2 <tcp_alloc+0xea>
  if (inactive != NULL) {
 800aa10:	b11c      	cbz	r4, 800aa1a <tcp_alloc+0x112>
  tcp_abandon(pcb, 1);
 800aa12:	2101      	movs	r1, #1
 800aa14:	4620      	mov	r0, r4
 800aa16:	f7ff fe39 	bl	800a68c <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aa1a:	2001      	movs	r0, #1
 800aa1c:	f7fe f8c0 	bl	8008ba0 <memp_malloc>
  if (pcb != NULL) {
 800aa20:	4604      	mov	r4, r0
 800aa22:	2800      	cmp	r0, #0
 800aa24:	f47f af79 	bne.w	800a91a <tcp_alloc+0x12>
 800aa28:	e799      	b.n	800a95e <tcp_alloc+0x56>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800aa2a:	237f      	movs	r3, #127	@ 0x7f
 800aa2c:	e7d8      	b.n	800a9e0 <tcp_alloc+0xd8>
 800aa2e:	bf00      	nop
 800aa30:	24020768 	.word	0x24020768
 800aa34:	24020755 	.word	0x24020755
 800aa38:	16d016d0 	.word	0x16d016d0
 800aa3c:	16d00001 	.word	0x16d00001
 800aa40:	0800acb9 	.word	0x0800acb9
 800aa44:	006ddd00 	.word	0x006ddd00
 800aa48:	0218ffff 	.word	0x0218ffff
 800aa4c:	2402075c 	.word	0x2402075c
 800aa50:	24020758 	.word	0x24020758

0800aa54 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800aa54:	2040      	movs	r0, #64	@ 0x40
 800aa56:	f7ff bf57 	b.w	800a908 <tcp_alloc>
 800aa5a:	bf00      	nop

0800aa5c <tcp_close_shutdown>:
{
 800aa5c:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800aa5e:	4604      	mov	r4, r0
{
 800aa60:	b085      	sub	sp, #20
 800aa62:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800aa64:	2800      	cmp	r0, #0
 800aa66:	f000 808a 	beq.w	800ab7e <tcp_close_shutdown+0x122>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800aa6a:	7d23      	ldrb	r3, [r4, #20]
 800aa6c:	b11d      	cbz	r5, 800aa76 <tcp_close_shutdown+0x1a>
 800aa6e:	2b04      	cmp	r3, #4
 800aa70:	d01e      	beq.n	800aab0 <tcp_close_shutdown+0x54>
 800aa72:	2b07      	cmp	r3, #7
 800aa74:	d01c      	beq.n	800aab0 <tcp_close_shutdown+0x54>
  switch (pcb->state) {
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d03a      	beq.n	800aaf0 <tcp_close_shutdown+0x94>
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d007      	beq.n	800aa8e <tcp_close_shutdown+0x32>
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d055      	beq.n	800ab2e <tcp_close_shutdown+0xd2>
      return tcp_close_shutdown_fin(pcb);
 800aa82:	4620      	mov	r0, r4
}
 800aa84:	b005      	add	sp, #20
 800aa86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800aa8a:	f7fe bf4d 	b.w	8009928 <tcp_close_shutdown_fin>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aa8e:	4621      	mov	r1, r4
 800aa90:	484d      	ldr	r0, [pc, #308]	@ (800abc8 <tcp_close_shutdown+0x16c>)
 800aa92:	f7ff fd8b 	bl	800a5ac <tcp_pcb_remove>
 800aa96:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800aa98:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aa9a:	4a4c      	ldr	r2, [pc, #304]	@ (800abcc <tcp_close_shutdown+0x170>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800aa9c:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aa9e:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800aaa0:	d066      	beq.n	800ab70 <tcp_close_shutdown+0x114>
  memp_free(MEMP_TCP_PCB, pcb);
 800aaa2:	4621      	mov	r1, r4
 800aaa4:	2001      	movs	r0, #1
 800aaa6:	f7fe f8c1 	bl	8008c2c <memp_free>
}
 800aaaa:	2000      	movs	r0, #0
 800aaac:	b005      	add	sp, #20
 800aaae:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800aab0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800aab2:	2a00      	cmp	r2, #0
 800aab4:	d048      	beq.n	800ab48 <tcp_close_shutdown+0xec>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800aab6:	8b63      	ldrh	r3, [r4, #26]
 800aab8:	06db      	lsls	r3, r3, #27
 800aaba:	d570      	bpl.n	800ab9e <tcp_close_shutdown+0x142>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aabc:	8b21      	ldrh	r1, [r4, #24]
 800aabe:	1d20      	adds	r0, r4, #4
 800aac0:	8ae2      	ldrh	r2, [r4, #22]
 800aac2:	4623      	mov	r3, r4
 800aac4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800aac8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800aaca:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800aacc:	9000      	str	r0, [sp, #0]
 800aace:	4620      	mov	r0, r4
 800aad0:	f002 fd1c 	bl	800d50c <tcp_rst>
      tcp_pcb_purge(pcb);
 800aad4:	4620      	mov	r0, r4
 800aad6:	f7ff fa77 	bl	8009fc8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800aada:	4a3b      	ldr	r2, [pc, #236]	@ (800abc8 <tcp_close_shutdown+0x16c>)
 800aadc:	6813      	ldr	r3, [r2, #0]
 800aade:	42a3      	cmp	r3, r4
 800aae0:	d038      	beq.n	800ab54 <tcp_close_shutdown+0xf8>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d038      	beq.n	800ab58 <tcp_close_shutdown+0xfc>
 800aae6:	68da      	ldr	r2, [r3, #12]
 800aae8:	42a2      	cmp	r2, r4
 800aaea:	d055      	beq.n	800ab98 <tcp_close_shutdown+0x13c>
 800aaec:	4613      	mov	r3, r2
 800aaee:	e7f8      	b.n	800aae2 <tcp_close_shutdown+0x86>
 800aaf0:	4937      	ldr	r1, [pc, #220]	@ (800abd0 <tcp_close_shutdown+0x174>)
      pcb->listener = NULL;
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	f101 050c 	add.w	r5, r1, #12
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800aaf8:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800aafc:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aafe:	b133      	cbz	r3, 800ab0e <tcp_close_shutdown+0xb2>
    if (pcb->listener == lpcb) {
 800ab00:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800ab02:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 800ab04:	bf08      	it	eq
 800ab06:	67d8      	streq	r0, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1f8      	bne.n	800ab00 <tcp_close_shutdown+0xa4>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ab0e:	428d      	cmp	r5, r1
 800ab10:	d1f2      	bne.n	800aaf8 <tcp_close_shutdown+0x9c>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ab12:	4621      	mov	r1, r4
 800ab14:	482f      	ldr	r0, [pc, #188]	@ (800abd4 <tcp_close_shutdown+0x178>)
 800ab16:	f7ff fd49 	bl	800a5ac <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ab1a:	7d23      	ldrb	r3, [r4, #20]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d049      	beq.n	800abb4 <tcp_close_shutdown+0x158>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ab20:	4621      	mov	r1, r4
 800ab22:	2002      	movs	r0, #2
 800ab24:	f7fe f882 	bl	8008c2c <memp_free>
}
 800ab28:	2000      	movs	r0, #0
 800ab2a:	b005      	add	sp, #20
 800ab2c:	bd30      	pop	{r4, r5, pc}
      if (pcb->local_port != 0) {
 800ab2e:	8ae3      	ldrh	r3, [r4, #22]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d0b6      	beq.n	800aaa2 <tcp_close_shutdown+0x46>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ab34:	4a28      	ldr	r2, [pc, #160]	@ (800abd8 <tcp_close_shutdown+0x17c>)
 800ab36:	6813      	ldr	r3, [r2, #0]
 800ab38:	42a3      	cmp	r3, r4
 800ab3a:	d042      	beq.n	800abc2 <tcp_close_shutdown+0x166>
 800ab3c:	b34b      	cbz	r3, 800ab92 <tcp_close_shutdown+0x136>
 800ab3e:	68da      	ldr	r2, [r3, #12]
 800ab40:	42a2      	cmp	r2, r4
 800ab42:	d024      	beq.n	800ab8e <tcp_close_shutdown+0x132>
 800ab44:	4613      	mov	r3, r2
 800ab46:	e7f9      	b.n	800ab3c <tcp_close_shutdown+0xe0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ab48:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800ab4a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800ab4e:	4291      	cmp	r1, r2
 800ab50:	d095      	beq.n	800aa7e <tcp_close_shutdown+0x22>
 800ab52:	e7b0      	b.n	800aab6 <tcp_close_shutdown+0x5a>
      TCP_RMV_ACTIVE(pcb);
 800ab54:	68e3      	ldr	r3, [r4, #12]
 800ab56:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800ab58:	4b20      	ldr	r3, [pc, #128]	@ (800abdc <tcp_close_shutdown+0x180>)
      TCP_RMV_ACTIVE(pcb);
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	4a1b      	ldr	r2, [pc, #108]	@ (800abcc <tcp_close_shutdown+0x170>)
 800ab5e:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 800ab60:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 800ab62:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 800ab64:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 800ab66:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800ab68:	d021      	beq.n	800abae <tcp_close_shutdown+0x152>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ab6a:	7d23      	ldrb	r3, [r4, #20]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d198      	bne.n	800aaa2 <tcp_close_shutdown+0x46>
 800ab70:	4b1b      	ldr	r3, [pc, #108]	@ (800abe0 <tcp_close_shutdown+0x184>)
 800ab72:	22d4      	movs	r2, #212	@ 0xd4
 800ab74:	491b      	ldr	r1, [pc, #108]	@ (800abe4 <tcp_close_shutdown+0x188>)
 800ab76:	481c      	ldr	r0, [pc, #112]	@ (800abe8 <tcp_close_shutdown+0x18c>)
 800ab78:	f005 f9dc 	bl	800ff34 <iprintf>
 800ab7c:	e791      	b.n	800aaa2 <tcp_close_shutdown+0x46>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ab7e:	4b18      	ldr	r3, [pc, #96]	@ (800abe0 <tcp_close_shutdown+0x184>)
 800ab80:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800ab84:	4919      	ldr	r1, [pc, #100]	@ (800abec <tcp_close_shutdown+0x190>)
 800ab86:	4818      	ldr	r0, [pc, #96]	@ (800abe8 <tcp_close_shutdown+0x18c>)
 800ab88:	f005 f9d4 	bl	800ff34 <iprintf>
 800ab8c:	e76d      	b.n	800aa6a <tcp_close_shutdown+0xe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ab8e:	68e2      	ldr	r2, [r4, #12]
 800ab90:	60da      	str	r2, [r3, #12]
 800ab92:	2300      	movs	r3, #0
 800ab94:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800ab96:	e784      	b.n	800aaa2 <tcp_close_shutdown+0x46>
      TCP_RMV_ACTIVE(pcb);
 800ab98:	68e2      	ldr	r2, [r4, #12]
 800ab9a:	60da      	str	r2, [r3, #12]
 800ab9c:	e7dc      	b.n	800ab58 <tcp_close_shutdown+0xfc>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ab9e:	4b10      	ldr	r3, [pc, #64]	@ (800abe0 <tcp_close_shutdown+0x184>)
 800aba0:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800aba4:	4912      	ldr	r1, [pc, #72]	@ (800abf0 <tcp_close_shutdown+0x194>)
 800aba6:	4810      	ldr	r0, [pc, #64]	@ (800abe8 <tcp_close_shutdown+0x18c>)
 800aba8:	f005 f9c4 	bl	800ff34 <iprintf>
 800abac:	e786      	b.n	800aabc <tcp_close_shutdown+0x60>
        tcp_trigger_input_pcb_close();
 800abae:	f001 fdb1 	bl	800c714 <tcp_trigger_input_pcb_close>
 800abb2:	e77a      	b.n	800aaaa <tcp_close_shutdown+0x4e>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800abb4:	4b0a      	ldr	r3, [pc, #40]	@ (800abe0 <tcp_close_shutdown+0x184>)
 800abb6:	22df      	movs	r2, #223	@ 0xdf
 800abb8:	490e      	ldr	r1, [pc, #56]	@ (800abf4 <tcp_close_shutdown+0x198>)
 800abba:	480b      	ldr	r0, [pc, #44]	@ (800abe8 <tcp_close_shutdown+0x18c>)
 800abbc:	f005 f9ba 	bl	800ff34 <iprintf>
 800abc0:	e7ae      	b.n	800ab20 <tcp_close_shutdown+0xc4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800abc2:	68e3      	ldr	r3, [r4, #12]
 800abc4:	6013      	str	r3, [r2, #0]
 800abc6:	e7e4      	b.n	800ab92 <tcp_close_shutdown+0x136>
 800abc8:	2402075c 	.word	0x2402075c
 800abcc:	24020757 	.word	0x24020757
 800abd0:	08013150 	.word	0x08013150
 800abd4:	24020760 	.word	0x24020760
 800abd8:	24020764 	.word	0x24020764
 800abdc:	2402076c 	.word	0x2402076c
 800abe0:	08012a7c 	.word	0x08012a7c
 800abe4:	08012ab8 	.word	0x08012ab8
 800abe8:	080110dc 	.word	0x080110dc
 800abec:	0801303c 	.word	0x0801303c
 800abf0:	0801305c 	.word	0x0801305c
 800abf4:	08013078 	.word	0x08013078

0800abf8 <tcp_close>:
{
 800abf8:	b510      	push	{r4, lr}
 800abfa:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800abfc:	f7f9 fa68 	bl	80040d0 <sys_check_core_locking>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac00:	b164      	cbz	r4, 800ac1c <tcp_close+0x24>
  if (pcb->state != LISTEN) {
 800ac02:	7d23      	ldrb	r3, [r4, #20]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d003      	beq.n	800ac10 <tcp_close+0x18>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ac08:	8b63      	ldrh	r3, [r4, #26]
 800ac0a:	f043 0310 	orr.w	r3, r3, #16
 800ac0e:	8363      	strh	r3, [r4, #26]
  return tcp_close_shutdown(pcb, 1);
 800ac10:	4620      	mov	r0, r4
 800ac12:	2101      	movs	r1, #1
}
 800ac14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800ac18:	f7ff bf20 	b.w	800aa5c <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac1c:	4b04      	ldr	r3, [pc, #16]	@ (800ac30 <tcp_close+0x38>)
 800ac1e:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ac22:	4904      	ldr	r1, [pc, #16]	@ (800ac34 <tcp_close+0x3c>)
 800ac24:	4804      	ldr	r0, [pc, #16]	@ (800ac38 <tcp_close+0x40>)
 800ac26:	f005 f985 	bl	800ff34 <iprintf>
}
 800ac2a:	f06f 000f 	mvn.w	r0, #15
 800ac2e:	bd10      	pop	{r4, pc}
 800ac30:	08012a7c 	.word	0x08012a7c
 800ac34:	08013094 	.word	0x08013094
 800ac38:	080110dc 	.word	0x080110dc

0800ac3c <tcp_shutdown>:
{
 800ac3c:	b570      	push	{r4, r5, r6, lr}
 800ac3e:	4604      	mov	r4, r0
 800ac40:	460e      	mov	r6, r1
 800ac42:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800ac44:	f7f9 fa44 	bl	80040d0 <sys_check_core_locking>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac48:	b334      	cbz	r4, 800ac98 <tcp_shutdown+0x5c>
  if (pcb->state == LISTEN) {
 800ac4a:	7d23      	ldrb	r3, [r4, #20]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d012      	beq.n	800ac76 <tcp_shutdown+0x3a>
  if (shut_rx) {
 800ac50:	b15e      	cbz	r6, 800ac6a <tcp_shutdown+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ac52:	8b63      	ldrh	r3, [r4, #26]
 800ac54:	f043 0310 	orr.w	r3, r3, #16
 800ac58:	8363      	strh	r3, [r4, #26]
    if (shut_tx) {
 800ac5a:	b9bd      	cbnz	r5, 800ac8c <tcp_shutdown+0x50>
    if (pcb->refused_data != NULL) {
 800ac5c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800ac5e:	b110      	cbz	r0, 800ac66 <tcp_shutdown+0x2a>
      pbuf_free(pcb->refused_data);
 800ac60:	f7fe faf0 	bl	8009244 <pbuf_free>
      pcb->refused_data = NULL;
 800ac64:	67a5      	str	r5, [r4, #120]	@ 0x78
  return ERR_OK;
 800ac66:	2000      	movs	r0, #0
}
 800ac68:	bd70      	pop	{r4, r5, r6, pc}
  if (shut_tx) {
 800ac6a:	2d00      	cmp	r5, #0
 800ac6c:	d0fb      	beq.n	800ac66 <tcp_shutdown+0x2a>
    switch (pcb->state) {
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	d804      	bhi.n	800ac7c <tcp_shutdown+0x40>
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d804      	bhi.n	800ac80 <tcp_shutdown+0x44>
 800ac76:	f06f 000a 	mvn.w	r0, #10
}
 800ac7a:	bd70      	pop	{r4, r5, r6, pc}
    switch (pcb->state) {
 800ac7c:	2b07      	cmp	r3, #7
 800ac7e:	d1fa      	bne.n	800ac76 <tcp_shutdown+0x3a>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ac80:	4620      	mov	r0, r4
 800ac82:	2100      	movs	r1, #0
}
 800ac84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ac88:	f7ff bee8 	b.w	800aa5c <tcp_close_shutdown>
      return tcp_close_shutdown(pcb, 1);
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	2101      	movs	r1, #1
}
 800ac90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return tcp_close_shutdown(pcb, 1);
 800ac94:	f7ff bee2 	b.w	800aa5c <tcp_close_shutdown>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac98:	4b04      	ldr	r3, [pc, #16]	@ (800acac <tcp_shutdown+0x70>)
 800ac9a:	f240 2207 	movw	r2, #519	@ 0x207
 800ac9e:	4904      	ldr	r1, [pc, #16]	@ (800acb0 <tcp_shutdown+0x74>)
 800aca0:	4804      	ldr	r0, [pc, #16]	@ (800acb4 <tcp_shutdown+0x78>)
 800aca2:	f005 f947 	bl	800ff34 <iprintf>
 800aca6:	f06f 000f 	mvn.w	r0, #15
}
 800acaa:	bd70      	pop	{r4, r5, r6, pc}
 800acac:	08012a7c 	.word	0x08012a7c
 800acb0:	080130ac 	.word	0x080130ac
 800acb4:	080110dc 	.word	0x080110dc

0800acb8 <tcp_recv_null>:
{
 800acb8:	b510      	push	{r4, lr}
 800acba:	b082      	sub	sp, #8
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800acbc:	b1f1      	cbz	r1, 800acfc <tcp_recv_null+0x44>
  if (p != NULL) {
 800acbe:	4614      	mov	r4, r2
 800acc0:	4608      	mov	r0, r1
 800acc2:	b142      	cbz	r2, 800acd6 <tcp_recv_null+0x1e>
    tcp_recved(pcb, p->tot_len);
 800acc4:	8911      	ldrh	r1, [r2, #8]
 800acc6:	f7fe ffbd 	bl	8009c44 <tcp_recved>
    pbuf_free(p);
 800acca:	4620      	mov	r0, r4
 800accc:	f7fe faba 	bl	8009244 <pbuf_free>
  return ERR_OK;
 800acd0:	2000      	movs	r0, #0
}
 800acd2:	b002      	add	sp, #8
 800acd4:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1fa      	bne.n	800acd0 <tcp_recv_null+0x18>
 800acda:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800acdc:	f7f9 f9f8 	bl	80040d0 <sys_check_core_locking>
  if (pcb->state != LISTEN) {
 800ace0:	9801      	ldr	r0, [sp, #4]
 800ace2:	7d03      	ldrb	r3, [r0, #20]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d003      	beq.n	800acf0 <tcp_recv_null+0x38>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ace8:	8b43      	ldrh	r3, [r0, #26]
 800acea:	f043 0310 	orr.w	r3, r3, #16
 800acee:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800acf0:	2101      	movs	r1, #1
}
 800acf2:	b002      	add	sp, #8
 800acf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800acf8:	f7ff beb0 	b.w	800aa5c <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800acfc:	4b04      	ldr	r3, [pc, #16]	@ (800ad10 <tcp_recv_null+0x58>)
 800acfe:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ad02:	4904      	ldr	r1, [pc, #16]	@ (800ad14 <tcp_recv_null+0x5c>)
 800ad04:	4804      	ldr	r0, [pc, #16]	@ (800ad18 <tcp_recv_null+0x60>)
 800ad06:	f005 f915 	bl	800ff34 <iprintf>
 800ad0a:	f06f 000f 	mvn.w	r0, #15
 800ad0e:	e7e0      	b.n	800acd2 <tcp_recv_null+0x1a>
 800ad10:	08012a7c 	.word	0x08012a7c
 800ad14:	080130c8 	.word	0x080130c8
 800ad18:	080110dc 	.word	0x080110dc

0800ad1c <tcp_process_refused_data>:
{
 800ad1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ad1e:	b380      	cbz	r0, 800ad82 <tcp_process_refused_data+0x66>
    u8_t refused_flags = pcb->refused_data->flags;
 800ad20:	6f85      	ldr	r5, [r0, #120]	@ 0x78
    pcb->refused_data = NULL;
 800ad22:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ad24:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
 800ad28:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800ad2a:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 800ad2c:	6783      	str	r3, [r0, #120]	@ 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ad2e:	b156      	cbz	r6, 800ad46 <tcp_process_refused_data+0x2a>
 800ad30:	4601      	mov	r1, r0
 800ad32:	462a      	mov	r2, r5
 800ad34:	6900      	ldr	r0, [r0, #16]
 800ad36:	47b0      	blx	r6
    if (err == ERR_OK) {
 800ad38:	b158      	cbz	r0, 800ad52 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 800ad3a:	300d      	adds	r0, #13
 800ad3c:	d01e      	beq.n	800ad7c <tcp_process_refused_data+0x60>
      return ERR_INPROGRESS;
 800ad3e:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 800ad42:	67a5      	str	r5, [r4, #120]	@ 0x78
}
 800ad44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 800ad46:	8929      	ldrh	r1, [r5, #8]
 800ad48:	f7fe ff7c 	bl	8009c44 <tcp_recved>
    pbuf_free(p);
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	f7fe fa79 	bl	8009244 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ad52:	06bb      	lsls	r3, r7, #26
 800ad54:	d510      	bpl.n	800ad78 <tcp_process_refused_data+0x5c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ad56:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800ad58:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d001      	beq.n	800ad64 <tcp_process_refused_data+0x48>
          pcb->rcv_wnd++;
 800ad60:	3301      	adds	r3, #1
 800ad62:	8523      	strh	r3, [r4, #40]	@ 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800ad64:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 800ad68:	b135      	cbz	r5, 800ad78 <tcp_process_refused_data+0x5c>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	4621      	mov	r1, r4
 800ad6e:	6920      	ldr	r0, [r4, #16]
 800ad70:	461a      	mov	r2, r3
 800ad72:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 800ad74:	300d      	adds	r0, #13
 800ad76:	d001      	beq.n	800ad7c <tcp_process_refused_data+0x60>
  return ERR_OK;
 800ad78:	2000      	movs	r0, #0
}
 800ad7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 800ad7c:	f06f 000c 	mvn.w	r0, #12
}
 800ad80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ad82:	4b05      	ldr	r3, [pc, #20]	@ (800ad98 <tcp_process_refused_data+0x7c>)
 800ad84:	f240 6209 	movw	r2, #1545	@ 0x609
 800ad88:	4904      	ldr	r1, [pc, #16]	@ (800ad9c <tcp_process_refused_data+0x80>)
 800ad8a:	4805      	ldr	r0, [pc, #20]	@ (800ada0 <tcp_process_refused_data+0x84>)
 800ad8c:	f005 f8d2 	bl	800ff34 <iprintf>
 800ad90:	f06f 000f 	mvn.w	r0, #15
}
 800ad94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad96:	bf00      	nop
 800ad98:	08012a7c 	.word	0x08012a7c
 800ad9c:	080130e4 	.word	0x080130e4
 800ada0:	080110dc 	.word	0x080110dc

0800ada4 <tcp_fasttmr>:
{
 800ada4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ++tcp_timer_ctr;
 800ada8:	4d1c      	ldr	r5, [pc, #112]	@ (800ae1c <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 800adaa:	2700      	movs	r7, #0
 800adac:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 800ae24 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 800adb0:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800adb2:	4e1b      	ldr	r6, [pc, #108]	@ (800ae20 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800adb4:	3301      	adds	r3, #1
 800adb6:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800adb8:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800adbc:	b1b4      	cbz	r4, 800adec <tcp_fasttmr+0x48>
    if (pcb->last_timer != tcp_timer_ctr) {
 800adbe:	7fa3      	ldrb	r3, [r4, #30]
 800adc0:	782a      	ldrb	r2, [r5, #0]
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d014      	beq.n	800adf0 <tcp_fasttmr+0x4c>
      if (pcb->flags & TF_ACK_DELAY) {
 800adc6:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 800adc8:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800adca:	07d9      	lsls	r1, r3, #31
 800adcc:	d419      	bmi.n	800ae02 <tcp_fasttmr+0x5e>
      if (pcb->flags & TF_CLOSEPEND) {
 800adce:	071a      	lsls	r2, r3, #28
 800add0:	d410      	bmi.n	800adf4 <tcp_fasttmr+0x50>
      if (pcb->refused_data != NULL) {
 800add2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        tcp_process_refused_data(pcb);
 800add4:	4620      	mov	r0, r4
      next = pcb->next;
 800add6:	68e4      	ldr	r4, [r4, #12]
      if (pcb->refused_data != NULL) {
 800add8:	2b00      	cmp	r3, #0
 800adda:	d0ef      	beq.n	800adbc <tcp_fasttmr+0x18>
        tcp_active_pcbs_changed = 0;
 800addc:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800adde:	f7ff ff9d 	bl	800ad1c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ade2:	7833      	ldrb	r3, [r6, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1e7      	bne.n	800adb8 <tcp_fasttmr+0x14>
  while (pcb != NULL) {
 800ade8:	2c00      	cmp	r4, #0
 800adea:	d1e8      	bne.n	800adbe <tcp_fasttmr+0x1a>
}
 800adec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pcb = pcb->next;
 800adf0:	68e4      	ldr	r4, [r4, #12]
 800adf2:	e7e3      	b.n	800adbc <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800adf4:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800adf8:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800adfa:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800adfc:	f7fe fd94 	bl	8009928 <tcp_close_shutdown_fin>
 800ae00:	e7e7      	b.n	800add2 <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 800ae02:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800ae06:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800ae08:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800ae0a:	f002 fbf9 	bl	800d600 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ae0e:	8b63      	ldrh	r3, [r4, #26]
 800ae10:	f023 0303 	bic.w	r3, r3, #3
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	8363      	strh	r3, [r4, #26]
 800ae18:	e7d9      	b.n	800adce <tcp_fasttmr+0x2a>
 800ae1a:	bf00      	nop
 800ae1c:	24020755 	.word	0x24020755
 800ae20:	24020757 	.word	0x24020757
 800ae24:	2402075c 	.word	0x2402075c

0800ae28 <tcp_tmr>:
{
 800ae28:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800ae2a:	f7ff ffbb 	bl	800ada4 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800ae2e:	4a06      	ldr	r2, [pc, #24]	@ (800ae48 <tcp_tmr+0x20>)
 800ae30:	7813      	ldrb	r3, [r2, #0]
 800ae32:	3301      	adds	r3, #1
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	7013      	strb	r3, [r2, #0]
 800ae38:	07db      	lsls	r3, r3, #31
 800ae3a:	d400      	bmi.n	800ae3e <tcp_tmr+0x16>
}
 800ae3c:	bd08      	pop	{r3, pc}
 800ae3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800ae42:	f7ff b913 	b.w	800a06c <tcp_slowtmr>
 800ae46:	bf00      	nop
 800ae48:	24020756 	.word	0x24020756

0800ae4c <tcp_next_iss>:
{
 800ae4c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ae4e:	b130      	cbz	r0, 800ae5e <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800ae50:	4b07      	ldr	r3, [pc, #28]	@ (800ae70 <tcp_next_iss+0x24>)
 800ae52:	4a08      	ldr	r2, [pc, #32]	@ (800ae74 <tcp_next_iss+0x28>)
 800ae54:	6818      	ldr	r0, [r3, #0]
 800ae56:	6812      	ldr	r2, [r2, #0]
 800ae58:	4410      	add	r0, r2
 800ae5a:	6018      	str	r0, [r3, #0]
}
 800ae5c:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ae5e:	4b06      	ldr	r3, [pc, #24]	@ (800ae78 <tcp_next_iss+0x2c>)
 800ae60:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ae64:	4905      	ldr	r1, [pc, #20]	@ (800ae7c <tcp_next_iss+0x30>)
 800ae66:	4806      	ldr	r0, [pc, #24]	@ (800ae80 <tcp_next_iss+0x34>)
 800ae68:	f005 f864 	bl	800ff34 <iprintf>
 800ae6c:	e7f0      	b.n	800ae50 <tcp_next_iss+0x4>
 800ae6e:	bf00      	nop
 800ae70:	24000028 	.word	0x24000028
 800ae74:	24020768 	.word	0x24020768
 800ae78:	08012a7c 	.word	0x08012a7c
 800ae7c:	0801310c 	.word	0x0801310c
 800ae80:	080110dc 	.word	0x080110dc

0800ae84 <tcp_eff_send_mss_netif>:
{
 800ae84:	b538      	push	{r3, r4, r5, lr}
 800ae86:	4605      	mov	r5, r0
 800ae88:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ae8a:	b162      	cbz	r2, 800aea6 <tcp_eff_send_mss_netif+0x22>
    if (outif == NULL) {
 800ae8c:	b14c      	cbz	r4, 800aea2 <tcp_eff_send_mss_netif+0x1e>
    mtu = outif->mtu;
 800ae8e:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
  if (mtu != 0) {
 800ae90:	b13b      	cbz	r3, 800aea2 <tcp_eff_send_mss_netif+0x1e>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ae92:	2b28      	cmp	r3, #40	@ 0x28
 800ae94:	bf38      	it	cc
 800ae96:	2328      	movcc	r3, #40	@ 0x28
 800ae98:	3b28      	subs	r3, #40	@ 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	429d      	cmp	r5, r3
 800ae9e:	bf28      	it	cs
 800aea0:	461d      	movcs	r5, r3
}
 800aea2:	4628      	mov	r0, r5
 800aea4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800aea6:	4b04      	ldr	r3, [pc, #16]	@ (800aeb8 <tcp_eff_send_mss_netif+0x34>)
 800aea8:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800aeac:	4903      	ldr	r1, [pc, #12]	@ (800aebc <tcp_eff_send_mss_netif+0x38>)
 800aeae:	4804      	ldr	r0, [pc, #16]	@ (800aec0 <tcp_eff_send_mss_netif+0x3c>)
 800aeb0:	f005 f840 	bl	800ff34 <iprintf>
 800aeb4:	e7ea      	b.n	800ae8c <tcp_eff_send_mss_netif+0x8>
 800aeb6:	bf00      	nop
 800aeb8:	08012a7c 	.word	0x08012a7c
 800aebc:	08013128 	.word	0x08013128
 800aec0:	080110dc 	.word	0x080110dc

0800aec4 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 800aec4:	b308      	cbz	r0, 800af0a <tcp_netif_ip_addr_changed+0x46>
{
 800aec6:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 800aec8:	6803      	ldr	r3, [r0, #0]
 800aeca:	4604      	mov	r4, r0
 800aecc:	b903      	cbnz	r3, 800aed0 <tcp_netif_ip_addr_changed+0xc>
}
 800aece:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800aed0:	4b0e      	ldr	r3, [pc, #56]	@ (800af0c <tcp_netif_ip_addr_changed+0x48>)
 800aed2:	460d      	mov	r5, r1
 800aed4:	6819      	ldr	r1, [r3, #0]
 800aed6:	f7ff fcd1 	bl	800a87c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800aeda:	4b0d      	ldr	r3, [pc, #52]	@ (800af10 <tcp_netif_ip_addr_changed+0x4c>)
 800aedc:	4620      	mov	r0, r4
 800aede:	6819      	ldr	r1, [r3, #0]
 800aee0:	f7ff fccc 	bl	800a87c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800aee4:	2d00      	cmp	r5, #0
 800aee6:	d0f2      	beq.n	800aece <tcp_netif_ip_addr_changed+0xa>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d0ef      	beq.n	800aece <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aeee:	4b09      	ldr	r3, [pc, #36]	@ (800af14 <tcp_netif_ip_addr_changed+0x50>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d0eb      	beq.n	800aece <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800aef6:	6819      	ldr	r1, [r3, #0]
 800aef8:	6822      	ldr	r2, [r4, #0]
 800aefa:	4291      	cmp	r1, r2
 800aefc:	d101      	bne.n	800af02 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800aefe:	682a      	ldr	r2, [r5, #0]
 800af00:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d1f6      	bne.n	800aef6 <tcp_netif_ip_addr_changed+0x32>
}
 800af08:	bd38      	pop	{r3, r4, r5, pc}
 800af0a:	4770      	bx	lr
 800af0c:	2402075c 	.word	0x2402075c
 800af10:	24020764 	.word	0x24020764
 800af14:	24020760 	.word	0x24020760

0800af18 <tcp_free_ooseq>:
{
 800af18:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 800af1a:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 800af1c:	b16c      	cbz	r4, 800af3a <tcp_free_ooseq+0x22>
 800af1e:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 800af20:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800af22:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800af24:	6868      	ldr	r0, [r5, #4]
 800af26:	b108      	cbz	r0, 800af2c <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 800af28:	f7fe f98c 	bl	8009244 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800af2c:	4629      	mov	r1, r5
 800af2e:	2003      	movs	r0, #3
 800af30:	f7fd fe7c 	bl	8008c2c <memp_free>
  while (seg != NULL) {
 800af34:	2c00      	cmp	r4, #0
 800af36:	d1f3      	bne.n	800af20 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 800af38:	6774      	str	r4, [r6, #116]	@ 0x74
}
 800af3a:	bd70      	pop	{r4, r5, r6, pc}

0800af3c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800af3e:	4605      	mov	r5, r0
{
 800af40:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800af42:	2800      	cmp	r0, #0
 800af44:	d035      	beq.n	800afb2 <tcp_oos_insert_segment+0x76>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800af46:	68eb      	ldr	r3, [r5, #12]
 800af48:	8998      	ldrh	r0, [r3, #12]
 800af4a:	f7fd fa89 	bl	8008460 <lwip_htons>
 800af4e:	07c2      	lsls	r2, r0, #31
 800af50:	d429      	bmi.n	800afa6 <tcp_oos_insert_segment+0x6a>
 800af52:	4e1c      	ldr	r6, [pc, #112]	@ (800afc4 <tcp_oos_insert_segment+0x88>)
 800af54:	e005      	b.n	800af62 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 800af56:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800af58:	4620      	mov	r0, r4
 800af5a:	f7fe ff77 	bl	8009e4c <tcp_seg_free>
      next = next->next;
 800af5e:	463c      	mov	r4, r7
    while (next &&
 800af60:	b327      	cbz	r7, 800afac <tcp_oos_insert_segment+0x70>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800af62:	68e1      	ldr	r1, [r4, #12]
 800af64:	892b      	ldrh	r3, [r5, #8]
 800af66:	6837      	ldr	r7, [r6, #0]
 800af68:	6848      	ldr	r0, [r1, #4]
 800af6a:	443b      	add	r3, r7
 800af6c:	8922      	ldrh	r2, [r4, #8]
 800af6e:	1a1b      	subs	r3, r3, r0
 800af70:	1a9a      	subs	r2, r3, r2
    while (next &&
 800af72:	2a00      	cmp	r2, #0
 800af74:	db0d      	blt.n	800af92 <tcp_oos_insert_segment+0x56>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800af76:	8988      	ldrh	r0, [r1, #12]
 800af78:	f7fd fa72 	bl	8008460 <lwip_htons>
 800af7c:	07c3      	lsls	r3, r0, #31
 800af7e:	d5ea      	bpl.n	800af56 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800af80:	68eb      	ldr	r3, [r5, #12]
 800af82:	2001      	movs	r0, #1
 800af84:	899f      	ldrh	r7, [r3, #12]
 800af86:	f7fd fa6b 	bl	8008460 <lwip_htons>
 800af8a:	68eb      	ldr	r3, [r5, #12]
 800af8c:	4307      	orrs	r7, r0
 800af8e:	819f      	strh	r7, [r3, #12]
 800af90:	e7e1      	b.n	800af56 <tcp_oos_insert_segment+0x1a>
    }
    if (next &&
 800af92:	2b00      	cmp	r3, #0
 800af94:	dd05      	ble.n	800afa2 <tcp_oos_insert_segment+0x66>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800af96:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 800af98:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800af9a:	b289      	uxth	r1, r1
 800af9c:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800af9e:	f7fe fa69 	bl	8009474 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800afa2:	602c      	str	r4, [r5, #0]
}
 800afa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 800afa6:	4620      	mov	r0, r4
 800afa8:	f7fe ff3e 	bl	8009e28 <tcp_segs_free>
    next = NULL;
 800afac:	2400      	movs	r4, #0
  cseg->next = next;
 800afae:	602c      	str	r4, [r5, #0]
}
 800afb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800afb2:	4b05      	ldr	r3, [pc, #20]	@ (800afc8 <tcp_oos_insert_segment+0x8c>)
 800afb4:	f240 421f 	movw	r2, #1055	@ 0x41f
 800afb8:	4904      	ldr	r1, [pc, #16]	@ (800afcc <tcp_oos_insert_segment+0x90>)
 800afba:	4805      	ldr	r0, [pc, #20]	@ (800afd0 <tcp_oos_insert_segment+0x94>)
 800afbc:	f004 ffba 	bl	800ff34 <iprintf>
 800afc0:	e7c1      	b.n	800af46 <tcp_oos_insert_segment+0xa>
 800afc2:	bf00      	nop
 800afc4:	24020780 	.word	0x24020780
 800afc8:	08013178 	.word	0x08013178
 800afcc:	080131ac 	.word	0x080131ac
 800afd0:	080110dc 	.word	0x080110dc

0800afd4 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 800afd4:	4b0d      	ldr	r3, [pc, #52]	@ (800b00c <tcp_input_delayed_close+0x38>)
{
 800afd6:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 800afd8:	781b      	ldrb	r3, [r3, #0]
{
 800afda:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 800afdc:	f013 0010 	ands.w	r0, r3, #16
 800afe0:	d100      	bne.n	800afe4 <tcp_input_delayed_close+0x10>
}
 800afe2:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 800afe4:	8b63      	ldrh	r3, [r4, #26]
 800afe6:	06db      	lsls	r3, r3, #27
 800afe8:	d406      	bmi.n	800aff8 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800afea:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800afee:	b11b      	cbz	r3, 800aff8 <tcp_input_delayed_close+0x24>
 800aff0:	f06f 010e 	mvn.w	r1, #14
 800aff4:	6920      	ldr	r0, [r4, #16]
 800aff6:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aff8:	4621      	mov	r1, r4
 800affa:	4805      	ldr	r0, [pc, #20]	@ (800b010 <tcp_input_delayed_close+0x3c>)
 800affc:	f7ff fad6 	bl	800a5ac <tcp_pcb_remove>
    tcp_free(pcb);
 800b000:	4620      	mov	r0, r4
 800b002:	f7fe fccf 	bl	80099a4 <tcp_free>
 800b006:	2001      	movs	r0, #1
}
 800b008:	bd10      	pop	{r4, pc}
 800b00a:	bf00      	nop
 800b00c:	24020774 	.word	0x24020774
 800b010:	2402075c 	.word	0x2402075c

0800b014 <tcp_free_acked_segments.constprop.0>:
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b014:	2900      	cmp	r1, #0
 800b016:	d054      	beq.n	800b0c2 <tcp_free_acked_segments.constprop.0+0xae>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800b018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01c:	4682      	mov	sl, r0
 800b01e:	460d      	mov	r5, r1
 800b020:	4690      	mov	r8, r2
 800b022:	4e29      	ldr	r6, [pc, #164]	@ (800b0c8 <tcp_free_acked_segments.constprop.0+0xb4>)
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b024:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 800b0d4 <tcp_free_acked_segments.constprop.0+0xc0>
 800b028:	4f28      	ldr	r7, [pc, #160]	@ (800b0cc <tcp_free_acked_segments.constprop.0+0xb8>)
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b02a:	68eb      	ldr	r3, [r5, #12]
 800b02c:	6858      	ldr	r0, [r3, #4]
 800b02e:	f7fd fa1b 	bl	8008468 <lwip_htonl>
 800b032:	68eb      	ldr	r3, [r5, #12]
 800b034:	4604      	mov	r4, r0
 800b036:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800b03a:	8998      	ldrh	r0, [r3, #12]
 800b03c:	f7fd fa10 	bl	8008460 <lwip_htons>
 800b040:	6833      	ldr	r3, [r6, #0]
 800b042:	f010 0003 	ands.w	r0, r0, #3
 800b046:	eba4 0403 	sub.w	r4, r4, r3
 800b04a:	bf18      	it	ne
 800b04c:	2001      	movne	r0, #1
 800b04e:	445c      	add	r4, fp
 800b050:	4404      	add	r4, r0
  while (seg_list != NULL &&
 800b052:	2c00      	cmp	r4, #0
 800b054:	dc32      	bgt.n	800b0bc <tcp_free_acked_segments.constprop.0+0xa8>
    seg_list = seg_list->next;
 800b056:	e9d5 b000 	ldrd	fp, r0, [r5]
    clen = pbuf_clen(next->p);
 800b05a:	f7fe fa67 	bl	800952c <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b05e:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
    clen = pbuf_clen(next->p);
 800b062:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b064:	4298      	cmp	r0, r3
 800b066:	d81f      	bhi.n	800b0a8 <tcp_free_acked_segments.constprop.0+0x94>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b068:	4919      	ldr	r1, [pc, #100]	@ (800b0d0 <tcp_free_acked_segments.constprop.0+0xbc>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b06a:	1b1b      	subs	r3, r3, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b06c:	892a      	ldrh	r2, [r5, #8]
    tcp_seg_free(next);
 800b06e:	4628      	mov	r0, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b070:	880c      	ldrh	r4, [r1, #0]
 800b072:	465d      	mov	r5, fp
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b074:	f8aa 3066 	strh.w	r3, [sl, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b078:	1913      	adds	r3, r2, r4
 800b07a:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 800b07c:	f7fe fee6 	bl	8009e4c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b080:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 800b084:	b113      	cbz	r3, 800b08c <tcp_free_acked_segments.constprop.0+0x78>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b086:	ea58 030b 	orrs.w	r3, r8, fp
 800b08a:	d003      	beq.n	800b094 <tcp_free_acked_segments.constprop.0+0x80>
  while (seg_list != NULL &&
 800b08c:	f1bb 0f00 	cmp.w	fp, #0
 800b090:	d1cb      	bne.n	800b02a <tcp_free_acked_segments.constprop.0+0x16>
 800b092:	e006      	b.n	800b0a2 <tcp_free_acked_segments.constprop.0+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b094:	4b0f      	ldr	r3, [pc, #60]	@ (800b0d4 <tcp_free_acked_segments.constprop.0+0xc0>)
 800b096:	f240 4261 	movw	r2, #1121	@ 0x461
 800b09a:	490f      	ldr	r1, [pc, #60]	@ (800b0d8 <tcp_free_acked_segments.constprop.0+0xc4>)
 800b09c:	480b      	ldr	r0, [pc, #44]	@ (800b0cc <tcp_free_acked_segments.constprop.0+0xb8>)
 800b09e:	f004 ff49 	bl	800ff34 <iprintf>
  while (seg_list != NULL &&
 800b0a2:	2000      	movs	r0, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 800b0a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b0a8:	464b      	mov	r3, r9
 800b0aa:	f240 4257 	movw	r2, #1111	@ 0x457
 800b0ae:	490b      	ldr	r1, [pc, #44]	@ (800b0dc <tcp_free_acked_segments.constprop.0+0xc8>)
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	f004 ff3f 	bl	800ff34 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b0b6:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 800b0ba:	e7d5      	b.n	800b068 <tcp_free_acked_segments.constprop.0+0x54>
 800b0bc:	4628      	mov	r0, r5
}
 800b0be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c2:	2000      	movs	r0, #0
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	2402077c 	.word	0x2402077c
 800b0cc:	080110dc 	.word	0x080110dc
 800b0d0:	24020778 	.word	0x24020778
 800b0d4:	08013178 	.word	0x08013178
 800b0d8:	080131fc 	.word	0x080131fc
 800b0dc:	080131d4 	.word	0x080131d4

0800b0e0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b0e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b0e4:	7d03      	ldrb	r3, [r0, #20]
{
 800b0e6:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b0e8:	2b03      	cmp	r3, #3
 800b0ea:	f240 8124 	bls.w	800b336 <tcp_receive+0x256>

  if (flags & TCP_ACK) {
 800b0ee:	4bb6      	ldr	r3, [pc, #728]	@ (800b3c8 <tcp_receive+0x2e8>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b0f0:	4eb6      	ldr	r6, [pc, #728]	@ (800b3cc <tcp_receive+0x2ec>)
  if (flags & TCP_ACK) {
 800b0f2:	781a      	ldrb	r2, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b0f4:	6833      	ldr	r3, [r6, #0]
  if (flags & TCP_ACK) {
 800b0f6:	06d0      	lsls	r0, r2, #27
 800b0f8:	f100 80a3 	bmi.w	800b242 <tcp_receive+0x162>
 800b0fc:	4fb4      	ldr	r7, [pc, #720]	@ (800b3d0 <tcp_receive+0x2f0>)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b0fe:	8839      	ldrh	r1, [r7, #0]
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b100:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b102:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b104:	2900      	cmp	r1, #0
 800b106:	f000 808c 	beq.w	800b222 <tcp_receive+0x142>
 800b10a:	7d20      	ldrb	r0, [r4, #20]
 800b10c:	2806      	cmp	r0, #6
 800b10e:	f200 8088 	bhi.w	800b222 <tcp_receive+0x142>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b112:	eba2 0803 	sub.w	r8, r2, r3
 800b116:	f1b8 0f01 	cmp.w	r8, #1
 800b11a:	d406      	bmi.n	800b12a <tcp_receive+0x4a>
 800b11c:	f1c3 0001 	rsb	r0, r3, #1
 800b120:	1a41      	subs	r1, r0, r1
 800b122:	4411      	add	r1, r2
 800b124:	2900      	cmp	r1, #0
 800b126:	f340 81d8 	ble.w	800b4da <tcp_receive+0x3fa>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b12a:	1a99      	subs	r1, r3, r2
 800b12c:	2900      	cmp	r1, #0
 800b12e:	f2c0 81cf 	blt.w	800b4d0 <tcp_receive+0x3f0>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b132:	f103 0e01 	add.w	lr, r3, #1
 800b136:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 800b138:	ebae 0102 	sub.w	r1, lr, r2
 800b13c:	1a09      	subs	r1, r1, r0
 800b13e:	2900      	cmp	r1, #0
 800b140:	dc43      	bgt.n	800b1ca <tcp_receive+0xea>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b142:	429a      	cmp	r2, r3
 800b144:	f000 8454 	beq.w	800b9f0 <tcp_receive+0x910>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b148:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800b14a:	2d00      	cmp	r5, #0
 800b14c:	f000 8375 	beq.w	800b83a <tcp_receive+0x75a>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 800b150:	68e8      	ldr	r0, [r5, #12]
 800b152:	6842      	ldr	r2, [r0, #4]
 800b154:	429a      	cmp	r2, r3
 800b156:	f000 8350 	beq.w	800b7fa <tcp_receive+0x71a>
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b15a:	1a99      	subs	r1, r3, r2
 800b15c:	2900      	cmp	r1, #0
 800b15e:	f2c0 83b9 	blt.w	800b8d4 <tcp_receive+0x7f4>
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b162:	f103 3cff 	add.w	ip, r3, #4294967295
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b166:	46a8      	mov	r8, r5
 800b168:	682d      	ldr	r5, [r5, #0]
 800b16a:	2d00      	cmp	r5, #0
 800b16c:	f000 814d 	beq.w	800b40a <tcp_receive+0x32a>
            if (seqno == next->tcphdr->seqno) {
 800b170:	68e8      	ldr	r0, [r5, #12]
 800b172:	6842      	ldr	r2, [r0, #4]
 800b174:	429a      	cmp	r2, r3
 800b176:	f000 8342 	beq.w	800b7fe <tcp_receive+0x71e>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b17a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800b17e:	6849      	ldr	r1, [r1, #4]
 800b180:	ebac 0101 	sub.w	r1, ip, r1
 800b184:	2900      	cmp	r1, #0
 800b186:	dbee      	blt.n	800b166 <tcp_receive+0x86>
 800b188:	ebae 0102 	sub.w	r1, lr, r2
 800b18c:	2900      	cmp	r1, #0
 800b18e:	dcea      	bgt.n	800b166 <tcp_receive+0x86>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b190:	4890      	ldr	r0, [pc, #576]	@ (800b3d4 <tcp_receive+0x2f4>)
 800b192:	f7fe fe69 	bl	8009e68 <tcp_seg_copy>
                  if (cseg != NULL) {
 800b196:	4607      	mov	r7, r0
 800b198:	b1b8      	cbz	r0, 800b1ca <tcp_receive+0xea>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b19a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b19e:	6832      	ldr	r2, [r6, #0]
 800b1a0:	6859      	ldr	r1, [r3, #4]
 800b1a2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b1a6:	440b      	add	r3, r1
 800b1a8:	1a9b      	subs	r3, r3, r2
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	dd07      	ble.n	800b1be <tcp_receive+0xde>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b1ae:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 800b1b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b1b4:	b291      	uxth	r1, r2
 800b1b6:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b1ba:	f7fe f95b 	bl	8009474 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 800b1be:	4629      	mov	r1, r5
 800b1c0:	4638      	mov	r0, r7
                    prev->next = cseg;
 800b1c2:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800b1c6:	f7ff feb9 	bl	800af3c <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b1ca:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 800b1cc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800b1d0:	f002 b9e4 	b.w	800d59c <tcp_send_empty_ack>
      if (tcplen == 0) {
 800b1d4:	4f7e      	ldr	r7, [pc, #504]	@ (800b3d0 <tcp_receive+0x2f0>)
 800b1d6:	8839      	ldrh	r1, [r7, #0]
 800b1d8:	2900      	cmp	r1, #0
 800b1da:	f040 810b 	bne.w	800b3f4 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b1de:	44e6      	add	lr, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b1e0:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800b1e2:	f8b4 c060 	ldrh.w	ip, [r4, #96]	@ 0x60
 800b1e6:	4461      	add	r1, ip
 800b1e8:	4571      	cmp	r1, lr
 800b1ea:	f040 8103 	bne.w	800b3f4 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 800b1ee:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
            if (pcb->lastack == ackno) {
 800b1f0:	0409      	lsls	r1, r1, #16
 800b1f2:	f100 80ff 	bmi.w	800b3f4 <tcp_receive+0x314>
 800b1f6:	4290      	cmp	r0, r2
 800b1f8:	f040 80fc 	bne.w	800b3f4 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b1fc:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
 800b200:	29ff      	cmp	r1, #255	@ 0xff
 800b202:	f000 8372 	beq.w	800b8ea <tcp_receive+0x80a>
                ++pcb->dupacks;
 800b206:	3101      	adds	r1, #1
 800b208:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 800b20a:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 800b20c:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
              if (pcb->dupacks > 3) {
 800b210:	f200 836b 	bhi.w	800b8ea <tcp_receive+0x80a>
              if (pcb->dupacks >= 3) {
 800b214:	f000 8374 	beq.w	800b900 <tcp_receive+0x820>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b218:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b21a:	2900      	cmp	r1, #0
 800b21c:	f040 80ae 	bne.w	800b37c <tcp_receive+0x29c>
 800b220:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b222:	1a99      	subs	r1, r3, r2
 800b224:	2900      	cmp	r1, #0
 800b226:	db06      	blt.n	800b236 <tcp_receive+0x156>
 800b228:	f1c2 0201 	rsb	r2, r2, #1
 800b22c:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800b22e:	1a52      	subs	r2, r2, r1
 800b230:	441a      	add	r2, r3
 800b232:	2a00      	cmp	r2, #0
 800b234:	dd03      	ble.n	800b23e <tcp_receive+0x15e>
      tcp_ack_now(pcb);
 800b236:	8b63      	ldrh	r3, [r4, #26]
 800b238:	f043 0302 	orr.w	r3, r3, #2
 800b23c:	8363      	strh	r3, [r4, #26]
}
 800b23e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b242:	e9d4 1c15 	ldrd	r1, ip, [r4, #84]	@ 0x54
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b246:	4d64      	ldr	r5, [pc, #400]	@ (800b3d8 <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b248:	1ac8      	subs	r0, r1, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b24a:	f8b4 e060 	ldrh.w	lr, [r4, #96]	@ 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b24e:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b250:	2800      	cmp	r0, #0
 800b252:	db7c      	blt.n	800b34e <tcp_receive+0x26e>
 800b254:	4299      	cmp	r1, r3
 800b256:	d076      	beq.n	800b346 <tcp_receive+0x266>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b258:	4594      	cmp	ip, r2
 800b25a:	f000 80cf 	beq.w	800b3fc <tcp_receive+0x31c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b25e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800b260:	1a11      	subs	r1, r2, r0
 800b262:	2900      	cmp	r1, #0
 800b264:	ddb6      	ble.n	800b1d4 <tcp_receive+0xf4>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b266:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	dc7d      	bgt.n	800b36a <tcp_receive+0x28a>
      if (pcb->flags & TF_INFR) {
 800b26e:	8b63      	ldrh	r3, [r4, #26]
 800b270:	0758      	lsls	r0, r3, #29
 800b272:	d509      	bpl.n	800b288 <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 800b274:	f023 0304 	bic.w	r3, r3, #4
 800b278:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800b27a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 800b27e:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b288:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	@ 0x3c
 800b28c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      pcb->lastack = ackno;
 800b28e:	6462      	str	r2, [r4, #68]	@ 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b290:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800b294:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b296:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
      if (pcb->state >= ESTABLISHED) {
 800b29a:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800b29c:	f04f 0300 	mov.w	r3, #0
 800b2a0:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
      if (pcb->state >= ESTABLISHED) {
 800b2a4:	d913      	bls.n	800b2ce <tcp_receive+0x1ee>
        if (pcb->cwnd < pcb->ssthresh) {
 800b2a6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b2aa:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 800b2ac:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	f200 81af 	bhi.w	800b614 <tcp_receive+0x534>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b2b6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 800b2ba:	4411      	add	r1, r2
 800b2bc:	b289      	uxth	r1, r1
 800b2be:	428a      	cmp	r2, r1
 800b2c0:	f200 828b 	bhi.w	800b7da <tcp_receive+0x6fa>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b2c4:	428b      	cmp	r3, r1
 800b2c6:	f240 828a 	bls.w	800b7de <tcp_receive+0x6fe>
 800b2ca:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	@ 0x6c
 800b2d4:	f7ff fe9e 	bl	800b014 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b2d8:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b2da:	4602      	mov	r2, r0
 800b2dc:	6720      	str	r0, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f7ff fe98 	bl	800b014 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800b2e4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b2e6:	66e0      	str	r0, [r4, #108]	@ 0x6c
      if (pcb->unacked == NULL) {
 800b2e8:	fab2 f382 	clz	r3, r2
 800b2ec:	095b      	lsrs	r3, r3, #5
 800b2ee:	425b      	negs	r3, r3
 800b2f0:	8623      	strh	r3, [r4, #48]	@ 0x30
      pcb->polltmr = 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	f000 8189 	beq.w	800b60e <tcp_receive+0x52e>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b2fc:	4b37      	ldr	r3, [pc, #220]	@ (800b3dc <tcp_receive+0x2fc>)
 800b2fe:	8819      	ldrh	r1, [r3, #0]
 800b300:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800b304:	440b      	add	r3, r1
 800b306:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
      if (pcb->flags & TF_RTO) {
 800b30a:	8b63      	ldrh	r3, [r4, #26]
 800b30c:	0519      	lsls	r1, r3, #20
 800b30e:	f140 80dd 	bpl.w	800b4cc <tcp_receive+0x3ec>
        if (pcb->unacked == NULL) {
 800b312:	2a00      	cmp	r2, #0
 800b314:	f000 8195 	beq.w	800b642 <tcp_receive+0x562>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b318:	68d3      	ldr	r3, [r2, #12]
 800b31a:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800b31c:	6858      	ldr	r0, [r3, #4]
 800b31e:	f7fd f8a3 	bl	8008468 <lwip_htonl>
 800b322:	1a3f      	subs	r7, r7, r0
 800b324:	2f00      	cmp	r7, #0
 800b326:	f300 80d1 	bgt.w	800b4cc <tcp_receive+0x3ec>
          tcp_clear_flags(pcb, TF_RTO);
 800b32a:	8b63      	ldrh	r3, [r4, #26]
 800b32c:	4f28      	ldr	r7, [pc, #160]	@ (800b3d0 <tcp_receive+0x2f0>)
 800b32e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b332:	8363      	strh	r3, [r4, #26]
 800b334:	e01d      	b.n	800b372 <tcp_receive+0x292>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b336:	4b2a      	ldr	r3, [pc, #168]	@ (800b3e0 <tcp_receive+0x300>)
 800b338:	f240 427c 	movw	r2, #1148	@ 0x47c
 800b33c:	4929      	ldr	r1, [pc, #164]	@ (800b3e4 <tcp_receive+0x304>)
 800b33e:	482a      	ldr	r0, [pc, #168]	@ (800b3e8 <tcp_receive+0x308>)
 800b340:	f004 fdf8 	bl	800ff34 <iprintf>
 800b344:	e6d3      	b.n	800b0ee <tcp_receive+0xe>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b346:	ebac 0102 	sub.w	r1, ip, r2
 800b34a:	2900      	cmp	r1, #0
 800b34c:	da84      	bge.n	800b258 <tcp_receive+0x178>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b34e:	4927      	ldr	r1, [pc, #156]	@ (800b3ec <tcp_receive+0x30c>)
 800b350:	6809      	ldr	r1, [r1, #0]
 800b352:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b354:	f8b4 0062 	ldrh.w	r0, [r4, #98]	@ 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b358:	f8a4 1060 	strh.w	r1, [r4, #96]	@ 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b35c:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 800b35e:	e9c4 3215 	strd	r3, r2, [r4, #84]	@ 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b362:	bf38      	it	cc
 800b364:	f8a4 1062 	strhcc.w	r1, [r4, #98]	@ 0x62
      pcb->snd_wl1 = seqno;
 800b368:	e779      	b.n	800b25e <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 800b36a:	4620      	mov	r0, r4
 800b36c:	4f18      	ldr	r7, [pc, #96]	@ (800b3d0 <tcp_receive+0x2f0>)
 800b36e:	f002 f915 	bl	800d59c <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b372:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b374:	2900      	cmp	r1, #0
 800b376:	f43f aec2 	beq.w	800b0fe <tcp_receive+0x1e>
 800b37a:	682a      	ldr	r2, [r5, #0]
 800b37c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b37e:	1a9b      	subs	r3, r3, r2
 800b380:	2b00      	cmp	r3, #0
 800b382:	f6bf aebc 	bge.w	800b0fe <tcp_receive+0x1e>
      m = (s16_t)(m - (pcb->sa >> 3));
 800b386:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	@ 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b38a:	b289      	uxth	r1, r1
 800b38c:	4b18      	ldr	r3, [pc, #96]	@ (800b3f0 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 800b38e:	f3c2 00cf 	ubfx	r0, r2, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b392:	881d      	ldrh	r5, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800b394:	1a2b      	subs	r3, r5, r0
 800b396:	1a5b      	subs	r3, r3, r1
 800b398:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
 800b39a:	441a      	add	r2, r3
      if (m < 0) {
 800b39c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 800b3a0:	b212      	sxth	r2, r2
 800b3a2:	87a2      	strh	r2, [r4, #60]	@ 0x3c
      if (m < 0) {
 800b3a4:	d002      	beq.n	800b3ac <tcp_receive+0x2cc>
        m = (s16_t) - m;
 800b3a6:	1b40      	subs	r0, r0, r5
 800b3a8:	4401      	add	r1, r0
 800b3aa:	b28b      	uxth	r3, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 800b3ac:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	@ 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b3b0:	eba1 01a1 	sub.w	r1, r1, r1, asr #2
 800b3b4:	440b      	add	r3, r1
 800b3b6:	b29b      	uxth	r3, r3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b3b8:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 800b3bc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      pcb->rttest = 0;
 800b3be:	2300      	movs	r3, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b3c0:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
      pcb->rttest = 0;
 800b3c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3c6:	e69a      	b.n	800b0fe <tcp_receive+0x1e>
 800b3c8:	24020775 	.word	0x24020775
 800b3cc:	24020780 	.word	0x24020780
 800b3d0:	24020776 	.word	0x24020776
 800b3d4:	24020794 	.word	0x24020794
 800b3d8:	2402077c 	.word	0x2402077c
 800b3dc:	24020778 	.word	0x24020778
 800b3e0:	08013178 	.word	0x08013178
 800b3e4:	0801321c 	.word	0x0801321c
 800b3e8:	080110dc 	.word	0x080110dc
 800b3ec:	24020790 	.word	0x24020790
 800b3f0:	24020768 	.word	0x24020768
        pcb->dupacks = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3fa:	e7ba      	b.n	800b372 <tcp_receive+0x292>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b3fc:	49a2      	ldr	r1, [pc, #648]	@ (800b688 <tcp_receive+0x5a8>)
 800b3fe:	6809      	ldr	r1, [r1, #0]
 800b400:	89c9      	ldrh	r1, [r1, #14]
 800b402:	458e      	cmp	lr, r1
 800b404:	f4bf af2b 	bcs.w	800b25e <tcp_receive+0x17e>
 800b408:	e7a4      	b.n	800b354 <tcp_receive+0x274>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b40a:	1a9a      	subs	r2, r3, r2
              if (next->next == NULL &&
 800b40c:	2a00      	cmp	r2, #0
 800b40e:	f77f aedc 	ble.w	800b1ca <tcp_receive+0xea>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b412:	8980      	ldrh	r0, [r0, #12]
 800b414:	f7fd f824 	bl	8008460 <lwip_htons>
 800b418:	07c1      	lsls	r1, r0, #31
 800b41a:	f53f aed6 	bmi.w	800b1ca <tcp_receive+0xea>
                next->next = tcp_seg_copy(&inseg);
 800b41e:	489b      	ldr	r0, [pc, #620]	@ (800b68c <tcp_receive+0x5ac>)
 800b420:	f7fe fd22 	bl	8009e68 <tcp_seg_copy>
 800b424:	f8c8 0000 	str.w	r0, [r8]
                if (next->next != NULL) {
 800b428:	2800      	cmp	r0, #0
 800b42a:	f43f aece 	beq.w	800b1ca <tcp_receive+0xea>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b42e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b432:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 800b436:	6859      	ldr	r1, [r3, #4]
 800b438:	6833      	ldr	r3, [r6, #0]
 800b43a:	440a      	add	r2, r1
 800b43c:	1ad2      	subs	r2, r2, r3
 800b43e:	2a00      	cmp	r2, #0
 800b440:	dd07      	ble.n	800b452 <tcp_receive+0x372>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b442:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 800b444:	f8d8 0004 	ldr.w	r0, [r8, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b448:	b299      	uxth	r1, r3
 800b44a:	f8a8 1008 	strh.w	r1, [r8, #8]
                    pbuf_realloc(next->p, next->len);
 800b44e:	f7fe f811 	bl	8009474 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b452:	6832      	ldr	r2, [r6, #0]
 800b454:	883b      	ldrh	r3, [r7, #0]
 800b456:	4413      	add	r3, r2
 800b458:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b45a:	1a9b      	subs	r3, r3, r2
 800b45c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800b45e:	1a9b      	subs	r3, r3, r2
 800b460:	2b00      	cmp	r3, #0
 800b462:	f77f aeb2 	ble.w	800b1ca <tcp_receive+0xea>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b466:	f8d8 3000 	ldr.w	r3, [r8]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	8998      	ldrh	r0, [r3, #12]
 800b46e:	f7fc fff7 	bl	8008460 <lwip_htons>
 800b472:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b474:	f8d8 3000 	ldr.w	r3, [r8]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b478:	f100 82a8 	bmi.w	800b9cc <tcp_receive+0x8ec>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b47c:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800b47e:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 800b480:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b482:	1a89      	subs	r1, r1, r2
 800b484:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b486:	4411      	add	r1, r2
 800b488:	b289      	uxth	r1, r1
 800b48a:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b48c:	f7fd fff2 	bl	8009474 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b490:	f8d8 3000 	ldr.w	r3, [r8]
 800b494:	891d      	ldrh	r5, [r3, #8]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	8998      	ldrh	r0, [r3, #12]
 800b49a:	f7fc ffe1 	bl	8008460 <lwip_htons>
 800b49e:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b4a2:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800b4a4:	bf18      	it	ne
 800b4a6:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b4a8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
                    tcplen = TCP_TCPLEN(next->next);
 800b4aa:	442b      	add	r3, r5
 800b4ac:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b4ae:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 800b4b0:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b4b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b4b4:	4413      	add	r3, r2
 800b4b6:	4299      	cmp	r1, r3
 800b4b8:	f43f ae87 	beq.w	800b1ca <tcp_receive+0xea>
 800b4bc:	4b74      	ldr	r3, [pc, #464]	@ (800b690 <tcp_receive+0x5b0>)
 800b4be:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800b4c2:	4974      	ldr	r1, [pc, #464]	@ (800b694 <tcp_receive+0x5b4>)
 800b4c4:	4874      	ldr	r0, [pc, #464]	@ (800b698 <tcp_receive+0x5b8>)
 800b4c6:	f004 fd35 	bl	800ff34 <iprintf>
 800b4ca:	e67e      	b.n	800b1ca <tcp_receive+0xea>
 800b4cc:	4f73      	ldr	r7, [pc, #460]	@ (800b69c <tcp_receive+0x5bc>)
 800b4ce:	e750      	b.n	800b372 <tcp_receive+0x292>
        tcp_ack_now(pcb);
 800b4d0:	8b63      	ldrh	r3, [r4, #26]
 800b4d2:	f043 0302 	orr.w	r3, r3, #2
 800b4d6:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b4d8:	e677      	b.n	800b1ca <tcp_receive+0xea>
      struct pbuf *p = inseg.p;
 800b4da:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 800b68c <tcp_receive+0x5ac>
 800b4de:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b4e2:	2d00      	cmp	r5, #0
 800b4e4:	f000 8171 	beq.w	800b7ca <tcp_receive+0x6ea>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b4e8:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800b4ec:	4598      	cmp	r8, r3
 800b4ee:	f200 80c3 	bhi.w	800b678 <tcp_receive+0x598>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b4f2:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800b4f6:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b4fa:	891a      	ldrh	r2, [r3, #8]
 800b4fc:	4542      	cmp	r2, r8
 800b4fe:	f0c0 80b0 	bcc.w	800b662 <tcp_receive+0x582>
      inseg.len -= off;
 800b502:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b506:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 800b50a:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b50e:	b292      	uxth	r2, r2
      inseg.len -= off;
 800b510:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 800b514:	896b      	ldrh	r3, [r5, #10]
 800b516:	4598      	cmp	r8, r3
 800b518:	d90a      	bls.n	800b530 <tcp_receive+0x450>
        p->len = 0;
 800b51a:	2100      	movs	r1, #0
        off -= p->len;
 800b51c:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 800b520:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 800b522:	812a      	strh	r2, [r5, #8]
        p = p->next;
 800b524:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 800b526:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 800b52a:	896b      	ldrh	r3, [r5, #10]
 800b52c:	4543      	cmp	r3, r8
 800b52e:	d3f5      	bcc.n	800b51c <tcp_receive+0x43c>
      pbuf_remove_header(p, off);
 800b530:	4641      	mov	r1, r8
 800b532:	4628      	mov	r0, r5
 800b534:	f7fd fe24 	bl	8009180 <pbuf_remove_header>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b538:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b53a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b53c:	f1c3 0301 	rsb	r3, r3, #1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b540:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800b544:	6032      	str	r2, [r6, #0]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b546:	2b00      	cmp	r3, #0
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b548:	604a      	str	r2, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b54a:	f73f ae3e 	bgt.w	800b1ca <tcp_receive+0xea>
        tcplen = TCP_TCPLEN(&inseg);
 800b54e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b552:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800b556:	8998      	ldrh	r0, [r3, #12]
 800b558:	f7fc ff82 	bl	8008460 <lwip_htons>
 800b55c:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800b560:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800b562:	bf18      	it	ne
 800b564:	2301      	movne	r3, #1
 800b566:	442b      	add	r3, r5
 800b568:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 800b56a:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 800b56c:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800b56e:	f0c0 816d 	bcc.w	800b84c <tcp_receive+0x76c>
        if (pcb->ooseq != NULL) {
 800b572:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 809e 	beq.w	800b6b6 <tcp_receive+0x5d6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b57a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b57e:	8998      	ldrh	r0, [r3, #12]
 800b580:	f7fc ff6e 	bl	8008460 <lwip_htons>
 800b584:	07c2      	lsls	r2, r0, #31
 800b586:	f100 8093 	bmi.w	800b6b0 <tcp_receive+0x5d0>
            struct tcp_seg *next = pcb->ooseq;
 800b58a:	6f65      	ldr	r5, [r4, #116]	@ 0x74
        pcb->rcv_nxt = seqno + tcplen;
 800b58c:	883a      	ldrh	r2, [r7, #0]
 800b58e:	6831      	ldr	r1, [r6, #0]
            while (next &&
 800b590:	b955      	cbnz	r5, 800b5a8 <tcp_receive+0x4c8>
 800b592:	e1f3      	b.n	800b97c <tcp_receive+0x89c>
              next = next->next;
 800b594:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 800b598:	4628      	mov	r0, r5
 800b59a:	f7fe fc57 	bl	8009e4c <tcp_seg_free>
              next = next->next;
 800b59e:	4645      	mov	r5, r8
            while (next &&
 800b5a0:	f1b8 0f00 	cmp.w	r8, #0
 800b5a4:	f000 81e8 	beq.w	800b978 <tcp_receive+0x898>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b5a8:	68e8      	ldr	r0, [r5, #12]
 800b5aa:	883a      	ldrh	r2, [r7, #0]
 800b5ac:	f8d6 e000 	ldr.w	lr, [r6]
 800b5b0:	892b      	ldrh	r3, [r5, #8]
 800b5b2:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800b5b6:	eb02 010e 	add.w	r1, r2, lr
 800b5ba:	4463      	add	r3, ip
 800b5bc:	1acb      	subs	r3, r1, r3
            while (next &&
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f2c0 81a2 	blt.w	800b908 <tcp_receive+0x828>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b5c4:	8980      	ldrh	r0, [r0, #12]
 800b5c6:	f7fc ff4b 	bl	8008460 <lwip_htons>
 800b5ca:	07c3      	lsls	r3, r0, #31
 800b5cc:	d5e2      	bpl.n	800b594 <tcp_receive+0x4b4>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b5ce:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b5d2:	8998      	ldrh	r0, [r3, #12]
 800b5d4:	f7fc ff44 	bl	8008460 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b5d8:	0780      	lsls	r0, r0, #30
 800b5da:	d4db      	bmi.n	800b594 <tcp_receive+0x4b4>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b5dc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b5e0:	2001      	movs	r0, #1
 800b5e2:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800b5e6:	f7fc ff3b 	bl	8008460 <lwip_htons>
 800b5ea:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b5ee:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 800b5f2:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b5f6:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b5f8:	b280      	uxth	r0, r0
 800b5fa:	f7fc ff31 	bl	8008460 <lwip_htons>
 800b5fe:	f010 0303 	ands.w	r3, r0, #3
 800b602:	bf18      	it	ne
 800b604:	2301      	movne	r3, #1
 800b606:	4498      	add	r8, r3
 800b608:	f8a7 8000 	strh.w	r8, [r7]
 800b60c:	e7c2      	b.n	800b594 <tcp_receive+0x4b4>
        pcb->unsent_oversize = 0;
 800b60e:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
 800b612:	e673      	b.n	800b2fc <tcp_receive+0x21c>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b614:	8b62      	ldrh	r2, [r4, #26]
 800b616:	f412 6f00 	tst.w	r2, #2048	@ 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b61a:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b61c:	bf0c      	ite	eq
 800b61e:	2002      	moveq	r0, #2
 800b620:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b622:	fb12 f200 	smulbb	r2, r2, r0
 800b626:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800b628:	428a      	cmp	r2, r1
 800b62a:	bf94      	ite	ls
 800b62c:	1898      	addls	r0, r3, r2
 800b62e:	1858      	addhi	r0, r3, r1
 800b630:	b282      	uxth	r2, r0
 800b632:	4293      	cmp	r3, r2
 800b634:	f240 80dc 	bls.w	800b7f0 <tcp_receive+0x710>
 800b638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b63c:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800b640:	e645      	b.n	800b2ce <tcp_receive+0x1ee>
          if ((pcb->unsent == NULL) ||
 800b642:	b148      	cbz	r0, 800b658 <tcp_receive+0x578>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b644:	68c3      	ldr	r3, [r0, #12]
 800b646:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800b648:	6858      	ldr	r0, [r3, #4]
 800b64a:	f7fc ff0d 	bl	8008468 <lwip_htonl>
 800b64e:	1a3f      	subs	r7, r7, r0
          if ((pcb->unsent == NULL) ||
 800b650:	2f00      	cmp	r7, #0
 800b652:	f73f af3b 	bgt.w	800b4cc <tcp_receive+0x3ec>
            tcp_clear_flags(pcb, TF_RTO);
 800b656:	8b63      	ldrh	r3, [r4, #26]
 800b658:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b65c:	4f0f      	ldr	r7, [pc, #60]	@ (800b69c <tcp_receive+0x5bc>)
 800b65e:	8363      	strh	r3, [r4, #26]
 800b660:	e687      	b.n	800b372 <tcp_receive+0x292>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b662:	4b0b      	ldr	r3, [pc, #44]	@ (800b690 <tcp_receive+0x5b0>)
 800b664:	f240 5297 	movw	r2, #1431	@ 0x597
 800b668:	490d      	ldr	r1, [pc, #52]	@ (800b6a0 <tcp_receive+0x5c0>)
 800b66a:	480b      	ldr	r0, [pc, #44]	@ (800b698 <tcp_receive+0x5b8>)
 800b66c:	f004 fc62 	bl	800ff34 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b670:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b674:	891a      	ldrh	r2, [r3, #8]
 800b676:	e744      	b.n	800b502 <tcp_receive+0x422>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b678:	4b05      	ldr	r3, [pc, #20]	@ (800b690 <tcp_receive+0x5b0>)
 800b67a:	f240 5295 	movw	r2, #1429	@ 0x595
 800b67e:	4909      	ldr	r1, [pc, #36]	@ (800b6a4 <tcp_receive+0x5c4>)
 800b680:	4805      	ldr	r0, [pc, #20]	@ (800b698 <tcp_receive+0x5b8>)
 800b682:	f004 fc57 	bl	800ff34 <iprintf>
 800b686:	e734      	b.n	800b4f2 <tcp_receive+0x412>
 800b688:	24020790 	.word	0x24020790
 800b68c:	24020794 	.word	0x24020794
 800b690:	08013178 	.word	0x08013178
 800b694:	08013268 	.word	0x08013268
 800b698:	080110dc 	.word	0x080110dc
 800b69c:	24020776 	.word	0x24020776
 800b6a0:	08013258 	.word	0x08013258
 800b6a4:	08013248 	.word	0x08013248
              pcb->ooseq = pcb->ooseq->next;
 800b6a8:	6803      	ldr	r3, [r0, #0]
 800b6aa:	6763      	str	r3, [r4, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800b6ac:	f7fe fbce 	bl	8009e4c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b6b0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d1f8      	bne.n	800b6a8 <tcp_receive+0x5c8>
        pcb->rcv_nxt = seqno + tcplen;
 800b6b6:	883a      	ldrh	r2, [r7, #0]
 800b6b8:	6831      	ldr	r1, [r6, #0]
 800b6ba:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b6bc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        pcb->rcv_nxt = seqno + tcplen;
 800b6be:	6261      	str	r1, [r4, #36]	@ 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	f0c0 80fd 	bcc.w	800b8c0 <tcp_receive+0x7e0>
        pcb->rcv_wnd -= tcplen;
 800b6c6:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 800b6c8:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800b6ca:	8523      	strh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800b6cc:	f7fe fa7c 	bl	8009bc8 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800b6d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b6d4:	891a      	ldrh	r2, [r3, #8]
 800b6d6:	b122      	cbz	r2, 800b6e2 <tcp_receive+0x602>
          recv_data = inseg.p;
 800b6d8:	4ab2      	ldr	r2, [pc, #712]	@ (800b9a4 <tcp_receive+0x8c4>)
 800b6da:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b6e2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b6e6:	8998      	ldrh	r0, [r3, #12]
 800b6e8:	f7fc feba 	bl	8008460 <lwip_htons>
 800b6ec:	07c2      	lsls	r2, r0, #31
 800b6ee:	d504      	bpl.n	800b6fa <tcp_receive+0x61a>
          recv_flags |= TF_GOT_FIN;
 800b6f0:	4aad      	ldr	r2, [pc, #692]	@ (800b9a8 <tcp_receive+0x8c8>)
 800b6f2:	7813      	ldrb	r3, [r2, #0]
 800b6f4:	f043 0320 	orr.w	r3, r3, #32
 800b6f8:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800b6fa:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800b6fc:	2d00      	cmp	r5, #0
 800b6fe:	f000 8093 	beq.w	800b828 <tcp_receive+0x748>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b702:	f8df 92ac 	ldr.w	r9, [pc, #684]	@ 800b9b0 <tcp_receive+0x8d0>
 800b706:	f8df 82c0 	ldr.w	r8, [pc, #704]	@ 800b9c8 <tcp_receive+0x8e8>
 800b70a:	4fa8      	ldr	r7, [pc, #672]	@ (800b9ac <tcp_receive+0x8cc>)
 800b70c:	e033      	b.n	800b776 <tcp_receive+0x696>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b70e:	68eb      	ldr	r3, [r5, #12]
 800b710:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800b714:	8998      	ldrh	r0, [r3, #12]
 800b716:	f7fc fea3 	bl	8008460 <lwip_htons>
 800b71a:	f010 0003 	ands.w	r0, r0, #3
 800b71e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800b720:	bf18      	it	ne
 800b722:	2001      	movne	r0, #1
 800b724:	4450      	add	r0, sl
 800b726:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 800b728:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b72a:	8523      	strh	r3, [r4, #40]	@ 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800b72c:	f7fe fa4c 	bl	8009bc8 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800b730:	6869      	ldr	r1, [r5, #4]
 800b732:	890b      	ldrh	r3, [r1, #8]
 800b734:	b13b      	cbz	r3, 800b746 <tcp_receive+0x666>
            if (recv_data) {
 800b736:	4b9b      	ldr	r3, [pc, #620]	@ (800b9a4 <tcp_receive+0x8c4>)
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d05b      	beq.n	800b7f6 <tcp_receive+0x716>
              pbuf_cat(recv_data, cseg->p);
 800b73e:	f7fd ff1d 	bl	800957c <pbuf_cat>
            cseg->p = NULL;
 800b742:	2300      	movs	r3, #0
 800b744:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b746:	68eb      	ldr	r3, [r5, #12]
 800b748:	8998      	ldrh	r0, [r3, #12]
 800b74a:	f7fc fe89 	bl	8008460 <lwip_htons>
 800b74e:	07c3      	lsls	r3, r0, #31
 800b750:	d509      	bpl.n	800b766 <tcp_receive+0x686>
            recv_flags |= TF_GOT_FIN;
 800b752:	4a95      	ldr	r2, [pc, #596]	@ (800b9a8 <tcp_receive+0x8c8>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b754:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 800b756:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b758:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 800b75a:	f043 0320 	orr.w	r3, r3, #32
 800b75e:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b760:	d101      	bne.n	800b766 <tcp_receive+0x686>
              pcb->state = CLOSE_WAIT;
 800b762:	2307      	movs	r3, #7
 800b764:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800b766:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 800b768:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 800b76a:	6763      	str	r3, [r4, #116]	@ 0x74
          tcp_seg_free(cseg);
 800b76c:	f7fe fb6e 	bl	8009e4c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b770:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800b772:	2d00      	cmp	r5, #0
 800b774:	d058      	beq.n	800b828 <tcp_receive+0x748>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b776:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800b778:	6a61      	ldr	r1, [r4, #36]	@ 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b77a:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800b77c:	428b      	cmp	r3, r1
 800b77e:	d153      	bne.n	800b828 <tcp_receive+0x748>
          seqno = pcb->ooseq->tcphdr->seqno;
 800b780:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b782:	8990      	ldrh	r0, [r2, #12]
 800b784:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800b788:	f7fc fe6a 	bl	8008460 <lwip_htons>
 800b78c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b78e:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b792:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b796:	bf18      	it	ne
 800b798:	2001      	movne	r0, #1
 800b79a:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b79c:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b79e:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b7a0:	f8b4 a028 	ldrh.w	sl, [r4, #40]	@ 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b7a4:	6260      	str	r0, [r4, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b7a6:	8998      	ldrh	r0, [r3, #12]
 800b7a8:	f7fc fe5a 	bl	8008460 <lwip_htons>
 800b7ac:	f010 0003 	ands.w	r0, r0, #3
 800b7b0:	bf18      	it	ne
 800b7b2:	2001      	movne	r0, #1
 800b7b4:	4458      	add	r0, fp
 800b7b6:	4582      	cmp	sl, r0
 800b7b8:	d2a9      	bcs.n	800b70e <tcp_receive+0x62e>
 800b7ba:	464b      	mov	r3, r9
 800b7bc:	f240 622b 	movw	r2, #1579	@ 0x62b
 800b7c0:	4641      	mov	r1, r8
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	f004 fbb6 	bl	800ff34 <iprintf>
 800b7c8:	e7a1      	b.n	800b70e <tcp_receive+0x62e>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b7ca:	4b79      	ldr	r3, [pc, #484]	@ (800b9b0 <tcp_receive+0x8d0>)
 800b7cc:	f240 5294 	movw	r2, #1428	@ 0x594
 800b7d0:	4978      	ldr	r1, [pc, #480]	@ (800b9b4 <tcp_receive+0x8d4>)
 800b7d2:	4876      	ldr	r0, [pc, #472]	@ (800b9ac <tcp_receive+0x8cc>)
 800b7d4:	f004 fbae 	bl	800ff34 <iprintf>
 800b7d8:	e686      	b.n	800b4e8 <tcp_receive+0x408>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b7da:	f64f 71ff 	movw	r1, #65535	@ 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b7de:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b7e0:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b7e2:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b7e4:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b7e8:	b292      	uxth	r2, r2
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	f63f af24 	bhi.w	800b638 <tcp_receive+0x558>
 800b7f0:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
 800b7f4:	e56b      	b.n	800b2ce <tcp_receive+0x1ee>
              recv_data = cseg->p;
 800b7f6:	6019      	str	r1, [r3, #0]
 800b7f8:	e7a3      	b.n	800b742 <tcp_receive+0x662>
          struct tcp_seg *next, *prev = NULL;
 800b7fa:	f04f 0800 	mov.w	r8, #0
              if (inseg.len > next->len) {
 800b7fe:	486e      	ldr	r0, [pc, #440]	@ (800b9b8 <tcp_receive+0x8d8>)
 800b800:	892b      	ldrh	r3, [r5, #8]
 800b802:	8902      	ldrh	r2, [r0, #8]
 800b804:	429a      	cmp	r2, r3
 800b806:	f67f ace0 	bls.w	800b1ca <tcp_receive+0xea>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b80a:	f7fe fb2d 	bl	8009e68 <tcp_seg_copy>
                if (cseg != NULL) {
 800b80e:	2800      	cmp	r0, #0
 800b810:	f43f acdb 	beq.w	800b1ca <tcp_receive+0xea>
                  if (prev != NULL) {
 800b814:	f1b8 0f00 	cmp.w	r8, #0
 800b818:	f000 80c2 	beq.w	800b9a0 <tcp_receive+0x8c0>
                    prev->next = cseg;
 800b81c:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 800b820:	4629      	mov	r1, r5
 800b822:	f7ff fb8b 	bl	800af3c <tcp_oos_insert_segment>
 800b826:	e4d0      	b.n	800b1ca <tcp_receive+0xea>
        tcp_ack(pcb);
 800b828:	8b63      	ldrh	r3, [r4, #26]
 800b82a:	07d8      	lsls	r0, r3, #31
 800b82c:	d50a      	bpl.n	800b844 <tcp_receive+0x764>
 800b82e:	f023 0301 	bic.w	r3, r3, #1
 800b832:	f043 0302 	orr.w	r3, r3, #2
 800b836:	8363      	strh	r3, [r4, #26]
 800b838:	e501      	b.n	800b23e <tcp_receive+0x15e>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b83a:	485f      	ldr	r0, [pc, #380]	@ (800b9b8 <tcp_receive+0x8d8>)
 800b83c:	f7fe fb14 	bl	8009e68 <tcp_seg_copy>
 800b840:	6760      	str	r0, [r4, #116]	@ 0x74
 800b842:	e4c2      	b.n	800b1ca <tcp_receive+0xea>
        tcp_ack(pcb);
 800b844:	f043 0301 	orr.w	r3, r3, #1
 800b848:	8363      	strh	r3, [r4, #26]
 800b84a:	e4f8      	b.n	800b23e <tcp_receive+0x15e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b84c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b850:	8998      	ldrh	r0, [r3, #12]
 800b852:	f7fc fe05 	bl	8008460 <lwip_htons>
 800b856:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b858:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b85c:	f100 8090 	bmi.w	800b980 <tcp_receive+0x8a0>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b860:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b862:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800b864:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b868:	f7fc fdfa 	bl	8008460 <lwip_htons>
 800b86c:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 800b86e:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b872:	d503      	bpl.n	800b87c <tcp_receive+0x79c>
            inseg.len -= 1;
 800b874:	3901      	subs	r1, #1
 800b876:	b289      	uxth	r1, r1
 800b878:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800b87c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800b880:	f7fd fdf8 	bl	8009474 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b884:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b888:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800b88c:	8998      	ldrh	r0, [r3, #12]
 800b88e:	f7fc fde7 	bl	8008460 <lwip_htons>
 800b892:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b896:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800b898:	bf18      	it	ne
 800b89a:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b89c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800b89e:	442b      	add	r3, r5
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b8a4:	4413      	add	r3, r2
 800b8a6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800b8a8:	440a      	add	r2, r1
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	f43f ae61 	beq.w	800b572 <tcp_receive+0x492>
 800b8b0:	4b3f      	ldr	r3, [pc, #252]	@ (800b9b0 <tcp_receive+0x8d0>)
 800b8b2:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800b8b6:	4941      	ldr	r1, [pc, #260]	@ (800b9bc <tcp_receive+0x8dc>)
 800b8b8:	483c      	ldr	r0, [pc, #240]	@ (800b9ac <tcp_receive+0x8cc>)
 800b8ba:	f004 fb3b 	bl	800ff34 <iprintf>
 800b8be:	e658      	b.n	800b572 <tcp_receive+0x492>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b8c0:	4b3b      	ldr	r3, [pc, #236]	@ (800b9b0 <tcp_receive+0x8d0>)
 800b8c2:	f240 6207 	movw	r2, #1543	@ 0x607
 800b8c6:	493e      	ldr	r1, [pc, #248]	@ (800b9c0 <tcp_receive+0x8e0>)
 800b8c8:	4838      	ldr	r0, [pc, #224]	@ (800b9ac <tcp_receive+0x8cc>)
 800b8ca:	f004 fb33 	bl	800ff34 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b8ce:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800b8d0:	883a      	ldrh	r2, [r7, #0]
 800b8d2:	e6f8      	b.n	800b6c6 <tcp_receive+0x5e6>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b8d4:	4838      	ldr	r0, [pc, #224]	@ (800b9b8 <tcp_receive+0x8d8>)
 800b8d6:	f7fe fac7 	bl	8009e68 <tcp_seg_copy>
                  if (cseg != NULL) {
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	f43f ac75 	beq.w	800b1ca <tcp_receive+0xea>
                    tcp_oos_insert_segment(cseg, next);
 800b8e0:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 800b8e2:	6760      	str	r0, [r4, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b8e4:	f7ff fb2a 	bl	800af3c <tcp_oos_insert_segment>
 800b8e8:	e46f      	b.n	800b1ca <tcp_receive+0xea>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b8ea:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800b8ee:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800b8f0:	4413      	add	r3, r2
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d901      	bls.n	800b8fc <tcp_receive+0x81c>
 800b8f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b8fc:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
                tcp_rexmit_fast(pcb);
 800b900:	4620      	mov	r0, r4
 800b902:	f001 fdc9 	bl	800d498 <tcp_rexmit_fast>
      if (!found_dupack) {
 800b906:	e534      	b.n	800b372 <tcp_receive+0x292>
                TCP_SEQ_GT(seqno + tcplen,
 800b908:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	dc01      	bgt.n	800b914 <tcp_receive+0x834>
            pcb->ooseq = next;
 800b910:	6765      	str	r5, [r4, #116]	@ 0x74
 800b912:	e6d3      	b.n	800b6bc <tcp_receive+0x5dc>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b914:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b918:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b91c:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b920:	8998      	ldrh	r0, [r3, #12]
 800b922:	f7fc fd9d 	bl	8008460 <lwip_htons>
 800b926:	0781      	lsls	r1, r0, #30
 800b928:	d504      	bpl.n	800b934 <tcp_receive+0x854>
                inseg.len -= 1;
 800b92a:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800b92e:	3b01      	subs	r3, #1
 800b930:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800b934:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 800b938:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800b93c:	f7fd fd9a 	bl	8009474 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b940:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b944:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 800b948:	8998      	ldrh	r0, [r3, #12]
 800b94a:	f7fc fd89 	bl	8008460 <lwip_htons>
 800b94e:	f010 0303 	ands.w	r3, r0, #3
 800b952:	bf18      	it	ne
 800b954:	2301      	movne	r3, #1
 800b956:	eb08 0203 	add.w	r2, r8, r3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b95a:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 800b95c:	b292      	uxth	r2, r2
 800b95e:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b960:	6859      	ldr	r1, [r3, #4]
 800b962:	6833      	ldr	r3, [r6, #0]
 800b964:	4413      	add	r3, r2
 800b966:	428b      	cmp	r3, r1
 800b968:	d0d2      	beq.n	800b910 <tcp_receive+0x830>
 800b96a:	4b11      	ldr	r3, [pc, #68]	@ (800b9b0 <tcp_receive+0x8d0>)
 800b96c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800b970:	4914      	ldr	r1, [pc, #80]	@ (800b9c4 <tcp_receive+0x8e4>)
 800b972:	480e      	ldr	r0, [pc, #56]	@ (800b9ac <tcp_receive+0x8cc>)
 800b974:	f004 fade 	bl	800ff34 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800b978:	883a      	ldrh	r2, [r7, #0]
 800b97a:	6831      	ldr	r1, [r6, #0]
 800b97c:	4411      	add	r1, r2
 800b97e:	e7c7      	b.n	800b910 <tcp_receive+0x830>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b980:	899d      	ldrh	r5, [r3, #12]
 800b982:	4628      	mov	r0, r5
 800b984:	f425 557c 	bic.w	r5, r5, #16128	@ 0x3f00
 800b988:	f7fc fd6a 	bl	8008460 <lwip_htons>
 800b98c:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 800b990:	f7fc fd66 	bl	8008460 <lwip_htons>
 800b994:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b998:	4328      	orrs	r0, r5
 800b99a:	8198      	strh	r0, [r3, #12]
 800b99c:	b280      	uxth	r0, r0
 800b99e:	e760      	b.n	800b862 <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 800b9a0:	6760      	str	r0, [r4, #116]	@ 0x74
 800b9a2:	e73d      	b.n	800b820 <tcp_receive+0x740>
 800b9a4:	24020770 	.word	0x24020770
 800b9a8:	24020774 	.word	0x24020774
 800b9ac:	080110dc 	.word	0x080110dc
 800b9b0:	08013178 	.word	0x08013178
 800b9b4:	08013238 	.word	0x08013238
 800b9b8:	24020794 	.word	0x24020794
 800b9bc:	08013268 	.word	0x08013268
 800b9c0:	080132dc 	.word	0x080132dc
 800b9c4:	080132a0 	.word	0x080132a0
 800b9c8:	080132fc 	.word	0x080132fc
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	899d      	ldrh	r5, [r3, #12]
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	f425 557c 	bic.w	r5, r5, #16128	@ 0x3f00
 800b9d6:	f7fc fd43 	bl	8008460 <lwip_htons>
 800b9da:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 800b9de:	f7fc fd3f 	bl	8008460 <lwip_htons>
 800b9e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b9e6:	ea40 0205 	orr.w	r2, r0, r5
 800b9ea:	68d9      	ldr	r1, [r3, #12]
 800b9ec:	818a      	strh	r2, [r1, #12]
 800b9ee:	e545      	b.n	800b47c <tcp_receive+0x39c>
 800b9f0:	f8df 9004 	ldr.w	r9, [pc, #4]	@ 800b9f8 <tcp_receive+0x918>
 800b9f4:	e5ab      	b.n	800b54e <tcp_receive+0x46e>
 800b9f6:	bf00      	nop
 800b9f8:	24020794 	.word	0x24020794

0800b9fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ba00:	4604      	mov	r4, r0
 800ba02:	2800      	cmp	r0, #0
 800ba04:	f000 808b 	beq.w	800bb1e <tcp_parseopt+0x122>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ba08:	4b52      	ldr	r3, [pc, #328]	@ (800bb54 <tcp_parseopt+0x158>)
 800ba0a:	881d      	ldrh	r5, [r3, #0]
 800ba0c:	2d00      	cmp	r5, #0
 800ba0e:	d036      	beq.n	800ba7e <tcp_parseopt+0x82>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba10:	4a51      	ldr	r2, [pc, #324]	@ (800bb58 <tcp_parseopt+0x15c>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ba12:	2300      	movs	r3, #0
 800ba14:	4e51      	ldr	r6, [pc, #324]	@ (800bb5c <tcp_parseopt+0x160>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba16:	6810      	ldr	r0, [r2, #0]
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4a51      	ldr	r2, [pc, #324]	@ (800bb60 <tcp_parseopt+0x164>)
    return opts[optidx];
 800ba1c:	4f51      	ldr	r7, [pc, #324]	@ (800bb64 <tcp_parseopt+0x168>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba1e:	f8b2 c000 	ldrh.w	ip, [r2]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ba22:	8033      	strh	r3, [r6, #0]
tcp_parseopt(struct tcp_pcb *pcb)
 800ba24:	468e      	mov	lr, r1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ba26:	428d      	cmp	r5, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba28:	fa1f f88e 	uxth.w	r8, lr
  u16_t optidx = tcp_optidx++;
 800ba2c:	f101 0201 	add.w	r2, r1, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ba30:	f240 8087 	bls.w	800bb42 <tcp_parseopt+0x146>
  u16_t optidx = tcp_optidx++;
 800ba34:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba36:	b1c0      	cbz	r0, 800ba6a <tcp_parseopt+0x6e>
 800ba38:	45c4      	cmp	ip, r8
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ba3a:	eba2 030c 	sub.w	r3, r2, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba3e:	d814      	bhi.n	800ba6a <tcp_parseopt+0x6e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ba40:	3b01      	subs	r3, #1
    return tcphdr_opt2[idx];
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	5cc3      	ldrb	r3, [r0, r3]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d014      	beq.n	800ba74 <tcp_parseopt+0x78>
 800ba4a:	2b02      	cmp	r3, #2
 800ba4c:	d019      	beq.n	800ba82 <tcp_parseopt+0x86>
 800ba4e:	b1ab      	cbz	r3, 800ba7c <tcp_parseopt+0x80>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba50:	b108      	cbz	r0, 800ba56 <tcp_parseopt+0x5a>
 800ba52:	4562      	cmp	r2, ip
 800ba54:	d24e      	bcs.n	800baf4 <tcp_parseopt+0xf8>
    return opts[optidx];
 800ba56:	4b43      	ldr	r3, [pc, #268]	@ (800bb64 <tcp_parseopt+0x168>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d975      	bls.n	800bb4e <tcp_parseopt+0x152>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ba62:	440b      	add	r3, r1
 800ba64:	b299      	uxth	r1, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ba66:	2301      	movs	r3, #1
 800ba68:	e7dc      	b.n	800ba24 <tcp_parseopt+0x28>
    return opts[optidx];
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	4473      	add	r3, lr
 800ba6e:	7d1b      	ldrb	r3, [r3, #20]
      switch (opt) {
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d1ea      	bne.n	800ba4a <tcp_parseopt+0x4e>
 800ba74:	f10e 0e01 	add.w	lr, lr, #1
  u16_t optidx = tcp_optidx++;
 800ba78:	4611      	mov	r1, r2
 800ba7a:	e7d4      	b.n	800ba26 <tcp_parseopt+0x2a>
 800ba7c:	8032      	strh	r2, [r6, #0]
      }
    }
  }
}
 800ba7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t optidx = tcp_optidx++;
 800ba82:	1c8b      	adds	r3, r1, #2
 800ba84:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ba86:	b108      	cbz	r0, 800ba8c <tcp_parseopt+0x90>
 800ba88:	4562      	cmp	r2, ip
 800ba8a:	d22e      	bcs.n	800baea <tcp_parseopt+0xee>
    return opts[optidx];
 800ba8c:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 800bb64 <tcp_parseopt+0x168>
 800ba90:	f8de e000 	ldr.w	lr, [lr]
 800ba94:	4472      	add	r2, lr
 800ba96:	7d12      	ldrb	r2, [r2, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ba98:	2a04      	cmp	r2, #4
 800ba9a:	d156      	bne.n	800bb4a <tcp_parseopt+0x14e>
 800ba9c:	1c5a      	adds	r2, r3, #1
 800ba9e:	42aa      	cmp	r2, r5
 800baa0:	da53      	bge.n	800bb4a <tcp_parseopt+0x14e>
  u16_t optidx = tcp_optidx++;
 800baa2:	1cca      	adds	r2, r1, #3
 800baa4:	3104      	adds	r1, #4
 800baa6:	b292      	uxth	r2, r2
 800baa8:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800baaa:	2800      	cmp	r0, #0
 800baac:	d03f      	beq.n	800bb2e <tcp_parseopt+0x132>
 800baae:	459c      	cmp	ip, r3
 800bab0:	d825      	bhi.n	800bafe <tcp_parseopt+0x102>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bab2:	eba3 030c 	sub.w	r3, r3, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bab6:	4594      	cmp	ip, r2
    return tcphdr_opt2[idx];
 800bab8:	b2db      	uxtb	r3, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800baba:	f810 e003 	ldrb.w	lr, [r0, r3]
 800babe:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bac2:	d927      	bls.n	800bb14 <tcp_parseopt+0x118>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bac4:	4b27      	ldr	r3, [pc, #156]	@ (800bb64 <tcp_parseopt+0x168>)
 800bac6:	f8d3 8000 	ldr.w	r8, [r3]
    return opts[optidx];
 800baca:	4490      	add	r8, r2
 800bacc:	f898 3014 	ldrb.w	r3, [r8, #20]
          mss |= tcp_get_next_optbyte();
 800bad0:	ea43 030e 	orr.w	r3, r3, lr
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bad4:	f240 58b3 	movw	r8, #1459	@ 0x5b3
 800bad8:	f240 5eb4 	movw	lr, #1460	@ 0x5b4
 800badc:	1e5a      	subs	r2, r3, #1
 800bade:	b292      	uxth	r2, r2
 800bae0:	4542      	cmp	r2, r8
 800bae2:	bf88      	it	hi
 800bae4:	4673      	movhi	r3, lr
 800bae6:	8663      	strh	r3, [r4, #50]	@ 0x32
          break;
 800bae8:	e7bd      	b.n	800ba66 <tcp_parseopt+0x6a>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800baea:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800baee:	b2d2      	uxtb	r2, r2
 800baf0:	5c82      	ldrb	r2, [r0, r2]
 800baf2:	e7d1      	b.n	800ba98 <tcp_parseopt+0x9c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800baf4:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800baf8:	b2d2      	uxtb	r2, r2
 800bafa:	5c83      	ldrb	r3, [r0, r2]
 800bafc:	e7af      	b.n	800ba5e <tcp_parseopt+0x62>
    return opts[optidx];
 800bafe:	f8df e064 	ldr.w	lr, [pc, #100]	@ 800bb64 <tcp_parseopt+0x168>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bb02:	4594      	cmp	ip, r2
    return opts[optidx];
 800bb04:	f8de e000 	ldr.w	lr, [lr]
 800bb08:	4473      	add	r3, lr
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bb0a:	f893 e014 	ldrb.w	lr, [r3, #20]
 800bb0e:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bb12:	d8d7      	bhi.n	800bac4 <tcp_parseopt+0xc8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bb14:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800bb18:	b2d2      	uxtb	r2, r2
 800bb1a:	5c83      	ldrb	r3, [r0, r2]
 800bb1c:	e7d8      	b.n	800bad0 <tcp_parseopt+0xd4>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800bb1e:	4b12      	ldr	r3, [pc, #72]	@ (800bb68 <tcp_parseopt+0x16c>)
 800bb20:	f240 727d 	movw	r2, #1917	@ 0x77d
 800bb24:	4911      	ldr	r1, [pc, #68]	@ (800bb6c <tcp_parseopt+0x170>)
 800bb26:	4812      	ldr	r0, [pc, #72]	@ (800bb70 <tcp_parseopt+0x174>)
 800bb28:	f004 fa04 	bl	800ff34 <iprintf>
 800bb2c:	e76c      	b.n	800ba08 <tcp_parseopt+0xc>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bb2e:	f8df e034 	ldr.w	lr, [pc, #52]	@ 800bb64 <tcp_parseopt+0x168>
 800bb32:	f8de 8000 	ldr.w	r8, [lr]
    return opts[optidx];
 800bb36:	4443      	add	r3, r8
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bb38:	f893 e014 	ldrb.w	lr, [r3, #20]
 800bb3c:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bb40:	e7c3      	b.n	800baca <tcp_parseopt+0xce>
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d09b      	beq.n	800ba7e <tcp_parseopt+0x82>
 800bb46:	8031      	strh	r1, [r6, #0]
 800bb48:	e799      	b.n	800ba7e <tcp_parseopt+0x82>
 800bb4a:	8033      	strh	r3, [r6, #0]
 800bb4c:	e797      	b.n	800ba7e <tcp_parseopt+0x82>
  u16_t optidx = tcp_optidx++;
 800bb4e:	3102      	adds	r1, #2
 800bb50:	8031      	strh	r1, [r6, #0]
 800bb52:	e794      	b.n	800ba7e <tcp_parseopt+0x82>
 800bb54:	2402078e 	.word	0x2402078e
 800bb58:	24020788 	.word	0x24020788
 800bb5c:	24020784 	.word	0x24020784
 800bb60:	2402078c 	.word	0x2402078c
 800bb64:	24020790 	.word	0x24020790
 800bb68:	08013178 	.word	0x08013178
 800bb6c:	08013324 	.word	0x08013324
 800bb70:	080110dc 	.word	0x080110dc

0800bb74 <tcp_input>:
{
 800bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb78:	4604      	mov	r4, r0
 800bb7a:	b087      	sub	sp, #28
  LWIP_ASSERT_CORE_LOCKED();
 800bb7c:	f7f8 faa8 	bl	80040d0 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800bb80:	2c00      	cmp	r4, #0
 800bb82:	f000 80d5 	beq.w	800bd30 <tcp_input+0x1bc>
  if (p->len < TCP_HLEN) {
 800bb86:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 800bb88:	4e6d      	ldr	r6, [pc, #436]	@ (800bd40 <tcp_input+0x1cc>)
 800bb8a:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 800bb8c:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 800bb8e:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 800bb90:	d805      	bhi.n	800bb9e <tcp_input+0x2a>
  pbuf_free(p);
 800bb92:	4620      	mov	r0, r4
}
 800bb94:	b007      	add	sp, #28
 800bb96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800bb9a:	f7fd bb53 	b.w	8009244 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bb9e:	4f69      	ldr	r7, [pc, #420]	@ (800bd44 <tcp_input+0x1d0>)
 800bba0:	6839      	ldr	r1, [r7, #0]
 800bba2:	6978      	ldr	r0, [r7, #20]
 800bba4:	f003 f99e 	bl	800eee4 <ip4_addr_isbroadcast_u32>
 800bba8:	4605      	mov	r5, r0
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d1f1      	bne.n	800bb92 <tcp_input+0x1e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bbb4:	2be0      	cmp	r3, #224	@ 0xe0
 800bbb6:	d0ec      	beq.n	800bb92 <tcp_input+0x1e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800bbb8:	6833      	ldr	r3, [r6, #0]
 800bbba:	8998      	ldrh	r0, [r3, #12]
 800bbbc:	f7fc fc50 	bl	8008460 <lwip_htons>
 800bbc0:	0a81      	lsrs	r1, r0, #10
 800bbc2:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bbc6:	2913      	cmp	r1, #19
 800bbc8:	d9e3      	bls.n	800bb92 <tcp_input+0x1e>
 800bbca:	8923      	ldrh	r3, [r4, #8]
 800bbcc:	428b      	cmp	r3, r1
 800bbce:	d3e0      	bcc.n	800bb92 <tcp_input+0x1e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bbd0:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 800bbd4:	8962      	ldrh	r2, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bbd6:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 800bd78 <tcp_input+0x204>
 800bbda:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800bbdc:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bd7c <tcp_input+0x208>
  if (p->len >= hdrlen_bytes) {
 800bbe0:	428a      	cmp	r2, r1
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bbe2:	f8a9 3000 	strh.w	r3, [r9]
  tcphdr_opt2 = NULL;
 800bbe6:	f8c8 5000 	str.w	r5, [r8]
  if (p->len >= hdrlen_bytes) {
 800bbea:	f080 819d 	bcs.w	800bf28 <tcp_input+0x3b4>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800bbee:	6823      	ldr	r3, [r4, #0]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f000 8379 	beq.w	800c2e8 <tcp_input+0x774>
    pbuf_remove_header(p, TCP_HLEN);
 800bbf6:	2114      	movs	r1, #20
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f7fd fac1 	bl	8009180 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800bbfe:	8965      	ldrh	r5, [r4, #10]
 800bc00:	4b51      	ldr	r3, [pc, #324]	@ (800bd48 <tcp_input+0x1d4>)
    pbuf_remove_header(p, tcphdr_opt1len);
 800bc02:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bc04:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800bc08:	4629      	mov	r1, r5
    tcphdr_opt1len = p->len;
 800bc0a:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800bc0c:	f7fd fab8 	bl	8009180 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bc10:	ebaa 0905 	sub.w	r9, sl, r5
    if (opt2len > p->next->len) {
 800bc14:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bc16:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 800bc1a:	8943      	ldrh	r3, [r0, #10]
 800bc1c:	454b      	cmp	r3, r9
 800bc1e:	d3b8      	bcc.n	800bb92 <tcp_input+0x1e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bc20:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800bc22:	4649      	mov	r1, r9
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bc24:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 800bc28:	f7fd faaa 	bl	8009180 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bc2c:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bc2e:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bc30:	442b      	add	r3, r5
 800bc32:	eba3 030a 	sub.w	r3, r3, sl
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bc3a:	2a00      	cmp	r2, #0
 800bc3c:	f040 835b 	bne.w	800c2f6 <tcp_input+0x782>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800bc40:	6822      	ldr	r2, [r4, #0]
 800bc42:	8912      	ldrh	r2, [r2, #8]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d005      	beq.n	800bc54 <tcp_input+0xe0>
 800bc48:	4b40      	ldr	r3, [pc, #256]	@ (800bd4c <tcp_input+0x1d8>)
 800bc4a:	22e0      	movs	r2, #224	@ 0xe0
 800bc4c:	4940      	ldr	r1, [pc, #256]	@ (800bd50 <tcp_input+0x1dc>)
 800bc4e:	4841      	ldr	r0, [pc, #260]	@ (800bd54 <tcp_input+0x1e0>)
 800bc50:	f004 f970 	bl	800ff34 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bc54:	6835      	ldr	r5, [r6, #0]
 800bc56:	8828      	ldrh	r0, [r5, #0]
 800bc58:	f7fc fc02 	bl	8008460 <lwip_htons>
 800bc5c:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bc5e:	6835      	ldr	r5, [r6, #0]
 800bc60:	8868      	ldrh	r0, [r5, #2]
 800bc62:	f7fc fbfd 	bl	8008460 <lwip_htons>
 800bc66:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bc68:	6835      	ldr	r5, [r6, #0]
 800bc6a:	6868      	ldr	r0, [r5, #4]
 800bc6c:	f7fc fbfc 	bl	8008468 <lwip_htonl>
 800bc70:	4b39      	ldr	r3, [pc, #228]	@ (800bd58 <tcp_input+0x1e4>)
 800bc72:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bc74:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bc76:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bc78:	68a8      	ldr	r0, [r5, #8]
 800bc7a:	f7fc fbf5 	bl	8008468 <lwip_htonl>
 800bc7e:	4b37      	ldr	r3, [pc, #220]	@ (800bd5c <tcp_input+0x1e8>)
 800bc80:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bc82:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bc84:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bc86:	89e8      	ldrh	r0, [r5, #14]
 800bc88:	f7fc fbea 	bl	8008460 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800bc8c:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bc8e:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 800bc90:	8998      	ldrh	r0, [r3, #12]
 800bc92:	f7fc fbe5 	bl	8008460 <lwip_htons>
 800bc96:	4932      	ldr	r1, [pc, #200]	@ (800bd60 <tcp_input+0x1ec>)
 800bc98:	f000 033f 	and.w	r3, r0, #63	@ 0x3f
  tcplen = p->tot_len;
 800bc9c:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 800bc9e:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800bca0:	0781      	lsls	r1, r0, #30
 800bca2:	f040 8147 	bne.w	800bf34 <tcp_input+0x3c0>
  tcplen = p->tot_len;
 800bca6:	4b2f      	ldr	r3, [pc, #188]	@ (800bd64 <tcp_input+0x1f0>)
 800bca8:	9305      	str	r3, [sp, #20]
 800bcaa:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcac:	4b2e      	ldr	r3, [pc, #184]	@ (800bd68 <tcp_input+0x1f4>)
 800bcae:	681d      	ldr	r5, [r3, #0]
 800bcb0:	2d00      	cmp	r5, #0
 800bcb2:	f000 80e8 	beq.w	800be86 <tcp_input+0x312>
  prev = NULL;
 800bcb6:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bcba:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800bd4c <tcp_input+0x1d8>
 800bcbe:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 800bd80 <tcp_input+0x20c>
 800bcc2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800bd54 <tcp_input+0x1e0>
 800bcc6:	e017      	b.n	800bcf8 <tcp_input+0x184>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bcc8:	2b0a      	cmp	r3, #10
 800bcca:	d021      	beq.n	800bd10 <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d028      	beq.n	800bd22 <tcp_input+0x1ae>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bcd0:	7a2a      	ldrb	r2, [r5, #8]
 800bcd2:	b132      	cbz	r2, 800bce2 <tcp_input+0x16e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bcda:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d104      	bne.n	800bcec <tcp_input+0x178>
    if (pcb->remote_port == tcphdr->src &&
 800bce2:	6833      	ldr	r3, [r6, #0]
 800bce4:	8b29      	ldrh	r1, [r5, #24]
 800bce6:	881a      	ldrh	r2, [r3, #0]
 800bce8:	4291      	cmp	r1, r2
 800bcea:	d04b      	beq.n	800bd84 <tcp_input+0x210>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcec:	68eb      	ldr	r3, [r5, #12]
 800bcee:	46a8      	mov	r8, r5
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f000 80c8 	beq.w	800be86 <tcp_input+0x312>
 800bcf6:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bcf8:	7d2b      	ldrb	r3, [r5, #20]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1e4      	bne.n	800bcc8 <tcp_input+0x154>
 800bcfe:	4653      	mov	r3, sl
 800bd00:	22fb      	movs	r2, #251	@ 0xfb
 800bd02:	4659      	mov	r1, fp
 800bd04:	4648      	mov	r0, r9
 800bd06:	f004 f915 	bl	800ff34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bd0a:	7d2b      	ldrb	r3, [r5, #20]
 800bd0c:	2b0a      	cmp	r3, #10
 800bd0e:	d1dd      	bne.n	800bccc <tcp_input+0x158>
 800bd10:	4653      	mov	r3, sl
 800bd12:	22fc      	movs	r2, #252	@ 0xfc
 800bd14:	4915      	ldr	r1, [pc, #84]	@ (800bd6c <tcp_input+0x1f8>)
 800bd16:	4648      	mov	r0, r9
 800bd18:	f004 f90c 	bl	800ff34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bd1c:	7d2b      	ldrb	r3, [r5, #20]
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d1d6      	bne.n	800bcd0 <tcp_input+0x15c>
 800bd22:	4653      	mov	r3, sl
 800bd24:	22fd      	movs	r2, #253	@ 0xfd
 800bd26:	4912      	ldr	r1, [pc, #72]	@ (800bd70 <tcp_input+0x1fc>)
 800bd28:	4648      	mov	r0, r9
 800bd2a:	f004 f903 	bl	800ff34 <iprintf>
 800bd2e:	e7cf      	b.n	800bcd0 <tcp_input+0x15c>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800bd30:	4b06      	ldr	r3, [pc, #24]	@ (800bd4c <tcp_input+0x1d8>)
 800bd32:	2283      	movs	r2, #131	@ 0x83
 800bd34:	490f      	ldr	r1, [pc, #60]	@ (800bd74 <tcp_input+0x200>)
 800bd36:	4807      	ldr	r0, [pc, #28]	@ (800bd54 <tcp_input+0x1e0>)
 800bd38:	f004 f8fc 	bl	800ff34 <iprintf>
 800bd3c:	e723      	b.n	800bb86 <tcp_input+0x12>
 800bd3e:	bf00      	nop
 800bd40:	24020790 	.word	0x24020790
 800bd44:	24019c98 	.word	0x24019c98
 800bd48:	2402078c 	.word	0x2402078c
 800bd4c:	08013178 	.word	0x08013178
 800bd50:	08013374 	.word	0x08013374
 800bd54:	080110dc 	.word	0x080110dc
 800bd58:	24020780 	.word	0x24020780
 800bd5c:	2402077c 	.word	0x2402077c
 800bd60:	24020775 	.word	0x24020775
 800bd64:	24020776 	.word	0x24020776
 800bd68:	2402075c 	.word	0x2402075c
 800bd6c:	080133bc 	.word	0x080133bc
 800bd70:	080133e8 	.word	0x080133e8
 800bd74:	08013340 	.word	0x08013340
 800bd78:	2402078e 	.word	0x2402078e
 800bd7c:	24020788 	.word	0x24020788
 800bd80:	08013394 	.word	0x08013394
    if (pcb->remote_port == tcphdr->src &&
 800bd84:	885b      	ldrh	r3, [r3, #2]
 800bd86:	8aea      	ldrh	r2, [r5, #22]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d1af      	bne.n	800bcec <tcp_input+0x178>
        pcb->local_port == tcphdr->dest &&
 800bd8c:	686a      	ldr	r2, [r5, #4]
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d1ab      	bne.n	800bcec <tcp_input+0x178>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bd94:	682a      	ldr	r2, [r5, #0]
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d1a7      	bne.n	800bcec <tcp_input+0x178>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bd9c:	68eb      	ldr	r3, [r5, #12]
 800bd9e:	42ab      	cmp	r3, r5
 800bda0:	f000 843d 	beq.w	800c61e <tcp_input+0xaaa>
      if (prev != NULL) {
 800bda4:	f1b8 0f00 	cmp.w	r8, #0
 800bda8:	d009      	beq.n	800bdbe <tcp_input+0x24a>
        pcb->next = tcp_active_pcbs;
 800bdaa:	4a6f      	ldr	r2, [pc, #444]	@ (800bf68 <tcp_input+0x3f4>)
        prev->next = pcb->next;
 800bdac:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 800bdb0:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 800bdb2:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 800bdb4:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bdb6:	68eb      	ldr	r3, [r5, #12]
 800bdb8:	42ab      	cmp	r3, r5
 800bdba:	f000 843e 	beq.w	800c63a <tcp_input+0xac6>
    inseg.next = NULL;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	4f6a      	ldr	r7, [pc, #424]	@ (800bf6c <tcp_input+0x3f8>)
    recv_data = NULL;
 800bdc2:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 800bf88 <tcp_input+0x414>
    recv_flags = 0;
 800bdc6:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800bf8c <tcp_input+0x418>
    recv_acked = 0;
 800bdca:	f8df a1c4 	ldr.w	sl, [pc, #452]	@ 800bf90 <tcp_input+0x41c>
    inseg.next = NULL;
 800bdce:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800bdd0:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 800bdd4:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800bdd8:	f8aa 3000 	strh.w	r3, [sl]
    if (flags & TCP_PSH) {
 800bddc:	4b64      	ldr	r3, [pc, #400]	@ (800bf70 <tcp_input+0x3fc>)
    inseg.len = p->tot_len;
 800bdde:	8922      	ldrh	r2, [r4, #8]
    if (flags & TCP_PSH) {
 800bde0:	781b      	ldrb	r3, [r3, #0]
    inseg.len = p->tot_len;
 800bde2:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 800bde4:	0719      	lsls	r1, r3, #28
    inseg.tcphdr = tcphdr;
 800bde6:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 800bde8:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 800bdea:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 800bdec:	d503      	bpl.n	800bdf6 <tcp_input+0x282>
      p->flags |= PBUF_FLAG_PUSH;
 800bdee:	7b62      	ldrb	r2, [r4, #13]
 800bdf0:	f042 0201 	orr.w	r2, r2, #1
 800bdf4:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 800bdf6:	6faa      	ldr	r2, [r5, #120]	@ 0x78
 800bdf8:	2a00      	cmp	r2, #0
 800bdfa:	f000 826c 	beq.w	800c2d6 <tcp_input+0x762>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bdfe:	4628      	mov	r0, r5
 800be00:	f7fe ff8c 	bl	800ad1c <tcp_process_refused_data>
 800be04:	300d      	adds	r0, #13
 800be06:	f000 8269 	beq.w	800c2dc <tcp_input+0x768>
 800be0a:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800be0c:	b123      	cbz	r3, 800be18 <tcp_input+0x2a4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800be0e:	9b05      	ldr	r3, [sp, #20]
 800be10:	881b      	ldrh	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	f040 8262 	bne.w	800c2dc <tcp_input+0x768>
  if (flags & TCP_RST) {
 800be18:	4b55      	ldr	r3, [pc, #340]	@ (800bf70 <tcp_input+0x3fc>)
    tcp_input_pcb = pcb;
 800be1a:	4c56      	ldr	r4, [pc, #344]	@ (800bf74 <tcp_input+0x400>)
  if (flags & TCP_RST) {
 800be1c:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 800be1e:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 800be20:	075a      	lsls	r2, r3, #29
 800be22:	f140 814d 	bpl.w	800c0c0 <tcp_input+0x54c>
    if (pcb->state == SYN_SENT) {
 800be26:	7d29      	ldrb	r1, [r5, #20]
 800be28:	2902      	cmp	r1, #2
 800be2a:	f000 82d7 	beq.w	800c3dc <tcp_input+0x868>
      if (seqno == pcb->rcv_nxt) {
 800be2e:	4b52      	ldr	r3, [pc, #328]	@ (800bf78 <tcp_input+0x404>)
 800be30:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	429a      	cmp	r2, r3
 800be36:	f000 8409 	beq.w	800c64c <tcp_input+0xad8>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800be3a:	1a9b      	subs	r3, r3, r2
 800be3c:	d404      	bmi.n	800be48 <tcp_input+0x2d4>
 800be3e:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 800be40:	1a9b      	subs	r3, r3, r2
 800be42:	2b00      	cmp	r3, #0
 800be44:	f340 833e 	ble.w	800c4c4 <tcp_input+0x950>
      if (recv_flags & TF_RESET) {
 800be48:	f899 3000 	ldrb.w	r3, [r9]
 800be4c:	071a      	lsls	r2, r3, #28
 800be4e:	f140 825a 	bpl.w	800c306 <tcp_input+0x792>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800be52:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800be56:	b11b      	cbz	r3, 800be60 <tcp_input+0x2ec>
 800be58:	f06f 010d 	mvn.w	r1, #13
 800be5c:	6928      	ldr	r0, [r5, #16]
 800be5e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800be60:	4841      	ldr	r0, [pc, #260]	@ (800bf68 <tcp_input+0x3f4>)
 800be62:	4629      	mov	r1, r5
 800be64:	f7fe fba2 	bl	800a5ac <tcp_pcb_remove>
        tcp_free(pcb);
 800be68:	4628      	mov	r0, r5
 800be6a:	f7fd fd9b 	bl	80099a4 <tcp_free>
    tcp_input_pcb = NULL;
 800be6e:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 800be70:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800be72:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 800be74:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 800be78:	b110      	cbz	r0, 800be80 <tcp_input+0x30c>
      pbuf_free(inseg.p);
 800be7a:	f7fd f9e3 	bl	8009244 <pbuf_free>
      inseg.p = NULL;
 800be7e:	607d      	str	r5, [r7, #4]
}
 800be80:	b007      	add	sp, #28
 800be82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800be86:	4b3d      	ldr	r3, [pc, #244]	@ (800bf7c <tcp_input+0x408>)
 800be88:	681d      	ldr	r5, [r3, #0]
 800be8a:	2d00      	cmp	r5, #0
 800be8c:	d05b      	beq.n	800bf46 <tcp_input+0x3d2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800be8e:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 800bf94 <tcp_input+0x420>
 800be92:	f8df a104 	ldr.w	sl, [pc, #260]	@ 800bf98 <tcp_input+0x424>
 800be96:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 800bf9c <tcp_input+0x428>
 800be9a:	e002      	b.n	800bea2 <tcp_input+0x32e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800be9c:	68ed      	ldr	r5, [r5, #12]
 800be9e:	2d00      	cmp	r5, #0
 800bea0:	d051      	beq.n	800bf46 <tcp_input+0x3d2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bea2:	7d2b      	ldrb	r3, [r5, #20]
 800bea4:	2b0a      	cmp	r3, #10
 800bea6:	4643      	mov	r3, r8
 800bea8:	d005      	beq.n	800beb6 <tcp_input+0x342>
 800beaa:	f240 121f 	movw	r2, #287	@ 0x11f
 800beae:	4651      	mov	r1, sl
 800beb0:	4648      	mov	r0, r9
 800beb2:	f004 f83f 	bl	800ff34 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800beb6:	7a2a      	ldrb	r2, [r5, #8]
 800beb8:	b132      	cbz	r2, 800bec8 <tcp_input+0x354>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bec0:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d1e9      	bne.n	800be9c <tcp_input+0x328>
      if (pcb->remote_port == tcphdr->src &&
 800bec8:	6833      	ldr	r3, [r6, #0]
 800beca:	8b29      	ldrh	r1, [r5, #24]
 800becc:	881a      	ldrh	r2, [r3, #0]
 800bece:	4291      	cmp	r1, r2
 800bed0:	d1e4      	bne.n	800be9c <tcp_input+0x328>
          pcb->local_port == tcphdr->dest &&
 800bed2:	885a      	ldrh	r2, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800bed4:	8aeb      	ldrh	r3, [r5, #22]
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d1e0      	bne.n	800be9c <tcp_input+0x328>
          pcb->local_port == tcphdr->dest &&
 800beda:	6868      	ldr	r0, [r5, #4]
 800bedc:	693a      	ldr	r2, [r7, #16]
 800bede:	4290      	cmp	r0, r2
 800bee0:	d1dc      	bne.n	800be9c <tcp_input+0x328>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bee2:	6828      	ldr	r0, [r5, #0]
 800bee4:	697a      	ldr	r2, [r7, #20]
 800bee6:	4290      	cmp	r0, r2
 800bee8:	d1d8      	bne.n	800be9c <tcp_input+0x328>
  if (flags & TCP_RST) {
 800beea:	4a21      	ldr	r2, [pc, #132]	@ (800bf70 <tcp_input+0x3fc>)
 800beec:	7810      	ldrb	r0, [r2, #0]
 800beee:	0742      	lsls	r2, r0, #29
 800bef0:	f53f ae4f 	bmi.w	800bb92 <tcp_input+0x1e>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bef4:	9a05      	ldr	r2, [sp, #20]
  if (flags & TCP_SYN) {
 800bef6:	0787      	lsls	r7, r0, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bef8:	8816      	ldrh	r6, [r2, #0]
  if (flags & TCP_SYN) {
 800befa:	f140 83b2 	bpl.w	800c662 <tcp_input+0xaee>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800befe:	4a1e      	ldr	r2, [pc, #120]	@ (800bf78 <tcp_input+0x404>)
 800bf00:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800bf02:	6812      	ldr	r2, [r2, #0]
 800bf04:	1a10      	subs	r0, r2, r0
 800bf06:	d404      	bmi.n	800bf12 <tcp_input+0x39e>
 800bf08:	8d2f      	ldrh	r7, [r5, #40]	@ 0x28
 800bf0a:	1bc0      	subs	r0, r0, r7
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	f340 83c7 	ble.w	800c6a0 <tcp_input+0xb2c>
  if ((tcplen > 0)) {
 800bf12:	2e00      	cmp	r6, #0
 800bf14:	f43f ae3d 	beq.w	800bb92 <tcp_input+0x1e>
    tcp_ack_now(pcb);
 800bf18:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800bf1a:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800bf1c:	f043 0302 	orr.w	r3, r3, #2
 800bf20:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800bf22:	f001 fb6d 	bl	800d600 <tcp_output>
        pbuf_free(p);
 800bf26:	e634      	b.n	800bb92 <tcp_input+0x1e>
    tcphdr_opt1len = tcphdr_optlen;
 800bf28:	4a15      	ldr	r2, [pc, #84]	@ (800bf80 <tcp_input+0x40c>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bf2a:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 800bf2c:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bf2e:	f7fd f927 	bl	8009180 <pbuf_remove_header>
 800bf32:	e68f      	b.n	800bc54 <tcp_input+0xe0>
    tcplen++;
 800bf34:	1c53      	adds	r3, r2, #1
 800bf36:	4913      	ldr	r1, [pc, #76]	@ (800bf84 <tcp_input+0x410>)
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 800bf3c:	429a      	cmp	r2, r3
    tcplen++;
 800bf3e:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800bf40:	f67f aeb4 	bls.w	800bcac <tcp_input+0x138>
 800bf44:	e625      	b.n	800bb92 <tcp_input+0x1e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bf46:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800bfa0 <tcp_input+0x42c>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bf4a:	f8d6 c000 	ldr.w	ip, [r6]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bf4e:	f8d8 2000 	ldr.w	r2, [r8]
 800bf52:	2a00      	cmp	r2, #0
 800bf54:	f000 8227 	beq.w	800c3a6 <tcp_input+0x832>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bf58:	6878      	ldr	r0, [r7, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bf5a:	4615      	mov	r5, r2
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bf5c:	f8d7 e014 	ldr.w	lr, [r7, #20]
    prev = NULL;
 800bf60:	2100      	movs	r1, #0
 800bf62:	4692      	mov	sl, r2
 800bf64:	e024      	b.n	800bfb0 <tcp_input+0x43c>
 800bf66:	bf00      	nop
 800bf68:	2402075c 	.word	0x2402075c
 800bf6c:	24020794 	.word	0x24020794
 800bf70:	24020775 	.word	0x24020775
 800bf74:	2402076c 	.word	0x2402076c
 800bf78:	24020780 	.word	0x24020780
 800bf7c:	24020758 	.word	0x24020758
 800bf80:	2402078c 	.word	0x2402078c
 800bf84:	24020776 	.word	0x24020776
 800bf88:	24020770 	.word	0x24020770
 800bf8c:	24020774 	.word	0x24020774
 800bf90:	24020778 	.word	0x24020778
 800bf94:	08013178 	.word	0x08013178
 800bf98:	08013468 	.word	0x08013468
 800bf9c:	080110dc 	.word	0x080110dc
 800bfa0:	24020760 	.word	0x24020760
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bfa4:	68eb      	ldr	r3, [r5, #12]
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	461d      	mov	r5, r3
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	f000 81fb 	beq.w	800c3a6 <tcp_input+0x832>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bfb0:	7a2a      	ldrb	r2, [r5, #8]
 800bfb2:	b12a      	cbz	r2, 800bfc0 <tcp_input+0x44c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bfb4:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800bfb8:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d1f1      	bne.n	800bfa4 <tcp_input+0x430>
      if (lpcb->local_port == tcphdr->dest) {
 800bfc0:	f8b5 9016 	ldrh.w	r9, [r5, #22]
 800bfc4:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800bfc8:	4599      	cmp	r9, r3
 800bfca:	d1eb      	bne.n	800bfa4 <tcp_input+0x430>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bfcc:	682b      	ldr	r3, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bfce:	b10b      	cbz	r3, 800bfd4 <tcp_input+0x460>
 800bfd0:	4573      	cmp	r3, lr
 800bfd2:	d1e7      	bne.n	800bfa4 <tcp_input+0x430>
      if (prev != NULL) {
 800bfd4:	4652      	mov	r2, sl
 800bfd6:	b121      	cbz	r1, 800bfe2 <tcp_input+0x46e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bfd8:	68eb      	ldr	r3, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bfda:	f8c8 5000 	str.w	r5, [r8]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bfde:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bfe0:	60ea      	str	r2, [r5, #12]
  if (flags & TCP_RST) {
 800bfe2:	4ba8      	ldr	r3, [pc, #672]	@ (800c284 <tcp_input+0x710>)
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	075a      	lsls	r2, r3, #29
 800bfe8:	f53f add3 	bmi.w	800bb92 <tcp_input+0x1e>
  if (flags & TCP_ACK) {
 800bfec:	f013 0810 	ands.w	r8, r3, #16
 800bff0:	f040 826d 	bne.w	800c4ce <tcp_input+0x95a>
  } else if (flags & TCP_SYN) {
 800bff4:	0798      	lsls	r0, r3, #30
 800bff6:	f57f adcc 	bpl.w	800bb92 <tcp_input+0x1e>
    npcb = tcp_alloc(pcb->prio);
 800bffa:	7d68      	ldrb	r0, [r5, #21]
 800bffc:	f7fe fc84 	bl	800a908 <tcp_alloc>
    if (npcb == NULL) {
 800c000:	4681      	mov	r9, r0
 800c002:	2800      	cmp	r0, #0
 800c004:	f000 82ca 	beq.w	800c59c <tcp_input+0xa28>
    npcb->remote_port = tcphdr->src;
 800c008:	6831      	ldr	r1, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c00a:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
    npcb->rcv_nxt = seqno + 1;
 800c00e:	4f9e      	ldr	r7, [pc, #632]	@ (800c288 <tcp_input+0x714>)
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c010:	e9c0 2300 	strd	r2, r3, [r0]
    npcb->rcv_nxt = seqno + 1;
 800c014:	683b      	ldr	r3, [r7, #0]
    npcb->remote_port = tcphdr->src;
 800c016:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 800c018:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 800c01a:	7849      	ldrb	r1, [r1, #1]
 800c01c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 800c020:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 800c022:	6243      	str	r3, [r0, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c024:	62c3      	str	r3, [r0, #44]	@ 0x2c
    npcb->state = SYN_RCVD;
 800c026:	2303      	movs	r3, #3
    npcb->local_port = pcb->local_port;
 800c028:	82c1      	strh	r1, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800c02a:	8302      	strh	r2, [r0, #24]
    npcb->state = SYN_RCVD;
 800c02c:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 800c02e:	f7fe ff0d 	bl	800ae4c <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c032:	683a      	ldr	r2, [r7, #0]
    npcb->callback_arg = pcb->callback_arg;
 800c034:	692b      	ldr	r3, [r5, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c036:	3a01      	subs	r2, #1
    npcb->snd_nxt = iss;
 800c038:	f8c9 0050 	str.w	r0, [r9, #80]	@ 0x50
    npcb->lastack = iss;
 800c03c:	f8c9 0044 	str.w	r0, [r9, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800c040:	f8c9 005c 	str.w	r0, [r9, #92]	@ 0x5c
    npcb->listener = pcb;
 800c044:	f8c9 507c 	str.w	r5, [r9, #124]	@ 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800c048:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->snd_wl2 = iss;
 800c04c:	e9c9 2015 	strd	r2, r0, [r9, #84]	@ 0x54
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c050:	7a6b      	ldrb	r3, [r5, #9]
    TCP_REG_ACTIVE(npcb);
 800c052:	4a8e      	ldr	r2, [pc, #568]	@ (800c28c <tcp_input+0x718>)
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c054:	f003 030c 	and.w	r3, r3, #12
 800c058:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c05c:	7a2b      	ldrb	r3, [r5, #8]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c05e:	f109 0504 	add.w	r5, r9, #4
    npcb->netif_idx = pcb->netif_idx;
 800c062:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 800c066:	6813      	ldr	r3, [r2, #0]
 800c068:	f8c2 9000 	str.w	r9, [r2]
 800c06c:	f8c9 300c 	str.w	r3, [r9, #12]
 800c070:	f001 fde4 	bl	800dc3c <tcp_timer_needed>
 800c074:	4b86      	ldr	r3, [pc, #536]	@ (800c290 <tcp_input+0x71c>)
 800c076:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800c078:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 800c07a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c07c:	f7ff fcbe 	bl	800b9fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c080:	6832      	ldr	r2, [r6, #0]
 800c082:	4643      	mov	r3, r8
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c084:	f8b9 6032 	ldrh.w	r6, [r9, #50]	@ 0x32
 800c088:	4628      	mov	r0, r5
    npcb->snd_wnd = tcphdr->wnd;
 800c08a:	89d2      	ldrh	r2, [r2, #14]
 800c08c:	f362 030f 	bfi	r3, r2, #0, #16
 800c090:	f362 431f 	bfi	r3, r2, #16, #16
 800c094:	f8c9 3060 	str.w	r3, [r9, #96]	@ 0x60
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c098:	f002 fd78 	bl	800eb8c <ip4_route>
 800c09c:	462a      	mov	r2, r5
 800c09e:	4601      	mov	r1, r0
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f7fe feef 	bl	800ae84 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c0a6:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c0a8:	f8a9 0032 	strh.w	r0, [r9, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c0ac:	4648      	mov	r0, r9
 800c0ae:	f001 f899 	bl	800d1e4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	f040 827d 	bne.w	800c5b2 <tcp_input+0xa3e>
    tcp_output(npcb);
 800c0b8:	4648      	mov	r0, r9
 800c0ba:	f001 faa1 	bl	800d600 <tcp_output>
 800c0be:	e568      	b.n	800bb92 <tcp_input+0x1e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c0c0:	079b      	lsls	r3, r3, #30
        tcp_ack_now(pcb);
 800c0c2:	8b6a      	ldrh	r2, [r5, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c0c4:	d504      	bpl.n	800c0d0 <tcp_input+0x55c>
 800c0c6:	7d2b      	ldrb	r3, [r5, #20]
 800c0c8:	3b02      	subs	r3, #2
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	f200 819c 	bhi.w	800c408 <tcp_input+0x894>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c0d0:	06d0      	lsls	r0, r2, #27
 800c0d2:	d402      	bmi.n	800c0da <tcp_input+0x566>
    pcb->tmr = tcp_ticks;
 800c0d4:	4b6f      	ldr	r3, [pc, #444]	@ (800c294 <tcp_input+0x720>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	622b      	str	r3, [r5, #32]
  pcb->persist_probe = 0;
 800c0da:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 800c0dc:	4628      	mov	r0, r5
  pcb->persist_probe = 0;
 800c0de:	f8a5 309a 	strh.w	r3, [r5, #154]	@ 0x9a
  tcp_parseopt(pcb);
 800c0e2:	f7ff fc8b 	bl	800b9fc <tcp_parseopt>
  switch (pcb->state) {
 800c0e6:	7d2b      	ldrb	r3, [r5, #20]
 800c0e8:	3b02      	subs	r3, #2
 800c0ea:	2b07      	cmp	r3, #7
 800c0ec:	f63f aeac 	bhi.w	800be48 <tcp_input+0x2d4>
 800c0f0:	e8df f003 	tbb	[pc, r3]
 800c0f4:	8f041334 	.word	0x8f041334
 800c0f8:	5ba80474 	.word	0x5ba80474
      tcp_receive(pcb);
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	f7fe ffef 	bl	800b0e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c102:	f899 3000 	ldrb.w	r3, [r9]
 800c106:	0699      	lsls	r1, r3, #26
 800c108:	f57f ae9e 	bpl.w	800be48 <tcp_input+0x2d4>
        tcp_ack_now(pcb);
 800c10c:	8b6b      	ldrh	r3, [r5, #26]
 800c10e:	f043 0302 	orr.w	r3, r3, #2
 800c112:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 800c114:	2307      	movs	r3, #7
 800c116:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800c118:	e696      	b.n	800be48 <tcp_input+0x2d4>
      if (flags & TCP_ACK) {
 800c11a:	4b5a      	ldr	r3, [pc, #360]	@ (800c284 <tcp_input+0x710>)
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	06da      	lsls	r2, r3, #27
 800c120:	f140 8210 	bpl.w	800c544 <tcp_input+0x9d0>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c124:	4b5c      	ldr	r3, [pc, #368]	@ (800c298 <tcp_input+0x724>)
 800c126:	6819      	ldr	r1, [r3, #0]
 800c128:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800c12a:	43db      	mvns	r3, r3
 800c12c:	42cb      	cmn	r3, r1
 800c12e:	d404      	bmi.n	800c13a <tcp_input+0x5c6>
 800c130:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c132:	1acb      	subs	r3, r1, r3
 800c134:	2b00      	cmp	r3, #0
 800c136:	f340 8242 	ble.w	800c5be <tcp_input+0xa4a>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c13a:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c13c:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c13e:	8810      	ldrh	r0, [r2, #0]
 800c140:	4a51      	ldr	r2, [pc, #324]	@ (800c288 <tcp_input+0x714>)
 800c142:	6812      	ldr	r2, [r2, #0]
 800c144:	4402      	add	r2, r0
 800c146:	8818      	ldrh	r0, [r3, #0]
 800c148:	9002      	str	r0, [sp, #8]
 800c14a:	4628      	mov	r0, r5
 800c14c:	885b      	ldrh	r3, [r3, #2]
 800c14e:	9301      	str	r3, [sp, #4]
 800c150:	4b52      	ldr	r3, [pc, #328]	@ (800c29c <tcp_input+0x728>)
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	3304      	adds	r3, #4
 800c156:	f001 f9d9 	bl	800d50c <tcp_rst>
    if (err != ERR_ABRT) {
 800c15a:	e675      	b.n	800be48 <tcp_input+0x2d4>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c15c:	4b49      	ldr	r3, [pc, #292]	@ (800c284 <tcp_input+0x710>)
 800c15e:	781a      	ldrb	r2, [r3, #0]
 800c160:	f002 0312 	and.w	r3, r2, #18
 800c164:	2b12      	cmp	r3, #18
 800c166:	f000 8153 	beq.w	800c410 <tcp_input+0x89c>
      else if (flags & TCP_ACK) {
 800c16a:	06d1      	lsls	r1, r2, #27
 800c16c:	f57f ae6c 	bpl.w	800be48 <tcp_input+0x2d4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c170:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c172:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c174:	8811      	ldrh	r1, [r2, #0]
 800c176:	4a44      	ldr	r2, [pc, #272]	@ (800c288 <tcp_input+0x714>)
 800c178:	8818      	ldrh	r0, [r3, #0]
 800c17a:	6812      	ldr	r2, [r2, #0]
 800c17c:	440a      	add	r2, r1
 800c17e:	4946      	ldr	r1, [pc, #280]	@ (800c298 <tcp_input+0x724>)
 800c180:	6809      	ldr	r1, [r1, #0]
 800c182:	9002      	str	r0, [sp, #8]
 800c184:	4628      	mov	r0, r5
 800c186:	885b      	ldrh	r3, [r3, #2]
 800c188:	9301      	str	r3, [sp, #4]
 800c18a:	4b44      	ldr	r3, [pc, #272]	@ (800c29c <tcp_input+0x728>)
 800c18c:	9300      	str	r3, [sp, #0]
 800c18e:	3304      	adds	r3, #4
 800c190:	f001 f9bc 	bl	800d50c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c194:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
 800c198:	2b05      	cmp	r3, #5
 800c19a:	f63f ae55 	bhi.w	800be48 <tcp_input+0x2d4>
          pcb->rtime = 0;
 800c19e:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800c1a0:	4628      	mov	r0, r5
          pcb->rtime = 0;
 800c1a2:	862b      	strh	r3, [r5, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800c1a4:	f001 fc1e 	bl	800d9e4 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800c1a8:	e64e      	b.n	800be48 <tcp_input+0x2d4>
      tcp_receive(pcb);
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	f7fe ff98 	bl	800b0e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c1b0:	4b34      	ldr	r3, [pc, #208]	@ (800c284 <tcp_input+0x710>)
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	06d9      	lsls	r1, r3, #27
 800c1b6:	f57f ae47 	bpl.w	800be48 <tcp_input+0x2d4>
 800c1ba:	4b37      	ldr	r3, [pc, #220]	@ (800c298 <tcp_input+0x724>)
 800c1bc:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800c1be:	681a      	ldr	r2, [r3, #0]
        recv_flags |= TF_CLOSED;
 800c1c0:	f899 3000 	ldrb.w	r3, [r9]
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c1c4:	4291      	cmp	r1, r2
 800c1c6:	f47f ae3f 	bne.w	800be48 <tcp_input+0x2d4>
 800c1ca:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800c1cc:	2a00      	cmp	r2, #0
 800c1ce:	f47f ae3b 	bne.w	800be48 <tcp_input+0x2d4>
        recv_flags |= TF_CLOSED;
 800c1d2:	f043 0310 	orr.w	r3, r3, #16
 800c1d6:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 800c1da:	e635      	b.n	800be48 <tcp_input+0x2d4>
      tcp_receive(pcb);
 800c1dc:	4628      	mov	r0, r5
 800c1de:	f7fe ff7f 	bl	800b0e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c1e2:	f899 3000 	ldrb.w	r3, [r9]
 800c1e6:	069e      	lsls	r6, r3, #26
 800c1e8:	f57f ae2e 	bpl.w	800be48 <tcp_input+0x2d4>
        tcp_ack_now(pcb);
 800c1ec:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800c1ee:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 800c1f0:	f043 0302 	orr.w	r3, r3, #2
 800c1f4:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800c1f6:	f7fd fee7 	bl	8009fc8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c1fa:	4b24      	ldr	r3, [pc, #144]	@ (800c28c <tcp_input+0x718>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	42ab      	cmp	r3, r5
 800c200:	d05a      	beq.n	800c2b8 <tcp_input+0x744>
 800c202:	2b00      	cmp	r3, #0
 800c204:	d05b      	beq.n	800c2be <tcp_input+0x74a>
 800c206:	68da      	ldr	r2, [r3, #12]
 800c208:	42aa      	cmp	r2, r5
 800c20a:	f000 8205 	beq.w	800c618 <tcp_input+0xaa4>
 800c20e:	4613      	mov	r3, r2
 800c210:	e7f7      	b.n	800c202 <tcp_input+0x68e>
      tcp_receive(pcb);
 800c212:	4628      	mov	r0, r5
 800c214:	f7fe ff64 	bl	800b0e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c218:	f899 3000 	ldrb.w	r3, [r9]
 800c21c:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c220:	4b18      	ldr	r3, [pc, #96]	@ (800c284 <tcp_input+0x710>)
      if (recv_flags & TF_GOT_FIN) {
 800c222:	f000 817e 	beq.w	800c522 <tcp_input+0x9ae>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c226:	781a      	ldrb	r2, [r3, #0]
          tcp_ack_now(pcb);
 800c228:	8b6b      	ldrh	r3, [r5, #26]
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c22a:	06d2      	lsls	r2, r2, #27
          tcp_ack_now(pcb);
 800c22c:	f043 0302 	orr.w	r3, r3, #2
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c230:	d504      	bpl.n	800c23c <tcp_input+0x6c8>
 800c232:	4a19      	ldr	r2, [pc, #100]	@ (800c298 <tcp_input+0x724>)
 800c234:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800c236:	6812      	ldr	r2, [r2, #0]
 800c238:	4291      	cmp	r1, r2
 800c23a:	d031      	beq.n	800c2a0 <tcp_input+0x72c>
          tcp_ack_now(pcb);
 800c23c:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 800c23e:	2308      	movs	r3, #8
 800c240:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800c242:	e601      	b.n	800be48 <tcp_input+0x2d4>
      tcp_receive(pcb);
 800c244:	4628      	mov	r0, r5
 800c246:	f7fe ff4b 	bl	800b0e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c24a:	4b0e      	ldr	r3, [pc, #56]	@ (800c284 <tcp_input+0x710>)
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	06d8      	lsls	r0, r3, #27
 800c250:	f57f adfa 	bpl.w	800be48 <tcp_input+0x2d4>
 800c254:	4b10      	ldr	r3, [pc, #64]	@ (800c298 <tcp_input+0x724>)
 800c256:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	f47f adf4 	bne.w	800be48 <tcp_input+0x2d4>
 800c260:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800c262:	2b00      	cmp	r3, #0
 800c264:	f47f adf0 	bne.w	800be48 <tcp_input+0x2d4>
        tcp_pcb_purge(pcb);
 800c268:	4628      	mov	r0, r5
 800c26a:	f7fd fead 	bl	8009fc8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c26e:	4b07      	ldr	r3, [pc, #28]	@ (800c28c <tcp_input+0x718>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	42ab      	cmp	r3, r5
 800c274:	d020      	beq.n	800c2b8 <tcp_input+0x744>
 800c276:	b313      	cbz	r3, 800c2be <tcp_input+0x74a>
 800c278:	68da      	ldr	r2, [r3, #12]
 800c27a:	42aa      	cmp	r2, r5
 800c27c:	f000 81cc 	beq.w	800c618 <tcp_input+0xaa4>
 800c280:	4613      	mov	r3, r2
 800c282:	e7f8      	b.n	800c276 <tcp_input+0x702>
 800c284:	24020775 	.word	0x24020775
 800c288:	24020780 	.word	0x24020780
 800c28c:	2402075c 	.word	0x2402075c
 800c290:	24020757 	.word	0x24020757
 800c294:	24020768 	.word	0x24020768
 800c298:	2402077c 	.word	0x2402077c
 800c29c:	24019ca8 	.word	0x24019ca8
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c2a0:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800c2a2:	2a00      	cmp	r2, #0
 800c2a4:	d1ca      	bne.n	800c23c <tcp_input+0x6c8>
          tcp_ack_now(pcb);
 800c2a6:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	f7fd fe8d 	bl	8009fc8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c2ae:	4bac      	ldr	r3, [pc, #688]	@ (800c560 <tcp_input+0x9ec>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	42ab      	cmp	r3, r5
 800c2b4:	f040 81e0 	bne.w	800c678 <tcp_input+0xb04>
        TCP_RMV_ACTIVE(pcb);
 800c2b8:	68eb      	ldr	r3, [r5, #12]
 800c2ba:	4aa9      	ldr	r2, [pc, #676]	@ (800c560 <tcp_input+0x9ec>)
 800c2bc:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c2be:	4ba9      	ldr	r3, [pc, #676]	@ (800c564 <tcp_input+0x9f0>)
        pcb->state = TIME_WAIT;
 800c2c0:	220a      	movs	r2, #10
 800c2c2:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	601d      	str	r5, [r3, #0]
 800c2c8:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	4ba6      	ldr	r3, [pc, #664]	@ (800c568 <tcp_input+0x9f4>)
 800c2ce:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c2d0:	f001 fcb4 	bl	800dc3c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800c2d4:	e5b8      	b.n	800be48 <tcp_input+0x2d4>
    tcp_input_pcb = pcb;
 800c2d6:	4ca5      	ldr	r4, [pc, #660]	@ (800c56c <tcp_input+0x9f8>)
 800c2d8:	6025      	str	r5, [r4, #0]
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c2da:	e5a1      	b.n	800be20 <tcp_input+0x2ac>
        if (pcb->rcv_ann_wnd == 0) {
 800c2dc:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	f000 808d 	beq.w	800c3fe <tcp_input+0x88a>
 800c2e4:	4ca1      	ldr	r4, [pc, #644]	@ (800c56c <tcp_input+0x9f8>)
 800c2e6:	e5c2      	b.n	800be6e <tcp_input+0x2fa>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c2e8:	4ba1      	ldr	r3, [pc, #644]	@ (800c570 <tcp_input+0x9fc>)
 800c2ea:	22c2      	movs	r2, #194	@ 0xc2
 800c2ec:	49a1      	ldr	r1, [pc, #644]	@ (800c574 <tcp_input+0xa00>)
 800c2ee:	48a2      	ldr	r0, [pc, #648]	@ (800c578 <tcp_input+0xa04>)
 800c2f0:	f003 fe20 	bl	800ff34 <iprintf>
 800c2f4:	e47f      	b.n	800bbf6 <tcp_input+0x82>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c2f6:	4b9e      	ldr	r3, [pc, #632]	@ (800c570 <tcp_input+0x9fc>)
 800c2f8:	22df      	movs	r2, #223	@ 0xdf
 800c2fa:	49a0      	ldr	r1, [pc, #640]	@ (800c57c <tcp_input+0xa08>)
 800c2fc:	489e      	ldr	r0, [pc, #632]	@ (800c578 <tcp_input+0xa04>)
 800c2fe:	f003 fe19 	bl	800ff34 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c302:	8923      	ldrh	r3, [r4, #8]
 800c304:	e49c      	b.n	800bc40 <tcp_input+0xcc>
        if (recv_acked > 0) {
 800c306:	f8ba 2000 	ldrh.w	r2, [sl]
 800c30a:	b15a      	cbz	r2, 800c324 <tcp_input+0x7b0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c30c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800c310:	b12b      	cbz	r3, 800c31e <tcp_input+0x7aa>
 800c312:	4629      	mov	r1, r5
 800c314:	6928      	ldr	r0, [r5, #16]
 800c316:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800c318:	300d      	adds	r0, #13
 800c31a:	f43f ada8 	beq.w	800be6e <tcp_input+0x2fa>
          recv_acked = 0;
 800c31e:	2300      	movs	r3, #0
 800c320:	f8aa 3000 	strh.w	r3, [sl]
        if (tcp_input_delayed_close(pcb)) {
 800c324:	4628      	mov	r0, r5
 800c326:	f7fe fe55 	bl	800afd4 <tcp_input_delayed_close>
 800c32a:	2800      	cmp	r0, #0
 800c32c:	f47f ad9f 	bne.w	800be6e <tcp_input+0x2fa>
        if (recv_data != NULL) {
 800c330:	f8d8 2000 	ldr.w	r2, [r8]
 800c334:	b1fa      	cbz	r2, 800c376 <tcp_input+0x802>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c336:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800c338:	b143      	cbz	r3, 800c34c <tcp_input+0x7d8>
 800c33a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c33e:	4b8c      	ldr	r3, [pc, #560]	@ (800c570 <tcp_input+0x9fc>)
 800c340:	498f      	ldr	r1, [pc, #572]	@ (800c580 <tcp_input+0xa0c>)
 800c342:	488d      	ldr	r0, [pc, #564]	@ (800c578 <tcp_input+0xa04>)
 800c344:	f003 fdf6 	bl	800ff34 <iprintf>
            pbuf_free(recv_data);
 800c348:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 800c34c:	8b6b      	ldrh	r3, [r5, #26]
 800c34e:	f013 0310 	ands.w	r3, r3, #16
 800c352:	f040 80df 	bne.w	800c514 <tcp_input+0x9a0>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c356:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 800c35a:	2e00      	cmp	r6, #0
 800c35c:	f000 8118 	beq.w	800c590 <tcp_input+0xa1c>
 800c360:	4629      	mov	r1, r5
 800c362:	6928      	ldr	r0, [r5, #16]
 800c364:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800c366:	f110 0f0d 	cmn.w	r0, #13
 800c36a:	f43f ad80 	beq.w	800be6e <tcp_input+0x2fa>
          if (err != ERR_OK) {
 800c36e:	b110      	cbz	r0, 800c376 <tcp_input+0x802>
            pcb->refused_data = recv_data;
 800c370:	f8d8 3000 	ldr.w	r3, [r8]
 800c374:	67ab      	str	r3, [r5, #120]	@ 0x78
        if (recv_flags & TF_GOT_FIN) {
 800c376:	f899 3000 	ldrb.w	r3, [r9]
 800c37a:	069b      	lsls	r3, r3, #26
 800c37c:	d507      	bpl.n	800c38e <tcp_input+0x81a>
          if (pcb->refused_data != NULL) {
 800c37e:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800c380:	2b00      	cmp	r3, #0
 800c382:	f000 80b2 	beq.w	800c4ea <tcp_input+0x976>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c386:	7b5a      	ldrb	r2, [r3, #13]
 800c388:	f042 0220 	orr.w	r2, r2, #32
 800c38c:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800c38e:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800c390:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 800c392:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c394:	f7fe fe1e 	bl	800afd4 <tcp_input_delayed_close>
 800c398:	2800      	cmp	r0, #0
 800c39a:	f47f ad68 	bne.w	800be6e <tcp_input+0x2fa>
        tcp_output(pcb);
 800c39e:	4628      	mov	r0, r5
 800c3a0:	f001 f92e 	bl	800d600 <tcp_output>
 800c3a4:	e563      	b.n	800be6e <tcp_input+0x2fa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c3a6:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 800c3aa:	f7fc f859 	bl	8008460 <lwip_htons>
 800c3ae:	f010 0004 	ands.w	r0, r0, #4
 800c3b2:	f47f abee 	bne.w	800bb92 <tcp_input+0x1e>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3b6:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3b8:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3ba:	8811      	ldrh	r1, [r2, #0]
 800c3bc:	4a71      	ldr	r2, [pc, #452]	@ (800c584 <tcp_input+0xa10>)
 800c3be:	881d      	ldrh	r5, [r3, #0]
 800c3c0:	6812      	ldr	r2, [r2, #0]
 800c3c2:	440a      	add	r2, r1
 800c3c4:	4970      	ldr	r1, [pc, #448]	@ (800c588 <tcp_input+0xa14>)
 800c3c6:	6809      	ldr	r1, [r1, #0]
 800c3c8:	9502      	str	r5, [sp, #8]
 800c3ca:	885b      	ldrh	r3, [r3, #2]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3cc:	9301      	str	r3, [sp, #4]
 800c3ce:	4b6f      	ldr	r3, [pc, #444]	@ (800c58c <tcp_input+0xa18>)
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	f001 f89a 	bl	800d50c <tcp_rst>
 800c3d8:	f7ff bbdb 	b.w	800bb92 <tcp_input+0x1e>
      if (ackno == pcb->snd_nxt) {
 800c3dc:	4b6a      	ldr	r3, [pc, #424]	@ (800c588 <tcp_input+0xa14>)
 800c3de:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	f47f ad30 	bne.w	800be48 <tcp_input+0x2d4>
      recv_flags |= TF_RESET;
 800c3e8:	f899 3000 	ldrb.w	r3, [r9]
 800c3ec:	f043 0308 	orr.w	r3, r3, #8
 800c3f0:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c3f4:	8b6b      	ldrh	r3, [r5, #26]
 800c3f6:	f023 0301 	bic.w	r3, r3, #1
 800c3fa:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800c3fc:	e524      	b.n	800be48 <tcp_input+0x2d4>
          tcp_send_empty_ack(pcb);
 800c3fe:	4628      	mov	r0, r5
 800c400:	4c5a      	ldr	r4, [pc, #360]	@ (800c56c <tcp_input+0x9f8>)
 800c402:	f001 f8cb 	bl	800d59c <tcp_send_empty_ack>
 800c406:	e532      	b.n	800be6e <tcp_input+0x2fa>
    tcp_ack_now(pcb);
 800c408:	f042 0202 	orr.w	r2, r2, #2
 800c40c:	836a      	strh	r2, [r5, #26]
    if (err != ERR_ABRT) {
 800c40e:	e51b      	b.n	800be48 <tcp_input+0x2d4>
          && (ackno == pcb->lastack + 1)) {
 800c410:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800c412:	495d      	ldr	r1, [pc, #372]	@ (800c588 <tcp_input+0xa14>)
 800c414:	3301      	adds	r3, #1
 800c416:	6809      	ldr	r1, [r1, #0]
 800c418:	428b      	cmp	r3, r1
 800c41a:	f47f aea6 	bne.w	800c16a <tcp_input+0x5f6>
        pcb->lastack = ackno;
 800c41e:	646b      	str	r3, [r5, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c420:	2200      	movs	r2, #0
        pcb->rcv_nxt = seqno + 1;
 800c422:	4b58      	ldr	r3, [pc, #352]	@ (800c584 <tcp_input+0xa10>)
        pcb->snd_wnd = tcphdr->wnd;
 800c424:	6830      	ldr	r0, [r6, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c426:	1d2e      	adds	r6, r5, #4
        pcb->rcv_nxt = seqno + 1;
 800c428:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c42a:	f8b5 b032 	ldrh.w	fp, [r5, #50]	@ 0x32
        pcb->rcv_nxt = seqno + 1;
 800c42e:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c430:	3b01      	subs	r3, #1
        pcb->rcv_nxt = seqno + 1;
 800c432:	6269      	str	r1, [r5, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c434:	62e9      	str	r1, [r5, #44]	@ 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800c436:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c438:	4630      	mov	r0, r6
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c43a:	656b      	str	r3, [r5, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800c43c:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800c43e:	f361 020f 	bfi	r2, r1, #0, #16
        pcb->state = ESTABLISHED;
 800c442:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd = tcphdr->wnd;
 800c444:	f361 421f 	bfi	r2, r1, #16, #16
 800c448:	662a      	str	r2, [r5, #96]	@ 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c44a:	f002 fb9f 	bl	800eb8c <ip4_route>
 800c44e:	4632      	mov	r2, r6
 800c450:	4601      	mov	r1, r0
 800c452:	4658      	mov	r0, fp
 800c454:	f7fe fd16 	bl	800ae84 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c458:	f241 131c 	movw	r3, #4380	@ 0x111c
 800c45c:	0041      	lsls	r1, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c45e:	4602      	mov	r2, r0
 800c460:	8668      	strh	r0, [r5, #50]	@ 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c462:	0080      	lsls	r0, r0, #2
 800c464:	4299      	cmp	r1, r3
 800c466:	460e      	mov	r6, r1
 800c468:	bf38      	it	cc
 800c46a:	461e      	movcc	r6, r3
 800c46c:	ebb6 0f82 	cmp.w	r6, r2, lsl #2
 800c470:	f240 8130 	bls.w	800c6d4 <tcp_input+0xb60>
 800c474:	b283      	uxth	r3, r0
 800c476:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c47a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	@ 0x66
 800c47e:	2b00      	cmp	r3, #0
 800c480:	f000 8120 	beq.w	800c6c4 <tcp_input+0xb50>
        --pcb->snd_queuelen;
 800c484:	f8b5 3066 	ldrh.w	r3, [r5, #102]	@ 0x66
        rseg = pcb->unacked;
 800c488:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
        --pcb->snd_queuelen;
 800c48a:	3b01      	subs	r3, #1
 800c48c:	f8a5 3066 	strh.w	r3, [r5, #102]	@ 0x66
        if (rseg == NULL) {
 800c490:	2e00      	cmp	r6, #0
 800c492:	f000 8112 	beq.w	800c6ba <tcp_input+0xb46>
          pcb->unacked = rseg->next;
 800c496:	6833      	ldr	r3, [r6, #0]
 800c498:	672b      	str	r3, [r5, #112]	@ 0x70
        tcp_seg_free(rseg);
 800c49a:	4630      	mov	r0, r6
 800c49c:	f7fd fcd6 	bl	8009e4c <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800c4a0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f000 8106 	beq.w	800c6b4 <tcp_input+0xb40>
          pcb->nrtx = 0;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 800c4ae:	862b      	strh	r3, [r5, #48]	@ 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c4b0:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800c4b4:	b133      	cbz	r3, 800c4c4 <tcp_input+0x950>
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	6928      	ldr	r0, [r5, #16]
 800c4bc:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800c4be:	300d      	adds	r0, #13
 800c4c0:	f43f acd5 	beq.w	800be6e <tcp_input+0x2fa>
        tcp_ack_now(pcb);
 800c4c4:	8b6b      	ldrh	r3, [r5, #26]
 800c4c6:	f043 0302 	orr.w	r3, r3, #2
 800c4ca:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800c4cc:	e4bc      	b.n	800be48 <tcp_input+0x2d4>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c4ce:	9b05      	ldr	r3, [sp, #20]
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	881a      	ldrh	r2, [r3, #0]
 800c4d4:	4b2b      	ldr	r3, [pc, #172]	@ (800c584 <tcp_input+0xa10>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	441a      	add	r2, r3
 800c4da:	4b2b      	ldr	r3, [pc, #172]	@ (800c588 <tcp_input+0xa14>)
 800c4dc:	6819      	ldr	r1, [r3, #0]
 800c4de:	f8bc 3000 	ldrh.w	r3, [ip]
 800c4e2:	9302      	str	r3, [sp, #8]
 800c4e4:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800c4e8:	e770      	b.n	800c3cc <tcp_input+0x858>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c4ea:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 800c4ec:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d001      	beq.n	800c4f8 <tcp_input+0x984>
              pcb->rcv_wnd++;
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	852b      	strh	r3, [r5, #40]	@ 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800c4f8:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 800c4fc:	2e00      	cmp	r6, #0
 800c4fe:	f43f af46 	beq.w	800c38e <tcp_input+0x81a>
 800c502:	2300      	movs	r3, #0
 800c504:	4629      	mov	r1, r5
 800c506:	6928      	ldr	r0, [r5, #16]
 800c508:	461a      	mov	r2, r3
 800c50a:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800c50c:	300d      	adds	r0, #13
 800c50e:	f47f af3e 	bne.w	800c38e <tcp_input+0x81a>
 800c512:	e4ac      	b.n	800be6e <tcp_input+0x2fa>
            pbuf_free(recv_data);
 800c514:	4610      	mov	r0, r2
 800c516:	f7fc fe95 	bl	8009244 <pbuf_free>
            tcp_abort(pcb);
 800c51a:	4628      	mov	r0, r5
 800c51c:	f7fe f98c 	bl	800a838 <tcp_abort>
            goto aborted;
 800c520:	e4a5      	b.n	800be6e <tcp_input+0x2fa>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	06db      	lsls	r3, r3, #27
 800c526:	f57f ac8f 	bpl.w	800be48 <tcp_input+0x2d4>
 800c52a:	4b17      	ldr	r3, [pc, #92]	@ (800c588 <tcp_input+0xa14>)
 800c52c:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	429a      	cmp	r2, r3
 800c532:	f47f ac89 	bne.w	800be48 <tcp_input+0x2d4>
 800c536:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800c538:	2b00      	cmp	r3, #0
 800c53a:	f47f ac85 	bne.w	800be48 <tcp_input+0x2d4>
        pcb->state = FIN_WAIT_2;
 800c53e:	2306      	movs	r3, #6
 800c540:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800c542:	e481      	b.n	800be48 <tcp_input+0x2d4>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c544:	0798      	lsls	r0, r3, #30
 800c546:	f57f ac7f 	bpl.w	800be48 <tcp_input+0x2d4>
 800c54a:	4b0e      	ldr	r3, [pc, #56]	@ (800c584 <tcp_input+0xa10>)
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800c550:	3b01      	subs	r3, #1
 800c552:	4293      	cmp	r3, r2
 800c554:	f47f ac78 	bne.w	800be48 <tcp_input+0x2d4>
        tcp_rexmit(pcb);
 800c558:	4628      	mov	r0, r5
 800c55a:	f000 ff59 	bl	800d410 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800c55e:	e473      	b.n	800be48 <tcp_input+0x2d4>
 800c560:	2402075c 	.word	0x2402075c
 800c564:	24020758 	.word	0x24020758
 800c568:	24020757 	.word	0x24020757
 800c56c:	2402076c 	.word	0x2402076c
 800c570:	08013178 	.word	0x08013178
 800c574:	08013358 	.word	0x08013358
 800c578:	080110dc 	.word	0x080110dc
 800c57c:	08013368 	.word	0x08013368
 800c580:	08013504 	.word	0x08013504
 800c584:	24020780 	.word	0x24020780
 800c588:	2402077c 	.word	0x2402077c
 800c58c:	24019ca8 	.word	0x24019ca8
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c590:	4633      	mov	r3, r6
 800c592:	4630      	mov	r0, r6
 800c594:	4629      	mov	r1, r5
 800c596:	f7fe fb8f 	bl	800acb8 <tcp_recv_null>
 800c59a:	e6e4      	b.n	800c366 <tcp_input+0x7f2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c59c:	69ab      	ldr	r3, [r5, #24]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f43f aaf7 	beq.w	800bb92 <tcp_input+0x1e>
 800c5a4:	4601      	mov	r1, r0
 800c5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5aa:	6928      	ldr	r0, [r5, #16]
 800c5ac:	4798      	blx	r3
 800c5ae:	f7ff baf0 	b.w	800bb92 <tcp_input+0x1e>
      tcp_abandon(npcb, 0);
 800c5b2:	4641      	mov	r1, r8
 800c5b4:	4648      	mov	r0, r9
 800c5b6:	f7fe f869 	bl	800a68c <tcp_abandon>
      return;
 800c5ba:	f7ff baea 	b.w	800bb92 <tcp_input+0x1e>
          pcb->state = ESTABLISHED;
 800c5be:	2304      	movs	r3, #4
 800c5c0:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 800c5c2:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d0a8      	beq.n	800c51a <tcp_input+0x9a6>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c5c8:	699b      	ldr	r3, [r3, #24]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d05c      	beq.n	800c688 <tcp_input+0xb14>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	6928      	ldr	r0, [r5, #16]
 800c5d4:	4798      	blx	r3
          if (err != ERR_OK) {
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	d167      	bne.n	800c6ac <tcp_input+0xb38>
          tcp_receive(pcb);
 800c5dc:	4628      	mov	r0, r5
 800c5de:	f7fe fd7f 	bl	800b0e0 <tcp_receive>
          if (recv_acked != 0) {
 800c5e2:	f8ba 3000 	ldrh.w	r3, [sl]
 800c5e6:	b113      	cbz	r3, 800c5ee <tcp_input+0xa7a>
            recv_acked--;
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	f8aa 3000 	strh.w	r3, [sl]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c5ee:	8e69      	ldrh	r1, [r5, #50]	@ 0x32
 800c5f0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800c5f4:	004a      	lsls	r2, r1, #1
 800c5f6:	0088      	lsls	r0, r1, #2
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	4616      	mov	r6, r2
 800c5fc:	bf38      	it	cc
 800c5fe:	461e      	movcc	r6, r3
 800c600:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800c604:	d934      	bls.n	800c670 <tcp_input+0xafc>
 800c606:	b283      	uxth	r3, r0
 800c608:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
          if (recv_flags & TF_GOT_FIN) {
 800c60c:	f899 3000 	ldrb.w	r3, [r9]
 800c610:	069e      	lsls	r6, r3, #26
 800c612:	f57f ac19 	bpl.w	800be48 <tcp_input+0x2d4>
 800c616:	e579      	b.n	800c10c <tcp_input+0x598>
        TCP_RMV_ACTIVE(pcb);
 800c618:	68ea      	ldr	r2, [r5, #12]
 800c61a:	60da      	str	r2, [r3, #12]
 800c61c:	e64f      	b.n	800c2be <tcp_input+0x74a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c61e:	4b33      	ldr	r3, [pc, #204]	@ (800c6ec <tcp_input+0xb78>)
 800c620:	f240 120d 	movw	r2, #269	@ 0x10d
 800c624:	4932      	ldr	r1, [pc, #200]	@ (800c6f0 <tcp_input+0xb7c>)
 800c626:	4833      	ldr	r0, [pc, #204]	@ (800c6f4 <tcp_input+0xb80>)
 800c628:	f003 fc84 	bl	800ff34 <iprintf>
      if (prev != NULL) {
 800c62c:	f1b8 0f00 	cmp.w	r8, #0
 800c630:	f43f abc1 	beq.w	800bdb6 <tcp_input+0x242>
 800c634:	68eb      	ldr	r3, [r5, #12]
 800c636:	f7ff bbb8 	b.w	800bdaa <tcp_input+0x236>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c63a:	4b2c      	ldr	r3, [pc, #176]	@ (800c6ec <tcp_input+0xb78>)
 800c63c:	f240 1215 	movw	r2, #277	@ 0x115
 800c640:	492d      	ldr	r1, [pc, #180]	@ (800c6f8 <tcp_input+0xb84>)
 800c642:	482c      	ldr	r0, [pc, #176]	@ (800c6f4 <tcp_input+0xb80>)
 800c644:	f003 fc76 	bl	800ff34 <iprintf>
  if (pcb == NULL) {
 800c648:	f7ff bbb9 	b.w	800bdbe <tcp_input+0x24a>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c64c:	2900      	cmp	r1, #0
 800c64e:	f47f aecb 	bne.w	800c3e8 <tcp_input+0x874>
 800c652:	4b26      	ldr	r3, [pc, #152]	@ (800c6ec <tcp_input+0xb78>)
 800c654:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800c658:	4928      	ldr	r1, [pc, #160]	@ (800c6fc <tcp_input+0xb88>)
 800c65a:	4826      	ldr	r0, [pc, #152]	@ (800c6f4 <tcp_input+0xb80>)
 800c65c:	f003 fc6a 	bl	800ff34 <iprintf>
 800c660:	e6c2      	b.n	800c3e8 <tcp_input+0x874>
  } else if (flags & TCP_FIN) {
 800c662:	07c1      	lsls	r1, r0, #31
 800c664:	f57f ac55 	bpl.w	800bf12 <tcp_input+0x39e>
    pcb->tmr = tcp_ticks;
 800c668:	4b25      	ldr	r3, [pc, #148]	@ (800c700 <tcp_input+0xb8c>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	622b      	str	r3, [r5, #32]
 800c66e:	e450      	b.n	800bf12 <tcp_input+0x39e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c670:	429a      	cmp	r2, r3
 800c672:	bf88      	it	hi
 800c674:	b293      	uxthhi	r3, r2
 800c676:	e7c7      	b.n	800c608 <tcp_input+0xa94>
          TCP_RMV_ACTIVE(pcb);
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f43f ae20 	beq.w	800c2be <tcp_input+0x74a>
 800c67e:	68da      	ldr	r2, [r3, #12]
 800c680:	42aa      	cmp	r2, r5
 800c682:	d0c9      	beq.n	800c618 <tcp_input+0xaa4>
 800c684:	4613      	mov	r3, r2
 800c686:	e7f7      	b.n	800c678 <tcp_input+0xb04>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c688:	4b18      	ldr	r3, [pc, #96]	@ (800c6ec <tcp_input+0xb78>)
 800c68a:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800c68e:	491d      	ldr	r1, [pc, #116]	@ (800c704 <tcp_input+0xb90>)
 800c690:	4818      	ldr	r0, [pc, #96]	@ (800c6f4 <tcp_input+0xb80>)
 800c692:	f003 fc4f 	bl	800ff34 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c696:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800c698:	699b      	ldr	r3, [r3, #24]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d197      	bne.n	800c5ce <tcp_input+0xa5a>
 800c69e:	e73c      	b.n	800c51a <tcp_input+0x9a6>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6a0:	9102      	str	r1, [sp, #8]
 800c6a2:	4432      	add	r2, r6
 800c6a4:	4918      	ldr	r1, [pc, #96]	@ (800c708 <tcp_input+0xb94>)
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	6809      	ldr	r1, [r1, #0]
 800c6aa:	e68f      	b.n	800c3cc <tcp_input+0x858>
            if (err != ERR_ABRT) {
 800c6ac:	330d      	adds	r3, #13
 800c6ae:	f43f abde 	beq.w	800be6e <tcp_input+0x2fa>
 800c6b2:	e732      	b.n	800c51a <tcp_input+0x9a6>
          pcb->rtime = -1;
 800c6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b8:	e6f9      	b.n	800c4ae <tcp_input+0x93a>
          rseg = pcb->unsent;
 800c6ba:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c6bc:	b176      	cbz	r6, 800c6dc <tcp_input+0xb68>
          pcb->unsent = rseg->next;
 800c6be:	6833      	ldr	r3, [r6, #0]
 800c6c0:	66eb      	str	r3, [r5, #108]	@ 0x6c
 800c6c2:	e6ea      	b.n	800c49a <tcp_input+0x926>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c6c4:	4b09      	ldr	r3, [pc, #36]	@ (800c6ec <tcp_input+0xb78>)
 800c6c6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800c6ca:	4910      	ldr	r1, [pc, #64]	@ (800c70c <tcp_input+0xb98>)
 800c6cc:	4809      	ldr	r0, [pc, #36]	@ (800c6f4 <tcp_input+0xb80>)
 800c6ce:	f003 fc31 	bl	800ff34 <iprintf>
 800c6d2:	e6d7      	b.n	800c484 <tcp_input+0x910>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c6d4:	4299      	cmp	r1, r3
 800c6d6:	bf88      	it	hi
 800c6d8:	b28b      	uxthhi	r3, r1
 800c6da:	e6cc      	b.n	800c476 <tcp_input+0x902>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c6dc:	4b03      	ldr	r3, [pc, #12]	@ (800c6ec <tcp_input+0xb78>)
 800c6de:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800c6e2:	490b      	ldr	r1, [pc, #44]	@ (800c710 <tcp_input+0xb9c>)
 800c6e4:	4803      	ldr	r0, [pc, #12]	@ (800c6f4 <tcp_input+0xb80>)
 800c6e6:	f003 fc25 	bl	800ff34 <iprintf>
 800c6ea:	e7e8      	b.n	800c6be <tcp_input+0xb4a>
 800c6ec:	08013178 	.word	0x08013178
 800c6f0:	08013410 	.word	0x08013410
 800c6f4:	080110dc 	.word	0x080110dc
 800c6f8:	0801343c 	.word	0x0801343c
 800c6fc:	08013498 	.word	0x08013498
 800c700:	24020768 	.word	0x24020768
 800c704:	080134e4 	.word	0x080134e4
 800c708:	2402077c 	.word	0x2402077c
 800c70c:	080134b8 	.word	0x080134b8
 800c710:	080134d0 	.word	0x080134d0

0800c714 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800c714:	4a02      	ldr	r2, [pc, #8]	@ (800c720 <tcp_trigger_input_pcb_close+0xc>)
 800c716:	7813      	ldrb	r3, [r2, #0]
 800c718:	f043 0310 	orr.w	r3, r3, #16
 800c71c:	7013      	strb	r3, [r2, #0]
}
 800c71e:	4770      	bx	lr
 800c720:	24020774 	.word	0x24020774

0800c724 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c728:	2600      	movs	r6, #0
 800c72a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800c72c:	460c      	mov	r4, r1
 800c72e:	4681      	mov	r9, r0
 800c730:	f361 060f 	bfi	r6, r1, #0, #16
 800c734:	4615      	mov	r5, r2
 800c736:	4698      	mov	r8, r3
 800c738:	f89d a02c 	ldrb.w	sl, [sp, #44]	@ 0x2c
 800c73c:	f361 461f 	bfi	r6, r1, #16, #16
 800c740:	f89d b030 	ldrb.w	fp, [sp, #48]	@ 0x30
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c744:	2f00      	cmp	r7, #0
 800c746:	d033      	beq.n	800c7b0 <tcp_pbuf_prealloc+0x8c>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c748:	42ac      	cmp	r4, r5
 800c74a:	d20e      	bcs.n	800c76a <tcp_pbuf_prealloc+0x46>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c74c:	f01a 0f02 	tst.w	sl, #2
 800c750:	d008      	beq.n	800c764 <tcp_pbuf_prealloc+0x40>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c752:	f204 51b7 	addw	r1, r4, #1463	@ 0x5b7
 800c756:	f021 0103 	bic.w	r1, r1, #3
 800c75a:	42a9      	cmp	r1, r5
 800c75c:	bf28      	it	cs
 800c75e:	4629      	movcs	r1, r5
 800c760:	b289      	uxth	r1, r1
 800c762:	e003      	b.n	800c76c <tcp_pbuf_prealloc+0x48>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c764:	8b7b      	ldrh	r3, [r7, #26]
 800c766:	065b      	lsls	r3, r3, #25
 800c768:	d518      	bpl.n	800c79c <tcp_pbuf_prealloc+0x78>
 800c76a:	4621      	mov	r1, r4
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c76c:	4648      	mov	r0, r9
 800c76e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c772:	f7fc fdd7 	bl	8009324 <pbuf_alloc>
  if (p == NULL) {
 800c776:	4605      	mov	r5, r0
 800c778:	b168      	cbz	r0, 800c796 <tcp_pbuf_prealloc+0x72>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c77a:	6803      	ldr	r3, [r0, #0]
 800c77c:	b133      	cbz	r3, 800c78c <tcp_pbuf_prealloc+0x68>
 800c77e:	4b10      	ldr	r3, [pc, #64]	@ (800c7c0 <tcp_pbuf_prealloc+0x9c>)
 800c780:	f240 120b 	movw	r2, #267	@ 0x10b
 800c784:	490f      	ldr	r1, [pc, #60]	@ (800c7c4 <tcp_pbuf_prealloc+0xa0>)
 800c786:	4810      	ldr	r0, [pc, #64]	@ (800c7c8 <tcp_pbuf_prealloc+0xa4>)
 800c788:	f003 fbd4 	bl	800ff34 <iprintf>
  *oversize = p->len - length;
 800c78c:	896b      	ldrh	r3, [r5, #10]
 800c78e:	1b1b      	subs	r3, r3, r4
 800c790:	f8a8 3000 	strh.w	r3, [r8]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c794:	60ae      	str	r6, [r5, #8]
  return p;
}
 800c796:	4628      	mov	r0, r5
 800c798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (!(pcb->flags & TF_NODELAY) &&
 800c79c:	f1bb 0f00 	cmp.w	fp, #0
 800c7a0:	d0d7      	beq.n	800c752 <tcp_pbuf_prealloc+0x2e>
         (!first_seg ||
 800c7a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1d4      	bne.n	800c752 <tcp_pbuf_prealloc+0x2e>
          pcb->unsent != NULL ||
 800c7a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1d1      	bne.n	800c752 <tcp_pbuf_prealloc+0x2e>
 800c7ae:	e7dc      	b.n	800c76a <tcp_pbuf_prealloc+0x46>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c7b0:	4b03      	ldr	r3, [pc, #12]	@ (800c7c0 <tcp_pbuf_prealloc+0x9c>)
 800c7b2:	22e9      	movs	r2, #233	@ 0xe9
 800c7b4:	4905      	ldr	r1, [pc, #20]	@ (800c7cc <tcp_pbuf_prealloc+0xa8>)
 800c7b6:	4804      	ldr	r0, [pc, #16]	@ (800c7c8 <tcp_pbuf_prealloc+0xa4>)
 800c7b8:	f003 fbbc 	bl	800ff34 <iprintf>
 800c7bc:	e7c4      	b.n	800c748 <tcp_pbuf_prealloc+0x24>
 800c7be:	bf00      	nop
 800c7c0:	08013520 	.word	0x08013520
 800c7c4:	08013574 	.word	0x08013574
 800c7c8:	080110dc 	.word	0x080110dc
 800c7cc:	08013554 	.word	0x08013554

0800c7d0 <tcp_create_segment>:
{
 800c7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d4:	460e      	mov	r6, r1
 800c7d6:	f89d a020 	ldrb.w	sl, [sp, #32]
 800c7da:	4690      	mov	r8, r2
 800c7dc:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c7de:	4607      	mov	r7, r0
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d047      	beq.n	800c874 <tcp_create_segment+0xa4>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c7e4:	2e00      	cmp	r6, #0
 800c7e6:	d04d      	beq.n	800c884 <tcp_create_segment+0xb4>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c7e8:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c7ec:	2003      	movs	r0, #3
 800c7ee:	f7fc f9d7 	bl	8008ba0 <memp_malloc>
 800c7f2:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c7f4:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	d051      	beq.n	800c8a0 <tcp_create_segment+0xd0>
  seg->flags = optflags;
 800c7fc:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800c800:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c802:	8932      	ldrh	r2, [r6, #8]
  seg->p = p;
 800c804:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c806:	42aa      	cmp	r2, r5
  seg->next = NULL;
 800c808:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c80a:	d32b      	bcc.n	800c864 <tcp_create_segment+0x94>
  seg->len = p->tot_len - optlen;
 800c80c:	1b52      	subs	r2, r2, r5
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c80e:	4630      	mov	r0, r6
 800c810:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800c812:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c814:	f7fc fc84 	bl	8009120 <pbuf_add_header>
 800c818:	4606      	mov	r6, r0
 800c81a:	2800      	cmp	r0, #0
 800c81c:	d139      	bne.n	800c892 <tcp_create_segment+0xc2>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c81e:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c820:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c822:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c824:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c828:	f505 45a0 	add.w	r5, r5, #20480	@ 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c82c:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c830:	f7fb fe16 	bl	8008460 <lwip_htons>
 800c834:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c838:	8b38      	ldrh	r0, [r7, #24]
 800c83a:	68e7      	ldr	r7, [r4, #12]
 800c83c:	f7fb fe10 	bl	8008460 <lwip_htons>
 800c840:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c842:	4648      	mov	r0, r9
 800c844:	68e7      	ldr	r7, [r4, #12]
 800c846:	f7fb fe0f 	bl	8008468 <lwip_htonl>
 800c84a:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c84c:	ea48 0005 	orr.w	r0, r8, r5
 800c850:	68e7      	ldr	r7, [r4, #12]
 800c852:	f7fb fe05 	bl	8008460 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800c856:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c858:	81b8      	strh	r0, [r7, #12]
}
 800c85a:	4620      	mov	r0, r4
  seg->tcphdr->urgp = 0;
 800c85c:	749e      	strb	r6, [r3, #18]
 800c85e:	74de      	strb	r6, [r3, #19]
}
 800c860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c864:	22b0      	movs	r2, #176	@ 0xb0
 800c866:	4b10      	ldr	r3, [pc, #64]	@ (800c8a8 <tcp_create_segment+0xd8>)
 800c868:	4910      	ldr	r1, [pc, #64]	@ (800c8ac <tcp_create_segment+0xdc>)
 800c86a:	4811      	ldr	r0, [pc, #68]	@ (800c8b0 <tcp_create_segment+0xe0>)
 800c86c:	f003 fb62 	bl	800ff34 <iprintf>
  seg->len = p->tot_len - optlen;
 800c870:	8932      	ldrh	r2, [r6, #8]
 800c872:	e7cb      	b.n	800c80c <tcp_create_segment+0x3c>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c874:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a8 <tcp_create_segment+0xd8>)
 800c876:	22a3      	movs	r2, #163	@ 0xa3
 800c878:	490e      	ldr	r1, [pc, #56]	@ (800c8b4 <tcp_create_segment+0xe4>)
 800c87a:	480d      	ldr	r0, [pc, #52]	@ (800c8b0 <tcp_create_segment+0xe0>)
 800c87c:	f003 fb5a 	bl	800ff34 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c880:	2e00      	cmp	r6, #0
 800c882:	d1b1      	bne.n	800c7e8 <tcp_create_segment+0x18>
 800c884:	4b08      	ldr	r3, [pc, #32]	@ (800c8a8 <tcp_create_segment+0xd8>)
 800c886:	22a4      	movs	r2, #164	@ 0xa4
 800c888:	490b      	ldr	r1, [pc, #44]	@ (800c8b8 <tcp_create_segment+0xe8>)
 800c88a:	4809      	ldr	r0, [pc, #36]	@ (800c8b0 <tcp_create_segment+0xe0>)
 800c88c:	f003 fb52 	bl	800ff34 <iprintf>
 800c890:	e7aa      	b.n	800c7e8 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 800c892:	4620      	mov	r0, r4
 800c894:	f7fd fada 	bl	8009e4c <tcp_seg_free>
    return NULL;
 800c898:	2400      	movs	r4, #0
}
 800c89a:	4620      	mov	r0, r4
 800c89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	f7fc fccf 	bl	8009244 <pbuf_free>
    return NULL;
 800c8a6:	e7f7      	b.n	800c898 <tcp_create_segment+0xc8>
 800c8a8:	08013520 	.word	0x08013520
 800c8ac:	080135cc 	.word	0x080135cc
 800c8b0:	080110dc 	.word	0x080110dc
 800c8b4:	08013588 	.word	0x08013588
 800c8b8:	080135a8 	.word	0x080135a8

0800c8bc <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c8bc:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c8be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c8c2:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c8c4:	4606      	mov	r6, r0
 800c8c6:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c8c8:	2022      	movs	r0, #34	@ 0x22
 800c8ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c8ce:	461c      	mov	r4, r3
 800c8d0:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800c8d4:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800c8d8:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c8dc:	f7fc fd22 	bl	8009324 <pbuf_alloc>
  if (p != NULL) {
 800c8e0:	4605      	mov	r5, r0
 800c8e2:	b300      	cbz	r0, 800c926 <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c8e4:	8943      	ldrh	r3, [r0, #10]
 800c8e6:	2b13      	cmp	r3, #19
 800c8e8:	d920      	bls.n	800c92c <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800c8ea:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 800c8ec:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800c8ee:	f7fb fdb7 	bl	8008460 <lwip_htons>
 800c8f2:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c8f4:	4650      	mov	r0, sl
 800c8f6:	f7fb fdb3 	bl	8008460 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800c8fa:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800c8fc:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800c8fe:	4630      	mov	r0, r6
 800c900:	f7fb fdb2 	bl	8008468 <lwip_htonl>
 800c904:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c906:	f449 40a0 	orr.w	r0, r9, #20480	@ 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 800c90a:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c90c:	f7fb fda8 	bl	8008460 <lwip_htons>
 800c910:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 800c912:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c914:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c916:	f7fb fda3 	bl	8008460 <lwip_htons>
    tcphdr->chksum = 0;
 800c91a:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800c91c:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800c91e:	7423      	strb	r3, [r4, #16]
 800c920:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800c922:	74a3      	strb	r3, [r4, #18]
 800c924:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800c926:	4628      	mov	r0, r5
 800c928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c92c:	4b03      	ldr	r3, [pc, #12]	@ (800c93c <tcp_output_alloc_header_common.constprop.0+0x80>)
 800c92e:	f240 7223 	movw	r2, #1827	@ 0x723
 800c932:	4903      	ldr	r1, [pc, #12]	@ (800c940 <tcp_output_alloc_header_common.constprop.0+0x84>)
 800c934:	4803      	ldr	r0, [pc, #12]	@ (800c944 <tcp_output_alloc_header_common.constprop.0+0x88>)
 800c936:	f003 fafd 	bl	800ff34 <iprintf>
 800c93a:	e7d6      	b.n	800c8ea <tcp_output_alloc_header_common.constprop.0+0x2e>
 800c93c:	08013520 	.word	0x08013520
 800c940:	080135e4 	.word	0x080135e4
 800c944:	080110dc 	.word	0x080110dc

0800c948 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	460d      	mov	r5, r1
 800c94c:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c94e:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800c950:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c952:	b190      	cbz	r0, 800c97a <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c954:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800c956:	2210      	movs	r2, #16
 800c958:	8b21      	ldrh	r1, [r4, #24]
 800c95a:	9302      	str	r3, [sp, #8]
 800c95c:	e9cd 1200 	strd	r1, r2, [sp]
 800c960:	4632      	mov	r2, r6
 800c962:	4629      	mov	r1, r5
 800c964:	8ae3      	ldrh	r3, [r4, #22]
 800c966:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c968:	f7ff ffa8 	bl	800c8bc <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c96c:	b118      	cbz	r0, 800c976 <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c96e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800c970:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c972:	4413      	add	r3, r2
 800c974:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
  return p;
}
 800c976:	b004      	add	sp, #16
 800c978:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c97a:	4b04      	ldr	r3, [pc, #16]	@ (800c98c <tcp_output_alloc_header.constprop.0+0x44>)
 800c97c:	f240 7242 	movw	r2, #1858	@ 0x742
 800c980:	4903      	ldr	r1, [pc, #12]	@ (800c990 <tcp_output_alloc_header.constprop.0+0x48>)
 800c982:	4804      	ldr	r0, [pc, #16]	@ (800c994 <tcp_output_alloc_header.constprop.0+0x4c>)
 800c984:	f003 fad6 	bl	800ff34 <iprintf>
 800c988:	e7e4      	b.n	800c954 <tcp_output_alloc_header.constprop.0+0xc>
 800c98a:	bf00      	nop
 800c98c:	08013520 	.word	0x08013520
 800c990:	08013614 	.word	0x08013614
 800c994:	080110dc 	.word	0x080110dc

0800c998 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c99a:	4604      	mov	r4, r0
 800c99c:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c99e:	460d      	mov	r5, r1
{
 800c9a0:	4617      	mov	r7, r2
 800c9a2:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c9a4:	b1f9      	cbz	r1, 800c9e6 <tcp_output_control_segment+0x4e>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c9a6:	b334      	cbz	r4, 800c9f6 <tcp_output_control_segment+0x5e>
 800c9a8:	7a20      	ldrb	r0, [r4, #8]
 800c9aa:	b9a8      	cbnz	r0, 800c9d8 <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f002 f8ed 	bl	800eb8c <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800c9b2:	b1a8      	cbz	r0, 800c9e0 <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c9b4:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800c9b6:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c9b8:	9400      	str	r4, [sp, #0]
 800c9ba:	2406      	movs	r4, #6
 800c9bc:	9002      	str	r0, [sp, #8]
 800c9be:	4632      	mov	r2, r6
 800c9c0:	9401      	str	r4, [sp, #4]
 800c9c2:	4639      	mov	r1, r7
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f002 fa7b 	bl	800eec0 <ip4_output_if>
 800c9ca:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	f7fc fc39 	bl	8009244 <pbuf_free>
  return err;
}
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	b005      	add	sp, #20
 800c9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 800c9d8:	f7fc fb2a 	bl	8009030 <netif_get_by_index>
  if (netif == NULL) {
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d1e9      	bne.n	800c9b4 <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 800c9e0:	f06f 0403 	mvn.w	r4, #3
 800c9e4:	e7f2      	b.n	800c9cc <tcp_output_control_segment+0x34>
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c9e6:	4b07      	ldr	r3, [pc, #28]	@ (800ca04 <tcp_output_control_segment+0x6c>)
 800c9e8:	f240 7287 	movw	r2, #1927	@ 0x787
 800c9ec:	4906      	ldr	r1, [pc, #24]	@ (800ca08 <tcp_output_control_segment+0x70>)
 800c9ee:	4807      	ldr	r0, [pc, #28]	@ (800ca0c <tcp_output_control_segment+0x74>)
 800c9f0:	f003 faa0 	bl	800ff34 <iprintf>
 800c9f4:	e7d7      	b.n	800c9a6 <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	f002 f8c8 	bl	800eb8c <ip4_route>
  if (netif == NULL) {
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d0ef      	beq.n	800c9e0 <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 800ca00:	23ff      	movs	r3, #255	@ 0xff
 800ca02:	e7d9      	b.n	800c9b8 <tcp_output_control_segment+0x20>
 800ca04:	08013520 	.word	0x08013520
 800ca08:	0801363c 	.word	0x0801363c
 800ca0c:	080110dc 	.word	0x080110dc

0800ca10 <tcp_write>:
{
 800ca10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 800ca14:	2400      	movs	r4, #0
{
 800ca16:	b091      	sub	sp, #68	@ 0x44
 800ca18:	9107      	str	r1, [sp, #28]
 800ca1a:	9309      	str	r3, [sp, #36]	@ 0x24
  u16_t oversize = 0;
 800ca1c:	f8ad 403e 	strh.w	r4, [sp, #62]	@ 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca20:	2800      	cmp	r0, #0
 800ca22:	f000 82dc 	beq.w	800cfde <tcp_write+0x5ce>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800ca26:	f8b0 a062 	ldrh.w	sl, [r0, #98]	@ 0x62
 800ca2a:	4691      	mov	r9, r2
 800ca2c:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800ca2e:	4680      	mov	r8, r0
 800ca30:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 800ca34:	459a      	cmp	sl, r3
 800ca36:	4652      	mov	r2, sl
 800ca38:	bf28      	it	cs
 800ca3a:	461a      	movcs	r2, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800ca3c:	2a00      	cmp	r2, #0
 800ca3e:	bf08      	it	eq
 800ca40:	461a      	moveq	r2, r3
 800ca42:	9205      	str	r2, [sp, #20]
  LWIP_ASSERT_CORE_LOCKED();
 800ca44:	f7f7 fb44 	bl	80040d0 <sys_check_core_locking>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ca48:	9b07      	ldr	r3, [sp, #28]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	f000 82bd 	beq.w	800cfca <tcp_write+0x5ba>
  if ((pcb->state != ESTABLISHED) &&
 800ca50:	f898 3014 	ldrb.w	r3, [r8, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ca54:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 800ca56:	2a02      	cmp	r2, #2
 800ca58:	d902      	bls.n	800ca60 <tcp_write+0x50>
 800ca5a:	2b07      	cmp	r3, #7
 800ca5c:	f040 824d 	bne.w	800cefa <tcp_write+0x4ea>
  } else if (len == 0) {
 800ca60:	f1b9 0f00 	cmp.w	r9, #0
 800ca64:	d05b      	beq.n	800cb1e <tcp_write+0x10e>
  if (len > pcb->snd_buf) {
 800ca66:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 800ca6a:	454b      	cmp	r3, r9
 800ca6c:	f0c0 8290 	bcc.w	800cf90 <tcp_write+0x580>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ca70:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
 800ca74:	2d0f      	cmp	r5, #15
 800ca76:	f200 828b 	bhi.w	800cf90 <tcp_write+0x580>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ca7a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
  if (pcb->snd_queuelen != 0) {
 800ca7e:	2d00      	cmp	r5, #0
 800ca80:	d043      	beq.n	800cb0a <tcp_write+0xfa>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ca82:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f000 81db 	beq.w	800ce42 <tcp_write+0x432>
  if (pcb->unsent != NULL) {
 800ca8c:	2f00      	cmp	r7, #0
 800ca8e:	f000 81c6 	beq.w	800ce1e <tcp_write+0x40e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ca92:	463b      	mov	r3, r7
 800ca94:	683f      	ldr	r7, [r7, #0]
 800ca96:	2f00      	cmp	r7, #0
 800ca98:	d1fb      	bne.n	800ca92 <tcp_write+0x82>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ca9a:	7a9c      	ldrb	r4, [r3, #10]
 800ca9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca9e:	00a4      	lsls	r4, r4, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800caa0:	891b      	ldrh	r3, [r3, #8]
 800caa2:	9905      	ldr	r1, [sp, #20]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800caa4:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800caa8:	191a      	adds	r2, r3, r4
 800caaa:	4291      	cmp	r1, r2
 800caac:	f2c0 81eb 	blt.w	800ce86 <tcp_write+0x476>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cab0:	9a05      	ldr	r2, [sp, #20]
 800cab2:	eba2 0b04 	sub.w	fp, r2, r4
 800cab6:	ebab 0b03 	sub.w	fp, fp, r3
    oversize = pcb->unsent_oversize;
 800caba:	f8b8 3068 	ldrh.w	r3, [r8, #104]	@ 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cabe:	fa1f fb8b 	uxth.w	fp, fp
    oversize = pcb->unsent_oversize;
 800cac2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cac4:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    if (oversize > 0) {
 800cac8:	b383      	cbz	r3, 800cb2c <tcp_write+0x11c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800caca:	455b      	cmp	r3, fp
 800cacc:	f200 81cb 	bhi.w	800ce66 <tcp_write+0x456>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800cad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cad2:	454b      	cmp	r3, r9
 800cad4:	461c      	mov	r4, r3
 800cad6:	bf28      	it	cs
 800cad8:	464c      	movcs	r4, r9
 800cada:	455c      	cmp	r4, fp
 800cadc:	bf28      	it	cs
 800cade:	465c      	movcs	r4, fp
      oversize -= oversize_used;
 800cae0:	1b1b      	subs	r3, r3, r4
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800cae8:	b143      	cbz	r3, 800cafc <tcp_write+0xec>
 800caea:	45a1      	cmp	r9, r4
 800caec:	d006      	beq.n	800cafc <tcp_write+0xec>
 800caee:	4bae      	ldr	r3, [pc, #696]	@ (800cda8 <tcp_write+0x398>)
 800caf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800caf4:	49ad      	ldr	r1, [pc, #692]	@ (800cdac <tcp_write+0x39c>)
 800caf6:	48ae      	ldr	r0, [pc, #696]	@ (800cdb0 <tcp_write+0x3a0>)
 800caf8:	f003 fa1c 	bl	800ff34 <iprintf>
      space -= oversize_used;
 800cafc:	ebab 0b04 	sub.w	fp, fp, r4
 800cb00:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
      pos += oversize_used;
 800cb02:	940a      	str	r4, [sp, #40]	@ 0x28
      space -= oversize_used;
 800cb04:	fa1f fb8b 	uxth.w	fp, fp
 800cb08:	e011      	b.n	800cb2e <tcp_write+0x11e>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f000 8182 	beq.w	800ce14 <tcp_write+0x404>
 800cb10:	4ba5      	ldr	r3, [pc, #660]	@ (800cda8 <tcp_write+0x398>)
 800cb12:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800cb16:	49a7      	ldr	r1, [pc, #668]	@ (800cdb4 <tcp_write+0x3a4>)
 800cb18:	48a5      	ldr	r0, [pc, #660]	@ (800cdb0 <tcp_write+0x3a0>)
 800cb1a:	f003 fa0b 	bl	800ff34 <iprintf>
  if (pcb->unsent != NULL) {
 800cb1e:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 800cb22:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 800cb26:	2f00      	cmp	r7, #0
 800cb28:	d1b3      	bne.n	800ca92 <tcp_write+0x82>
 800cb2a:	e178      	b.n	800ce1e <tcp_write+0x40e>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cb2c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800cb2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb30:	454b      	cmp	r3, r9
 800cb32:	d23b      	bcs.n	800cbac <tcp_write+0x19c>
 800cb34:	f1bb 0f00 	cmp.w	fp, #0
 800cb38:	d038      	beq.n	800cbac <tcp_write+0x19c>
 800cb3a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cb3c:	8912      	ldrh	r2, [r2, #8]
 800cb3e:	920d      	str	r2, [sp, #52]	@ 0x34
 800cb40:	2a00      	cmp	r2, #0
 800cb42:	f000 817a 	beq.w	800ce3a <tcp_write+0x42a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800cb46:	eba9 0603 	sub.w	r6, r9, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cb4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 800cb4c:	455e      	cmp	r6, fp
 800cb4e:	bfa8      	it	ge
 800cb50:	465e      	movge	r6, fp
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cb52:	07d9      	lsls	r1, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800cb54:	b2b4      	uxth	r4, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cb56:	f100 81d3 	bmi.w	800cf00 <tcp_write+0x4f0>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800cb5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb5c:	685a      	ldr	r2, [r3, #4]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	6812      	ldr	r2, [r2, #0]
 800cb62:	2a00      	cmp	r2, #0
 800cb64:	d1fb      	bne.n	800cb5e <tcp_write+0x14e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800cb66:	920c      	str	r2, [sp, #48]	@ 0x30
 800cb68:	7b1a      	ldrb	r2, [r3, #12]
 800cb6a:	2a3f      	cmp	r2, #63	@ 0x3f
 800cb6c:	d806      	bhi.n	800cb7c <tcp_write+0x16c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800cb6e:	895a      	ldrh	r2, [r3, #10]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800cb74:	9a07      	ldr	r2, [sp, #28]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	f000 81ba 	beq.w	800cef0 <tcp_write+0x4e0>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	4621      	mov	r1, r4
 800cb80:	2000      	movs	r0, #0
 800cb82:	f7fc fbcf 	bl	8009324 <pbuf_alloc>
 800cb86:	900c      	str	r0, [sp, #48]	@ 0x30
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	f000 8232 	beq.w	800cff2 <tcp_write+0x5e2>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800cb8e:	9b07      	ldr	r3, [sp, #28]
 800cb90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cb92:	440b      	add	r3, r1
 800cb94:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800cb96:	f7fc fcc9 	bl	800952c <pbuf_clen>
 800cb9a:	1943      	adds	r3, r0, r5
 800cb9c:	b29d      	uxth	r5, r3
  u16_t extendlen = 0;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	930d      	str	r3, [sp, #52]	@ 0x34
      pos += seglen;
 800cba2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cba4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800cba6:	1919      	adds	r1, r3, r4
 800cba8:	b28c      	uxth	r4, r1
 800cbaa:	e003      	b.n	800cbb4 <tcp_write+0x1a4>
  struct pbuf *concat_p = NULL;
 800cbac:	2300      	movs	r3, #0
 800cbae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cbb0:	930c      	str	r3, [sp, #48]	@ 0x30
  u16_t extendlen = 0;
 800cbb2:	930d      	str	r3, [sp, #52]	@ 0x34
  while (pos < len) {
 800cbb4:	45a1      	cmp	r9, r4
 800cbb6:	f240 8083 	bls.w	800ccc0 <tcp_write+0x2b0>
 800cbba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cbbc:	2700      	movs	r7, #0
 800cbbe:	f003 0301 	and.w	r3, r3, #1
 800cbc2:	46bb      	mov	fp, r7
 800cbc4:	9308      	str	r3, [sp, #32]
 800cbc6:	e03f      	b.n	800cc48 <tcp_write+0x238>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cbc8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f040 80d2 	bne.w	800cd76 <tcp_write+0x366>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	4651      	mov	r1, sl
 800cbd6:	2036      	movs	r0, #54	@ 0x36
 800cbd8:	f7fc fba4 	bl	8009324 <pbuf_alloc>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	f000 80f1 	beq.w	800cdc4 <tcp_write+0x3b4>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800cbe2:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cbe4:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800cbe6:	9006      	str	r0, [sp, #24]
 800cbe8:	4422      	add	r2, r4
 800cbea:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cbec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cbf0:	2036      	movs	r0, #54	@ 0x36
 800cbf2:	f7fc fb97 	bl	8009324 <pbuf_alloc>
 800cbf6:	9b06      	ldr	r3, [sp, #24]
 800cbf8:	4606      	mov	r6, r0
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	f000 814d 	beq.w	800ce9a <tcp_write+0x48a>
      pbuf_cat(p/*header*/, p2/*data*/);
 800cc00:	4619      	mov	r1, r3
 800cc02:	f7fc fcbb 	bl	800957c <pbuf_cat>
    queuelen += pbuf_clen(p);
 800cc06:	4630      	mov	r0, r6
 800cc08:	f7fc fc90 	bl	800952c <pbuf_clen>
 800cc0c:	4428      	add	r0, r5
 800cc0e:	b285      	uxth	r5, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cc10:	2d10      	cmp	r5, #16
 800cc12:	d849      	bhi.n	800cca8 <tcp_write+0x298>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cc14:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
 800cc18:	2200      	movs	r2, #0
 800cc1a:	4631      	mov	r1, r6
 800cc1c:	4640      	mov	r0, r8
 800cc1e:	4423      	add	r3, r4
 800cc20:	9200      	str	r2, [sp, #0]
 800cc22:	f7ff fdd5 	bl	800c7d0 <tcp_create_segment>
 800cc26:	4606      	mov	r6, r0
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	f000 80cb 	beq.w	800cdc4 <tcp_write+0x3b4>
    if (queue == NULL) {
 800cc2e:	f1bb 0f00 	cmp.w	fp, #0
 800cc32:	d03e      	beq.n	800ccb2 <tcp_write+0x2a2>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800cc34:	2f00      	cmp	r7, #0
 800cc36:	f000 80a6 	beq.w	800cd86 <tcp_write+0x376>
    pos += seglen;
 800cc3a:	44a2      	add	sl, r4
      prev_seg->next = seg;
 800cc3c:	603e      	str	r6, [r7, #0]
    pos += seglen;
 800cc3e:	fa1f f48a 	uxth.w	r4, sl
  while (pos < len) {
 800cc42:	45a1      	cmp	r9, r4
 800cc44:	d93b      	bls.n	800ccbe <tcp_write+0x2ae>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cc46:	4637      	mov	r7, r6
    u16_t left = len - pos;
 800cc48:	eba9 0a04 	sub.w	sl, r9, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 800cc4c:	9b05      	ldr	r3, [sp, #20]
 800cc4e:	fa1f fa8a 	uxth.w	sl, sl
 800cc52:	459a      	cmp	sl, r3
 800cc54:	bf28      	it	cs
 800cc56:	469a      	movcs	sl, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cc58:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 800cc5a:	fa1f fa8a 	uxth.w	sl, sl
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d0b2      	beq.n	800cbc8 <tcp_write+0x1b8>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800cc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc64:	4651      	mov	r1, sl
 800cc66:	9a05      	ldr	r2, [sp, #20]
 800cc68:	2036      	movs	r0, #54	@ 0x36
 800cc6a:	e9cd 8300 	strd	r8, r3, [sp]
 800cc6e:	fabb f38b 	clz	r3, fp
 800cc72:	095b      	lsrs	r3, r3, #5
 800cc74:	9302      	str	r3, [sp, #8]
 800cc76:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800cc7a:	f7ff fd53 	bl	800c724 <tcp_pbuf_prealloc>
 800cc7e:	4606      	mov	r6, r0
 800cc80:	2800      	cmp	r0, #0
 800cc82:	f000 809f 	beq.w	800cdc4 <tcp_write+0x3b4>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cc86:	8943      	ldrh	r3, [r0, #10]
 800cc88:	4553      	cmp	r3, sl
 800cc8a:	f0c0 8084 	bcc.w	800cd96 <tcp_write+0x386>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800cc8e:	9b07      	ldr	r3, [sp, #28]
 800cc90:	4652      	mov	r2, sl
 800cc92:	6870      	ldr	r0, [r6, #4]
 800cc94:	1919      	adds	r1, r3, r4
 800cc96:	f003 fb0a 	bl	80102ae <memcpy>
    queuelen += pbuf_clen(p);
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f7fc fc46 	bl	800952c <pbuf_clen>
 800cca0:	4428      	add	r0, r5
 800cca2:	b285      	uxth	r5, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cca4:	2d10      	cmp	r5, #16
 800cca6:	d9b5      	bls.n	800cc14 <tcp_write+0x204>
      pbuf_free(p);
 800cca8:	4630      	mov	r0, r6
 800ccaa:	465f      	mov	r7, fp
 800ccac:	f7fc faca 	bl	8009244 <pbuf_free>
      goto memerr;
 800ccb0:	e089      	b.n	800cdc6 <tcp_write+0x3b6>
    pos += seglen;
 800ccb2:	44a2      	add	sl, r4
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ccb4:	4683      	mov	fp, r0
    pos += seglen;
 800ccb6:	fa1f f48a 	uxth.w	r4, sl
  while (pos < len) {
 800ccba:	45a1      	cmp	r9, r4
 800ccbc:	d8c3      	bhi.n	800cc46 <tcp_write+0x236>
 800ccbe:	465f      	mov	r7, fp
  if (oversize_used > 0) {
 800ccc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  pcb->unsent_oversize = oversize;
 800ccc2:	f8bd a03e 	ldrh.w	sl, [sp, #62]	@ 0x3e
  if (oversize_used > 0) {
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	f000 80ec 	beq.w	800cea4 <tcp_write+0x494>
    for (p = last_unsent->p; p; p = p->next) {
 800cccc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccce:	685c      	ldr	r4, [r3, #4]
 800ccd0:	b1d4      	cbz	r4, 800cd08 <tcp_write+0x2f8>
      p->tot_len += oversize_used;
 800ccd2:	8923      	ldrh	r3, [r4, #8]
 800ccd4:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
      if (p->next == NULL) {
 800ccd8:	6821      	ldr	r1, [r4, #0]
      p->tot_len += oversize_used;
 800ccda:	445b      	add	r3, fp
 800ccdc:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800ccde:	b131      	cbz	r1, 800ccee <tcp_write+0x2de>
      pos += seglen;
 800cce0:	460c      	mov	r4, r1
      p->tot_len += oversize_used;
 800cce2:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 800cce4:	6821      	ldr	r1, [r4, #0]
      p->tot_len += oversize_used;
 800cce6:	445b      	add	r3, fp
 800cce8:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800ccea:	2900      	cmp	r1, #0
 800ccec:	d1f8      	bne.n	800cce0 <tcp_write+0x2d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800ccee:	8963      	ldrh	r3, [r4, #10]
 800ccf0:	465a      	mov	r2, fp
 800ccf2:	6860      	ldr	r0, [r4, #4]
 800ccf4:	9907      	ldr	r1, [sp, #28]
 800ccf6:	4418      	add	r0, r3
 800ccf8:	f003 fad9 	bl	80102ae <memcpy>
        p->len += oversize_used;
 800ccfc:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800ccfe:	6821      	ldr	r1, [r4, #0]
        p->len += oversize_used;
 800cd00:	445b      	add	r3, fp
 800cd02:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800cd04:	2900      	cmp	r1, #0
 800cd06:	d1eb      	bne.n	800cce0 <tcp_write+0x2d0>
    last_unsent->len += oversize_used;
 800cd08:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cd0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd0c:	8913      	ldrh	r3, [r2, #8]
 800cd0e:	4419      	add	r1, r3
  if (concat_p != NULL) {
 800cd10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    last_unsent->len += oversize_used;
 800cd12:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 800cd14:	f8a8 a068 	strh.w	sl, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f000 810a 	beq.w	800cf32 <tcp_write+0x522>
    pbuf_cat(last_unsent->p, concat_p);
 800cd1e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800cd20:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cd24:	6860      	ldr	r0, [r4, #4]
 800cd26:	4651      	mov	r1, sl
 800cd28:	f7fc fc28 	bl	800957c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800cd2c:	f8ba 2008 	ldrh.w	r2, [sl, #8]
 800cd30:	8923      	ldrh	r3, [r4, #8]
 800cd32:	4413      	add	r3, r2
 800cd34:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800cd36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd38:	601f      	str	r7, [r3, #0]
  pcb->snd_lbb += len;
 800cd3a:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
  pcb->snd_queuelen = queuelen;
 800cd3e:	f8a8 5066 	strh.w	r5, [r8, #102]	@ 0x66
  pcb->snd_lbb += len;
 800cd42:	444b      	add	r3, r9
 800cd44:	f8c8 305c 	str.w	r3, [r8, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800cd48:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 800cd4c:	eba3 0309 	sub.w	r3, r3, r9
 800cd50:	f8a8 3064 	strh.w	r3, [r8, #100]	@ 0x64
  if (pcb->snd_queuelen != 0) {
 800cd54:	b125      	cbz	r5, 800cd60 <tcp_write+0x350>
    LWIP_ASSERT("tcp_write: valid queue length",
 800cd56:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f000 80bb 	beq.w	800ced6 <tcp_write+0x4c6>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800cd60:	b12e      	cbz	r6, 800cd6e <tcp_write+0x35e>
 800cd62:	68f3      	ldr	r3, [r6, #12]
 800cd64:	b11b      	cbz	r3, 800cd6e <tcp_write+0x35e>
 800cd66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd68:	0792      	lsls	r2, r2, #30
 800cd6a:	f140 80ac 	bpl.w	800cec6 <tcp_write+0x4b6>
  return ERR_OK;
 800cd6e:	2000      	movs	r0, #0
}
 800cd70:	b011      	add	sp, #68	@ 0x44
 800cd72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cd76:	4b0c      	ldr	r3, [pc, #48]	@ (800cda8 <tcp_write+0x398>)
 800cd78:	f240 2271 	movw	r2, #625	@ 0x271
 800cd7c:	490e      	ldr	r1, [pc, #56]	@ (800cdb8 <tcp_write+0x3a8>)
 800cd7e:	480c      	ldr	r0, [pc, #48]	@ (800cdb0 <tcp_write+0x3a0>)
 800cd80:	f003 f8d8 	bl	800ff34 <iprintf>
 800cd84:	e725      	b.n	800cbd2 <tcp_write+0x1c2>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800cd86:	4b08      	ldr	r3, [pc, #32]	@ (800cda8 <tcp_write+0x398>)
 800cd88:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800cd8c:	490b      	ldr	r1, [pc, #44]	@ (800cdbc <tcp_write+0x3ac>)
 800cd8e:	4808      	ldr	r0, [pc, #32]	@ (800cdb0 <tcp_write+0x3a0>)
 800cd90:	f003 f8d0 	bl	800ff34 <iprintf>
 800cd94:	e751      	b.n	800cc3a <tcp_write+0x22a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cd96:	4b04      	ldr	r3, [pc, #16]	@ (800cda8 <tcp_write+0x398>)
 800cd98:	f240 2266 	movw	r2, #614	@ 0x266
 800cd9c:	4908      	ldr	r1, [pc, #32]	@ (800cdc0 <tcp_write+0x3b0>)
 800cd9e:	4804      	ldr	r0, [pc, #16]	@ (800cdb0 <tcp_write+0x3a0>)
 800cda0:	f003 f8c8 	bl	800ff34 <iprintf>
 800cda4:	e773      	b.n	800cc8e <tcp_write+0x27e>
 800cda6:	bf00      	nop
 800cda8:	08013520 	.word	0x08013520
 800cdac:	0801375c 	.word	0x0801375c
 800cdb0:	080110dc 	.word	0x080110dc
 800cdb4:	080136f0 	.word	0x080136f0
 800cdb8:	08013818 	.word	0x08013818
 800cdbc:	08013828 	.word	0x08013828
 800cdc0:	080137d8 	.word	0x080137d8
 800cdc4:	465f      	mov	r7, fp
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cdc6:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800cdca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdce:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 800cdd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cdd4:	b113      	cbz	r3, 800cddc <tcp_write+0x3cc>
    pbuf_free(concat_p);
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7fc fa34 	bl	8009244 <pbuf_free>
  if (queue != NULL) {
 800cddc:	b117      	cbz	r7, 800cde4 <tcp_write+0x3d4>
    tcp_segs_free(queue);
 800cdde:	4638      	mov	r0, r7
 800cde0:	f7fd f822 	bl	8009e28 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800cde4:	f8b8 3066 	ldrh.w	r3, [r8, #102]	@ 0x66
 800cde8:	b923      	cbnz	r3, 800cdf4 <tcp_write+0x3e4>
  return ERR_MEM;
 800cdea:	f04f 30ff 	mov.w	r0, #4294967295
}
 800cdee:	b011      	add	sp, #68	@ 0x44
 800cdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800cdf4:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1f6      	bne.n	800cdea <tcp_write+0x3da>
 800cdfc:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d1f2      	bne.n	800cdea <tcp_write+0x3da>
 800ce04:	4b7e      	ldr	r3, [pc, #504]	@ (800d000 <tcp_write+0x5f0>)
 800ce06:	f240 3227 	movw	r2, #807	@ 0x327
 800ce0a:	497e      	ldr	r1, [pc, #504]	@ (800d004 <tcp_write+0x5f4>)
 800ce0c:	487e      	ldr	r0, [pc, #504]	@ (800d008 <tcp_write+0x5f8>)
 800ce0e:	f003 f891 	bl	800ff34 <iprintf>
 800ce12:	e7ea      	b.n	800cdea <tcp_write+0x3da>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ce14:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	f47f ae79 	bne.w	800cb10 <tcp_write+0x100>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ce1e:	f8b8 3068 	ldrh.w	r3, [r8, #104]	@ 0x68
 800ce22:	bb43      	cbnz	r3, 800ce76 <tcp_write+0x466>
  while (pos < len) {
 800ce24:	f1b9 0f00 	cmp.w	r9, #0
 800ce28:	f000 80c8 	beq.w	800cfbc <tcp_write+0x5ac>
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	461c      	mov	r4, r3
 800ce30:	930d      	str	r3, [sp, #52]	@ 0x34
 800ce32:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce34:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 800ce38:	e6bf      	b.n	800cbba <tcp_write+0x1aa>
  struct pbuf *concat_p = NULL;
 800ce3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ce3e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce40:	e6bb      	b.n	800cbba <tcp_write+0x1aa>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ce42:	2f00      	cmp	r7, #0
 800ce44:	f47f ae25 	bne.w	800ca92 <tcp_write+0x82>
 800ce48:	4b6d      	ldr	r3, [pc, #436]	@ (800d000 <tcp_write+0x5f0>)
 800ce4a:	f240 1255 	movw	r2, #341	@ 0x155
 800ce4e:	496f      	ldr	r1, [pc, #444]	@ (800d00c <tcp_write+0x5fc>)
 800ce50:	486d      	ldr	r0, [pc, #436]	@ (800d008 <tcp_write+0x5f8>)
 800ce52:	f003 f86f 	bl	800ff34 <iprintf>
  if (pcb->unsent != NULL) {
 800ce56:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 800ce5a:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 800ce5e:	2f00      	cmp	r7, #0
 800ce60:	f47f ae17 	bne.w	800ca92 <tcp_write+0x82>
 800ce64:	e7db      	b.n	800ce1e <tcp_write+0x40e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ce66:	4b66      	ldr	r3, [pc, #408]	@ (800d000 <tcp_write+0x5f0>)
 800ce68:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800ce6c:	4968      	ldr	r1, [pc, #416]	@ (800d010 <tcp_write+0x600>)
 800ce6e:	4866      	ldr	r0, [pc, #408]	@ (800d008 <tcp_write+0x5f8>)
 800ce70:	f003 f860 	bl	800ff34 <iprintf>
 800ce74:	e62c      	b.n	800cad0 <tcp_write+0xc0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ce76:	4b62      	ldr	r3, [pc, #392]	@ (800d000 <tcp_write+0x5f0>)
 800ce78:	f240 224a 	movw	r2, #586	@ 0x24a
 800ce7c:	4965      	ldr	r1, [pc, #404]	@ (800d014 <tcp_write+0x604>)
 800ce7e:	4862      	ldr	r0, [pc, #392]	@ (800d008 <tcp_write+0x5f8>)
 800ce80:	f003 f858 	bl	800ff34 <iprintf>
 800ce84:	e7ce      	b.n	800ce24 <tcp_write+0x414>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ce86:	4b5e      	ldr	r3, [pc, #376]	@ (800d000 <tcp_write+0x5f0>)
 800ce88:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ce8c:	4962      	ldr	r1, [pc, #392]	@ (800d018 <tcp_write+0x608>)
 800ce8e:	485e      	ldr	r0, [pc, #376]	@ (800d008 <tcp_write+0x5f8>)
 800ce90:	f003 f850 	bl	800ff34 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ce94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce96:	891b      	ldrh	r3, [r3, #8]
 800ce98:	e60a      	b.n	800cab0 <tcp_write+0xa0>
        pbuf_free(p2);
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	465f      	mov	r7, fp
 800ce9e:	f7fc f9d1 	bl	8009244 <pbuf_free>
        goto memerr;
 800cea2:	e790      	b.n	800cdc6 <tcp_write+0x3b6>
  if (concat_p != NULL) {
 800cea4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  pcb->unsent_oversize = oversize;
 800cea6:	f8a8 a068 	strh.w	sl, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d061      	beq.n	800cf72 <tcp_write+0x562>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ceae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f47f af34 	bne.w	800cd1e <tcp_write+0x30e>
 800ceb6:	4b52      	ldr	r3, [pc, #328]	@ (800d000 <tcp_write+0x5f0>)
 800ceb8:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800cebc:	4957      	ldr	r1, [pc, #348]	@ (800d01c <tcp_write+0x60c>)
 800cebe:	4852      	ldr	r0, [pc, #328]	@ (800d008 <tcp_write+0x5f8>)
 800cec0:	f003 f838 	bl	800ff34 <iprintf>
 800cec4:	e72b      	b.n	800cd1e <tcp_write+0x30e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800cec6:	899c      	ldrh	r4, [r3, #12]
 800cec8:	2008      	movs	r0, #8
 800ceca:	f7fb fac9 	bl	8008460 <lwip_htons>
 800cece:	68f3      	ldr	r3, [r6, #12]
 800ced0:	4304      	orrs	r4, r0
 800ced2:	819c      	strh	r4, [r3, #12]
 800ced4:	e74b      	b.n	800cd6e <tcp_write+0x35e>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ced6:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	f47f af40 	bne.w	800cd60 <tcp_write+0x350>
 800cee0:	4b47      	ldr	r3, [pc, #284]	@ (800d000 <tcp_write+0x5f0>)
 800cee2:	f240 3212 	movw	r2, #786	@ 0x312
 800cee6:	4947      	ldr	r1, [pc, #284]	@ (800d004 <tcp_write+0x5f4>)
 800cee8:	4847      	ldr	r0, [pc, #284]	@ (800d008 <tcp_write+0x5f8>)
 800ceea:	f003 f823 	bl	800ff34 <iprintf>
 800ceee:	e737      	b.n	800cd60 <tcp_write+0x350>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800cef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d15a      	bne.n	800cfac <tcp_write+0x59c>
          extendlen = seglen;
 800cef6:	940d      	str	r4, [sp, #52]	@ 0x34
 800cef8:	e653      	b.n	800cba2 <tcp_write+0x192>
    return ERR_CONN;
 800cefa:	f06f 000a 	mvn.w	r0, #10
 800cefe:	e737      	b.n	800cd70 <tcp_write+0x360>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800cf00:	e9cd 8300 	strd	r8, r3, [sp]
 800cf04:	2301      	movs	r3, #1
 800cf06:	465a      	mov	r2, fp
 800cf08:	4621      	mov	r1, r4
 800cf0a:	2000      	movs	r0, #0
 800cf0c:	9302      	str	r3, [sp, #8]
 800cf0e:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800cf12:	f7ff fc07 	bl	800c724 <tcp_pbuf_prealloc>
 800cf16:	4603      	mov	r3, r0
 800cf18:	900c      	str	r0, [sp, #48]	@ 0x30
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d069      	beq.n	800cff2 <tcp_write+0x5e2>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800cf1e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cf20:	461e      	mov	r6, r3
 800cf22:	9907      	ldr	r1, [sp, #28]
 800cf24:	4622      	mov	r2, r4
 800cf26:	4401      	add	r1, r0
 800cf28:	6858      	ldr	r0, [r3, #4]
 800cf2a:	f003 f9c0 	bl	80102ae <memcpy>
        queuelen += pbuf_clen(concat_p);
 800cf2e:	4630      	mov	r0, r6
 800cf30:	e631      	b.n	800cb96 <tcp_write+0x186>
  } else if (extendlen > 0) {
 800cf32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	f43f aefe 	beq.w	800cd36 <tcp_write+0x326>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800cf3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf3c:	6859      	ldr	r1, [r3, #4]
 800cf3e:	b1e9      	cbz	r1, 800cf7c <tcp_write+0x56c>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cf40:	680a      	ldr	r2, [r1, #0]
 800cf42:	2a00      	cmp	r2, #0
 800cf44:	d053      	beq.n	800cfee <tcp_write+0x5de>
 800cf46:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800cf48:	e000      	b.n	800cf4c <tcp_write+0x53c>
 800cf4a:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 800cf4c:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cf4e:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 800cf50:	4423      	add	r3, r4
 800cf52:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cf54:	4611      	mov	r1, r2
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d1f7      	bne.n	800cf4a <tcp_write+0x53a>
    p->tot_len += extendlen;
 800cf5a:	8913      	ldrh	r3, [r2, #8]
 800cf5c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800cf5e:	440b      	add	r3, r1
 800cf60:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800cf62:	8953      	ldrh	r3, [r2, #10]
 800cf64:	440b      	add	r3, r1
 800cf66:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800cf68:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cf6a:	8913      	ldrh	r3, [r2, #8]
 800cf6c:	440b      	add	r3, r1
 800cf6e:	8113      	strh	r3, [r2, #8]
  if (last_unsent == NULL) {
 800cf70:	e6e1      	b.n	800cd36 <tcp_write+0x326>
  } else if (extendlen > 0) {
 800cf72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf74:	b19b      	cbz	r3, 800cf9e <tcp_write+0x58e>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800cf76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1de      	bne.n	800cf3a <tcp_write+0x52a>
 800cf7c:	4b20      	ldr	r3, [pc, #128]	@ (800d000 <tcp_write+0x5f0>)
 800cf7e:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800cf82:	4927      	ldr	r1, [pc, #156]	@ (800d020 <tcp_write+0x610>)
 800cf84:	4820      	ldr	r0, [pc, #128]	@ (800d008 <tcp_write+0x5f8>)
 800cf86:	f002 ffd5 	bl	800ff34 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cf8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf8c:	6859      	ldr	r1, [r3, #4]
 800cf8e:	e7d7      	b.n	800cf40 <tcp_write+0x530>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf90:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800cf94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf98:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (err != ERR_OK) {
 800cf9c:	e725      	b.n	800cdea <tcp_write+0x3da>
  if (last_unsent == NULL) {
 800cf9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	f47f aec8 	bne.w	800cd36 <tcp_write+0x326>
    pcb->unsent = queue;
 800cfa6:	f8c8 706c 	str.w	r7, [r8, #108]	@ 0x6c
 800cfaa:	e6c6      	b.n	800cd3a <tcp_write+0x32a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800cfac:	4b14      	ldr	r3, [pc, #80]	@ (800d000 <tcp_write+0x5f0>)
 800cfae:	f240 2231 	movw	r2, #561	@ 0x231
 800cfb2:	491c      	ldr	r1, [pc, #112]	@ (800d024 <tcp_write+0x614>)
 800cfb4:	4814      	ldr	r0, [pc, #80]	@ (800d008 <tcp_write+0x5f8>)
 800cfb6:	f002 ffbd 	bl	800ff34 <iprintf>
 800cfba:	e79c      	b.n	800cef6 <tcp_write+0x4e6>
  pcb->unsent_oversize = oversize;
 800cfbc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800cfc0:	464f      	mov	r7, r9
 800cfc2:	464e      	mov	r6, r9
 800cfc4:	f8a8 3068 	strh.w	r3, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800cfc8:	e7ed      	b.n	800cfa6 <tcp_write+0x596>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cfca:	4b0d      	ldr	r3, [pc, #52]	@ (800d000 <tcp_write+0x5f0>)
 800cfcc:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800cfd0:	4915      	ldr	r1, [pc, #84]	@ (800d028 <tcp_write+0x618>)
 800cfd2:	480d      	ldr	r0, [pc, #52]	@ (800d008 <tcp_write+0x5f8>)
 800cfd4:	f002 ffae 	bl	800ff34 <iprintf>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfd8:	f06f 000f 	mvn.w	r0, #15
 800cfdc:	e6c8      	b.n	800cd70 <tcp_write+0x360>
 800cfde:	4b08      	ldr	r3, [pc, #32]	@ (800d000 <tcp_write+0x5f0>)
 800cfe0:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800cfe4:	4911      	ldr	r1, [pc, #68]	@ (800d02c <tcp_write+0x61c>)
 800cfe6:	4808      	ldr	r0, [pc, #32]	@ (800d008 <tcp_write+0x5f8>)
 800cfe8:	f002 ffa4 	bl	800ff34 <iprintf>
 800cfec:	e7f4      	b.n	800cfd8 <tcp_write+0x5c8>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cfee:	460a      	mov	r2, r1
 800cff0:	e7b3      	b.n	800cf5a <tcp_write+0x54a>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cff2:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800cff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cffa:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 800cffe:	e6f1      	b.n	800cde4 <tcp_write+0x3d4>
 800d000:	08013520 	.word	0x08013520
 800d004:	080138ac 	.word	0x080138ac
 800d008:	080110dc 	.word	0x080110dc
 800d00c:	080136b4 	.word	0x080136b4
 800d010:	0801373c 	.word	0x0801373c
 800d014:	080137a8 	.word	0x080137a8
 800d018:	08013724 	.word	0x08013724
 800d01c:	0801383c 	.word	0x0801383c
 800d020:	08013874 	.word	0x08013874
 800d024:	0801377c 	.word	0x0801377c
 800d028:	08013680 	.word	0x08013680
 800d02c:	08013668 	.word	0x08013668

0800d030 <tcp_split_unsent_seg>:
{
 800d030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d034:	4606      	mov	r6, r0
{
 800d036:	b083      	sub	sp, #12
 800d038:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d03a:	2800      	cmp	r0, #0
 800d03c:	f000 80ad 	beq.w	800d19a <tcp_split_unsent_seg+0x16a>
  useg = pcb->unsent;
 800d040:	6ef5      	ldr	r5, [r6, #108]	@ 0x6c
  if (useg == NULL) {
 800d042:	2d00      	cmp	r5, #0
 800d044:	f000 80b4 	beq.w	800d1b0 <tcp_split_unsent_seg+0x180>
  if (split == 0) {
 800d048:	2c00      	cmp	r4, #0
 800d04a:	f000 80b4 	beq.w	800d1b6 <tcp_split_unsent_seg+0x186>
  if (useg->len <= split) {
 800d04e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800d052:	45a0      	cmp	r8, r4
 800d054:	d97e      	bls.n	800d154 <tcp_split_unsent_seg+0x124>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d056:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 800d058:	42a3      	cmp	r3, r4
 800d05a:	f0c0 8084 	bcc.w	800d166 <tcp_split_unsent_seg+0x136>
  optflags = useg->flags;
 800d05e:	f895 a00a 	ldrb.w	sl, [r5, #10]
  remainder = useg->len - split;
 800d062:	eba8 0904 	sub.w	r9, r8, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d066:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d06a:	2036      	movs	r0, #54	@ 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d06c:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 800d070:	fa1f f989 	uxth.w	r9, r9
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d074:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d078:	eb0b 0109 	add.w	r1, fp, r9
 800d07c:	b289      	uxth	r1, r1
 800d07e:	f7fc f951 	bl	8009324 <pbuf_alloc>
  if (p == NULL) {
 800d082:	4607      	mov	r7, r0
 800d084:	2800      	cmp	r0, #0
 800d086:	f000 8093 	beq.w	800d1b0 <tcp_split_unsent_seg+0x180>
  offset = useg->p->tot_len - useg->len + split;
 800d08a:	6868      	ldr	r0, [r5, #4]
 800d08c:	892a      	ldrh	r2, [r5, #8]
 800d08e:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d090:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 800d092:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d094:	464a      	mov	r2, r9
 800d096:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 800d098:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	f7fc fb7a 	bl	8009794 <pbuf_copy_partial>
 800d0a0:	4548      	cmp	r0, r9
 800d0a2:	f040 8082 	bne.w	800d1aa <tcp_split_unsent_seg+0x17a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d0a6:	68eb      	ldr	r3, [r5, #12]
 800d0a8:	8998      	ldrh	r0, [r3, #12]
 800d0aa:	f7fb f9d9 	bl	8008460 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800d0ae:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d0b2:	fa5f f980 	uxtb.w	r9, r0
  if (split_flags & TCP_PSH) {
 800d0b6:	d151      	bne.n	800d15c <tcp_split_unsent_seg+0x12c>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d0b8:	f009 093f 	and.w	r9, r9, #63	@ 0x3f
  if (split_flags & TCP_FIN) {
 800d0bc:	f019 0f01 	tst.w	r9, #1
 800d0c0:	d003      	beq.n	800d0ca <tcp_split_unsent_seg+0x9a>
    split_flags &= ~TCP_FIN;
 800d0c2:	f009 09fe 	and.w	r9, r9, #254	@ 0xfe
    remainder_flags |= TCP_FIN;
 800d0c6:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d0ca:	68eb      	ldr	r3, [r5, #12]
 800d0cc:	6858      	ldr	r0, [r3, #4]
 800d0ce:	f7fb f9cb 	bl	8008468 <lwip_htonl>
 800d0d2:	f8cd a000 	str.w	sl, [sp]
 800d0d6:	1823      	adds	r3, r4, r0
 800d0d8:	465a      	mov	r2, fp
 800d0da:	4639      	mov	r1, r7
 800d0dc:	4630      	mov	r0, r6
 800d0de:	f7ff fb77 	bl	800c7d0 <tcp_create_segment>
  if (seg == NULL) {
 800d0e2:	4682      	mov	sl, r0
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	d060      	beq.n	800d1aa <tcp_split_unsent_seg+0x17a>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d0e8:	6868      	ldr	r0, [r5, #4]
 800d0ea:	eba4 0408 	sub.w	r4, r4, r8
 800d0ee:	f7fc fa1d 	bl	800952c <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d0f2:	686a      	ldr	r2, [r5, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d0f4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800d0f8:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d0fa:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d0fc:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d0fe:	4610      	mov	r0, r2
 800d100:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d102:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d106:	b289      	uxth	r1, r1
 800d108:	f7fc f9b4 	bl	8009474 <pbuf_realloc>
  useg->len -= remainder;
 800d10c:	892b      	ldrh	r3, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d10e:	4648      	mov	r0, r9
  useg->len -= remainder;
 800d110:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d112:	68eb      	ldr	r3, [r5, #12]
  useg->len -= remainder;
 800d114:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d116:	899c      	ldrh	r4, [r3, #12]
 800d118:	f7fb f9a2 	bl	8008460 <lwip_htons>
 800d11c:	68eb      	ldr	r3, [r5, #12]
 800d11e:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d120:	6868      	ldr	r0, [r5, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d122:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d124:	f7fc fa02 	bl	800952c <pbuf_clen>
 800d128:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800d12c:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d12e:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d132:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d136:	f7fc f9f9 	bl	800952c <pbuf_clen>
 800d13a:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800d13e:	4418      	add	r0, r3
  seg->next = useg->next;
 800d140:	682b      	ldr	r3, [r5, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d142:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  seg->next = useg->next;
 800d146:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 800d14a:	f8c5 a000 	str.w	sl, [r5]
  if (seg->next == NULL) {
 800d14e:	f8da 3000 	ldr.w	r3, [sl]
 800d152:	b1fb      	cbz	r3, 800d194 <tcp_split_unsent_seg+0x164>
    return ERR_OK;
 800d154:	2000      	movs	r0, #0
}
 800d156:	b003      	add	sp, #12
 800d158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    split_flags &= ~TCP_PSH;
 800d15c:	f009 0937 	and.w	r9, r9, #55	@ 0x37
    remainder_flags |= TCP_PSH;
 800d160:	f04f 0b08 	mov.w	fp, #8
 800d164:	e7aa      	b.n	800d0bc <tcp_split_unsent_seg+0x8c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d166:	4b19      	ldr	r3, [pc, #100]	@ (800d1cc <tcp_split_unsent_seg+0x19c>)
 800d168:	f240 325b 	movw	r2, #859	@ 0x35b
 800d16c:	4918      	ldr	r1, [pc, #96]	@ (800d1d0 <tcp_split_unsent_seg+0x1a0>)
 800d16e:	4819      	ldr	r0, [pc, #100]	@ (800d1d4 <tcp_split_unsent_seg+0x1a4>)
 800d170:	f002 fee0 	bl	800ff34 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d174:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800d178:	f1b8 0f00 	cmp.w	r8, #0
 800d17c:	f47f af6f 	bne.w	800d05e <tcp_split_unsent_seg+0x2e>
 800d180:	4b12      	ldr	r3, [pc, #72]	@ (800d1cc <tcp_split_unsent_seg+0x19c>)
 800d182:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800d186:	4914      	ldr	r1, [pc, #80]	@ (800d1d8 <tcp_split_unsent_seg+0x1a8>)
 800d188:	4812      	ldr	r0, [pc, #72]	@ (800d1d4 <tcp_split_unsent_seg+0x1a4>)
 800d18a:	f002 fed3 	bl	800ff34 <iprintf>
  remainder = useg->len - split;
 800d18e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800d192:	e764      	b.n	800d05e <tcp_split_unsent_seg+0x2e>
    pcb->unsent_oversize = 0;
 800d194:	f8a6 3068 	strh.w	r3, [r6, #104]	@ 0x68
 800d198:	e7dc      	b.n	800d154 <tcp_split_unsent_seg+0x124>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d19a:	4b0c      	ldr	r3, [pc, #48]	@ (800d1cc <tcp_split_unsent_seg+0x19c>)
 800d19c:	f240 324b 	movw	r2, #843	@ 0x34b
 800d1a0:	490e      	ldr	r1, [pc, #56]	@ (800d1dc <tcp_split_unsent_seg+0x1ac>)
 800d1a2:	480c      	ldr	r0, [pc, #48]	@ (800d1d4 <tcp_split_unsent_seg+0x1a4>)
 800d1a4:	f002 fec6 	bl	800ff34 <iprintf>
 800d1a8:	e74a      	b.n	800d040 <tcp_split_unsent_seg+0x10>
    pbuf_free(p);
 800d1aa:	4638      	mov	r0, r7
 800d1ac:	f7fc f84a 	bl	8009244 <pbuf_free>
    return ERR_MEM;
 800d1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b4:	e7cf      	b.n	800d156 <tcp_split_unsent_seg+0x126>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d1b6:	4b05      	ldr	r3, [pc, #20]	@ (800d1cc <tcp_split_unsent_seg+0x19c>)
 800d1b8:	f240 3253 	movw	r2, #851	@ 0x353
 800d1bc:	4908      	ldr	r1, [pc, #32]	@ (800d1e0 <tcp_split_unsent_seg+0x1b0>)
 800d1be:	4805      	ldr	r0, [pc, #20]	@ (800d1d4 <tcp_split_unsent_seg+0x1a4>)
 800d1c0:	f002 feb8 	bl	800ff34 <iprintf>
    return ERR_VAL;
 800d1c4:	f06f 0005 	mvn.w	r0, #5
 800d1c8:	e7c5      	b.n	800d156 <tcp_split_unsent_seg+0x126>
 800d1ca:	bf00      	nop
 800d1cc:	08013520 	.word	0x08013520
 800d1d0:	08013914 	.word	0x08013914
 800d1d4:	080110dc 	.word	0x080110dc
 800d1d8:	08013924 	.word	0x08013924
 800d1dc:	080138cc 	.word	0x080138cc
 800d1e0:	080138f0 	.word	0x080138f0

0800d1e4 <tcp_enqueue_flags>:
{
 800d1e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d1e8:	f011 0703 	ands.w	r7, r1, #3
{
 800d1ec:	b083      	sub	sp, #12
 800d1ee:	460d      	mov	r5, r1
 800d1f0:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d1f2:	d053      	beq.n	800d29c <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d1f4:	2c00      	cmp	r4, #0
 800d1f6:	d05a      	beq.n	800d2ae <tcp_enqueue_flags+0xca>
  if (flags & TCP_SYN) {
 800d1f8:	f3c5 0840 	ubfx	r8, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d1fc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d200:	2036      	movs	r0, #54	@ 0x36
 800d202:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800d206:	4649      	mov	r1, r9
 800d208:	f7fc f88c 	bl	8009324 <pbuf_alloc>
 800d20c:	4606      	mov	r6, r0
 800d20e:	2800      	cmp	r0, #0
 800d210:	d071      	beq.n	800d2f6 <tcp_enqueue_flags+0x112>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d212:	8943      	ldrh	r3, [r0, #10]
 800d214:	454b      	cmp	r3, r9
 800d216:	d352      	bcc.n	800d2be <tcp_enqueue_flags+0xda>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d218:	4631      	mov	r1, r6
 800d21a:	f8cd 8000 	str.w	r8, [sp]
 800d21e:	462a      	mov	r2, r5
 800d220:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800d222:	4620      	mov	r0, r4
 800d224:	f7ff fad4 	bl	800c7d0 <tcp_create_segment>
 800d228:	4606      	mov	r6, r0
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d063      	beq.n	800d2f6 <tcp_enqueue_flags+0x112>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d22e:	68c3      	ldr	r3, [r0, #12]
 800d230:	079a      	lsls	r2, r3, #30
 800d232:	d158      	bne.n	800d2e6 <tcp_enqueue_flags+0x102>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d234:	8933      	ldrh	r3, [r6, #8]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d149      	bne.n	800d2ce <tcp_enqueue_flags+0xea>
  if (pcb->unsent == NULL) {
 800d23a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d050      	beq.n	800d2e2 <tcp_enqueue_flags+0xfe>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d240:	461a      	mov	r2, r3
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d1fb      	bne.n	800d240 <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 800d248:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d250:	b117      	cbz	r7, 800d258 <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 800d252:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800d254:	3301      	adds	r3, #1
 800d256:	65e3      	str	r3, [r4, #92]	@ 0x5c
  if (flags & TCP_FIN) {
 800d258:	07eb      	lsls	r3, r5, #31
 800d25a:	d503      	bpl.n	800d264 <tcp_enqueue_flags+0x80>
    tcp_set_flags(pcb, TF_FIN);
 800d25c:	8b63      	ldrh	r3, [r4, #26]
 800d25e:	f043 0320 	orr.w	r3, r3, #32
 800d262:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d264:	6870      	ldr	r0, [r6, #4]
 800d266:	f7fc f961 	bl	800952c <pbuf_clen>
 800d26a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800d26e:	4418      	add	r0, r3
 800d270:	b280      	uxth	r0, r0
 800d272:	f8a4 0066 	strh.w	r0, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 800d276:	b918      	cbnz	r0, 800d280 <tcp_enqueue_flags+0x9c>
  return ERR_OK;
 800d278:	2000      	movs	r0, #0
}
 800d27a:	b003      	add	sp, #12
 800d27c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d280:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d282:	2b00      	cmp	r3, #0
 800d284:	d1f8      	bne.n	800d278 <tcp_enqueue_flags+0x94>
 800d286:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1f5      	bne.n	800d278 <tcp_enqueue_flags+0x94>
 800d28c:	4b1d      	ldr	r3, [pc, #116]	@ (800d304 <tcp_enqueue_flags+0x120>)
 800d28e:	f240 4265 	movw	r2, #1125	@ 0x465
 800d292:	491d      	ldr	r1, [pc, #116]	@ (800d308 <tcp_enqueue_flags+0x124>)
 800d294:	481d      	ldr	r0, [pc, #116]	@ (800d30c <tcp_enqueue_flags+0x128>)
 800d296:	f002 fe4d 	bl	800ff34 <iprintf>
 800d29a:	e7ed      	b.n	800d278 <tcp_enqueue_flags+0x94>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d29c:	4b19      	ldr	r3, [pc, #100]	@ (800d304 <tcp_enqueue_flags+0x120>)
 800d29e:	f240 4211 	movw	r2, #1041	@ 0x411
 800d2a2:	491b      	ldr	r1, [pc, #108]	@ (800d310 <tcp_enqueue_flags+0x12c>)
 800d2a4:	4819      	ldr	r0, [pc, #100]	@ (800d30c <tcp_enqueue_flags+0x128>)
 800d2a6:	f002 fe45 	bl	800ff34 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d2aa:	2c00      	cmp	r4, #0
 800d2ac:	d1a4      	bne.n	800d1f8 <tcp_enqueue_flags+0x14>
 800d2ae:	4b15      	ldr	r3, [pc, #84]	@ (800d304 <tcp_enqueue_flags+0x120>)
 800d2b0:	f240 4213 	movw	r2, #1043	@ 0x413
 800d2b4:	4917      	ldr	r1, [pc, #92]	@ (800d314 <tcp_enqueue_flags+0x130>)
 800d2b6:	4815      	ldr	r0, [pc, #84]	@ (800d30c <tcp_enqueue_flags+0x128>)
 800d2b8:	f002 fe3c 	bl	800ff34 <iprintf>
 800d2bc:	e79c      	b.n	800d1f8 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d2be:	4b11      	ldr	r3, [pc, #68]	@ (800d304 <tcp_enqueue_flags+0x120>)
 800d2c0:	f240 4239 	movw	r2, #1081	@ 0x439
 800d2c4:	4914      	ldr	r1, [pc, #80]	@ (800d318 <tcp_enqueue_flags+0x134>)
 800d2c6:	4811      	ldr	r0, [pc, #68]	@ (800d30c <tcp_enqueue_flags+0x128>)
 800d2c8:	f002 fe34 	bl	800ff34 <iprintf>
 800d2cc:	e7a4      	b.n	800d218 <tcp_enqueue_flags+0x34>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d304 <tcp_enqueue_flags+0x120>)
 800d2d0:	f240 4243 	movw	r2, #1091	@ 0x443
 800d2d4:	4911      	ldr	r1, [pc, #68]	@ (800d31c <tcp_enqueue_flags+0x138>)
 800d2d6:	480d      	ldr	r0, [pc, #52]	@ (800d30c <tcp_enqueue_flags+0x128>)
 800d2d8:	f002 fe2c 	bl	800ff34 <iprintf>
  if (pcb->unsent == NULL) {
 800d2dc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d1ae      	bne.n	800d240 <tcp_enqueue_flags+0x5c>
    pcb->unsent = seg;
 800d2e2:	66e6      	str	r6, [r4, #108]	@ 0x6c
 800d2e4:	e7b1      	b.n	800d24a <tcp_enqueue_flags+0x66>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d2e6:	4b07      	ldr	r3, [pc, #28]	@ (800d304 <tcp_enqueue_flags+0x120>)
 800d2e8:	f240 4242 	movw	r2, #1090	@ 0x442
 800d2ec:	490c      	ldr	r1, [pc, #48]	@ (800d320 <tcp_enqueue_flags+0x13c>)
 800d2ee:	4807      	ldr	r0, [pc, #28]	@ (800d30c <tcp_enqueue_flags+0x128>)
 800d2f0:	f002 fe20 	bl	800ff34 <iprintf>
 800d2f4:	e79e      	b.n	800d234 <tcp_enqueue_flags+0x50>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d2f6:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800d2f8:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d2fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d300:	8363      	strh	r3, [r4, #26]
 800d302:	e7ba      	b.n	800d27a <tcp_enqueue_flags+0x96>
 800d304:	08013520 	.word	0x08013520
 800d308:	08013a2c 	.word	0x08013a2c
 800d30c:	080110dc 	.word	0x080110dc
 800d310:	08013934 	.word	0x08013934
 800d314:	0801398c 	.word	0x0801398c
 800d318:	080139ac 	.word	0x080139ac
 800d31c:	08013a00 	.word	0x08013a00
 800d320:	080139e8 	.word	0x080139e8

0800d324 <tcp_send_fin>:
{
 800d324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d326:	4606      	mov	r6, r0
 800d328:	b188      	cbz	r0, 800d34e <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800d32a:	6ef4      	ldr	r4, [r6, #108]	@ 0x6c
 800d32c:	b14c      	cbz	r4, 800d342 <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d32e:	4625      	mov	r5, r4
 800d330:	6824      	ldr	r4, [r4, #0]
 800d332:	2c00      	cmp	r4, #0
 800d334:	d1fb      	bne.n	800d32e <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d336:	68eb      	ldr	r3, [r5, #12]
 800d338:	8998      	ldrh	r0, [r3, #12]
 800d33a:	f7fb f891 	bl	8008460 <lwip_htons>
 800d33e:	0743      	lsls	r3, r0, #29
 800d340:	d00d      	beq.n	800d35e <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d342:	4630      	mov	r0, r6
 800d344:	2101      	movs	r1, #1
}
 800d346:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d34a:	f7ff bf4b 	b.w	800d1e4 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d34e:	4b0b      	ldr	r3, [pc, #44]	@ (800d37c <tcp_send_fin+0x58>)
 800d350:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800d354:	490a      	ldr	r1, [pc, #40]	@ (800d380 <tcp_send_fin+0x5c>)
 800d356:	480b      	ldr	r0, [pc, #44]	@ (800d384 <tcp_send_fin+0x60>)
 800d358:	f002 fdec 	bl	800ff34 <iprintf>
 800d35c:	e7e5      	b.n	800d32a <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d35e:	68eb      	ldr	r3, [r5, #12]
 800d360:	2001      	movs	r0, #1
 800d362:	899f      	ldrh	r7, [r3, #12]
 800d364:	f7fb f87c 	bl	8008460 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 800d368:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d36a:	4307      	orrs	r7, r0
 800d36c:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d36e:	f043 0320 	orr.w	r3, r3, #32
}
 800d372:	4620      	mov	r0, r4
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d374:	8197      	strh	r7, [r2, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d376:	8373      	strh	r3, [r6, #26]
}
 800d378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d37a:	bf00      	nop
 800d37c:	08013520 	.word	0x08013520
 800d380:	08013a54 	.word	0x08013a54
 800d384:	080110dc 	.word	0x080110dc

0800d388 <tcp_rexmit_rto_prepare>:
{
 800d388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d38a:	4605      	mov	r5, r0
 800d38c:	2800      	cmp	r0, #0
 800d38e:	d031      	beq.n	800d3f4 <tcp_rexmit_rto_prepare+0x6c>
  if (pcb->unacked == NULL) {
 800d390:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800d392:	b132      	cbz	r2, 800d3a2 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d394:	6813      	ldr	r3, [r2, #0]
 800d396:	4614      	mov	r4, r2
 800d398:	b153      	cbz	r3, 800d3b0 <tcp_rexmit_rto_prepare+0x28>
  if (seg->p->ref != 1) {
 800d39a:	6863      	ldr	r3, [r4, #4]
 800d39c:	7b9b      	ldrb	r3, [r3, #14]
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d002      	beq.n	800d3a8 <tcp_rexmit_rto_prepare+0x20>
    return ERR_VAL;
 800d3a2:	f06f 0005 	mvn.w	r0, #5
}
 800d3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d3a8:	6824      	ldr	r4, [r4, #0]
 800d3aa:	6823      	ldr	r3, [r4, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1f4      	bne.n	800d39a <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 800d3b0:	6863      	ldr	r3, [r4, #4]
 800d3b2:	7b9b      	ldrb	r3, [r3, #14]
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d1f4      	bne.n	800d3a2 <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 800d3b8:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 800d3ba:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 800d3bc:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800d3be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
  seg->next = pcb->unsent;
 800d3c2:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 800d3c4:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d3c6:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 800d3c8:	e9c5 271b 	strd	r2, r7, [r5, #108]	@ 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d3cc:	6858      	ldr	r0, [r3, #4]
 800d3ce:	f7fb f84b 	bl	8008468 <lwip_htonl>
 800d3d2:	68e3      	ldr	r3, [r4, #12]
 800d3d4:	4606      	mov	r6, r0
 800d3d6:	8924      	ldrh	r4, [r4, #8]
 800d3d8:	8998      	ldrh	r0, [r3, #12]
 800d3da:	f7fb f841 	bl	8008460 <lwip_htons>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	4426      	add	r6, r4
  return ERR_OK;
 800d3e2:	4638      	mov	r0, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d3e4:	f013 0303 	ands.w	r3, r3, #3
  pcb->rttest = 0;
 800d3e8:	636f      	str	r7, [r5, #52]	@ 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d3ea:	bf18      	it	ne
 800d3ec:	2301      	movne	r3, #1
 800d3ee:	4433      	add	r3, r6
 800d3f0:	64eb      	str	r3, [r5, #76]	@ 0x4c
}
 800d3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d3f4:	4b03      	ldr	r3, [pc, #12]	@ (800d404 <tcp_rexmit_rto_prepare+0x7c>)
 800d3f6:	f240 6263 	movw	r2, #1635	@ 0x663
 800d3fa:	4903      	ldr	r1, [pc, #12]	@ (800d408 <tcp_rexmit_rto_prepare+0x80>)
 800d3fc:	4803      	ldr	r0, [pc, #12]	@ (800d40c <tcp_rexmit_rto_prepare+0x84>)
 800d3fe:	f002 fd99 	bl	800ff34 <iprintf>
 800d402:	e7c5      	b.n	800d390 <tcp_rexmit_rto_prepare+0x8>
 800d404:	08013520 	.word	0x08013520
 800d408:	08013a70 	.word	0x08013a70
 800d40c:	080110dc 	.word	0x080110dc

0800d410 <tcp_rexmit>:
{
 800d410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d412:	4607      	mov	r7, r0
 800d414:	2800      	cmp	r0, #0
 800d416:	d031      	beq.n	800d47c <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 800d418:	6f3e      	ldr	r6, [r7, #112]	@ 0x70
 800d41a:	b34e      	cbz	r6, 800d470 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 800d41c:	6873      	ldr	r3, [r6, #4]
 800d41e:	7b9b      	ldrb	r3, [r3, #14]
 800d420:	2b01      	cmp	r3, #1
 800d422:	d125      	bne.n	800d470 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 800d424:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 800d426:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
  while (*cur_seg &&
 800d42a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
  pcb->unacked = seg->next;
 800d42c:	673a      	str	r2, [r7, #112]	@ 0x70
  while (*cur_seg &&
 800d42e:	b91b      	cbnz	r3, 800d438 <tcp_rexmit+0x28>
 800d430:	e00f      	b.n	800d452 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 800d432:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800d434:	682b      	ldr	r3, [r5, #0]
 800d436:	b163      	cbz	r3, 800d452 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	6858      	ldr	r0, [r3, #4]
 800d43c:	f7fb f814 	bl	8008468 <lwip_htonl>
 800d440:	68f3      	ldr	r3, [r6, #12]
 800d442:	4604      	mov	r4, r0
 800d444:	6858      	ldr	r0, [r3, #4]
 800d446:	f7fb f80f 	bl	8008468 <lwip_htonl>
 800d44a:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800d44c:	2c00      	cmp	r4, #0
 800d44e:	dbf0      	blt.n	800d432 <tcp_rexmit+0x22>
    cur_seg = &((*cur_seg)->next );
 800d450:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 800d452:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800d454:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800d456:	6833      	ldr	r3, [r6, #0]
 800d458:	b16b      	cbz	r3, 800d476 <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 800d45a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800d45e:	2bff      	cmp	r3, #255	@ 0xff
 800d460:	d002      	beq.n	800d468 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 800d462:	3301      	adds	r3, #1
 800d464:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  pcb->rttest = 0;
 800d468:	2300      	movs	r3, #0
  return ERR_OK;
 800d46a:	4618      	mov	r0, r3
  pcb->rttest = 0;
 800d46c:	637b      	str	r3, [r7, #52]	@ 0x34
}
 800d46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 800d470:	f06f 0005 	mvn.w	r0, #5
}
 800d474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800d476:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800d47a:	e7ee      	b.n	800d45a <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d47c:	4b03      	ldr	r3, [pc, #12]	@ (800d48c <tcp_rexmit+0x7c>)
 800d47e:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800d482:	4903      	ldr	r1, [pc, #12]	@ (800d490 <tcp_rexmit+0x80>)
 800d484:	4803      	ldr	r0, [pc, #12]	@ (800d494 <tcp_rexmit+0x84>)
 800d486:	f002 fd55 	bl	800ff34 <iprintf>
 800d48a:	e7c5      	b.n	800d418 <tcp_rexmit+0x8>
 800d48c:	08013520 	.word	0x08013520
 800d490:	08013a94 	.word	0x08013a94
 800d494:	080110dc 	.word	0x080110dc

0800d498 <tcp_rexmit_fast>:
{
 800d498:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d49a:	4604      	mov	r4, r0
 800d49c:	b340      	cbz	r0, 800d4f0 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d49e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d4a0:	b113      	cbz	r3, 800d4a8 <tcp_rexmit_fast+0x10>
 800d4a2:	8b63      	ldrh	r3, [r4, #26]
 800d4a4:	075b      	lsls	r3, r3, #29
 800d4a6:	d500      	bpl.n	800d4aa <tcp_rexmit_fast+0x12>
}
 800d4a8:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f7ff ffb0 	bl	800d410 <tcp_rexmit>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d1f9      	bne.n	800d4a8 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d4b4:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800d4b8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d4bc:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d4be:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d4c0:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d4c4:	bf28      	it	cs
 800d4c6:	4619      	movcs	r1, r3
 800d4c8:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d4ca:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d4ce:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d4d2:	d902      	bls.n	800d4da <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 800d4d4:	b283      	uxth	r3, r0
 800d4d6:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      tcp_set_flags(pcb, TF_INFR);
 800d4da:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d4dc:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 800d4de:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d4e2:	4413      	add	r3, r2
      pcb->rtime = 0;
 800d4e4:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d4e6:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d4ea:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 800d4ec:	8622      	strh	r2, [r4, #48]	@ 0x30
}
 800d4ee:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d4f0:	4b03      	ldr	r3, [pc, #12]	@ (800d500 <tcp_rexmit_fast+0x68>)
 800d4f2:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800d4f6:	4903      	ldr	r1, [pc, #12]	@ (800d504 <tcp_rexmit_fast+0x6c>)
 800d4f8:	4803      	ldr	r0, [pc, #12]	@ (800d508 <tcp_rexmit_fast+0x70>)
 800d4fa:	f002 fd1b 	bl	800ff34 <iprintf>
 800d4fe:	e7ce      	b.n	800d49e <tcp_rexmit_fast+0x6>
 800d500:	08013520 	.word	0x08013520
 800d504:	08013aac 	.word	0x08013aac
 800d508:	080110dc 	.word	0x080110dc

0800d50c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d510:	b084      	sub	sp, #16
 800d512:	4607      	mov	r7, r0
 800d514:	460e      	mov	r6, r1
 800d516:	4615      	mov	r5, r2
 800d518:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d51c:	461c      	mov	r4, r3
{
 800d51e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 800d522:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d526:	b1fb      	cbz	r3, 800d568 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d528:	f1b8 0f00 	cmp.w	r8, #0
 800d52c:	d026      	beq.n	800d57c <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d52e:	4630      	mov	r0, r6
 800d530:	f7fa ff9a 	bl	8008468 <lwip_htonl>
 800d534:	2114      	movs	r1, #20
 800d536:	4602      	mov	r2, r0
 800d538:	4628      	mov	r0, r5
 800d53a:	f24d 0516 	movw	r5, #53270	@ 0xd016
 800d53e:	464b      	mov	r3, r9
 800d540:	f8cd a000 	str.w	sl, [sp]
 800d544:	e9cd 1501 	strd	r1, r5, [sp, #4]
 800d548:	2100      	movs	r1, #0
 800d54a:	f7ff f9b7 	bl	800c8bc <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d54e:	4601      	mov	r1, r0
 800d550:	b138      	cbz	r0, 800d562 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d552:	4643      	mov	r3, r8
 800d554:	4622      	mov	r2, r4
 800d556:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d558:	b004      	add	sp, #16
 800d55a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d55e:	f7ff ba1b 	b.w	800c998 <tcp_output_control_segment>
}
 800d562:	b004      	add	sp, #16
 800d564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d568:	4b08      	ldr	r3, [pc, #32]	@ (800d58c <tcp_rst+0x80>)
 800d56a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800d56e:	4908      	ldr	r1, [pc, #32]	@ (800d590 <tcp_rst+0x84>)
 800d570:	4808      	ldr	r0, [pc, #32]	@ (800d594 <tcp_rst+0x88>)
 800d572:	f002 fcdf 	bl	800ff34 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d576:	f1b8 0f00 	cmp.w	r8, #0
 800d57a:	d1d8      	bne.n	800d52e <tcp_rst+0x22>
 800d57c:	4b03      	ldr	r3, [pc, #12]	@ (800d58c <tcp_rst+0x80>)
 800d57e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800d582:	4905      	ldr	r1, [pc, #20]	@ (800d598 <tcp_rst+0x8c>)
 800d584:	4803      	ldr	r0, [pc, #12]	@ (800d594 <tcp_rst+0x88>)
 800d586:	f002 fcd5 	bl	800ff34 <iprintf>
 800d58a:	e7d0      	b.n	800d52e <tcp_rst+0x22>
 800d58c:	08013520 	.word	0x08013520
 800d590:	08013acc 	.word	0x08013acc
 800d594:	080110dc 	.word	0x080110dc
 800d598:	08013ae8 	.word	0x08013ae8

0800d59c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d59c:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d59e:	4604      	mov	r4, r0
 800d5a0:	b1c8      	cbz	r0, 800d5d6 <tcp_send_empty_ack+0x3a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d5a2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800d5a4:	f7fa ff60 	bl	8008468 <lwip_htonl>
 800d5a8:	2100      	movs	r1, #0
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f7ff f9cb 	bl	800c948 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d5b2:	4601      	mov	r1, r0
 800d5b4:	b1b8      	cbz	r0, 800d5e6 <tcp_send_empty_ack+0x4a>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d5b6:	1d23      	adds	r3, r4, #4
 800d5b8:	4622      	mov	r2, r4
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f7ff f9ec 	bl	800c998 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5c0:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800d5c2:	b920      	cbnz	r0, 800d5ce <tcp_send_empty_ack+0x32>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5c4:	f023 0303 	bic.w	r3, r3, #3
 800d5c8:	b29b      	uxth	r3, r3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5ca:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 800d5cc:	bd10      	pop	{r4, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5ce:	f043 0303 	orr.w	r3, r3, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5d2:	8363      	strh	r3, [r4, #26]
}
 800d5d4:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d5d6:	4b07      	ldr	r3, [pc, #28]	@ (800d5f4 <tcp_send_empty_ack+0x58>)
 800d5d8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800d5dc:	4906      	ldr	r1, [pc, #24]	@ (800d5f8 <tcp_send_empty_ack+0x5c>)
 800d5de:	4807      	ldr	r0, [pc, #28]	@ (800d5fc <tcp_send_empty_ack+0x60>)
 800d5e0:	f002 fca8 	bl	800ff34 <iprintf>
 800d5e4:	e7dd      	b.n	800d5a2 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5e6:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 800d5e8:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5ec:	f043 0303 	orr.w	r3, r3, #3
    return ERR_BUF;
 800d5f0:	e7eb      	b.n	800d5ca <tcp_send_empty_ack+0x2e>
 800d5f2:	bf00      	nop
 800d5f4:	08013520 	.word	0x08013520
 800d5f8:	08013b04 	.word	0x08013b04
 800d5fc:	080110dc 	.word	0x080110dc

0800d600 <tcp_output>:
{
 800d600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d604:	4604      	mov	r4, r0
 800d606:	b085      	sub	sp, #20
  LWIP_ASSERT_CORE_LOCKED();
 800d608:	f7f6 fd62 	bl	80040d0 <sys_check_core_locking>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d60c:	2c00      	cmp	r4, #0
 800d60e:	f000 81a5 	beq.w	800d95c <tcp_output+0x35c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d612:	7d23      	ldrb	r3, [r4, #20]
 800d614:	2b01      	cmp	r3, #1
 800d616:	f000 8155 	beq.w	800d8c4 <tcp_output+0x2c4>
  if (tcp_input_pcb == pcb) {
 800d61a:	4bb1      	ldr	r3, [pc, #708]	@ (800d8e0 <tcp_output+0x2e0>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	42a3      	cmp	r3, r4
 800d620:	d031      	beq.n	800d686 <tcp_output+0x86>
  seg = pcb->unsent;
 800d622:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d624:	f8b4 7048 	ldrh.w	r7, [r4, #72]	@ 0x48
 800d628:	f8b4 6060 	ldrh.w	r6, [r4, #96]	@ 0x60
  if (seg == NULL) {
 800d62c:	b325      	cbz	r5, 800d678 <tcp_output+0x78>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d62e:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d630:	f104 0804 	add.w	r8, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d634:	2800      	cmp	r0, #0
 800d636:	f040 8199 	bne.w	800d96c <tcp_output+0x36c>
    return ip_route(src, dst);
 800d63a:	4640      	mov	r0, r8
 800d63c:	f001 faa6 	bl	800eb8c <ip4_route>
 800d640:	4683      	mov	fp, r0
  if (netif == NULL) {
 800d642:	f1bb 0f00 	cmp.w	fp, #0
 800d646:	f000 81a5 	beq.w	800d994 <tcp_output+0x394>
  if (ip_addr_isany(&pcb->local_ip)) {
 800d64a:	6823      	ldr	r3, [r4, #0]
 800d64c:	b913      	cbnz	r3, 800d654 <tcp_output+0x54>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d64e:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d652:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d654:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d656:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d658:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d65a:	bf28      	it	cs
 800d65c:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d65e:	f7fa ff03 	bl	8008468 <lwip_htonl>
 800d662:	892b      	ldrh	r3, [r5, #8]
 800d664:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800d666:	1a9b      	subs	r3, r3, r2
 800d668:	4403      	add	r3, r0
 800d66a:	42bb      	cmp	r3, r7
 800d66c:	d90f      	bls.n	800d68e <tcp_output+0x8e>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d66e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 800d672:	42bb      	cmp	r3, r7
 800d674:	f000 8142 	beq.w	800d8fc <tcp_output+0x2fc>
    if (pcb->flags & TF_ACK_NOW) {
 800d678:	8b62      	ldrh	r2, [r4, #26]
 800d67a:	0790      	lsls	r0, r2, #30
 800d67c:	f100 812a 	bmi.w	800d8d4 <tcp_output+0x2d4>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d680:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d684:	8362      	strh	r2, [r4, #26]
    return ERR_OK;
 800d686:	2000      	movs	r0, #0
}
 800d688:	b005      	add	sp, #20
 800d68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
  useg = pcb->unacked;
 800d694:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  if (useg != NULL) {
 800d696:	2b00      	cmp	r3, #0
 800d698:	f000 8140 	beq.w	800d91c <tcp_output+0x31c>
    for (; useg->next != NULL; useg = useg->next);
 800d69c:	4699      	mov	r9, r3
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1fb      	bne.n	800d69c <tcp_output+0x9c>
    LWIP_ASSERT("RST not expected here!",
 800d6a4:	465e      	mov	r6, fp
 800d6a6:	e0a6      	b.n	800d7f6 <tcp_output+0x1f6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d6a8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d6aa:	b15b      	cbz	r3, 800d6c4 <tcp_output+0xc4>
 800d6ac:	8b62      	ldrh	r2, [r4, #26]
 800d6ae:	f012 0f44 	tst.w	r2, #68	@ 0x44
 800d6b2:	d107      	bne.n	800d6c4 <tcp_output+0xc4>
 800d6b4:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	f000 80f2 	beq.w	800d8a0 <tcp_output+0x2a0>
 800d6bc:	6803      	ldr	r3, [r0, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f000 80e9 	beq.w	800d896 <tcp_output+0x296>
    if (pcb->state != SYN_SENT) {
 800d6c4:	7d23      	ldrb	r3, [r4, #20]
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d6c6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    if (pcb->state != SYN_SENT) {
 800d6ca:	2b02      	cmp	r3, #2
 800d6cc:	d00a      	beq.n	800d6e4 <tcp_output+0xe4>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d6ce:	f8ba a00c 	ldrh.w	sl, [sl, #12]
 800d6d2:	2010      	movs	r0, #16
 800d6d4:	f7fa fec4 	bl	8008460 <lwip_htons>
 800d6d8:	ea4a 0000 	orr.w	r0, sl, r0
 800d6dc:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800d6e0:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 800d6e4:	686b      	ldr	r3, [r5, #4]
 800d6e6:	7b9b      	ldrb	r3, [r3, #14]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d153      	bne.n	800d794 <tcp_output+0x194>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d6ec:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d6ee:	f7fa febb 	bl	8008468 <lwip_htonl>
 800d6f2:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d6f6:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 800d6f8:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800d6fc:	f7fa feb0 	bl	8008460 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d700:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d702:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d704:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d708:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d70a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d70e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d710:	7aab      	ldrb	r3, [r5, #10]
 800d712:	07da      	lsls	r2, r3, #31
 800d714:	f100 80ae 	bmi.w	800d874 <tcp_output+0x274>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d718:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 800d71c:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 800d720:	2b00      	cmp	r3, #0
 800d722:	da01      	bge.n	800d728 <tcp_output+0x128>
    pcb->rtime = 0;
 800d724:	2300      	movs	r3, #0
 800d726:	8623      	strh	r3, [r4, #48]	@ 0x30
  if (pcb->rttest == 0) {
 800d728:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	f000 8097 	beq.w	800d85e <tcp_output+0x25e>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d730:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 800d732:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d734:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 800d736:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d738:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 800d73c:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d740:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800d742:	1ac9      	subs	r1, r1, r3
 800d744:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800d746:	8901      	ldrh	r1, [r0, #8]
 800d748:	1acb      	subs	r3, r1, r3
 800d74a:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800d74c:	f88a 2010 	strb.w	r2, [sl, #16]
 800d750:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d754:	7aab      	ldrb	r3, [r5, #10]
 800d756:	f013 0f01 	tst.w	r3, #1
 800d75a:	bf0c      	ite	eq
 800d75c:	2314      	moveq	r3, #20
 800d75e:	2318      	movne	r3, #24
 800d760:	449a      	add	sl, r3
 800d762:	45d3      	cmp	fp, sl
 800d764:	d007      	beq.n	800d776 <tcp_output+0x176>
 800d766:	4b5f      	ldr	r3, [pc, #380]	@ (800d8e4 <tcp_output+0x2e4>)
 800d768:	f240 621c 	movw	r2, #1564	@ 0x61c
 800d76c:	495e      	ldr	r1, [pc, #376]	@ (800d8e8 <tcp_output+0x2e8>)
 800d76e:	485f      	ldr	r0, [pc, #380]	@ (800d8ec <tcp_output+0x2ec>)
 800d770:	f002 fbe0 	bl	800ff34 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d774:	6868      	ldr	r0, [r5, #4]
 800d776:	9602      	str	r6, [sp, #8]
 800d778:	4642      	mov	r2, r8
 800d77a:	7aa3      	ldrb	r3, [r4, #10]
 800d77c:	4621      	mov	r1, r4
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	2306      	movs	r3, #6
 800d782:	9301      	str	r3, [sp, #4]
 800d784:	7ae3      	ldrb	r3, [r4, #11]
 800d786:	f001 fb9b 	bl	800eec0 <ip4_output_if>
    if (err != ERR_OK) {
 800d78a:	2800      	cmp	r0, #0
 800d78c:	f040 80f8 	bne.w	800d980 <tcp_output+0x380>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d790:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 800d794:	682b      	ldr	r3, [r5, #0]
 800d796:	66e3      	str	r3, [r4, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800d798:	7d23      	ldrb	r3, [r4, #20]
 800d79a:	2b02      	cmp	r3, #2
 800d79c:	d003      	beq.n	800d7a6 <tcp_output+0x1a6>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d79e:	8b63      	ldrh	r3, [r4, #26]
 800d7a0:	f023 0303 	bic.w	r3, r3, #3
 800d7a4:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d7a6:	f8da 0004 	ldr.w	r0, [sl, #4]
 800d7aa:	f7fa fe5d 	bl	8008468 <lwip_htonl>
 800d7ae:	68eb      	ldr	r3, [r5, #12]
 800d7b0:	4682      	mov	sl, r0
 800d7b2:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800d7b6:	8998      	ldrh	r0, [r3, #12]
 800d7b8:	f7fa fe52 	bl	8008460 <lwip_htons>
 800d7bc:	f010 0303 	ands.w	r3, r0, #3
 800d7c0:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d7c2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d7c4:	bf18      	it	ne
 800d7c6:	2301      	movne	r3, #1
 800d7c8:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 800d7ca:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d7ce:	1ad2      	subs	r2, r2, r3
 800d7d0:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 800d7d2:	bfb8      	it	lt
 800d7d4:	6523      	strlt	r3, [r4, #80]	@ 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800d7d6:	68eb      	ldr	r3, [r5, #12]
 800d7d8:	8998      	ldrh	r0, [r3, #12]
 800d7da:	f7fa fe41 	bl	8008460 <lwip_htons>
 800d7de:	0783      	lsls	r3, r0, #30
 800d7e0:	d123      	bne.n	800d82a <tcp_output+0x22a>
 800d7e2:	f1ba 0f00 	cmp.w	sl, #0
 800d7e6:	d120      	bne.n	800d82a <tcp_output+0x22a>
      tcp_seg_free(seg);
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	f7fc fb2f 	bl	8009e4c <tcp_seg_free>
    seg = pcb->unsent;
 800d7ee:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  while (seg != NULL &&
 800d7f0:	2d00      	cmp	r5, #0
 800d7f2:	f000 80ca 	beq.w	800d98a <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d7f6:	68eb      	ldr	r3, [r5, #12]
 800d7f8:	6858      	ldr	r0, [r3, #4]
 800d7fa:	f7fa fe35 	bl	8008468 <lwip_htonl>
 800d7fe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d800:	1ac0      	subs	r0, r0, r3
 800d802:	892b      	ldrh	r3, [r5, #8]
 800d804:	4418      	add	r0, r3
  while (seg != NULL &&
 800d806:	42b8      	cmp	r0, r7
 800d808:	f200 80b4 	bhi.w	800d974 <tcp_output+0x374>
    LWIP_ASSERT("RST not expected here!",
 800d80c:	68eb      	ldr	r3, [r5, #12]
 800d80e:	8998      	ldrh	r0, [r3, #12]
 800d810:	f7fa fe26 	bl	8008460 <lwip_htons>
 800d814:	0741      	lsls	r1, r0, #29
 800d816:	f57f af47 	bpl.w	800d6a8 <tcp_output+0xa8>
 800d81a:	4b32      	ldr	r3, [pc, #200]	@ (800d8e4 <tcp_output+0x2e4>)
 800d81c:	f240 5236 	movw	r2, #1334	@ 0x536
 800d820:	4933      	ldr	r1, [pc, #204]	@ (800d8f0 <tcp_output+0x2f0>)
 800d822:	4832      	ldr	r0, [pc, #200]	@ (800d8ec <tcp_output+0x2ec>)
 800d824:	f002 fb86 	bl	800ff34 <iprintf>
 800d828:	e73e      	b.n	800d6a8 <tcp_output+0xa8>
      seg->next = NULL;
 800d82a:	2300      	movs	r3, #0
 800d82c:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800d82e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d830:	b193      	cbz	r3, 800d858 <tcp_output+0x258>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d832:	68eb      	ldr	r3, [r5, #12]
 800d834:	6858      	ldr	r0, [r3, #4]
 800d836:	f7fa fe17 	bl	8008468 <lwip_htonl>
 800d83a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800d83e:	4682      	mov	sl, r0
 800d840:	6858      	ldr	r0, [r3, #4]
 800d842:	f7fa fe11 	bl	8008468 <lwip_htonl>
 800d846:	ebaa 0a00 	sub.w	sl, sl, r0
 800d84a:	f1ba 0f00 	cmp.w	sl, #0
 800d84e:	db67      	blt.n	800d920 <tcp_output+0x320>
          useg->next = seg;
 800d850:	f8c9 5000 	str.w	r5, [r9]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d854:	46a9      	mov	r9, r5
 800d856:	e7ca      	b.n	800d7ee <tcp_output+0x1ee>
 800d858:	46a9      	mov	r9, r5
        pcb->unacked = seg;
 800d85a:	6725      	str	r5, [r4, #112]	@ 0x70
        useg = seg;
 800d85c:	e7c7      	b.n	800d7ee <tcp_output+0x1ee>
    pcb->rttest = tcp_ticks;
 800d85e:	4b25      	ldr	r3, [pc, #148]	@ (800d8f4 <tcp_output+0x2f4>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	6363      	str	r3, [r4, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d864:	f8da 0004 	ldr.w	r0, [sl, #4]
 800d868:	f7fa fdfe 	bl	8008468 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d86c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d870:	63a0      	str	r0, [r4, #56]	@ 0x38
 800d872:	e75d      	b.n	800d730 <tcp_output+0x130>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d874:	4642      	mov	r2, r8
 800d876:	4631      	mov	r1, r6
 800d878:	f240 50b4 	movw	r0, #1460	@ 0x5b4
    opts += 1;
 800d87c:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d880:	f7fd fb00 	bl	800ae84 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d884:	f040 7001 	orr.w	r0, r0, #33816576	@ 0x2040000
 800d888:	f7fa fdee 	bl	8008468 <lwip_htonl>
 800d88c:	f8ca 0014 	str.w	r0, [sl, #20]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d890:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800d894:	e742      	b.n	800d71c <tcp_output+0x11c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d896:	8901      	ldrh	r1, [r0, #8]
 800d898:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800d89a:	4299      	cmp	r1, r3
 800d89c:	f4bf af12 	bcs.w	800d6c4 <tcp_output+0xc4>
 800d8a0:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f43f af0d 	beq.w	800d6c4 <tcp_output+0xc4>
 800d8aa:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800d8ae:	2b0f      	cmp	r3, #15
 800d8b0:	f63f af08 	bhi.w	800d6c4 <tcp_output+0xc4>
 800d8b4:	f012 0fa0 	tst.w	r2, #160	@ 0xa0
 800d8b8:	f47f af04 	bne.w	800d6c4 <tcp_output+0xc4>
  if (pcb->unsent == NULL) {
 800d8bc:	2800      	cmp	r0, #0
 800d8be:	f47f aedf 	bne.w	800d680 <tcp_output+0x80>
 800d8c2:	e063      	b.n	800d98c <tcp_output+0x38c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d8c4:	4b07      	ldr	r3, [pc, #28]	@ (800d8e4 <tcp_output+0x2e4>)
 800d8c6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800d8ca:	490b      	ldr	r1, [pc, #44]	@ (800d8f8 <tcp_output+0x2f8>)
 800d8cc:	4807      	ldr	r0, [pc, #28]	@ (800d8ec <tcp_output+0x2ec>)
 800d8ce:	f002 fb31 	bl	800ff34 <iprintf>
 800d8d2:	e6a2      	b.n	800d61a <tcp_output+0x1a>
      return tcp_send_empty_ack(pcb);
 800d8d4:	4620      	mov	r0, r4
}
 800d8d6:	b005      	add	sp, #20
 800d8d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800d8dc:	f7ff be5e 	b.w	800d59c <tcp_send_empty_ack>
 800d8e0:	2402076c 	.word	0x2402076c
 800d8e4:	08013520 	.word	0x08013520
 800d8e8:	08013b7c 	.word	0x08013b7c
 800d8ec:	080110dc 	.word	0x080110dc
 800d8f0:	08013b64 	.word	0x08013b64
 800d8f4:	24020768 	.word	0x24020768
 800d8f8:	08013b3c 	.word	0x08013b3c
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d8fc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	f47f aeba 	bne.w	800d678 <tcp_output+0x78>
 800d904:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 800d908:	2b00      	cmp	r3, #0
 800d90a:	f47f aeb5 	bne.w	800d678 <tcp_output+0x78>
      pcb->persist_cnt = 0;
 800d90e:	f44f 7280 	mov.w	r2, #256	@ 0x100
      pcb->persist_probe = 0;
 800d912:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
      pcb->persist_cnt = 0;
 800d916:	f8a4 2098 	strh.w	r2, [r4, #152]	@ 0x98
      pcb->persist_probe = 0;
 800d91a:	e6ad      	b.n	800d678 <tcp_output+0x78>
  useg = pcb->unacked;
 800d91c:	4699      	mov	r9, r3
 800d91e:	e6c1      	b.n	800d6a4 <tcp_output+0xa4>
          while (*cur_seg &&
 800d920:	6f23      	ldr	r3, [r4, #112]	@ 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d922:	f104 0b70 	add.w	fp, r4, #112	@ 0x70
          while (*cur_seg &&
 800d926:	b92b      	cbnz	r3, 800d934 <tcp_output+0x334>
 800d928:	e014      	b.n	800d954 <tcp_output+0x354>
            cur_seg = &((*cur_seg)->next );
 800d92a:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 800d92e:	f8db 3000 	ldr.w	r3, [fp]
 800d932:	b17b      	cbz	r3, 800d954 <tcp_output+0x354>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d934:	68db      	ldr	r3, [r3, #12]
 800d936:	6858      	ldr	r0, [r3, #4]
 800d938:	f7fa fd96 	bl	8008468 <lwip_htonl>
 800d93c:	68eb      	ldr	r3, [r5, #12]
 800d93e:	4682      	mov	sl, r0
 800d940:	6858      	ldr	r0, [r3, #4]
 800d942:	f7fa fd91 	bl	8008468 <lwip_htonl>
 800d946:	ebaa 0a00 	sub.w	sl, sl, r0
          while (*cur_seg &&
 800d94a:	f1ba 0f00 	cmp.w	sl, #0
 800d94e:	dbec      	blt.n	800d92a <tcp_output+0x32a>
            cur_seg = &((*cur_seg)->next );
 800d950:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 800d954:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800d956:	f8cb 5000 	str.w	r5, [fp]
 800d95a:	e748      	b.n	800d7ee <tcp_output+0x1ee>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d95c:	4b0f      	ldr	r3, [pc, #60]	@ (800d99c <tcp_output+0x39c>)
 800d95e:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800d962:	490f      	ldr	r1, [pc, #60]	@ (800d9a0 <tcp_output+0x3a0>)
 800d964:	480f      	ldr	r0, [pc, #60]	@ (800d9a4 <tcp_output+0x3a4>)
 800d966:	f002 fae5 	bl	800ff34 <iprintf>
 800d96a:	e652      	b.n	800d612 <tcp_output+0x12>
    return netif_get_by_index(pcb->netif_idx);
 800d96c:	f7fb fb60 	bl	8009030 <netif_get_by_index>
 800d970:	4683      	mov	fp, r0
 800d972:	e666      	b.n	800d642 <tcp_output+0x42>
  if (pcb->unsent == NULL) {
 800d974:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800d976:	8b62      	ldrh	r2, [r4, #26]
 800d978:	2800      	cmp	r0, #0
 800d97a:	f47f ae81 	bne.w	800d680 <tcp_output+0x80>
 800d97e:	e005      	b.n	800d98c <tcp_output+0x38c>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d980:	8b63      	ldrh	r3, [r4, #26]
 800d982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d986:	8363      	strh	r3, [r4, #26]
      return err;
 800d988:	e67e      	b.n	800d688 <tcp_output+0x88>
 800d98a:	8b62      	ldrh	r2, [r4, #26]
    pcb->unsent_oversize = 0;
 800d98c:	2300      	movs	r3, #0
 800d98e:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
 800d992:	e675      	b.n	800d680 <tcp_output+0x80>
    return ERR_RTE;
 800d994:	f06f 0003 	mvn.w	r0, #3
 800d998:	e676      	b.n	800d688 <tcp_output+0x88>
 800d99a:	bf00      	nop
 800d99c:	08013520 	.word	0x08013520
 800d9a0:	08013b24 	.word	0x08013b24
 800d9a4:	080110dc 	.word	0x080110dc

0800d9a8 <tcp_rexmit_rto_commit>:
{
 800d9a8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d9aa:	4604      	mov	r4, r0
 800d9ac:	b158      	cbz	r0, 800d9c6 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 800d9ae:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800d9b2:	2bff      	cmp	r3, #255	@ 0xff
 800d9b4:	d002      	beq.n	800d9bc <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 800d9bc:	4620      	mov	r0, r4
}
 800d9be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800d9c2:	f7ff be1d 	b.w	800d600 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d9c6:	4b04      	ldr	r3, [pc, #16]	@ (800d9d8 <tcp_rexmit_rto_commit+0x30>)
 800d9c8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d9cc:	4903      	ldr	r1, [pc, #12]	@ (800d9dc <tcp_rexmit_rto_commit+0x34>)
 800d9ce:	4804      	ldr	r0, [pc, #16]	@ (800d9e0 <tcp_rexmit_rto_commit+0x38>)
 800d9d0:	f002 fab0 	bl	800ff34 <iprintf>
 800d9d4:	e7eb      	b.n	800d9ae <tcp_rexmit_rto_commit+0x6>
 800d9d6:	bf00      	nop
 800d9d8:	08013520 	.word	0x08013520
 800d9dc:	08013b90 	.word	0x08013b90
 800d9e0:	080110dc 	.word	0x080110dc

0800d9e4 <tcp_rexmit_rto>:
{
 800d9e4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	b118      	cbz	r0, 800d9f2 <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d9ea:	f7ff fccd 	bl	800d388 <tcp_rexmit_rto_prepare>
 800d9ee:	b198      	cbz	r0, 800da18 <tcp_rexmit_rto+0x34>
}
 800d9f0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d9f2:	4b0f      	ldr	r3, [pc, #60]	@ (800da30 <tcp_rexmit_rto+0x4c>)
 800d9f4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800d9f8:	490e      	ldr	r1, [pc, #56]	@ (800da34 <tcp_rexmit_rto+0x50>)
 800d9fa:	480f      	ldr	r0, [pc, #60]	@ (800da38 <tcp_rexmit_rto+0x54>)
 800d9fc:	f002 fa9a 	bl	800ff34 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800da00:	4620      	mov	r0, r4
 800da02:	f7ff fcc1 	bl	800d388 <tcp_rexmit_rto_prepare>
 800da06:	2800      	cmp	r0, #0
 800da08:	d1f2      	bne.n	800d9f0 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800da0a:	4b09      	ldr	r3, [pc, #36]	@ (800da30 <tcp_rexmit_rto+0x4c>)
 800da0c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800da10:	490a      	ldr	r1, [pc, #40]	@ (800da3c <tcp_rexmit_rto+0x58>)
 800da12:	4809      	ldr	r0, [pc, #36]	@ (800da38 <tcp_rexmit_rto+0x54>)
 800da14:	f002 fa8e 	bl	800ff34 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800da18:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800da1c:	2bff      	cmp	r3, #255	@ 0xff
 800da1e:	d002      	beq.n	800da26 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 800da20:	3301      	adds	r3, #1
 800da22:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 800da26:	4620      	mov	r0, r4
}
 800da28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800da2c:	f7ff bde8 	b.w	800d600 <tcp_output>
 800da30:	08013520 	.word	0x08013520
 800da34:	08013bb4 	.word	0x08013bb4
 800da38:	080110dc 	.word	0x080110dc
 800da3c:	08013b90 	.word	0x08013b90

0800da40 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800da40:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800da42:	4604      	mov	r4, r0
 800da44:	b188      	cbz	r0, 800da6a <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800da46:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800da48:	3801      	subs	r0, #1
 800da4a:	f7fa fd0d 	bl	8008468 <lwip_htonl>
 800da4e:	2100      	movs	r1, #0
 800da50:	4602      	mov	r2, r0
 800da52:	4620      	mov	r0, r4
 800da54:	f7fe ff78 	bl	800c948 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800da58:	4601      	mov	r1, r0
 800da5a:	b170      	cbz	r0, 800da7a <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800da5c:	1d23      	adds	r3, r4, #4
 800da5e:	4622      	mov	r2, r4
 800da60:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800da62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800da66:	f7fe bf97 	b.w	800c998 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800da6a:	4b05      	ldr	r3, [pc, #20]	@ (800da80 <tcp_keepalive+0x40>)
 800da6c:	f640 0224 	movw	r2, #2084	@ 0x824
 800da70:	4904      	ldr	r1, [pc, #16]	@ (800da84 <tcp_keepalive+0x44>)
 800da72:	4805      	ldr	r0, [pc, #20]	@ (800da88 <tcp_keepalive+0x48>)
 800da74:	f002 fa5e 	bl	800ff34 <iprintf>
 800da78:	e7e5      	b.n	800da46 <tcp_keepalive+0x6>
}
 800da7a:	f04f 30ff 	mov.w	r0, #4294967295
 800da7e:	bd10      	pop	{r4, pc}
 800da80:	08013520 	.word	0x08013520
 800da84:	08013bd0 	.word	0x08013bd0
 800da88:	080110dc 	.word	0x080110dc

0800da8c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800da8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800da90:	4604      	mov	r4, r0
 800da92:	2800      	cmp	r0, #0
 800da94:	d055      	beq.n	800db42 <tcp_zero_window_probe+0xb6>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800da96:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  if (seg == NULL) {
 800da98:	2d00      	cmp	r5, #0
 800da9a:	d04f      	beq.n	800db3c <tcp_zero_window_probe+0xb0>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800da9c:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 800daa0:	2bff      	cmp	r3, #255	@ 0xff
 800daa2:	d002      	beq.n	800daaa <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800daa4:	3301      	adds	r3, #1
 800daa6:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800daaa:	68eb      	ldr	r3, [r5, #12]
 800daac:	8998      	ldrh	r0, [r3, #12]
 800daae:	f7fa fcd7 	bl	8008460 <lwip_htons>
 800dab2:	07c3      	lsls	r3, r0, #31
 800dab4:	d427      	bmi.n	800db06 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dab6:	68eb      	ldr	r3, [r5, #12]
 800dab8:	2101      	movs	r1, #1
 800daba:	4620      	mov	r0, r4
 800dabc:	685a      	ldr	r2, [r3, #4]
 800dabe:	f7fe ff43 	bl	800c948 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800dac2:	4606      	mov	r6, r0
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d044      	beq.n	800db52 <tcp_zero_window_probe+0xc6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dac8:	f8d6 8004 	ldr.w	r8, [r6, #4]
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dacc:	6868      	ldr	r0, [r5, #4]
 800dace:	f108 0114 	add.w	r1, r8, #20
 800dad2:	892f      	ldrh	r7, [r5, #8]
 800dad4:	2201      	movs	r2, #1
 800dad6:	8903      	ldrh	r3, [r0, #8]
 800dad8:	1bdb      	subs	r3, r3, r7
 800dada:	b29b      	uxth	r3, r3
 800dadc:	f7fb fe5a 	bl	8009794 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dae0:	68eb      	ldr	r3, [r5, #12]
 800dae2:	6858      	ldr	r0, [r3, #4]
 800dae4:	f7fa fcc0 	bl	8008468 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dae8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800daea:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800daec:	4622      	mov	r2, r4
 800daee:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800daf0:	1a1b      	subs	r3, r3, r0
 800daf2:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800daf4:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 800daf8:	bfb8      	it	lt
 800dafa:	6520      	strlt	r0, [r4, #80]	@ 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dafc:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800dafe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800db02:	f7fe bf49 	b.w	800c998 <tcp_output_control_segment>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800db06:	892f      	ldrh	r7, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800db08:	4620      	mov	r0, r4
 800db0a:	68eb      	ldr	r3, [r5, #12]
 800db0c:	1e39      	subs	r1, r7, #0
 800db0e:	685a      	ldr	r2, [r3, #4]
 800db10:	bf18      	it	ne
 800db12:	2101      	movne	r1, #1
 800db14:	f7fe ff18 	bl	800c948 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800db18:	4606      	mov	r6, r0
 800db1a:	b1d0      	cbz	r0, 800db52 <tcp_zero_window_probe+0xc6>
  tcphdr = (struct tcp_hdr *)p->payload;
 800db1c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (is_fin) {
 800db20:	2f00      	cmp	r7, #0
 800db22:	d1d3      	bne.n	800dacc <tcp_zero_window_probe+0x40>
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800db24:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 800db28:	2011      	movs	r0, #17
 800db2a:	f7fa fc99 	bl	8008460 <lwip_htons>
 800db2e:	f427 577c 	bic.w	r7, r7, #16128	@ 0x3f00
 800db32:	b2bf      	uxth	r7, r7
 800db34:	4338      	orrs	r0, r7
 800db36:	f8a8 000c 	strh.w	r0, [r8, #12]
 800db3a:	e7d1      	b.n	800dae0 <tcp_zero_window_probe+0x54>
    return ERR_OK;
 800db3c:	4628      	mov	r0, r5
}
 800db3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800db42:	4b05      	ldr	r3, [pc, #20]	@ (800db58 <tcp_zero_window_probe+0xcc>)
 800db44:	f640 024f 	movw	r2, #2127	@ 0x84f
 800db48:	4904      	ldr	r1, [pc, #16]	@ (800db5c <tcp_zero_window_probe+0xd0>)
 800db4a:	4805      	ldr	r0, [pc, #20]	@ (800db60 <tcp_zero_window_probe+0xd4>)
 800db4c:	f002 f9f2 	bl	800ff34 <iprintf>
 800db50:	e7a1      	b.n	800da96 <tcp_zero_window_probe+0xa>
    return ERR_MEM;
 800db52:	f04f 30ff 	mov.w	r0, #4294967295
 800db56:	e7f2      	b.n	800db3e <tcp_zero_window_probe+0xb2>
 800db58:	08013520 	.word	0x08013520
 800db5c:	08013bec 	.word	0x08013bec
 800db60:	080110dc 	.word	0x080110dc

0800db64 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800db64:	b570      	push	{r4, r5, r6, lr}
 800db66:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800db68:	200a      	movs	r0, #10
{
 800db6a:	460e      	mov	r6, r1
 800db6c:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800db6e:	f7fb f817 	bl	8008ba0 <memp_malloc>
  if (timeout == NULL) {
 800db72:	b190      	cbz	r0, 800db9a <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800db74:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800db76:	490d      	ldr	r1, [pc, #52]	@ (800dbac <sys_timeout_abs+0x48>)
  timeout->h = handler;
 800db78:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 800db7a:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 800db7c:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 800db80:	680b      	ldr	r3, [r1, #0]
 800db82:	b91b      	cbnz	r3, 800db8c <sys_timeout_abs+0x28>
 800db84:	e007      	b.n	800db96 <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800db86:	4619      	mov	r1, r3
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	b11b      	cbz	r3, 800db94 <sys_timeout_abs+0x30>
 800db8c:	685a      	ldr	r2, [r3, #4]
 800db8e:	1aa2      	subs	r2, r4, r2
 800db90:	2a00      	cmp	r2, #0
 800db92:	daf8      	bge.n	800db86 <sys_timeout_abs+0x22>
        timeout->next = t->next;
 800db94:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800db96:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 800db98:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800db9a:	4b05      	ldr	r3, [pc, #20]	@ (800dbb0 <sys_timeout_abs+0x4c>)
 800db9c:	22be      	movs	r2, #190	@ 0xbe
 800db9e:	4905      	ldr	r1, [pc, #20]	@ (800dbb4 <sys_timeout_abs+0x50>)
 800dba0:	4805      	ldr	r0, [pc, #20]	@ (800dbb8 <sys_timeout_abs+0x54>)
}
 800dba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dba6:	f002 b9c5 	b.w	800ff34 <iprintf>
 800dbaa:	bf00      	nop
 800dbac:	240207ac 	.word	0x240207ac
 800dbb0:	08013c10 	.word	0x08013c10
 800dbb4:	08013c44 	.word	0x08013c44
 800dbb8:	080110dc 	.word	0x080110dc

0800dbbc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800dbbc:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800dbbe:	6843      	ldr	r3, [r0, #4]
{
 800dbc0:	4604      	mov	r4, r0
  cyclic->handler();
 800dbc2:	4798      	blx	r3

  now = sys_now();
 800dbc4:	f7f6 f8fc 	bl	8003dc0 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800dbc8:	4b0a      	ldr	r3, [pc, #40]	@ (800dbf4 <lwip_cyclic_timer+0x38>)
 800dbca:	6825      	ldr	r5, [r4, #0]
  now = sys_now();
 800dbcc:	4684      	mov	ip, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800dbce:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800dbd0:	4622      	mov	r2, r4
 800dbd2:	4909      	ldr	r1, [pc, #36]	@ (800dbf8 <lwip_cyclic_timer+0x3c>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800dbd4:	18e8      	adds	r0, r5, r3
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800dbd6:	eba0 030c 	sub.w	r3, r0, ip
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	da05      	bge.n	800dbea <lwip_cyclic_timer+0x2e>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800dbde:	eb05 000c 	add.w	r0, r5, ip
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800dbe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800dbe6:	f7ff bfbd 	b.w	800db64 <sys_timeout_abs>
}
 800dbea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800dbee:	f7ff bfb9 	b.w	800db64 <sys_timeout_abs>
 800dbf2:	bf00      	nop
 800dbf4:	240207a8 	.word	0x240207a8
 800dbf8:	0800dbbd 	.word	0x0800dbbd

0800dbfc <tcpip_tcp_timer>:
{
 800dbfc:	b508      	push	{r3, lr}
  tcp_tmr();
 800dbfe:	f7fd f913 	bl	800ae28 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dc02:	4b0a      	ldr	r3, [pc, #40]	@ (800dc2c <tcpip_tcp_timer+0x30>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	b153      	cbz	r3, 800dc1e <tcpip_tcp_timer+0x22>
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 800dc08:	f7f6 fa62 	bl	80040d0 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800dc0c:	f7f6 f8d8 	bl	8003dc0 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dc10:	2200      	movs	r2, #0
 800dc12:	4907      	ldr	r1, [pc, #28]	@ (800dc30 <tcpip_tcp_timer+0x34>)
 800dc14:	30fa      	adds	r0, #250	@ 0xfa
}
 800dc16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dc1a:	f7ff bfa3 	b.w	800db64 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dc1e:	4b05      	ldr	r3, [pc, #20]	@ (800dc34 <tcpip_tcp_timer+0x38>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d1f0      	bne.n	800dc08 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800dc26:	4a04      	ldr	r2, [pc, #16]	@ (800dc38 <tcpip_tcp_timer+0x3c>)
 800dc28:	6013      	str	r3, [r2, #0]
}
 800dc2a:	bd08      	pop	{r3, pc}
 800dc2c:	2402075c 	.word	0x2402075c
 800dc30:	0800dbfd 	.word	0x0800dbfd
 800dc34:	24020758 	.word	0x24020758
 800dc38:	240207a4 	.word	0x240207a4

0800dc3c <tcp_timer_needed>:
{
 800dc3c:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();
 800dc3e:	f7f6 fa47 	bl	80040d0 <sys_check_core_locking>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dc42:	4b0c      	ldr	r3, [pc, #48]	@ (800dc74 <tcp_timer_needed+0x38>)
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	b99a      	cbnz	r2, 800dc70 <tcp_timer_needed+0x34>
 800dc48:	4a0b      	ldr	r2, [pc, #44]	@ (800dc78 <tcp_timer_needed+0x3c>)
 800dc4a:	6812      	ldr	r2, [r2, #0]
 800dc4c:	b162      	cbz	r2, 800dc68 <tcp_timer_needed+0x2c>
    tcpip_tcp_timer_active = 1;
 800dc4e:	2201      	movs	r2, #1
 800dc50:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800dc52:	f7f6 fa3d 	bl	80040d0 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800dc56:	f7f6 f8b3 	bl	8003dc0 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	4907      	ldr	r1, [pc, #28]	@ (800dc7c <tcp_timer_needed+0x40>)
 800dc5e:	30fa      	adds	r0, #250	@ 0xfa
}
 800dc60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dc64:	f7ff bf7e 	b.w	800db64 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dc68:	4a05      	ldr	r2, [pc, #20]	@ (800dc80 <tcp_timer_needed+0x44>)
 800dc6a:	6812      	ldr	r2, [r2, #0]
 800dc6c:	2a00      	cmp	r2, #0
 800dc6e:	d1ee      	bne.n	800dc4e <tcp_timer_needed+0x12>
}
 800dc70:	bd08      	pop	{r3, pc}
 800dc72:	bf00      	nop
 800dc74:	240207a4 	.word	0x240207a4
 800dc78:	2402075c 	.word	0x2402075c
 800dc7c:	0800dbfd 	.word	0x0800dbfd
 800dc80:	24020758 	.word	0x24020758

0800dc84 <sys_timeouts_init>:
{
 800dc84:	b538      	push	{r3, r4, r5, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dc86:	4d0c      	ldr	r5, [pc, #48]	@ (800dcb8 <sys_timeouts_init+0x34>)
  LWIP_ASSERT_CORE_LOCKED();
 800dc88:	f7f6 fa22 	bl	80040d0 <sys_check_core_locking>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dc8c:	4c0b      	ldr	r4, [pc, #44]	@ (800dcbc <sys_timeouts_init+0x38>)
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800dc8e:	f7f6 f897 	bl	8003dc0 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dc92:	462a      	mov	r2, r5
 800dc94:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
 800dc98:	4621      	mov	r1, r4
 800dc9a:	f7ff ff63 	bl	800db64 <sys_timeout_abs>
  LWIP_ASSERT_CORE_LOCKED();
 800dc9e:	f7f6 fa17 	bl	80040d0 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800dca2:	f7f6 f88d 	bl	8003dc0 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dca6:	f105 0208 	add.w	r2, r5, #8
 800dcaa:	4621      	mov	r1, r4
 800dcac:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
}
 800dcb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dcb4:	f7ff bf56 	b.w	800db64 <sys_timeout_abs>
 800dcb8:	08013c8c 	.word	0x08013c8c
 800dcbc:	0800dbbd 	.word	0x0800dbbd

0800dcc0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800dcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 800dcc4:	f7f6 fa04 	bl	80040d0 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800dcc8:	4c10      	ldr	r4, [pc, #64]	@ (800dd0c <sys_check_timeouts+0x4c>)
 800dcca:	f7f6 f879 	bl	8003dc0 <sys_now>

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800dcce:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 800dd10 <sys_check_timeouts+0x50>
  now = sys_now();
 800dcd2:	4607      	mov	r7, r0
 800dcd4:	e00f      	b.n	800dcf6 <sys_check_timeouts+0x36>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800dcd6:	685a      	ldr	r2, [r3, #4]
 800dcd8:	eba7 0c02 	sub.w	ip, r7, r2
 800dcdc:	f1bc 0f00 	cmp.w	ip, #0
 800dce0:	db0e      	blt.n	800dd00 <sys_check_timeouts+0x40>
    handler = tmptimeout->h;
 800dce2:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 800dce4:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 800dce6:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 800dcea:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 800dcee:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dcf0:	f7fa ff9c 	bl	8008c2c <memp_free>
    if (handler != NULL) {
 800dcf4:	b935      	cbnz	r5, 800dd04 <sys_check_timeouts+0x44>
    tmptimeout = next_timeout;
 800dcf6:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dcf8:	200a      	movs	r0, #10
 800dcfa:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1ea      	bne.n	800dcd6 <sys_check_timeouts+0x16>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800dd00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 800dd04:	4648      	mov	r0, r9
 800dd06:	47a8      	blx	r5
 800dd08:	e7f5      	b.n	800dcf6 <sys_check_timeouts+0x36>
 800dd0a:	bf00      	nop
 800dd0c:	240207ac 	.word	0x240207ac
 800dd10:	240207a8 	.word	0x240207a8

0800dd14 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800dd14:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800dd16:	4c08      	ldr	r4, [pc, #32]	@ (800dd38 <sys_timeouts_sleeptime+0x24>)
  LWIP_ASSERT_CORE_LOCKED();
 800dd18:	f7f6 f9da 	bl	80040d0 <sys_check_core_locking>
  if (next_timeout == NULL) {
 800dd1c:	6823      	ldr	r3, [r4, #0]
 800dd1e:	b13b      	cbz	r3, 800dd30 <sys_timeouts_sleeptime+0x1c>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800dd20:	f7f6 f84e 	bl	8003dc0 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800dd24:	6823      	ldr	r3, [r4, #0]
 800dd26:	685b      	ldr	r3, [r3, #4]
    return 0;
 800dd28:	1a18      	subs	r0, r3, r0
 800dd2a:	bf48      	it	mi
 800dd2c:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800dd2e:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800dd30:	f04f 30ff 	mov.w	r0, #4294967295
}
 800dd34:	bd10      	pop	{r4, pc}
 800dd36:	bf00      	nop
 800dd38:	240207ac 	.word	0x240207ac

0800dd3c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800dd3c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dd3e:	f001 ff75 	bl	800fc2c <rand>
 800dd42:	4b02      	ldr	r3, [pc, #8]	@ (800dd4c <udp_init+0x10>)
 800dd44:	4a02      	ldr	r2, [pc, #8]	@ (800dd50 <udp_init+0x14>)
 800dd46:	4303      	orrs	r3, r0
 800dd48:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 800dd4a:	bd08      	pop	{r3, pc}
 800dd4c:	ffffc000 	.word	0xffffc000
 800dd50:	2400002e 	.word	0x2400002e

0800dd54 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800dd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd58:	4680      	mov	r8, r0
 800dd5a:	b085      	sub	sp, #20
 800dd5c:	460f      	mov	r7, r1
  u8_t broadcast;
  u8_t for_us = 0;

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 800dd5e:	f7f6 f9b7 	bl	80040d0 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800dd62:	f1b8 0f00 	cmp.w	r8, #0
 800dd66:	f000 80c4 	beq.w	800def2 <udp_input+0x19e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800dd6a:	2f00      	cmp	r7, #0
 800dd6c:	f000 80ca 	beq.w	800df04 <udp_input+0x1b0>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800dd70:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800dd74:	2b07      	cmp	r3, #7
 800dd76:	f240 808c 	bls.w	800de92 <udp_input+0x13e>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dd7a:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 800df54 <udp_input+0x200>
  udphdr = (struct udp_hdr *)p->payload;
 800dd7e:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800dd82:	f8d9 1000 	ldr.w	r1, [r9]
 800dd86:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800dd8a:	f001 f8ab 	bl	800eee4 <ip4_addr_isbroadcast_u32>
 800dd8e:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800dd90:	8820      	ldrh	r0, [r4, #0]
 800dd92:	f7fa fb65 	bl	8008460 <lwip_htons>
 800dd96:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 800dd98:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 800dd9a:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800dd9c:	f7fa fb60 	bl	8008460 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dda0:	4b64      	ldr	r3, [pc, #400]	@ (800df34 <udp_input+0x1e0>)
  dest = lwip_ntohs(udphdr->dest);
 800dda2:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dda4:	681c      	ldr	r4, [r3, #0]
 800dda6:	2c00      	cmp	r4, #0
 800dda8:	d07c      	beq.n	800dea4 <udp_input+0x150>
  uncon_pcb = NULL;
 800ddaa:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800ddae:	465e      	mov	r6, fp
 800ddb0:	e004      	b.n	800ddbc <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddb2:	68e3      	ldr	r3, [r4, #12]
 800ddb4:	4626      	mov	r6, r4
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d071      	beq.n	800de9e <udp_input+0x14a>
 800ddba:	461c      	mov	r4, r3
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ddbc:	8a63      	ldrh	r3, [r4, #18]
 800ddbe:	42ab      	cmp	r3, r5
 800ddc0:	d1f7      	bne.n	800ddb2 <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ddc2:	2f00      	cmp	r7, #0
 800ddc4:	f000 808e 	beq.w	800dee4 <udp_input+0x190>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ddc8:	7a22      	ldrb	r2, [r4, #8]
 800ddca:	b13a      	cbz	r2, 800dddc <udp_input+0x88>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ddcc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ddd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ddd4:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d1ea      	bne.n	800ddb2 <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dddc:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 800ddde:	f1ba 0f00 	cmp.w	sl, #0
 800dde2:	d038      	beq.n	800de56 <udp_input+0x102>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dde4:	b13b      	cbz	r3, 800ddf6 <udp_input+0xa2>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dde6:	f8d9 2014 	ldr.w	r2, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ddea:	1c50      	adds	r0, r2, #1
 800ddec:	d003      	beq.n	800ddf6 <udp_input+0xa2>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ddee:	405a      	eors	r2, r3
 800ddf0:	68b9      	ldr	r1, [r7, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ddf2:	420a      	tst	r2, r1
 800ddf4:	d1dd      	bne.n	800ddb2 <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ddf6:	7c22      	ldrb	r2, [r4, #16]
 800ddf8:	0752      	lsls	r2, r2, #29
 800ddfa:	d408      	bmi.n	800de0e <udp_input+0xba>
        if (uncon_pcb == NULL) {
 800ddfc:	f1bb 0f00 	cmp.w	fp, #0
 800de00:	f000 8091 	beq.w	800df26 <udp_input+0x1d2>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800de04:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800de08:	3201      	adds	r2, #1
 800de0a:	f000 8082 	beq.w	800df12 <udp_input+0x1be>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800de0e:	8aa3      	ldrh	r3, [r4, #20]
 800de10:	9a03      	ldr	r2, [sp, #12]
 800de12:	4293      	cmp	r3, r2
 800de14:	d1cd      	bne.n	800ddb2 <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800de16:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800de18:	b11b      	cbz	r3, 800de22 <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800de1a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800de1e:	4293      	cmp	r3, r2
 800de20:	d1c7      	bne.n	800ddb2 <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 800de22:	b34e      	cbz	r6, 800de78 <udp_input+0x124>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800de24:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
 800de26:	46a3      	mov	fp, r4
          pcb->next = udp_pcbs;
 800de28:	4a42      	ldr	r2, [pc, #264]	@ (800df34 <udp_input+0x1e0>)
          prev->next = pcb->next;
 800de2a:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 800de2c:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 800de2e:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 800de30:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800de32:	2108      	movs	r1, #8
 800de34:	4640      	mov	r0, r8
 800de36:	f7fb f9a3 	bl	8009180 <pbuf_remove_header>
 800de3a:	bb18      	cbnz	r0, 800de84 <udp_input+0x130>
 800de3c:	465c      	mov	r4, fp
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800de3e:	69a5      	ldr	r5, [r4, #24]
 800de40:	b33d      	cbz	r5, 800de92 <udp_input+0x13e>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800de42:	9b03      	ldr	r3, [sp, #12]
 800de44:	4642      	mov	r2, r8
 800de46:	69e0      	ldr	r0, [r4, #28]
 800de48:	4621      	mov	r1, r4
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	4b3a      	ldr	r3, [pc, #232]	@ (800df38 <udp_input+0x1e4>)
 800de4e:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800de50:	b005      	add	sp, #20
 800de52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800de56:	b11b      	cbz	r3, 800de60 <udp_input+0x10c>
 800de58:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d1a8      	bne.n	800ddb2 <udp_input+0x5e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800de60:	7c23      	ldrb	r3, [r4, #16]
 800de62:	0759      	lsls	r1, r3, #29
 800de64:	d4d3      	bmi.n	800de0e <udp_input+0xba>
      if ((pcb->remote_port == src) &&
 800de66:	8aa3      	ldrh	r3, [r4, #20]
        if (uncon_pcb == NULL) {
 800de68:	f1bb 0f00 	cmp.w	fp, #0
 800de6c:	bf08      	it	eq
 800de6e:	46a3      	moveq	fp, r4
      if ((pcb->remote_port == src) &&
 800de70:	9a03      	ldr	r2, [sp, #12]
 800de72:	4293      	cmp	r3, r2
 800de74:	d19d      	bne.n	800ddb2 <udp_input+0x5e>
 800de76:	e7ce      	b.n	800de16 <udp_input+0xc2>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800de78:	2108      	movs	r1, #8
 800de7a:	4640      	mov	r0, r8
 800de7c:	f7fb f980 	bl	8009180 <pbuf_remove_header>
 800de80:	2800      	cmp	r0, #0
 800de82:	d0dc      	beq.n	800de3e <udp_input+0xea>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800de84:	4b2d      	ldr	r3, [pc, #180]	@ (800df3c <udp_input+0x1e8>)
 800de86:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800de8a:	492d      	ldr	r1, [pc, #180]	@ (800df40 <udp_input+0x1ec>)
 800de8c:	482d      	ldr	r0, [pc, #180]	@ (800df44 <udp_input+0x1f0>)
 800de8e:	f002 f851 	bl	800ff34 <iprintf>
      pbuf_free(p);
 800de92:	4640      	mov	r0, r8
}
 800de94:	b005      	add	sp, #20
 800de96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800de9a:	f7fb b9d3 	b.w	8009244 <pbuf_free>
  if (pcb != NULL) {
 800de9e:	f1bb 0f00 	cmp.w	fp, #0
 800dea2:	d1c6      	bne.n	800de32 <udp_input+0xde>
  if (for_us) {
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d1f1      	bne.n	800de92 <udp_input+0x13e>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800deae:	2108      	movs	r1, #8
 800deb0:	4640      	mov	r0, r8
 800deb2:	f7fb f965 	bl	8009180 <pbuf_remove_header>
 800deb6:	2800      	cmp	r0, #0
 800deb8:	d1e4      	bne.n	800de84 <udp_input+0x130>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800deba:	f1ba 0f00 	cmp.w	sl, #0
 800debe:	d1e8      	bne.n	800de92 <udp_input+0x13e>
 800dec0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800dec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dec8:	2be0      	cmp	r3, #224	@ 0xe0
 800deca:	d0e2      	beq.n	800de92 <udp_input+0x13e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800decc:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 800ded0:	4640      	mov	r0, r8
 800ded2:	3108      	adds	r1, #8
 800ded4:	b209      	sxth	r1, r1
 800ded6:	f7fb f981 	bl	80091dc <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800deda:	2103      	movs	r1, #3
 800dedc:	4640      	mov	r0, r8
 800dede:	f000 fe4d 	bl	800eb7c <icmp_dest_unreach>
 800dee2:	e7d6      	b.n	800de92 <udp_input+0x13e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800dee4:	4b15      	ldr	r3, [pc, #84]	@ (800df3c <udp_input+0x1e8>)
 800dee6:	2288      	movs	r2, #136	@ 0x88
 800dee8:	4917      	ldr	r1, [pc, #92]	@ (800df48 <udp_input+0x1f4>)
 800deea:	4816      	ldr	r0, [pc, #88]	@ (800df44 <udp_input+0x1f0>)
 800deec:	f002 f822 	bl	800ff34 <iprintf>
 800def0:	e76a      	b.n	800ddc8 <udp_input+0x74>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800def2:	4b12      	ldr	r3, [pc, #72]	@ (800df3c <udp_input+0x1e8>)
 800def4:	22cf      	movs	r2, #207	@ 0xcf
 800def6:	4915      	ldr	r1, [pc, #84]	@ (800df4c <udp_input+0x1f8>)
 800def8:	4812      	ldr	r0, [pc, #72]	@ (800df44 <udp_input+0x1f0>)
 800defa:	f002 f81b 	bl	800ff34 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800defe:	2f00      	cmp	r7, #0
 800df00:	f47f af36 	bne.w	800dd70 <udp_input+0x1c>
 800df04:	4b0d      	ldr	r3, [pc, #52]	@ (800df3c <udp_input+0x1e8>)
 800df06:	22d0      	movs	r2, #208	@ 0xd0
 800df08:	4911      	ldr	r1, [pc, #68]	@ (800df50 <udp_input+0x1fc>)
 800df0a:	480e      	ldr	r0, [pc, #56]	@ (800df44 <udp_input+0x1f0>)
 800df0c:	f002 f812 	bl	800ff34 <iprintf>
 800df10:	e72e      	b.n	800dd70 <udp_input+0x1c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	f8db 1000 	ldr.w	r1, [fp]
 800df18:	4291      	cmp	r1, r2
 800df1a:	f43f af78 	beq.w	800de0e <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800df1e:	429a      	cmp	r2, r3
 800df20:	bf08      	it	eq
 800df22:	46a3      	moveq	fp, r4
 800df24:	e773      	b.n	800de0e <udp_input+0xba>
      if ((pcb->remote_port == src) &&
 800df26:	8aa3      	ldrh	r3, [r4, #20]
        if (uncon_pcb == NULL) {
 800df28:	46a3      	mov	fp, r4
      if ((pcb->remote_port == src) &&
 800df2a:	9a03      	ldr	r2, [sp, #12]
 800df2c:	4293      	cmp	r3, r2
 800df2e:	f47f af40 	bne.w	800ddb2 <udp_input+0x5e>
 800df32:	e770      	b.n	800de16 <udp_input+0xc2>
 800df34:	240207b0 	.word	0x240207b0
 800df38:	24019ca8 	.word	0x24019ca8
 800df3c:	08013c9c 	.word	0x08013c9c
 800df40:	08013d28 	.word	0x08013d28
 800df44:	080110dc 	.word	0x080110dc
 800df48:	08013d00 	.word	0x08013d00
 800df4c:	08013ccc 	.word	0x08013ccc
 800df50:	08013ce4 	.word	0x08013ce4
 800df54:	24019c98 	.word	0x24019c98

0800df58 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800df58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5a:	460f      	mov	r7, r1
 800df5c:	4605      	mov	r5, r0
 800df5e:	4616      	mov	r6, r2
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 800df60:	f7f6 f8b6 	bl	80040d0 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800df64:	2f00      	cmp	r7, #0
 800df66:	d043      	beq.n	800dff0 <udp_bind+0x98>
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800df68:	2d00      	cmp	r5, #0
 800df6a:	d05c      	beq.n	800e026 <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800df6c:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 800e050 <udp_bind+0xf8>
 800df70:	f8dc 0000 	ldr.w	r0, [ip]
 800df74:	b1e8      	cbz	r0, 800dfb2 <udp_bind+0x5a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800df76:	4285      	cmp	r5, r0
 800df78:	d03c      	beq.n	800dff4 <udp_bind+0x9c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800df7a:	4604      	mov	r4, r0
 800df7c:	e001      	b.n	800df82 <udp_bind+0x2a>
    if (pcb == ipcb) {
 800df7e:	42a5      	cmp	r5, r4
 800df80:	d038      	beq.n	800dff4 <udp_bind+0x9c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800df82:	68e4      	ldr	r4, [r4, #12]
 800df84:	2c00      	cmp	r4, #0
 800df86:	d1fa      	bne.n	800df7e <udp_bind+0x26>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800df88:	b1ae      	cbz	r6, 800dfb6 <udp_bind+0x5e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800df8a:	6839      	ldr	r1, [r7, #0]
 800df8c:	4603      	mov	r3, r0
 800df8e:	e001      	b.n	800df94 <udp_bind+0x3c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800df90:	68db      	ldr	r3, [r3, #12]
 800df92:	b303      	cbz	r3, 800dfd6 <udp_bind+0x7e>
      if (pcb != ipcb) {
 800df94:	429d      	cmp	r5, r3
 800df96:	d0fb      	beq.n	800df90 <udp_bind+0x38>
          if ((ipcb->local_port == port) &&
 800df98:	8a5a      	ldrh	r2, [r3, #18]
 800df9a:	42b2      	cmp	r2, r6
 800df9c:	d1f8      	bne.n	800df90 <udp_bind+0x38>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800df9e:	681a      	ldr	r2, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 800dfa0:	2a00      	cmp	r2, #0
 800dfa2:	bf18      	it	ne
 800dfa4:	428a      	cmpne	r2, r1
 800dfa6:	d001      	beq.n	800dfac <udp_bind+0x54>
 800dfa8:	2900      	cmp	r1, #0
 800dfaa:	d1f1      	bne.n	800df90 <udp_bind+0x38>
      return ERR_USE;
 800dfac:	f06f 0007 	mvn.w	r0, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800dfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 800dfb2:	b9ae      	cbnz	r6, 800dfe0 <udp_bind+0x88>
  rebind = 0;
 800dfb4:	4604      	mov	r4, r0
 800dfb6:	f8df e09c 	ldr.w	lr, [pc, #156]	@ 800e054 <udp_bind+0xfc>
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800dfba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dfbe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800dfc2:	f8be 6000 	ldrh.w	r6, [lr]
 800dfc6:	429e      	cmp	r6, r3
 800dfc8:	d028      	beq.n	800e01c <udp_bind+0xc4>
 800dfca:	3601      	adds	r6, #1
 800dfcc:	b2b6      	uxth	r6, r6
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfce:	b9e0      	cbnz	r0, 800e00a <udp_bind+0xb2>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	f8ae 6000 	strh.w	r6, [lr]
 800dfd6:	6029      	str	r1, [r5, #0]
  pcb->local_port = port;
 800dfd8:	826e      	strh	r6, [r5, #18]
  if (rebind == 0) {
 800dfda:	b124      	cbz	r4, 800dfe6 <udp_bind+0x8e>
  return ERR_OK;
 800dfdc:	2000      	movs	r0, #0
}
 800dfde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800dfe0:	683b      	ldr	r3, [r7, #0]
  pcb->local_port = port;
 800dfe2:	826e      	strh	r6, [r5, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800dfe4:	602b      	str	r3, [r5, #0]
    pcb->next = udp_pcbs;
 800dfe6:	60e8      	str	r0, [r5, #12]
  return ERR_OK;
 800dfe8:	2000      	movs	r0, #0
    udp_pcbs = pcb;
 800dfea:	f8cc 5000 	str.w	r5, [ip]
 800dfee:	e7f6      	b.n	800dfde <udp_bind+0x86>
    ipaddr = IP4_ADDR_ANY;
 800dff0:	4f13      	ldr	r7, [pc, #76]	@ (800e040 <udp_bind+0xe8>)
 800dff2:	e7b9      	b.n	800df68 <udp_bind+0x10>
      rebind = 1;
 800dff4:	2401      	movs	r4, #1
 800dff6:	e7c7      	b.n	800df88 <udp_bind+0x30>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800dff8:	3901      	subs	r1, #1
 800dffa:	b289      	uxth	r1, r1
 800dffc:	b1e9      	cbz	r1, 800e03a <udp_bind+0xe2>
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800dffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e002:	429e      	cmp	r6, r3
 800e004:	d1e1      	bne.n	800dfca <udp_bind+0x72>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e006:	f44f 4640 	mov.w	r6, #49152	@ 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e00a:	4603      	mov	r3, r0
 800e00c:	e002      	b.n	800e014 <udp_bind+0xbc>
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d0dd      	beq.n	800dfd0 <udp_bind+0x78>
    if (pcb->local_port == udp_port) {
 800e014:	8a5a      	ldrh	r2, [r3, #18]
 800e016:	42b2      	cmp	r2, r6
 800e018:	d1f9      	bne.n	800e00e <udp_bind+0xb6>
 800e01a:	e7ed      	b.n	800dff8 <udp_bind+0xa0>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e01c:	f44f 4640 	mov.w	r6, #49152	@ 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e020:	2800      	cmp	r0, #0
 800e022:	d1f2      	bne.n	800e00a <udp_bind+0xb2>
 800e024:	e7d4      	b.n	800dfd0 <udp_bind+0x78>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e026:	4b07      	ldr	r3, [pc, #28]	@ (800e044 <udp_bind+0xec>)
 800e028:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800e02c:	4906      	ldr	r1, [pc, #24]	@ (800e048 <udp_bind+0xf0>)
 800e02e:	4807      	ldr	r0, [pc, #28]	@ (800e04c <udp_bind+0xf4>)
 800e030:	f001 ff80 	bl	800ff34 <iprintf>
 800e034:	f06f 000f 	mvn.w	r0, #15
}
 800e038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e03a:	f8ae 6000 	strh.w	r6, [lr]
    if (port == 0) {
 800e03e:	e7b5      	b.n	800dfac <udp_bind+0x54>
 800e040:	0801406c 	.word	0x0801406c
 800e044:	08013c9c 	.word	0x08013c9c
 800e048:	08013d44 	.word	0x08013d44
 800e04c:	080110dc 	.word	0x080110dc
 800e050:	240207b0 	.word	0x240207b0
 800e054:	2400002e 	.word	0x2400002e

0800e058 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e058:	b570      	push	{r4, r5, r6, lr}
 800e05a:	4604      	mov	r4, r0
 800e05c:	460e      	mov	r6, r1
 800e05e:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800e060:	f7f6 f836 	bl	80040d0 <sys_check_core_locking>

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e064:	b114      	cbz	r4, 800e06c <udp_recv+0x14>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800e066:	e9c4 6506 	strd	r6, r5, [r4, #24]
}
 800e06a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e06c:	4b04      	ldr	r3, [pc, #16]	@ (800e080 <udp_recv+0x28>)
 800e06e:	f240 428a 	movw	r2, #1162	@ 0x48a
 800e072:	4904      	ldr	r1, [pc, #16]	@ (800e084 <udp_recv+0x2c>)
 800e074:	4804      	ldr	r0, [pc, #16]	@ (800e088 <udp_recv+0x30>)
}
 800e076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e07a:	f001 bf5b 	b.w	800ff34 <iprintf>
 800e07e:	bf00      	nop
 800e080:	08013c9c 	.word	0x08013c9c
 800e084:	08013d5c 	.word	0x08013d5c
 800e088:	080110dc 	.word	0x080110dc

0800e08c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e08c:	b510      	push	{r4, lr}
 800e08e:	4604      	mov	r4, r0
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();
 800e090:	f7f6 f81e 	bl	80040d0 <sys_check_core_locking>

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e094:	b1cc      	cbz	r4, 800e0ca <udp_remove+0x3e>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e096:	4a11      	ldr	r2, [pc, #68]	@ (800e0dc <udp_remove+0x50>)
 800e098:	6813      	ldr	r3, [r2, #0]
 800e09a:	42a3      	cmp	r3, r4
 800e09c:	d00d      	beq.n	800e0ba <udp_remove+0x2e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e09e:	b133      	cbz	r3, 800e0ae <udp_remove+0x22>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	b11b      	cbz	r3, 800e0ae <udp_remove+0x22>
 800e0a6:	42a3      	cmp	r3, r4
 800e0a8:	d1fa      	bne.n	800e0a0 <udp_remove+0x14>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800e0aa:	68e3      	ldr	r3, [r4, #12]
 800e0ac:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e0ae:	4621      	mov	r1, r4
 800e0b0:	2000      	movs	r0, #0
}
 800e0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_UDP_PCB, pcb);
 800e0b6:	f7fa bdb9 	b.w	8008c2c <memp_free>
    udp_pcbs = udp_pcbs->next;
 800e0ba:	68e3      	ldr	r3, [r4, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 800e0bc:	4621      	mov	r1, r4
 800e0be:	2000      	movs	r0, #0
    udp_pcbs = udp_pcbs->next;
 800e0c0:	6013      	str	r3, [r2, #0]
}
 800e0c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_UDP_PCB, pcb);
 800e0c6:	f7fa bdb1 	b.w	8008c2c <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e0ca:	4b05      	ldr	r3, [pc, #20]	@ (800e0e0 <udp_remove+0x54>)
 800e0cc:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800e0d0:	4904      	ldr	r1, [pc, #16]	@ (800e0e4 <udp_remove+0x58>)
 800e0d2:	4805      	ldr	r0, [pc, #20]	@ (800e0e8 <udp_remove+0x5c>)
}
 800e0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e0d8:	f001 bf2c 	b.w	800ff34 <iprintf>
 800e0dc:	240207b0 	.word	0x240207b0
 800e0e0:	08013c9c 	.word	0x08013c9c
 800e0e4:	08013d74 	.word	0x08013d74
 800e0e8:	080110dc 	.word	0x080110dc

0800e0ec <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800e0ec:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 800e0ee:	f7f5 ffef 	bl	80040d0 <sys_check_core_locking>
  LWIP_ASSERT_CORE_LOCKED();
 800e0f2:	f7f5 ffed 	bl	80040d0 <sys_check_core_locking>
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e0f6:	2000      	movs	r0, #0
 800e0f8:	f7fa fd52 	bl	8008ba0 <memp_malloc>
  if (pcb != NULL) {
 800e0fc:	4604      	mov	r4, r0
 800e0fe:	b128      	cbz	r0, 800e10c <udp_new_ip_type+0x20>
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e100:	2220      	movs	r2, #32
 800e102:	2100      	movs	r1, #0
 800e104:	f001 ffc9 	bl	801009a <memset>
    pcb->ttl = UDP_TTL;
 800e108:	23ff      	movs	r3, #255	@ 0xff
 800e10a:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800e10c:	4620      	mov	r0, r4
 800e10e:	bd10      	pop	{r4, pc}

0800e110 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e110:	b110      	cbz	r0, 800e118 <udp_netif_ip_addr_changed+0x8>
 800e112:	6802      	ldr	r2, [r0, #0]
 800e114:	b101      	cbz	r1, 800e118 <udp_netif_ip_addr_changed+0x8>
 800e116:	b902      	cbnz	r2, 800e11a <udp_netif_ip_addr_changed+0xa>
 800e118:	4770      	bx	lr
 800e11a:	680b      	ldr	r3, [r1, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d0fb      	beq.n	800e118 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e120:	4b08      	ldr	r3, [pc, #32]	@ (800e144 <udp_netif_ip_addr_changed+0x34>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d0f7      	beq.n	800e118 <udp_netif_ip_addr_changed+0x8>
{
 800e128:	b410      	push	{r4}
 800e12a:	e000      	b.n	800e12e <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e12c:	6802      	ldr	r2, [r0, #0]
 800e12e:	681c      	ldr	r4, [r3, #0]
 800e130:	4294      	cmp	r4, r2
 800e132:	d101      	bne.n	800e138 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e134:	680a      	ldr	r2, [r1, #0]
 800e136:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d1f6      	bne.n	800e12c <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 800e13e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e142:	4770      	bx	lr
 800e144:	240207b0 	.word	0x240207b0

0800e148 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e14c:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e14e:	f04f 0e0a 	mov.w	lr, #10
{
 800e152:	b085      	sub	sp, #20
 800e154:	4e50      	ldr	r6, [pc, #320]	@ (800e298 <etharp_find_entry+0x150>)
 800e156:	4605      	mov	r5, r0
 800e158:	4608      	mov	r0, r1
 800e15a:	4617      	mov	r7, r2
 800e15c:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e15e:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 800e160:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e162:	46f0      	mov	r8, lr
 800e164:	46f3      	mov	fp, lr
 800e166:	9001      	str	r0, [sp, #4]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e168:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e16c:	e004      	b.n	800e178 <etharp_find_entry+0x30>
 800e16e:	4664      	mov	r4, ip
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e170:	3301      	adds	r3, #1
 800e172:	3118      	adds	r1, #24
 800e174:	2b0a      	cmp	r3, #10
 800e176:	d019      	beq.n	800e1ac <etharp_find_entry+0x64>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e178:	2c0a      	cmp	r4, #10
 800e17a:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 800e17e:	f891 a014 	ldrb.w	sl, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e182:	d139      	bne.n	800e1f8 <etharp_find_entry+0xb0>
 800e184:	f1ba 0f00 	cmp.w	sl, #0
 800e188:	d0f1      	beq.n	800e16e <etharp_find_entry+0x26>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e18a:	b11d      	cbz	r5, 800e194 <etharp_find_entry+0x4c>
 800e18c:	6828      	ldr	r0, [r5, #0]
 800e18e:	684a      	ldr	r2, [r1, #4]
 800e190:	4290      	cmp	r0, r2
 800e192:	d03d      	beq.n	800e210 <etharp_find_entry+0xc8>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e194:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 800e198:	8a48      	ldrh	r0, [r1, #18]
      if (state == ETHARP_STATE_PENDING) {
 800e19a:	d031      	beq.n	800e200 <etharp_find_entry+0xb8>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e19c:	4548      	cmp	r0, r9
 800e19e:	d3e7      	bcc.n	800e170 <etharp_find_entry+0x28>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e1a0:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 800e1a2:	4681      	mov	r9, r0
 800e1a4:	46e0      	mov	r8, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e1a6:	3118      	adds	r1, #24
 800e1a8:	2b0a      	cmp	r3, #10
 800e1aa:	d1e5      	bne.n	800e178 <etharp_find_entry+0x30>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e1ac:	9801      	ldr	r0, [sp, #4]
 800e1ae:	2801      	cmp	r0, #1
 800e1b0:	d16e      	bne.n	800e290 <etharp_find_entry+0x148>
 800e1b2:	2c0a      	cmp	r4, #10
 800e1b4:	d032      	beq.n	800e21c <etharp_find_entry+0xd4>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e1b6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e1ba:	46a1      	mov	r9, r4
 800e1bc:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800e1c0:	7d1b      	ldrb	r3, [r3, #20]
 800e1c2:	b133      	cbz	r3, 800e1d2 <etharp_find_entry+0x8a>
 800e1c4:	4b35      	ldr	r3, [pc, #212]	@ (800e29c <etharp_find_entry+0x154>)
 800e1c6:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800e1ca:	4935      	ldr	r1, [pc, #212]	@ (800e2a0 <etharp_find_entry+0x158>)
 800e1cc:	4835      	ldr	r0, [pc, #212]	@ (800e2a4 <etharp_find_entry+0x15c>)
 800e1ce:	f001 feb1 	bl	800ff34 <iprintf>
    etharp_free_entry(i);
 800e1d2:	46a0      	mov	r8, r4
 800e1d4:	0064      	lsls	r4, r4, #1
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e1d6:	b12d      	cbz	r5, 800e1e4 <etharp_find_entry+0x9c>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e1d8:	eb04 0309 	add.w	r3, r4, r9
 800e1dc:	682a      	ldr	r2, [r5, #0]
 800e1de:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800e1e2:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800e1e4:	444c      	add	r4, r9
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800e1ec:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e1ee:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800e1f0:	4640      	mov	r0, r8
 800e1f2:	b005      	add	sp, #20
 800e1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 800e1f8:	f1ba 0f00 	cmp.w	sl, #0
 800e1fc:	d0b8      	beq.n	800e170 <etharp_find_entry+0x28>
 800e1fe:	e7c4      	b.n	800e18a <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 800e200:	680a      	ldr	r2, [r1, #0]
 800e202:	b392      	cbz	r2, 800e26a <etharp_find_entry+0x122>
          if (arp_table[i].ctime >= age_queue) {
 800e204:	9a02      	ldr	r2, [sp, #8]
 800e206:	4290      	cmp	r0, r2
 800e208:	d3b2      	bcc.n	800e170 <etharp_find_entry+0x28>
 800e20a:	46e6      	mov	lr, ip
 800e20c:	9002      	str	r0, [sp, #8]
 800e20e:	e7af      	b.n	800e170 <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e210:	b117      	cbz	r7, 800e218 <etharp_find_entry+0xd0>
 800e212:	6888      	ldr	r0, [r1, #8]
 800e214:	42b8      	cmp	r0, r7
 800e216:	d1bd      	bne.n	800e194 <etharp_find_entry+0x4c>
 800e218:	46e0      	mov	r8, ip
 800e21a:	e7e9      	b.n	800e1f0 <etharp_find_entry+0xa8>
    if (old_stable < ARP_TABLE_SIZE) {
 800e21c:	f1b8 0f0a 	cmp.w	r8, #10
 800e220:	d02a      	beq.n	800e278 <etharp_find_entry+0x130>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e222:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800e226:	46c1      	mov	r9, r8
 800e228:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800e22c:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 800e230:	b1a3      	cbz	r3, 800e25c <etharp_find_entry+0x114>
 800e232:	4b1a      	ldr	r3, [pc, #104]	@ (800e29c <etharp_find_entry+0x154>)
 800e234:	f240 126d 	movw	r2, #365	@ 0x16d
 800e238:	491b      	ldr	r1, [pc, #108]	@ (800e2a8 <etharp_find_entry+0x160>)
 800e23a:	481a      	ldr	r0, [pc, #104]	@ (800e2a4 <etharp_find_entry+0x15c>)
 800e23c:	f001 fe7a 	bl	800ff34 <iprintf>
  if (arp_table[i].q != NULL) {
 800e240:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800e244:	ea4f 0449 	mov.w	r4, r9, lsl #1
 800e248:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800e24c:	f856 000a 	ldr.w	r0, [r6, sl]
 800e250:	b120      	cbz	r0, 800e25c <etharp_find_entry+0x114>
    free_etharp_q(arp_table[i].q);
 800e252:	f7fa fff7 	bl	8009244 <pbuf_free>
    arp_table[i].q = NULL;
 800e256:	2300      	movs	r3, #0
 800e258:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e25c:	eb04 0309 	add.w	r3, r4, r9
 800e260:	2200      	movs	r2, #0
 800e262:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800e266:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e268:	e7b5      	b.n	800e1d6 <etharp_find_entry+0x8e>
          if (arp_table[i].ctime >= age_pending) {
 800e26a:	9a03      	ldr	r2, [sp, #12]
 800e26c:	4290      	cmp	r0, r2
 800e26e:	f4ff af7f 	bcc.w	800e170 <etharp_find_entry+0x28>
 800e272:	46e3      	mov	fp, ip
 800e274:	9003      	str	r0, [sp, #12]
 800e276:	e77b      	b.n	800e170 <etharp_find_entry+0x28>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e278:	f1bb 0f0a 	cmp.w	fp, #10
 800e27c:	d105      	bne.n	800e28a <etharp_find_entry+0x142>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e27e:	f1be 0f0a 	cmp.w	lr, #10
 800e282:	d005      	beq.n	800e290 <etharp_find_entry+0x148>
    etharp_free_entry(i);
 800e284:	46f0      	mov	r8, lr
 800e286:	46f1      	mov	r9, lr
 800e288:	e7da      	b.n	800e240 <etharp_find_entry+0xf8>
 800e28a:	46d8      	mov	r8, fp
 800e28c:	46d9      	mov	r9, fp
 800e28e:	e7d7      	b.n	800e240 <etharp_find_entry+0xf8>
    return (s16_t)ERR_MEM;
 800e290:	f04f 38ff 	mov.w	r8, #4294967295
 800e294:	e7ac      	b.n	800e1f0 <etharp_find_entry+0xa8>
 800e296:	bf00      	nop
 800e298:	240207b8 	.word	0x240207b8
 800e29c:	08013d8c 	.word	0x08013d8c
 800e2a0:	08013ddc 	.word	0x08013ddc
 800e2a4:	080110dc 	.word	0x080110dc
 800e2a8:	08013dc4 	.word	0x08013dc4

0800e2ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2b0:	b082      	sub	sp, #8
 800e2b2:	4688      	mov	r8, r1
 800e2b4:	4691      	mov	r9, r2
 800e2b6:	461f      	mov	r7, r3
 800e2b8:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e2bc:	4606      	mov	r6, r0
{
 800e2be:	f8bd 4034 	ldrh.w	r4, [sp, #52]	@ 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d04a      	beq.n	800e35c <etharp_raw+0xb0>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e2c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e2ca:	211c      	movs	r1, #28
 800e2cc:	200e      	movs	r0, #14
 800e2ce:	f7fb f829 	bl	8009324 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	d049      	beq.n	800e36c <etharp_raw+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e2d8:	8943      	ldrh	r3, [r0, #10]
 800e2da:	2b1b      	cmp	r3, #27
 800e2dc:	d936      	bls.n	800e34c <etharp_raw+0xa0>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e2de:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 800e2e0:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 800e2e2:	f7fa f8bd 	bl	8008460 <lwip_htons>
 800e2e6:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e2e8:	f896 302c 	ldrb.w	r3, [r6, #44]	@ 0x2c
 800e2ec:	2b06      	cmp	r3, #6
 800e2ee:	d006      	beq.n	800e2fe <etharp_raw+0x52>
 800e2f0:	4b20      	ldr	r3, [pc, #128]	@ (800e374 <etharp_raw+0xc8>)
 800e2f2:	f240 4269 	movw	r2, #1129	@ 0x469
 800e2f6:	4920      	ldr	r1, [pc, #128]	@ (800e378 <etharp_raw+0xcc>)
 800e2f8:	4820      	ldr	r0, [pc, #128]	@ (800e37c <etharp_raw+0xd0>)
 800e2fa:	f001 fe1b 	bl	800ff34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e2fe:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e300:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e302:	4e1f      	ldr	r6, [pc, #124]	@ (800e380 <etharp_raw+0xd4>)
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e304:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e306:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e308:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e30a:	88b9      	ldrh	r1, [r7, #4]
 800e30c:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e30e:	f8da 1000 	ldr.w	r1, [sl]
 800e312:	f8c4 1012 	str.w	r1, [r4, #18]
 800e316:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800e31a:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e31c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e31e:	6809      	ldr	r1, [r1, #0]
 800e320:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e324:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e326:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e328:	6026      	str	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e32a:	61a1      	str	r1, [r4, #24]
  hdr->hwlen = ETH_HWADDR_LEN;
 800e32c:	f240 4106 	movw	r1, #1030	@ 0x406
 800e330:	80a1      	strh	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e332:	f640 0106 	movw	r1, #2054	@ 0x806
 800e336:	9100      	str	r1, [sp, #0]
 800e338:	4629      	mov	r1, r5
 800e33a:	f001 fa95 	bl	800f868 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e33e:	4628      	mov	r0, r5
 800e340:	f7fa ff80 	bl	8009244 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800e344:	2000      	movs	r0, #0
}
 800e346:	b002      	add	sp, #8
 800e348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e34c:	4b09      	ldr	r3, [pc, #36]	@ (800e374 <etharp_raw+0xc8>)
 800e34e:	f240 4262 	movw	r2, #1122	@ 0x462
 800e352:	490c      	ldr	r1, [pc, #48]	@ (800e384 <etharp_raw+0xd8>)
 800e354:	4809      	ldr	r0, [pc, #36]	@ (800e37c <etharp_raw+0xd0>)
 800e356:	f001 fded 	bl	800ff34 <iprintf>
 800e35a:	e7c0      	b.n	800e2de <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e35c:	4b05      	ldr	r3, [pc, #20]	@ (800e374 <etharp_raw+0xc8>)
 800e35e:	f240 4257 	movw	r2, #1111	@ 0x457
 800e362:	4909      	ldr	r1, [pc, #36]	@ (800e388 <etharp_raw+0xdc>)
 800e364:	4805      	ldr	r0, [pc, #20]	@ (800e37c <etharp_raw+0xd0>)
 800e366:	f001 fde5 	bl	800ff34 <iprintf>
 800e36a:	e7ac      	b.n	800e2c6 <etharp_raw+0x1a>
    return ERR_MEM;
 800e36c:	f04f 30ff 	mov.w	r0, #4294967295
 800e370:	e7e9      	b.n	800e346 <etharp_raw+0x9a>
 800e372:	bf00      	nop
 800e374:	08013d8c 	.word	0x08013d8c
 800e378:	08013e3c 	.word	0x08013e3c
 800e37c:	080110dc 	.word	0x080110dc
 800e380:	00080100 	.word	0x00080100
 800e384:	08013e08 	.word	0x08013e08
 800e388:	08011a38 	.word	0x08011a38

0800e38c <etharp_output_to_arp_index>:
{
 800e38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e390:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e468 <etharp_output_to_arp_index+0xdc>
 800e394:	eb02 0642 	add.w	r6, r2, r2, lsl #1
{
 800e398:	b084      	sub	sp, #16
 800e39a:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e39c:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
{
 800e3a0:	4605      	mov	r5, r0
 800e3a2:	460f      	mov	r7, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e3a4:	ea4f 0942 	mov.w	r9, r2, lsl #1
 800e3a8:	7d33      	ldrb	r3, [r6, #20]
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	d936      	bls.n	800e41c <etharp_output_to_arp_index+0x90>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e3ae:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800e3b2:	2b02      	cmp	r3, #2
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e3b4:	f105 0a26 	add.w	sl, r5, #38	@ 0x26
 800e3b8:	ea4f 00c0 	mov.w	r0, r0, lsl #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e3bc:	f100 060c 	add.w	r6, r0, #12
 800e3c0:	4446      	add	r6, r8
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e3c2:	d00b      	beq.n	800e3dc <etharp_output_to_arp_index+0x50>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e3c4:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800e3c8:	4633      	mov	r3, r6
 800e3ca:	4652      	mov	r2, sl
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	9400      	str	r4, [sp, #0]
 800e3d2:	f001 fa49 	bl	800f868 <ethernet_output>
}
 800e3d6:	b004      	add	sp, #16
 800e3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e3dc:	44a1      	add	r9, r4
 800e3de:	eb08 09c9 	add.w	r9, r8, r9, lsl #3
 800e3e2:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 800e3e6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800e3ea:	d820      	bhi.n	800e42e <etharp_output_to_arp_index+0xa2>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e3ec:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800e3f0:	d3e8      	bcc.n	800e3c4 <etharp_output_to_arp_index+0x38>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e3f2:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e3f4:	3004      	adds	r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e3f6:	4632      	mov	r2, r6
 800e3f8:	4651      	mov	r1, sl
 800e3fa:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e3fc:	4440      	add	r0, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e3fe:	4b15      	ldr	r3, [pc, #84]	@ (800e454 <etharp_output_to_arp_index+0xc8>)
 800e400:	9002      	str	r0, [sp, #8]
 800e402:	4628      	mov	r0, r5
 800e404:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e406:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e408:	9300      	str	r3, [sp, #0]
 800e40a:	4653      	mov	r3, sl
 800e40c:	f7ff ff4e 	bl	800e2ac <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e410:	2800      	cmp	r0, #0
 800e412:	d1d7      	bne.n	800e3c4 <etharp_output_to_arp_index+0x38>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e414:	2303      	movs	r3, #3
 800e416:	f889 3014 	strb.w	r3, [r9, #20]
 800e41a:	e7d3      	b.n	800e3c4 <etharp_output_to_arp_index+0x38>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e41c:	4b0e      	ldr	r3, [pc, #56]	@ (800e458 <etharp_output_to_arp_index+0xcc>)
 800e41e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e422:	490e      	ldr	r1, [pc, #56]	@ (800e45c <etharp_output_to_arp_index+0xd0>)
 800e424:	480e      	ldr	r0, [pc, #56]	@ (800e460 <etharp_output_to_arp_index+0xd4>)
 800e426:	f001 fd85 	bl	800ff34 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e42a:	7d33      	ldrb	r3, [r6, #20]
 800e42c:	e7bf      	b.n	800e3ae <etharp_output_to_arp_index+0x22>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e42e:	2301      	movs	r3, #1
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e430:	3004      	adds	r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e432:	4a0c      	ldr	r2, [pc, #48]	@ (800e464 <etharp_output_to_arp_index+0xd8>)
 800e434:	4651      	mov	r1, sl
 800e436:	9303      	str	r3, [sp, #12]
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e438:	4440      	add	r0, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e43a:	4b06      	ldr	r3, [pc, #24]	@ (800e454 <etharp_output_to_arp_index+0xc8>)
 800e43c:	9002      	str	r0, [sp, #8]
 800e43e:	4628      	mov	r0, r5
 800e440:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e442:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e444:	9300      	str	r3, [sp, #0]
 800e446:	4653      	mov	r3, sl
 800e448:	f7ff ff30 	bl	800e2ac <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e44c:	2800      	cmp	r0, #0
 800e44e:	d1b9      	bne.n	800e3c4 <etharp_output_to_arp_index+0x38>
 800e450:	e7e0      	b.n	800e414 <etharp_output_to_arp_index+0x88>
 800e452:	bf00      	nop
 800e454:	08014260 	.word	0x08014260
 800e458:	08013d8c 	.word	0x08013d8c
 800e45c:	08013e80 	.word	0x08013e80
 800e460:	080110dc 	.word	0x080110dc
 800e464:	08014268 	.word	0x08014268
 800e468:	240207b8 	.word	0x240207b8

0800e46c <etharp_tmr>:
{
 800e46c:	b570      	push	{r4, r5, r6, lr}
 800e46e:	4c1d      	ldr	r4, [pc, #116]	@ (800e4e4 <etharp_tmr+0x78>)
 800e470:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e472:	2600      	movs	r6, #0
 800e474:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
 800e478:	e00a      	b.n	800e490 <etharp_tmr+0x24>
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e47a:	2a01      	cmp	r2, #1
 800e47c:	d01f      	beq.n	800e4be <etharp_tmr+0x52>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e47e:	2a03      	cmp	r2, #3
 800e480:	d02d      	beq.n	800e4de <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e482:	2a04      	cmp	r2, #4
 800e484:	d101      	bne.n	800e48a <etharp_tmr+0x1e>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e486:	2302      	movs	r3, #2
 800e488:	7423      	strb	r3, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e48a:	3418      	adds	r4, #24
 800e48c:	42ac      	cmp	r4, r5
 800e48e:	d014      	beq.n	800e4ba <etharp_tmr+0x4e>
    u8_t state = arp_table[i].state;
 800e490:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800e492:	2a00      	cmp	r2, #0
 800e494:	d0f9      	beq.n	800e48a <etharp_tmr+0x1e>
      arp_table[i].ctime++;
 800e496:	89e3      	ldrh	r3, [r4, #14]
 800e498:	3301      	adds	r3, #1
 800e49a:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e49c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
      arp_table[i].ctime++;
 800e4a0:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e4a2:	d3ea      	bcc.n	800e47a <etharp_tmr+0xe>
  if (arp_table[i].q != NULL) {
 800e4a4:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800e4a8:	b118      	cbz	r0, 800e4b2 <etharp_tmr+0x46>
    free_etharp_q(arp_table[i].q);
 800e4aa:	f7fa fecb 	bl	8009244 <pbuf_free>
    arp_table[i].q = NULL;
 800e4ae:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e4b2:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e4b4:	3418      	adds	r4, #24
 800e4b6:	42ac      	cmp	r4, r5
 800e4b8:	d1ea      	bne.n	800e490 <etharp_tmr+0x24>
}
 800e4ba:	b004      	add	sp, #16
 800e4bc:	bd70      	pop	{r4, r5, r6, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e4be:	2b04      	cmp	r3, #4
 800e4c0:	d8f0      	bhi.n	800e4a4 <etharp_tmr+0x38>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e4c2:	9203      	str	r2, [sp, #12]
 800e4c4:	4a08      	ldr	r2, [pc, #32]	@ (800e4e8 <etharp_tmr+0x7c>)
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e4c6:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e4c8:	9201      	str	r2, [sp, #4]
 800e4ca:	f100 0326 	add.w	r3, r0, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e4ce:	1d02      	adds	r2, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e4d0:	9402      	str	r4, [sp, #8]
 800e4d2:	9200      	str	r2, [sp, #0]
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	4a05      	ldr	r2, [pc, #20]	@ (800e4ec <etharp_tmr+0x80>)
 800e4d8:	f7ff fee8 	bl	800e2ac <etharp_raw>
 800e4dc:	e7d5      	b.n	800e48a <etharp_tmr+0x1e>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e4de:	2304      	movs	r3, #4
 800e4e0:	7423      	strb	r3, [r4, #16]
 800e4e2:	e7d2      	b.n	800e48a <etharp_tmr+0x1e>
 800e4e4:	240207bc 	.word	0x240207bc
 800e4e8:	08014260 	.word	0x08014260
 800e4ec:	08014268 	.word	0x08014268

0800e4f0 <etharp_cleanup_netif>:
{
 800e4f0:	b570      	push	{r4, r5, r6, lr}
 800e4f2:	4c0b      	ldr	r4, [pc, #44]	@ (800e520 <etharp_cleanup_netif+0x30>)
 800e4f4:	4606      	mov	r6, r0
 800e4f6:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e4fa:	7d23      	ldrb	r3, [r4, #20]
 800e4fc:	b113      	cbz	r3, 800e504 <etharp_cleanup_netif+0x14>
 800e4fe:	68a3      	ldr	r3, [r4, #8]
 800e500:	42b3      	cmp	r3, r6
 800e502:	d003      	beq.n	800e50c <etharp_cleanup_netif+0x1c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e504:	3418      	adds	r4, #24
 800e506:	42ac      	cmp	r4, r5
 800e508:	d1f7      	bne.n	800e4fa <etharp_cleanup_netif+0xa>
}
 800e50a:	bd70      	pop	{r4, r5, r6, pc}
  if (arp_table[i].q != NULL) {
 800e50c:	6820      	ldr	r0, [r4, #0]
 800e50e:	b118      	cbz	r0, 800e518 <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 800e510:	f7fa fe98 	bl	8009244 <pbuf_free>
    arp_table[i].q = NULL;
 800e514:	2300      	movs	r3, #0
 800e516:	6023      	str	r3, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e518:	2300      	movs	r3, #0
 800e51a:	7523      	strb	r3, [r4, #20]
}
 800e51c:	e7f2      	b.n	800e504 <etharp_cleanup_netif+0x14>
 800e51e:	bf00      	nop
 800e520:	240207b8 	.word	0x240207b8

0800e524 <etharp_input>:
{
 800e524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e528:	460d      	mov	r5, r1
 800e52a:	b087      	sub	sp, #28
 800e52c:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800e52e:	f7f5 fdcf 	bl	80040d0 <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e532:	2d00      	cmp	r5, #0
 800e534:	d07a      	beq.n	800e62c <etharp_input+0x108>
  hdr = (struct etharp_hdr *)p->payload;
 800e536:	6866      	ldr	r6, [r4, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e538:	8833      	ldrh	r3, [r6, #0]
 800e53a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e53e:	d102      	bne.n	800e546 <etharp_input+0x22>
 800e540:	7933      	ldrb	r3, [r6, #4]
 800e542:	2b06      	cmp	r3, #6
 800e544:	d005      	beq.n	800e552 <etharp_input+0x2e>
  pbuf_free(p);
 800e546:	4620      	mov	r0, r4
}
 800e548:	b007      	add	sp, #28
 800e54a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800e54e:	f7fa be79 	b.w	8009244 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e552:	7973      	ldrb	r3, [r6, #5]
 800e554:	2b04      	cmp	r3, #4
 800e556:	d1f6      	bne.n	800e546 <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e558:	8873      	ldrh	r3, [r6, #2]
 800e55a:	2b08      	cmp	r3, #8
 800e55c:	d1f3      	bne.n	800e546 <etharp_input+0x22>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e55e:	f8d6 a00e 	ldr.w	sl, [r6, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e562:	f106 0808 	add.w	r8, r6, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e566:	686f      	ldr	r7, [r5, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e568:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e56a:	f8cd a014 	str.w	sl, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e56e:	2f00      	cmp	r7, #0
 800e570:	d166      	bne.n	800e640 <etharp_input+0x11c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e572:	f04f 0b02 	mov.w	fp, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e576:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800e57a:	2b06      	cmp	r3, #6
 800e57c:	d165      	bne.n	800e64a <etharp_input+0x126>
  if (ip4_addr_isany(ipaddr) ||
 800e57e:	f1ba 0f00 	cmp.w	sl, #0
 800e582:	d03d      	beq.n	800e600 <etharp_input+0xdc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e584:	4629      	mov	r1, r5
 800e586:	4650      	mov	r0, sl
 800e588:	f000 fcac 	bl	800eee4 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800e58c:	4681      	mov	r9, r0
 800e58e:	bbb8      	cbnz	r0, 800e600 <etharp_input+0xdc>
      ip4_addr_ismulticast(ipaddr)) {
 800e590:	f00a 0af0 	and.w	sl, sl, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e594:	f1ba 0fe0 	cmp.w	sl, #224	@ 0xe0
 800e598:	d032      	beq.n	800e600 <etharp_input+0xdc>
  i = etharp_find_entry(ipaddr, flags, netif);
 800e59a:	4659      	mov	r1, fp
 800e59c:	462a      	mov	r2, r5
 800e59e:	a805      	add	r0, sp, #20
 800e5a0:	f7ff fdd2 	bl	800e148 <etharp_find_entry>
  if (i < 0) {
 800e5a4:	1e03      	subs	r3, r0, #0
 800e5a6:	db2b      	blt.n	800e600 <etharp_input+0xdc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e5a8:	492d      	ldr	r1, [pc, #180]	@ (800e660 <etharp_input+0x13c>)
 800e5aa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e5ae:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e5b0:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e5b4:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800e5b8:	00d2      	lsls	r2, r2, #3
 800e5ba:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e5be:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 800e5c0:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e5c4:	fb13 030e 	smlabb	r3, r3, lr, r0
 800e5c8:	68b0      	ldr	r0, [r6, #8]
 800e5ca:	50c8      	str	r0, [r1, r3]
 800e5cc:	440b      	add	r3, r1
 800e5ce:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800e5d2:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 800e5d4:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 800e5d8:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 800e5dc:	f1ba 0f00 	cmp.w	sl, #0
 800e5e0:	d00e      	beq.n	800e600 <etharp_input+0xdc>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e5e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    arp_table[i].q = NULL;
 800e5e6:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	f105 0226 	add.w	r2, r5, #38	@ 0x26
 800e5f0:	9300      	str	r3, [sp, #0]
 800e5f2:	4651      	mov	r1, sl
 800e5f4:	4643      	mov	r3, r8
 800e5f6:	f001 f937 	bl	800f868 <ethernet_output>
    pbuf_free(p);
 800e5fa:	4650      	mov	r0, sl
 800e5fc:	f7fa fe22 	bl	8009244 <pbuf_free>
  switch (hdr->opcode) {
 800e600:	88f3      	ldrh	r3, [r6, #6]
      if (for_us) {
 800e602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e606:	d19e      	bne.n	800e546 <etharp_input+0x22>
 800e608:	2f00      	cmp	r7, #0
 800e60a:	d09c      	beq.n	800e546 <etharp_input+0x22>
        etharp_raw(netif,
 800e60c:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e60e:	f105 0326 	add.w	r3, r5, #38	@ 0x26
        etharp_raw(netif,
 800e612:	4642      	mov	r2, r8
 800e614:	4628      	mov	r0, r5
 800e616:	9103      	str	r1, [sp, #12]
 800e618:	a905      	add	r1, sp, #20
 800e61a:	f8cd 8004 	str.w	r8, [sp, #4]
 800e61e:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e620:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 800e622:	9100      	str	r1, [sp, #0]
 800e624:	4619      	mov	r1, r3
 800e626:	f7ff fe41 	bl	800e2ac <etharp_raw>
 800e62a:	e78c      	b.n	800e546 <etharp_input+0x22>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e62c:	4b0d      	ldr	r3, [pc, #52]	@ (800e664 <etharp_input+0x140>)
 800e62e:	f240 228a 	movw	r2, #650	@ 0x28a
 800e632:	490d      	ldr	r1, [pc, #52]	@ (800e668 <etharp_input+0x144>)
 800e634:	480d      	ldr	r0, [pc, #52]	@ (800e66c <etharp_input+0x148>)
}
 800e636:	b007      	add	sp, #28
 800e638:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e63c:	f001 bc7a 	b.w	800ff34 <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e640:	429f      	cmp	r7, r3
 800e642:	d10a      	bne.n	800e65a <etharp_input+0x136>
 800e644:	2701      	movs	r7, #1
 800e646:	46bb      	mov	fp, r7
 800e648:	e795      	b.n	800e576 <etharp_input+0x52>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e64a:	4b06      	ldr	r3, [pc, #24]	@ (800e664 <etharp_input+0x140>)
 800e64c:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800e650:	4907      	ldr	r1, [pc, #28]	@ (800e670 <etharp_input+0x14c>)
 800e652:	4806      	ldr	r0, [pc, #24]	@ (800e66c <etharp_input+0x148>)
 800e654:	f001 fc6e 	bl	800ff34 <iprintf>
 800e658:	e791      	b.n	800e57e <etharp_input+0x5a>
 800e65a:	2700      	movs	r7, #0
 800e65c:	e789      	b.n	800e572 <etharp_input+0x4e>
 800e65e:	bf00      	nop
 800e660:	240207b8 	.word	0x240207b8
 800e664:	08013d8c 	.word	0x08013d8c
 800e668:	08011a38 	.word	0x08011a38
 800e66c:	080110dc 	.word	0x080110dc
 800e670:	08013ed0 	.word	0x08013ed0

0800e674 <etharp_query>:
{
 800e674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e678:	460e      	mov	r6, r1
 800e67a:	b085      	sub	sp, #20
 800e67c:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e67e:	4601      	mov	r1, r0
 800e680:	6830      	ldr	r0, [r6, #0]
{
 800e682:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e684:	f000 fc2e 	bl	800eee4 <ip4_addr_isbroadcast_u32>
 800e688:	2800      	cmp	r0, #0
 800e68a:	f040 80a2 	bne.w	800e7d2 <etharp_query+0x15e>
      ip4_addr_ismulticast(ipaddr) ||
 800e68e:	6833      	ldr	r3, [r6, #0]
 800e690:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
      ip4_addr_isany(ipaddr)) {
 800e694:	2ae0      	cmp	r2, #224	@ 0xe0
 800e696:	f000 809c 	beq.w	800e7d2 <etharp_query+0x15e>
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f000 8099 	beq.w	800e7d2 <etharp_query+0x15e>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e6a0:	462a      	mov	r2, r5
 800e6a2:	2101      	movs	r1, #1
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	f7ff fd4f 	bl	800e148 <etharp_find_entry>
  if (i_err < 0) {
 800e6aa:	f1b0 0800 	subs.w	r8, r0, #0
 800e6ae:	db63      	blt.n	800e778 <etharp_query+0x104>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e6b0:	f1b8 0f7e 	cmp.w	r8, #126	@ 0x7e
 800e6b4:	dc58      	bgt.n	800e768 <etharp_query+0xf4>
  i = (netif_addr_idx_t)i_err;
 800e6b6:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e6ba:	4c49      	ldr	r4, [pc, #292]	@ (800e7e0 <etharp_query+0x16c>)
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e6bc:	f105 0b26 	add.w	fp, r5, #38	@ 0x26
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e6c0:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 800e6c4:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 800e6c8:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 800e6cc:	f899 3014 	ldrb.w	r3, [r9, #20]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d133      	bne.n	800e73c <etharp_query+0xc8>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e6d4:	2301      	movs	r3, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e6d6:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 800e6d8:	f8c9 5008 	str.w	r5, [r9, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e6dc:	4659      	mov	r1, fp
 800e6de:	9303      	str	r3, [sp, #12]
 800e6e0:	4628      	mov	r0, r5
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e6e2:	f889 3014 	strb.w	r3, [r9, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e6e6:	4b3f      	ldr	r3, [pc, #252]	@ (800e7e4 <etharp_query+0x170>)
 800e6e8:	4a3f      	ldr	r2, [pc, #252]	@ (800e7e8 <etharp_query+0x174>)
 800e6ea:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e6ec:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	465b      	mov	r3, fp
 800e6f2:	f7ff fddb 	bl	800e2ac <etharp_raw>
    if (q == NULL) {
 800e6f6:	2f00      	cmp	r7, #0
 800e6f8:	d033      	beq.n	800e762 <etharp_query+0xee>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e6fa:	f899 3014 	ldrb.w	r3, [r9, #20]
 800e6fe:	2b01      	cmp	r3, #1
 800e700:	d820      	bhi.n	800e744 <etharp_query+0xd0>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e702:	d12e      	bne.n	800e762 <etharp_query+0xee>
{
 800e704:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e706:	4e39      	ldr	r6, [pc, #228]	@ (800e7ec <etharp_query+0x178>)
 800e708:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 800e7fc <etharp_query+0x188>
 800e70c:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 800e7f8 <etharp_query+0x184>
 800e710:	e005      	b.n	800e71e <etharp_query+0xaa>
      if (PBUF_NEEDS_COPY(p)) {
 800e712:	7b2b      	ldrb	r3, [r5, #12]
 800e714:	065b      	lsls	r3, r3, #25
 800e716:	d434      	bmi.n	800e782 <etharp_query+0x10e>
      p = p->next;
 800e718:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800e71a:	2d00      	cmp	r5, #0
 800e71c:	d047      	beq.n	800e7ae <etharp_query+0x13a>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e71e:	896a      	ldrh	r2, [r5, #10]
 800e720:	892b      	ldrh	r3, [r5, #8]
 800e722:	429a      	cmp	r2, r3
 800e724:	d1f5      	bne.n	800e712 <etharp_query+0x9e>
 800e726:	682a      	ldr	r2, [r5, #0]
 800e728:	4633      	mov	r3, r6
 800e72a:	2a00      	cmp	r2, #0
 800e72c:	d0f1      	beq.n	800e712 <etharp_query+0x9e>
 800e72e:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800e732:	4659      	mov	r1, fp
 800e734:	4648      	mov	r0, r9
 800e736:	f001 fbfd 	bl	800ff34 <iprintf>
 800e73a:	e7ea      	b.n	800e712 <etharp_query+0x9e>
  if (is_new_entry || (q == NULL)) {
 800e73c:	2f00      	cmp	r7, #0
 800e73e:	d03a      	beq.n	800e7b6 <etharp_query+0x142>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e740:	2b01      	cmp	r3, #1
 800e742:	d0df      	beq.n	800e704 <etharp_query+0x90>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e744:	2318      	movs	r3, #24
 800e746:	465a      	mov	r2, fp
 800e748:	4639      	mov	r1, r7
 800e74a:	4628      	mov	r0, r5
 800e74c:	fb03 4308 	mla	r3, r3, r8, r4
 800e750:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800e754:	9400      	str	r4, [sp, #0]
 800e756:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 800e758:	4c25      	ldr	r4, [pc, #148]	@ (800e7f0 <etharp_query+0x17c>)
 800e75a:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e75e:	f001 f883 	bl	800f868 <ethernet_output>
}
 800e762:	b005      	add	sp, #20
 800e764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e768:	4b20      	ldr	r3, [pc, #128]	@ (800e7ec <etharp_query+0x178>)
 800e76a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800e76e:	4921      	ldr	r1, [pc, #132]	@ (800e7f4 <etharp_query+0x180>)
 800e770:	4821      	ldr	r0, [pc, #132]	@ (800e7f8 <etharp_query+0x184>)
 800e772:	f001 fbdf 	bl	800ff34 <iprintf>
 800e776:	e79e      	b.n	800e6b6 <etharp_query+0x42>
    return (err_t)i_err;
 800e778:	fa4f f088 	sxtb.w	r0, r8
}
 800e77c:	b005      	add	sp, #20
 800e77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e782:	463a      	mov	r2, r7
 800e784:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800e788:	200e      	movs	r0, #14
 800e78a:	f7fb f84f 	bl	800982c <pbuf_clone>
 800e78e:	4607      	mov	r7, r0
    if (p != NULL) {
 800e790:	b317      	cbz	r7, 800e7d8 <etharp_query+0x164>
      if (arp_table[i].q != NULL) {
 800e792:	eb0a 0308 	add.w	r3, sl, r8
 800e796:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
 800e79a:	b108      	cbz	r0, 800e7a0 <etharp_query+0x12c>
        pbuf_free(arp_table[i].q);
 800e79c:	f7fa fd52 	bl	8009244 <pbuf_free>
      arp_table[i].q = p;
 800e7a0:	44d0      	add	r8, sl
      result = ERR_OK;
 800e7a2:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800e7a4:	f844 7038 	str.w	r7, [r4, r8, lsl #3]
}
 800e7a8:	b005      	add	sp, #20
 800e7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	f7fa fec6 	bl	8009540 <pbuf_ref>
 800e7b4:	e7ec      	b.n	800e790 <etharp_query+0x11c>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e7b6:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	4c0a      	ldr	r4, [pc, #40]	@ (800e7e4 <etharp_query+0x170>)
 800e7bc:	4659      	mov	r1, fp
 800e7be:	4628      	mov	r0, r5
 800e7c0:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800e7c4:	e9cd 2400 	strd	r2, r4, [sp]
 800e7c8:	465b      	mov	r3, fp
 800e7ca:	4a07      	ldr	r2, [pc, #28]	@ (800e7e8 <etharp_query+0x174>)
 800e7cc:	f7ff fd6e 	bl	800e2ac <etharp_raw>
    if (q == NULL) {
 800e7d0:	e7c7      	b.n	800e762 <etharp_query+0xee>
    return ERR_ARG;
 800e7d2:	f06f 000f 	mvn.w	r0, #15
 800e7d6:	e7c4      	b.n	800e762 <etharp_query+0xee>
  err_t result = ERR_MEM;
 800e7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7dc:	e7c1      	b.n	800e762 <etharp_query+0xee>
 800e7de:	bf00      	nop
 800e7e0:	240207b8 	.word	0x240207b8
 800e7e4:	08014260 	.word	0x08014260
 800e7e8:	08014268 	.word	0x08014268
 800e7ec:	08013d8c 	.word	0x08013d8c
 800e7f0:	240207b4 	.word	0x240207b4
 800e7f4:	08013ef4 	.word	0x08013ef4
 800e7f8:	080110dc 	.word	0x080110dc
 800e7fc:	08013f04 	.word	0x08013f04

0800e800 <etharp_output>:
{
 800e800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e802:	4604      	mov	r4, r0
 800e804:	b085      	sub	sp, #20
 800e806:	460e      	mov	r6, r1
 800e808:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800e80a:	f7f5 fc61 	bl	80040d0 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e80e:	2c00      	cmp	r4, #0
 800e810:	f000 8081 	beq.w	800e916 <etharp_output+0x116>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e814:	2e00      	cmp	r6, #0
 800e816:	d06d      	beq.n	800e8f4 <etharp_output+0xf4>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e818:	2d00      	cmp	r5, #0
 800e81a:	d074      	beq.n	800e906 <etharp_output+0x106>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e81c:	4621      	mov	r1, r4
 800e81e:	6828      	ldr	r0, [r5, #0]
 800e820:	f000 fb60 	bl	800eee4 <ip4_addr_isbroadcast_u32>
 800e824:	2800      	cmp	r0, #0
 800e826:	d163      	bne.n	800e8f0 <etharp_output+0xf0>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e828:	682b      	ldr	r3, [r5, #0]
 800e82a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e82e:	2ae0      	cmp	r2, #224	@ 0xe0
 800e830:	d039      	beq.n	800e8a6 <etharp_output+0xa6>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e832:	6862      	ldr	r2, [r4, #4]
 800e834:	68a1      	ldr	r1, [r4, #8]
 800e836:	405a      	eors	r2, r3
 800e838:	420a      	tst	r2, r1
 800e83a:	d009      	beq.n	800e850 <etharp_output+0x50>
        !ip4_addr_islinklocal(ipaddr)) {
 800e83c:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e83e:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800e842:	4293      	cmp	r3, r2
 800e844:	d004      	beq.n	800e850 <etharp_output+0x50>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e846:	68e3      	ldr	r3, [r4, #12]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d076      	beq.n	800e93a <etharp_output+0x13a>
            dst_addr = netif_ip4_gw(netif);
 800e84c:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e850:	4f3b      	ldr	r7, [pc, #236]	@ (800e940 <etharp_output+0x140>)
 800e852:	4b3c      	ldr	r3, [pc, #240]	@ (800e944 <etharp_output+0x144>)
 800e854:	783a      	ldrb	r2, [r7, #0]
 800e856:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800e85a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e85e:	7d19      	ldrb	r1, [r3, #20]
 800e860:	2901      	cmp	r1, #1
 800e862:	d902      	bls.n	800e86a <etharp_output+0x6a>
 800e864:	6899      	ldr	r1, [r3, #8]
 800e866:	42a1      	cmp	r1, r4
 800e868:	d060      	beq.n	800e92c <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e86a:	4b36      	ldr	r3, [pc, #216]	@ (800e944 <etharp_output+0x144>)
{
 800e86c:	f04f 0c00 	mov.w	ip, #0
 800e870:	e005      	b.n	800e87e <etharp_output+0x7e>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e872:	f10c 0c01 	add.w	ip, ip, #1
 800e876:	3318      	adds	r3, #24
 800e878:	f1bc 0f0a 	cmp.w	ip, #10
 800e87c:	d030      	beq.n	800e8e0 <etharp_output+0xe0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e87e:	7d18      	ldrb	r0, [r3, #20]
 800e880:	2801      	cmp	r0, #1
 800e882:	d9f6      	bls.n	800e872 <etharp_output+0x72>
 800e884:	689a      	ldr	r2, [r3, #8]
 800e886:	42a2      	cmp	r2, r4
 800e888:	d1f3      	bne.n	800e872 <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 800e88a:	685a      	ldr	r2, [r3, #4]
 800e88c:	6829      	ldr	r1, [r5, #0]
 800e88e:	4291      	cmp	r1, r2
 800e890:	d1ef      	bne.n	800e872 <etharp_output+0x72>
 800e892:	fa5f f28c 	uxtb.w	r2, ip
        return etharp_output_to_arp_index(netif, q, i);
 800e896:	4631      	mov	r1, r6
 800e898:	4620      	mov	r0, r4
        ETHARP_SET_ADDRHINT(netif, i);
 800e89a:	703a      	strb	r2, [r7, #0]
}
 800e89c:	b005      	add	sp, #20
 800e89e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800e8a2:	f7ff bd73 	b.w	800e38c <etharp_output_to_arp_index>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e8a6:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e8a8:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e8aa:	215e      	movs	r1, #94	@ 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e8ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e8b0:	f8ad 2008 	strh.w	r2, [sp, #8]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e8b4:	78ea      	ldrb	r2, [r5, #3]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e8b6:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e8ba:	78ab      	ldrb	r3, [r5, #2]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e8bc:	f88d 100a 	strb.w	r1, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e8c0:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 800e8c4:	ab02      	add	r3, sp, #8
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e8c6:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e8ca:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800e8ce:	f104 0226 	add.w	r2, r4, #38	@ 0x26
 800e8d2:	4631      	mov	r1, r6
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	9500      	str	r5, [sp, #0]
 800e8d8:	f000 ffc6 	bl	800f868 <ethernet_output>
}
 800e8dc:	b005      	add	sp, #20
 800e8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 800e8e0:	4632      	mov	r2, r6
 800e8e2:	4629      	mov	r1, r5
 800e8e4:	4620      	mov	r0, r4
}
 800e8e6:	b005      	add	sp, #20
 800e8e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 800e8ec:	f7ff bec2 	b.w	800e674 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 800e8f0:	4b15      	ldr	r3, [pc, #84]	@ (800e948 <etharp_output+0x148>)
 800e8f2:	e7ea      	b.n	800e8ca <etharp_output+0xca>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e8f4:	4b15      	ldr	r3, [pc, #84]	@ (800e94c <etharp_output+0x14c>)
 800e8f6:	f240 321f 	movw	r2, #799	@ 0x31f
 800e8fa:	4915      	ldr	r1, [pc, #84]	@ (800e950 <etharp_output+0x150>)
 800e8fc:	4815      	ldr	r0, [pc, #84]	@ (800e954 <etharp_output+0x154>)
 800e8fe:	f001 fb19 	bl	800ff34 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e902:	2d00      	cmp	r5, #0
 800e904:	d18a      	bne.n	800e81c <etharp_output+0x1c>
 800e906:	4b11      	ldr	r3, [pc, #68]	@ (800e94c <etharp_output+0x14c>)
 800e908:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800e90c:	4912      	ldr	r1, [pc, #72]	@ (800e958 <etharp_output+0x158>)
 800e90e:	4811      	ldr	r0, [pc, #68]	@ (800e954 <etharp_output+0x154>)
 800e910:	f001 fb10 	bl	800ff34 <iprintf>
 800e914:	e782      	b.n	800e81c <etharp_output+0x1c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e916:	4b0d      	ldr	r3, [pc, #52]	@ (800e94c <etharp_output+0x14c>)
 800e918:	f240 321e 	movw	r2, #798	@ 0x31e
 800e91c:	490f      	ldr	r1, [pc, #60]	@ (800e95c <etharp_output+0x15c>)
 800e91e:	480d      	ldr	r0, [pc, #52]	@ (800e954 <etharp_output+0x154>)
 800e920:	f001 fb08 	bl	800ff34 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e924:	2e00      	cmp	r6, #0
 800e926:	f47f af77 	bne.w	800e818 <etharp_output+0x18>
 800e92a:	e7e3      	b.n	800e8f4 <etharp_output+0xf4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	6829      	ldr	r1, [r5, #0]
 800e930:	4299      	cmp	r1, r3
 800e932:	d19a      	bne.n	800e86a <etharp_output+0x6a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e934:	4631      	mov	r1, r6
 800e936:	4620      	mov	r0, r4
 800e938:	e7b0      	b.n	800e89c <etharp_output+0x9c>
            return ERR_RTE;
 800e93a:	f06f 0003 	mvn.w	r0, #3
 800e93e:	e7cd      	b.n	800e8dc <etharp_output+0xdc>
 800e940:	240207b4 	.word	0x240207b4
 800e944:	240207b8 	.word	0x240207b8
 800e948:	08014268 	.word	0x08014268
 800e94c:	08013d8c 	.word	0x08013d8c
 800e950:	08013f20 	.word	0x08013f20
 800e954:	080110dc 	.word	0x080110dc
 800e958:	08013eb0 	.word	0x08013eb0
 800e95c:	08011a38 	.word	0x08011a38

0800e960 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e960:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e962:	2301      	movs	r3, #1
{
 800e964:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e966:	4c07      	ldr	r4, [pc, #28]	@ (800e984 <etharp_request+0x24>)
 800e968:	4a07      	ldr	r2, [pc, #28]	@ (800e988 <etharp_request+0x28>)
 800e96a:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e96c:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e96e:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800e972:	f100 0326 	add.w	r3, r0, #38	@ 0x26
 800e976:	9400      	str	r4, [sp, #0]
 800e978:	4619      	mov	r1, r3
 800e97a:	f7ff fc97 	bl	800e2ac <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800e97e:	b004      	add	sp, #16
 800e980:	bd10      	pop	{r4, pc}
 800e982:	bf00      	nop
 800e984:	08014260 	.word	0x08014260
 800e988:	08014268 	.word	0x08014268

0800e98c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e98e:	460f      	mov	r7, r1
 800e990:	b087      	sub	sp, #28
 800e992:	4616      	mov	r6, r2
 800e994:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e996:	2124      	movs	r1, #36	@ 0x24
 800e998:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e99c:	2022      	movs	r0, #34	@ 0x22
 800e99e:	f7fa fcc1 	bl	8009324 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800e9a2:	b390      	cbz	r0, 800ea0a <icmp_send_response+0x7e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e9a4:	8943      	ldrh	r3, [r0, #10]
 800e9a6:	4605      	mov	r5, r0
 800e9a8:	2b23      	cmp	r3, #35	@ 0x23
 800e9aa:	d930      	bls.n	800ea0e <icmp_send_response+0x82>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e9ac:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e9ae:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800e9b0:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 800e9b2:	2700      	movs	r7, #0
  icmphdr->code = code;
 800e9b4:	7066      	strb	r6, [r4, #1]
  icmphdr->id = 0;
 800e9b6:	6067      	str	r7, [r4, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e9b8:	6818      	ldr	r0, [r3, #0]
 800e9ba:	6859      	ldr	r1, [r3, #4]
 800e9bc:	689a      	ldr	r2, [r3, #8]
 800e9be:	68de      	ldr	r6, [r3, #12]
 800e9c0:	60a0      	str	r0, [r4, #8]
 800e9c2:	6166      	str	r6, [r4, #20]
 800e9c4:	60e1      	str	r1, [r4, #12]
 800e9c6:	6122      	str	r2, [r4, #16]
 800e9c8:	6918      	ldr	r0, [r3, #16]
 800e9ca:	6959      	ldr	r1, [r3, #20]
 800e9cc:	699a      	ldr	r2, [r3, #24]
 800e9ce:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e9d0:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e9d2:	61e1      	str	r1, [r4, #28]
 800e9d4:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800e9da:	f000 f8d7 	bl	800eb8c <ip4_route>
#endif
  if (netif != NULL) {
 800e9de:	4606      	mov	r6, r0
 800e9e0:	b180      	cbz	r0, 800ea04 <icmp_send_response+0x78>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800e9e2:	8969      	ldrh	r1, [r5, #10]
 800e9e4:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 800e9e6:	70a7      	strb	r7, [r4, #2]
 800e9e8:	70e7      	strb	r7, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800e9ea:	f7f9 fd79 	bl	80084e0 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e9ee:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800e9f0:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e9f2:	aa05      	add	r2, sp, #20
 800e9f4:	4639      	mov	r1, r7
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	9700      	str	r7, [sp, #0]
 800e9fa:	e9cd 3601 	strd	r3, r6, [sp, #4]
 800e9fe:	23ff      	movs	r3, #255	@ 0xff
 800ea00:	f000 fa5e 	bl	800eec0 <ip4_output_if>
  }
  pbuf_free(q);
 800ea04:	4628      	mov	r0, r5
 800ea06:	f7fa fc1d 	bl	8009244 <pbuf_free>
}
 800ea0a:	b007      	add	sp, #28
 800ea0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ea0e:	4b04      	ldr	r3, [pc, #16]	@ (800ea20 <icmp_send_response+0x94>)
 800ea10:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800ea14:	4903      	ldr	r1, [pc, #12]	@ (800ea24 <icmp_send_response+0x98>)
 800ea16:	4804      	ldr	r0, [pc, #16]	@ (800ea28 <icmp_send_response+0x9c>)
 800ea18:	f001 fa8c 	bl	800ff34 <iprintf>
 800ea1c:	e7c6      	b.n	800e9ac <icmp_send_response+0x20>
 800ea1e:	bf00      	nop
 800ea20:	08013f2c 	.word	0x08013f2c
 800ea24:	08013f64 	.word	0x08013f64
 800ea28:	080110dc 	.word	0x080110dc

0800ea2c <icmp_input>:
{
 800ea2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800ea30:	4f4c      	ldr	r7, [pc, #304]	@ (800eb64 <icmp_input+0x138>)
{
 800ea32:	b085      	sub	sp, #20
 800ea34:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800ea36:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800ea3a:	f898 4000 	ldrb.w	r4, [r8]
 800ea3e:	f004 040f 	and.w	r4, r4, #15
 800ea42:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800ea44:	2c13      	cmp	r4, #19
 800ea46:	d913      	bls.n	800ea70 <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 800ea48:	8943      	ldrh	r3, [r0, #10]
 800ea4a:	2b03      	cmp	r3, #3
 800ea4c:	d910      	bls.n	800ea70 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800ea4e:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	2b08      	cmp	r3, #8
 800ea54:	d10c      	bne.n	800ea70 <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea56:	6978      	ldr	r0, [r7, #20]
 800ea58:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 800ea5c:	2be0      	cmp	r3, #224	@ 0xe0
 800ea5e:	d007      	beq.n	800ea70 <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ea60:	460e      	mov	r6, r1
 800ea62:	6839      	ldr	r1, [r7, #0]
 800ea64:	f000 fa3e 	bl	800eee4 <ip4_addr_isbroadcast_u32>
 800ea68:	b910      	cbnz	r0, 800ea70 <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ea6a:	892b      	ldrh	r3, [r5, #8]
 800ea6c:	2b07      	cmp	r3, #7
 800ea6e:	d805      	bhi.n	800ea7c <icmp_input+0x50>
  pbuf_free(p);
 800ea70:	4628      	mov	r0, r5
}
 800ea72:	b005      	add	sp, #20
 800ea74:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800ea78:	f7fa bbe4 	b.w	8009244 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	f7f9 fd35 	bl	80084ec <inet_chksum_pbuf>
 800ea82:	2800      	cmp	r0, #0
 800ea84:	d1f4      	bne.n	800ea70 <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ea86:	f104 090e 	add.w	r9, r4, #14
 800ea8a:	4628      	mov	r0, r5
 800ea8c:	4649      	mov	r1, r9
 800ea8e:	f7fa fb47 	bl	8009120 <pbuf_add_header>
 800ea92:	2800      	cmp	r0, #0
 800ea94:	d04b      	beq.n	800eb2e <icmp_input+0x102>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ea96:	892b      	ldrh	r3, [r5, #8]
 800ea98:	18e1      	adds	r1, r4, r3
 800ea9a:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800ea9c:	428b      	cmp	r3, r1
 800ea9e:	d8e7      	bhi.n	800ea70 <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800eaa0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800eaa4:	200e      	movs	r0, #14
 800eaa6:	f7fa fc3d 	bl	8009324 <pbuf_alloc>
        if (r == NULL) {
 800eaaa:	4681      	mov	r9, r0
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d0df      	beq.n	800ea70 <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800eab0:	8942      	ldrh	r2, [r0, #10]
 800eab2:	f104 0308 	add.w	r3, r4, #8
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d346      	bcc.n	800eb48 <icmp_input+0x11c>
        MEMCPY(r->payload, iphdr_in, hlen);
 800eaba:	4641      	mov	r1, r8
 800eabc:	4622      	mov	r2, r4
 800eabe:	6840      	ldr	r0, [r0, #4]
 800eac0:	f001 fbf5 	bl	80102ae <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800eac4:	4621      	mov	r1, r4
 800eac6:	4648      	mov	r0, r9
 800eac8:	f7fa fb5a 	bl	8009180 <pbuf_remove_header>
 800eacc:	2800      	cmp	r0, #0
 800eace:	d13f      	bne.n	800eb50 <icmp_input+0x124>
        if (pbuf_copy(r, p) != ERR_OK) {
 800ead0:	4629      	mov	r1, r5
 800ead2:	4648      	mov	r0, r9
 800ead4:	f7fa fd96 	bl	8009604 <pbuf_copy>
 800ead8:	2800      	cmp	r0, #0
 800eada:	d135      	bne.n	800eb48 <icmp_input+0x11c>
        pbuf_free(p);
 800eadc:	4628      	mov	r0, r5
 800eade:	464d      	mov	r5, r9
 800eae0:	f7fa fbb0 	bl	8009244 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800eae4:	4621      	mov	r1, r4
 800eae6:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 800eae8:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800eaea:	f7fa fb19 	bl	8009120 <pbuf_add_header>
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	d1be      	bne.n	800ea70 <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800eaf2:	6869      	ldr	r1, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800eaf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eaf8:	610a      	str	r2, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800eafa:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 800eafe:	60cb      	str	r3, [r1, #12]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800eb00:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800eb02:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800eb04:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800eb06:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 800eb08:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800eb0c:	bf8c      	ite	hi
 800eb0e:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800eb10:	3308      	addls	r3, #8
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800eb16:	23ff      	movs	r3, #255	@ 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 800eb18:	728a      	strb	r2, [r1, #10]
 800eb1a:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800eb1c:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800eb1e:	2101      	movs	r1, #1
 800eb20:	9200      	str	r2, [sp, #0]
 800eb22:	e9cd 1601 	strd	r1, r6, [sp, #4]
 800eb26:	4910      	ldr	r1, [pc, #64]	@ (800eb68 <icmp_input+0x13c>)
 800eb28:	f000 f9ca 	bl	800eec0 <ip4_output_if>
  pbuf_free(p);
 800eb2c:	e7a0      	b.n	800ea70 <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800eb2e:	4649      	mov	r1, r9
 800eb30:	4628      	mov	r0, r5
 800eb32:	f7fa fb25 	bl	8009180 <pbuf_remove_header>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d0d4      	beq.n	800eae4 <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800eb3a:	4b0c      	ldr	r3, [pc, #48]	@ (800eb6c <icmp_input+0x140>)
 800eb3c:	22c7      	movs	r2, #199	@ 0xc7
 800eb3e:	490c      	ldr	r1, [pc, #48]	@ (800eb70 <icmp_input+0x144>)
 800eb40:	480c      	ldr	r0, [pc, #48]	@ (800eb74 <icmp_input+0x148>)
 800eb42:	f001 f9f7 	bl	800ff34 <iprintf>
          goto icmperr;
 800eb46:	e793      	b.n	800ea70 <icmp_input+0x44>
          pbuf_free(r);
 800eb48:	4648      	mov	r0, r9
 800eb4a:	f7fa fb7b 	bl	8009244 <pbuf_free>
          goto icmperr;
 800eb4e:	e78f      	b.n	800ea70 <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800eb50:	4b06      	ldr	r3, [pc, #24]	@ (800eb6c <icmp_input+0x140>)
 800eb52:	22b6      	movs	r2, #182	@ 0xb6
 800eb54:	4908      	ldr	r1, [pc, #32]	@ (800eb78 <icmp_input+0x14c>)
 800eb56:	4807      	ldr	r0, [pc, #28]	@ (800eb74 <icmp_input+0x148>)
 800eb58:	f001 f9ec 	bl	800ff34 <iprintf>
          pbuf_free(r);
 800eb5c:	4648      	mov	r0, r9
 800eb5e:	f7fa fb71 	bl	8009244 <pbuf_free>
          goto icmperr;
 800eb62:	e785      	b.n	800ea70 <icmp_input+0x44>
 800eb64:	24019c98 	.word	0x24019c98
 800eb68:	24019cac 	.word	0x24019cac
 800eb6c:	08013f2c 	.word	0x08013f2c
 800eb70:	08013fc8 	.word	0x08013fc8
 800eb74:	080110dc 	.word	0x080110dc
 800eb78:	08013f90 	.word	0x08013f90

0800eb7c <icmp_dest_unreach>:
{
 800eb7c:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800eb7e:	2103      	movs	r1, #3
 800eb80:	f7ff bf04 	b.w	800e98c <icmp_send_response>

0800eb84 <icmp_time_exceeded>:
{
 800eb84:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800eb86:	210b      	movs	r1, #11
 800eb88:	f7ff bf00 	b.w	800e98c <icmp_send_response>

0800eb8c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800eb8c:	b538      	push	{r3, r4, r5, lr}
 800eb8e:	4604      	mov	r4, r0
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800eb90:	f7f5 fa9e 	bl	80040d0 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800eb94:	4b15      	ldr	r3, [pc, #84]	@ (800ebec <ip4_route+0x60>)
 800eb96:	6818      	ldr	r0, [r3, #0]
 800eb98:	b1a0      	cbz	r0, 800ebc4 <ip4_route+0x38>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eb9a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800eb9e:	07d9      	lsls	r1, r3, #31
 800eba0:	d50d      	bpl.n	800ebbe <ip4_route+0x32>
 800eba2:	075a      	lsls	r2, r3, #29
 800eba4:	d50b      	bpl.n	800ebbe <ip4_route+0x32>
 800eba6:	6842      	ldr	r2, [r0, #4]
 800eba8:	b14a      	cbz	r2, 800ebbe <ip4_route+0x32>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ebaa:	6821      	ldr	r1, [r4, #0]
 800ebac:	6885      	ldr	r5, [r0, #8]
 800ebae:	404a      	eors	r2, r1
 800ebb0:	422a      	tst	r2, r5
 800ebb2:	d016      	beq.n	800ebe2 <ip4_route+0x56>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ebb4:	079b      	lsls	r3, r3, #30
 800ebb6:	d402      	bmi.n	800ebbe <ip4_route+0x32>
 800ebb8:	68c3      	ldr	r3, [r0, #12]
 800ebba:	4299      	cmp	r1, r3
 800ebbc:	d011      	beq.n	800ebe2 <ip4_route+0x56>
  NETIF_FOREACH(netif) {
 800ebbe:	6800      	ldr	r0, [r0, #0]
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	d1ea      	bne.n	800eb9a <ip4_route+0xe>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ebc4:	4b0a      	ldr	r3, [pc, #40]	@ (800ebf0 <ip4_route+0x64>)
 800ebc6:	6818      	ldr	r0, [r3, #0]
 800ebc8:	b158      	cbz	r0, 800ebe2 <ip4_route+0x56>
 800ebca:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800ebce:	f003 0305 	and.w	r3, r3, #5
 800ebd2:	2b05      	cmp	r3, #5
 800ebd4:	d106      	bne.n	800ebe4 <ip4_route+0x58>
 800ebd6:	6843      	ldr	r3, [r0, #4]
 800ebd8:	b133      	cbz	r3, 800ebe8 <ip4_route+0x5c>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ebda:	7823      	ldrb	r3, [r4, #0]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ebdc:	2b7f      	cmp	r3, #127	@ 0x7f
 800ebde:	bf08      	it	eq
 800ebe0:	2000      	moveq	r0, #0
  }

  return netif_default;
}
 800ebe2:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800ebe4:	2000      	movs	r0, #0
}
 800ebe6:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800ebe8:	4618      	mov	r0, r3
}
 800ebea:	bd38      	pop	{r3, r4, r5, pc}
 800ebec:	24020750 	.word	0x24020750
 800ebf0:	2402074c 	.word	0x2402074c

0800ebf4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ebf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	460e      	mov	r6, r1
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 800ebfc:	f7f5 fa68 	bl	80040d0 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ec00:	6867      	ldr	r7, [r4, #4]
  if (IPH_V(iphdr) != 4) {
 800ec02:	783b      	ldrb	r3, [r7, #0]
 800ec04:	091a      	lsrs	r2, r3, #4
 800ec06:	2a04      	cmp	r2, #4
 800ec08:	d16d      	bne.n	800ece6 <ip4_input+0xf2>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ec0a:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ec0e:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ec10:	009d      	lsls	r5, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ec12:	f7f9 fc25 	bl	8008460 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ec16:	8923      	ldrh	r3, [r4, #8]
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ec18:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 800ec1a:	4283      	cmp	r3, r0
 800ec1c:	d869      	bhi.n	800ecf2 <ip4_input+0xfe>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ec1e:	8963      	ldrh	r3, [r4, #10]
 800ec20:	42ab      	cmp	r3, r5
 800ec22:	d360      	bcc.n	800ece6 <ip4_input+0xf2>
 800ec24:	8923      	ldrh	r3, [r4, #8]
 800ec26:	4543      	cmp	r3, r8
 800ec28:	d35d      	bcc.n	800ece6 <ip4_input+0xf2>
 800ec2a:	2d13      	cmp	r5, #19
 800ec2c:	d95b      	bls.n	800ece6 <ip4_input+0xf2>
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ec2e:	693a      	ldr	r2, [r7, #16]
 800ec30:	68f8      	ldr	r0, [r7, #12]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ec32:	f002 01f0 	and.w	r1, r2, #240	@ 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ec36:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 800edb4 <ip4_input+0x1c0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ec3a:	f896 802d 	ldrb.w	r8, [r6, #45]	@ 0x2d
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ec3e:	29e0      	cmp	r1, #224	@ 0xe0
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ec40:	f008 0301 	and.w	r3, r8, #1
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ec44:	e9c9 0204 	strd	r0, r2, [r9, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ec48:	d158      	bne.n	800ecfc <ip4_input+0x108>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f040 8083 	bne.w	800ed56 <ip4_input+0x162>
      netif = inp;
    } else {
      netif = NULL;
 800ec50:	f04f 0800 	mov.w	r8, #0
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ec54:	4631      	mov	r1, r6
 800ec56:	f000 f945 	bl	800eee4 <ip4_addr_isbroadcast_u32>
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	d143      	bne.n	800ece6 <ip4_input+0xf2>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800ec5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ec66:	2be0      	cmp	r3, #224	@ 0xe0
 800ec68:	d03d      	beq.n	800ece6 <ip4_input+0xf2>
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ec6a:	f1b8 0f00 	cmp.w	r8, #0
 800ec6e:	d03a      	beq.n	800ece6 <ip4_input+0xf2>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ec70:	88fb      	ldrh	r3, [r7, #6]
 800ec72:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d165      	bne.n	800ed46 <ip4_input+0x152>
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 800ec7a:	f8c9 7008 	str.w	r7, [r9, #8]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ec7e:	4629      	mov	r1, r5
 800ec80:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800ec82:	e9c9 8600 	strd	r8, r6, [r9]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ec86:	783b      	ldrb	r3, [r7, #0]
 800ec88:	f003 030f 	and.w	r3, r3, #15
 800ec8c:	009b      	lsls	r3, r3, #2
 800ec8e:	f8a9 300c 	strh.w	r3, [r9, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ec92:	f7fa fa75 	bl	8009180 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ec96:	7a7b      	ldrb	r3, [r7, #9]
 800ec98:	2b06      	cmp	r3, #6
 800ec9a:	d07a      	beq.n	800ed92 <ip4_input+0x19e>
 800ec9c:	2b11      	cmp	r3, #17
 800ec9e:	d073      	beq.n	800ed88 <ip4_input+0x194>
 800eca0:	2b01      	cmp	r3, #1
 800eca2:	d06c      	beq.n	800ed7e <ip4_input+0x18a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800eca4:	4641      	mov	r1, r8
 800eca6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ecaa:	f000 f91b 	bl	800eee4 <ip4_addr_isbroadcast_u32>
 800ecae:	b968      	cbnz	r0, 800eccc <ip4_input+0xd8>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ecb0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ecb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ecb8:	2be0      	cmp	r3, #224	@ 0xe0
 800ecba:	d007      	beq.n	800eccc <ip4_input+0xd8>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f7fa fa8c 	bl	80091dc <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ecc4:	2102      	movs	r1, #2
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f7ff ff58 	bl	800eb7c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800eccc:	4620      	mov	r0, r4
 800ecce:	f7fa fab9 	bl	8009244 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	e9c9 3300 	strd	r3, r3, [r9]
  ip_data.current_input_netif = NULL;
  ip_data.current_ip4_header = NULL;
 800ecd8:	f8c9 3008 	str.w	r3, [r9, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ecdc:	f8a9 300c 	strh.w	r3, [r9, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ece0:	e9c9 3304 	strd	r3, r3, [r9, #16]
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
 800ece4:	e002      	b.n	800ecec <ip4_input+0xf8>
    pbuf_free(p);
 800ece6:	4620      	mov	r0, r4
 800ece8:	f7fa faac 	bl	8009244 <pbuf_free>
}
 800ecec:	2000      	movs	r0, #0
 800ecee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 800ecf2:	4601      	mov	r1, r0
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	f7fa fbbd 	bl	8009474 <pbuf_realloc>
 800ecfa:	e790      	b.n	800ec1e <ip4_input+0x2a>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ecfc:	bb93      	cbnz	r3, 800ed64 <ip4_input+0x170>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ecfe:	b2d2      	uxtb	r2, r2
 800ed00:	2a7f      	cmp	r2, #127	@ 0x7f
 800ed02:	d04b      	beq.n	800ed9c <ip4_input+0x1a8>
        NETIF_FOREACH(netif) {
 800ed04:	4b2a      	ldr	r3, [pc, #168]	@ (800edb0 <ip4_input+0x1bc>)
 800ed06:	f8d3 8000 	ldr.w	r8, [r3]
 800ed0a:	f1b8 0f00 	cmp.w	r8, #0
 800ed0e:	d108      	bne.n	800ed22 <ip4_input+0x12e>
 800ed10:	e044      	b.n	800ed9c <ip4_input+0x1a8>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ed12:	f000 f8e7 	bl	800eee4 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ed16:	b998      	cbnz	r0, 800ed40 <ip4_input+0x14c>
        NETIF_FOREACH(netif) {
 800ed18:	f8d8 8000 	ldr.w	r8, [r8]
 800ed1c:	f1b8 0f00 	cmp.w	r8, #0
 800ed20:	d00e      	beq.n	800ed40 <ip4_input+0x14c>
          if (netif == inp) {
 800ed22:	4546      	cmp	r6, r8
 800ed24:	d0f8      	beq.n	800ed18 <ip4_input+0x124>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ed26:	f898 302d 	ldrb.w	r3, [r8, #45]	@ 0x2d
 800ed2a:	07db      	lsls	r3, r3, #31
 800ed2c:	d5f4      	bpl.n	800ed18 <ip4_input+0x124>
 800ed2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d0f0      	beq.n	800ed18 <ip4_input+0x124>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ed36:	f8d9 0014 	ldr.w	r0, [r9, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ed3a:	4641      	mov	r1, r8
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ed3c:	4283      	cmp	r3, r0
 800ed3e:	d1e8      	bne.n	800ed12 <ip4_input+0x11e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ed40:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ed44:	e786      	b.n	800ec54 <ip4_input+0x60>
    p = ip4_reass(p);
 800ed46:	4620      	mov	r0, r4
 800ed48:	f000 f9f8 	bl	800f13c <ip4_reass>
    if (p == NULL) {
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d0cc      	beq.n	800ecec <ip4_input+0xf8>
    iphdr = (const struct ip_hdr *)p->payload;
 800ed52:	6847      	ldr	r7, [r0, #4]
 800ed54:	e791      	b.n	800ec7a <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ed56:	6873      	ldr	r3, [r6, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	bf14      	ite	ne
 800ed5c:	46b0      	movne	r8, r6
 800ed5e:	f04f 0800 	moveq.w	r8, #0
 800ed62:	e777      	b.n	800ec54 <ip4_input+0x60>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ed64:	6873      	ldr	r3, [r6, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d0c9      	beq.n	800ecfe <ip4_input+0x10a>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d019      	beq.n	800eda2 <ip4_input+0x1ae>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ed6e:	4610      	mov	r0, r2
 800ed70:	4631      	mov	r1, r6
 800ed72:	f000 f8b7 	bl	800eee4 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ed76:	b9b0      	cbnz	r0, 800eda6 <ip4_input+0x1b2>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ed78:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800ed7c:	e7bf      	b.n	800ecfe <ip4_input+0x10a>
        icmp_input(p, inp);
 800ed7e:	4631      	mov	r1, r6
 800ed80:	4620      	mov	r0, r4
 800ed82:	f7ff fe53 	bl	800ea2c <icmp_input>
        break;
 800ed86:	e7a4      	b.n	800ecd2 <ip4_input+0xde>
        udp_input(p, inp);
 800ed88:	4631      	mov	r1, r6
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f7fe ffe2 	bl	800dd54 <udp_input>
        break;
 800ed90:	e79f      	b.n	800ecd2 <ip4_input+0xde>
        tcp_input(p, inp);
 800ed92:	4631      	mov	r1, r6
 800ed94:	4620      	mov	r0, r4
 800ed96:	f7fc feed 	bl	800bb74 <tcp_input>
        break;
 800ed9a:	e79a      	b.n	800ecd2 <ip4_input+0xde>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ed9c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800eda0:	e756      	b.n	800ec50 <ip4_input+0x5c>
 800eda2:	46b0      	mov	r8, r6
 800eda4:	e756      	b.n	800ec54 <ip4_input+0x60>
 800eda6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800edaa:	46b0      	mov	r8, r6
 800edac:	e752      	b.n	800ec54 <ip4_input+0x60>
 800edae:	bf00      	nop
 800edb0:	24020750 	.word	0x24020750
 800edb4:	24019c98 	.word	0x24019c98

0800edb8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800edb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edbc:	4604      	mov	r4, r0
 800edbe:	b083      	sub	sp, #12
 800edc0:	4699      	mov	r9, r3
 800edc2:	460f      	mov	r7, r1
 800edc4:	4616      	mov	r6, r2
 800edc6:	f89d a030 	ldrb.w	sl, [sp, #48]	@ 0x30
 800edca:	f89d b034 	ldrb.w	fp, [sp, #52]	@ 0x34
 800edce:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 800edd2:	f7f5 f97d 	bl	80040d0 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800edd6:	7ba3      	ldrb	r3, [r4, #14]
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d13d      	bne.n	800ee58 <ip4_output_if_src+0xa0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800eddc:	2e00      	cmp	r6, #0
 800edde:	d044      	beq.n	800ee6a <ip4_output_if_src+0xb2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ede0:	2114      	movs	r1, #20
 800ede2:	4620      	mov	r0, r4
 800ede4:	f7fa f99c 	bl	8009120 <pbuf_add_header>
 800ede8:	2800      	cmp	r0, #0
 800edea:	d159      	bne.n	800eea0 <ip4_output_if_src+0xe8>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800edec:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800edee:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800edf0:	2b13      	cmp	r3, #19
 800edf2:	d942      	bls.n	800ee7a <ip4_output_if_src+0xc2>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800edf4:	f885 9008 	strb.w	r9, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800edf8:	2245      	movs	r2, #69	@ 0x45
    IPH_PROTO_SET(iphdr, proto);
 800edfa:	f885 b009 	strb.w	fp, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800edfe:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ee00:	702a      	strb	r2, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800ee02:	f885 a001 	strb.w	sl, [r5, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 800ee06:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ee08:	8920      	ldrh	r0, [r4, #8]
 800ee0a:	f7f9 fb29 	bl	8008460 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ee0e:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 800eebc <ip4_output_if_src+0x104>
    IPH_OFFSET_SET(iphdr, 0);
 800ee12:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ee14:	8068      	strh	r0, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ee16:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 800ee1a:	71ab      	strb	r3, [r5, #6]
 800ee1c:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ee1e:	f7f9 fb1f 	bl	8008460 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ee22:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ee26:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800ee28:	3301      	adds	r3, #1
 800ee2a:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800ee2e:	b367      	cbz	r7, 800ee8a <ip4_output_if_src+0xd2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ee34:	2300      	movs	r3, #0
 800ee36:	72ab      	strb	r3, [r5, #10]
 800ee38:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ee3a:	f8b8 3024 	ldrh.w	r3, [r8, #36]	@ 0x24
 800ee3e:	b113      	cbz	r3, 800ee46 <ip4_output_if_src+0x8e>
 800ee40:	8922      	ldrh	r2, [r4, #8]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d824      	bhi.n	800ee90 <ip4_output_if_src+0xd8>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ee46:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ee4a:	4632      	mov	r2, r6
 800ee4c:	4621      	mov	r1, r4
 800ee4e:	4640      	mov	r0, r8
 800ee50:	4798      	blx	r3
}
 800ee52:	b003      	add	sp, #12
 800ee54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ee58:	4b13      	ldr	r3, [pc, #76]	@ (800eea8 <ip4_output_if_src+0xf0>)
 800ee5a:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800ee5e:	4913      	ldr	r1, [pc, #76]	@ (800eeac <ip4_output_if_src+0xf4>)
 800ee60:	4813      	ldr	r0, [pc, #76]	@ (800eeb0 <ip4_output_if_src+0xf8>)
 800ee62:	f001 f867 	bl	800ff34 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 800ee66:	2e00      	cmp	r6, #0
 800ee68:	d1ba      	bne.n	800ede0 <ip4_output_if_src+0x28>
    if (p->len < IP_HLEN) {
 800ee6a:	8963      	ldrh	r3, [r4, #10]
 800ee6c:	2b13      	cmp	r3, #19
 800ee6e:	d917      	bls.n	800eea0 <ip4_output_if_src+0xe8>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ee70:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 800ee72:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ee74:	691b      	ldr	r3, [r3, #16]
 800ee76:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800ee78:	e7df      	b.n	800ee3a <ip4_output_if_src+0x82>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ee7a:	4b0b      	ldr	r3, [pc, #44]	@ (800eea8 <ip4_output_if_src+0xf0>)
 800ee7c:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800ee80:	490c      	ldr	r1, [pc, #48]	@ (800eeb4 <ip4_output_if_src+0xfc>)
 800ee82:	480b      	ldr	r0, [pc, #44]	@ (800eeb0 <ip4_output_if_src+0xf8>)
 800ee84:	f001 f856 	bl	800ff34 <iprintf>
 800ee88:	e7b4      	b.n	800edf4 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ee8a:	4b0b      	ldr	r3, [pc, #44]	@ (800eeb8 <ip4_output_if_src+0x100>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	e7d0      	b.n	800ee32 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800ee90:	4632      	mov	r2, r6
 800ee92:	4641      	mov	r1, r8
 800ee94:	4620      	mov	r0, r4
 800ee96:	f000 fb8d 	bl	800f5b4 <ip4_frag>
}
 800ee9a:	b003      	add	sp, #12
 800ee9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 800eea0:	f06f 0001 	mvn.w	r0, #1
 800eea4:	e7d5      	b.n	800ee52 <ip4_output_if_src+0x9a>
 800eea6:	bf00      	nop
 800eea8:	08013ffc 	.word	0x08013ffc
 800eeac:	08014030 	.word	0x08014030
 800eeb0:	080110dc 	.word	0x080110dc
 800eeb4:	0801403c 	.word	0x0801403c
 800eeb8:	0801406c 	.word	0x0801406c
 800eebc:	240208a8 	.word	0x240208a8

0800eec0 <ip4_output_if>:
{
 800eec0:	b4f0      	push	{r4, r5, r6, r7}
 800eec2:	9c06      	ldr	r4, [sp, #24]
 800eec4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800eec8:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800eecc:	b11a      	cbz	r2, 800eed6 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800eece:	b109      	cbz	r1, 800eed4 <ip4_output_if+0x14>
 800eed0:	680f      	ldr	r7, [r1, #0]
 800eed2:	b907      	cbnz	r7, 800eed6 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800eed4:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800eed6:	9504      	str	r5, [sp, #16]
 800eed8:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 800eedc:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800eede:	f7ff bf6b 	b.w	800edb8 <ip4_output_if_src>
 800eee2:	bf00      	nop

0800eee4 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800eee4:	1e42      	subs	r2, r0, #1
{
 800eee6:	4603      	mov	r3, r0
  if ((~addr == IPADDR_ANY) ||
 800eee8:	3203      	adds	r2, #3
 800eeea:	d815      	bhi.n	800ef18 <ip4_addr_isbroadcast_u32+0x34>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800eeec:	f891 002d 	ldrb.w	r0, [r1, #45]	@ 0x2d
 800eef0:	f010 0002 	ands.w	r0, r0, #2
 800eef4:	d00f      	beq.n	800ef16 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800eef6:	684a      	ldr	r2, [r1, #4]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d00b      	beq.n	800ef14 <ip4_addr_isbroadcast_u32+0x30>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800eefc:	6889      	ldr	r1, [r1, #8]
 800eefe:	405a      	eors	r2, r3
 800ef00:	420a      	tst	r2, r1
 800ef02:	d107      	bne.n	800ef14 <ip4_addr_isbroadcast_u32+0x30>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ef04:	43c8      	mvns	r0, r1
 800ef06:	ea23 0301 	bic.w	r3, r3, r1
 800ef0a:	1a18      	subs	r0, r3, r0
 800ef0c:	fab0 f080 	clz	r0, r0
 800ef10:	0940      	lsrs	r0, r0, #5
 800ef12:	4770      	bx	lr
    return 0;
 800ef14:	2000      	movs	r0, #0
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 800ef16:	4770      	bx	lr
    return 1;
 800ef18:	2001      	movs	r0, #1
 800ef1a:	4770      	bx	lr

0800ef1c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ef1c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ef1e:	4604      	mov	r4, r0
 800ef20:	b148      	cbz	r0, 800ef36 <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800ef22:	6960      	ldr	r0, [r4, #20]
 800ef24:	b108      	cbz	r0, 800ef2a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800ef26:	f7fa f98d 	bl	8009244 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 800ef2a:	4621      	mov	r1, r4
 800ef2c:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 800ef2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800ef32:	f7f9 be7b 	b.w	8008c2c <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ef36:	4b04      	ldr	r3, [pc, #16]	@ (800ef48 <ipfrag_free_pbuf_custom+0x2c>)
 800ef38:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800ef3c:	4903      	ldr	r1, [pc, #12]	@ (800ef4c <ipfrag_free_pbuf_custom+0x30>)
 800ef3e:	4804      	ldr	r0, [pc, #16]	@ (800ef50 <ipfrag_free_pbuf_custom+0x34>)
 800ef40:	f000 fff8 	bl	800ff34 <iprintf>
 800ef44:	e7ed      	b.n	800ef22 <ipfrag_free_pbuf_custom+0x6>
 800ef46:	bf00      	nop
 800ef48:	08014070 	.word	0x08014070
 800ef4c:	080140ac 	.word	0x080140ac
 800ef50:	080110dc 	.word	0x080110dc

0800ef54 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ef54:	4281      	cmp	r1, r0
{
 800ef56:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef5a:	4606      	mov	r6, r0
 800ef5c:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ef5e:	d076      	beq.n	800f04e <ip_reass_free_complete_datagram+0xfa>
  if (prev != NULL) {
 800ef60:	b147      	cbz	r7, 800ef74 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	42b3      	cmp	r3, r6
 800ef66:	d005      	beq.n	800ef74 <ip_reass_free_complete_datagram+0x20>
 800ef68:	4b40      	ldr	r3, [pc, #256]	@ (800f06c <ip_reass_free_complete_datagram+0x118>)
 800ef6a:	22ad      	movs	r2, #173	@ 0xad
 800ef6c:	4940      	ldr	r1, [pc, #256]	@ (800f070 <ip_reass_free_complete_datagram+0x11c>)
 800ef6e:	4841      	ldr	r0, [pc, #260]	@ (800f074 <ip_reass_free_complete_datagram+0x120>)
 800ef70:	f000 ffe0 	bl	800ff34 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ef74:	6874      	ldr	r4, [r6, #4]
 800ef76:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 800ef78:	889a      	ldrh	r2, [r3, #4]
 800ef7a:	2a00      	cmp	r2, #0
 800ef7c:	d046      	beq.n	800f00c <ip_reass_free_complete_datagram+0xb8>
  u16_t pbufs_freed = 0;
 800ef7e:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ef82:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 800f06c <ip_reass_free_complete_datagram+0x118>
 800ef86:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 800f08c <ip_reass_free_complete_datagram+0x138>
 800ef8a:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 800f074 <ip_reass_free_complete_datagram+0x120>
 800ef8e:	e003      	b.n	800ef98 <ip_reass_free_complete_datagram+0x44>
    pbuf_free(pcur);
 800ef90:	4628      	mov	r0, r5
 800ef92:	f7fa f957 	bl	8009244 <pbuf_free>
  while (p != NULL) {
 800ef96:	b1b4      	cbz	r4, 800efc6 <ip_reass_free_complete_datagram+0x72>
    iprh = (struct ip_reass_helper *)p->payload;
 800ef98:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	4625      	mov	r5, r4
    p = iprh->next_pbuf;
 800ef9e:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 800efa0:	f7fa fac4 	bl	800952c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800efa4:	4458      	add	r0, fp
 800efa6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800efaa:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800efae:	dbef      	blt.n	800ef90 <ip_reass_free_complete_datagram+0x3c>
 800efb0:	4653      	mov	r3, sl
 800efb2:	22cc      	movs	r2, #204	@ 0xcc
 800efb4:	4649      	mov	r1, r9
 800efb6:	4640      	mov	r0, r8
 800efb8:	f000 ffbc 	bl	800ff34 <iprintf>
    pbuf_free(pcur);
 800efbc:	4628      	mov	r0, r5
 800efbe:	f7fa f941 	bl	8009244 <pbuf_free>
  while (p != NULL) {
 800efc2:	2c00      	cmp	r4, #0
 800efc4:	d1e8      	bne.n	800ef98 <ip_reass_free_complete_datagram+0x44>
  if (reassdatagrams == ipr) {
 800efc6:	4b2c      	ldr	r3, [pc, #176]	@ (800f078 <ip_reass_free_complete_datagram+0x124>)
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	4296      	cmp	r6, r2
 800efcc:	d03c      	beq.n	800f048 <ip_reass_free_complete_datagram+0xf4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800efce:	2f00      	cmp	r7, #0
 800efd0:	d044      	beq.n	800f05c <ip_reass_free_complete_datagram+0x108>
    prev->next = ipr->next;
 800efd2:	6833      	ldr	r3, [r6, #0]
 800efd4:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800efd6:	4c29      	ldr	r4, [pc, #164]	@ (800f07c <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 800efd8:	4631      	mov	r1, r6
 800efda:	2004      	movs	r0, #4
 800efdc:	f7f9 fe26 	bl	8008c2c <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800efe0:	8823      	ldrh	r3, [r4, #0]
 800efe2:	455b      	cmp	r3, fp
 800efe4:	d305      	bcc.n	800eff2 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800efe6:	eba3 030b 	sub.w	r3, r3, fp
}
 800efea:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800efec:	8023      	strh	r3, [r4, #0]
}
 800efee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800eff2:	4b1e      	ldr	r3, [pc, #120]	@ (800f06c <ip_reass_free_complete_datagram+0x118>)
 800eff4:	22d2      	movs	r2, #210	@ 0xd2
 800eff6:	4922      	ldr	r1, [pc, #136]	@ (800f080 <ip_reass_free_complete_datagram+0x12c>)
 800eff8:	481e      	ldr	r0, [pc, #120]	@ (800f074 <ip_reass_free_complete_datagram+0x120>)
 800effa:	f000 ff9b 	bl	800ff34 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800effe:	8823      	ldrh	r3, [r4, #0]
}
 800f000:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f002:	eba3 030b 	sub.w	r3, r3, fp
 800f006:	8023      	strh	r3, [r4, #0]
}
 800f008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 800f00c:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f00e:	6930      	ldr	r0, [r6, #16]
 800f010:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 800f012:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f014:	68f5      	ldr	r5, [r6, #12]
 800f016:	68b2      	ldr	r2, [r6, #8]
 800f018:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f01a:	4620      	mov	r0, r4
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f01c:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f01e:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f020:	601a      	str	r2, [r3, #0]
 800f022:	605d      	str	r5, [r3, #4]
 800f024:	69b2      	ldr	r2, [r6, #24]
 800f026:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f028:	f7ff fdac 	bl	800eb84 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f02c:	4620      	mov	r0, r4
 800f02e:	f7fa fa7d 	bl	800952c <pbuf_clen>
 800f032:	4683      	mov	fp, r0
    pbuf_free(p);
 800f034:	4620      	mov	r0, r4
 800f036:	f7fa f905 	bl	8009244 <pbuf_free>
  p = ipr->p;
 800f03a:	6874      	ldr	r4, [r6, #4]
  while (p != NULL) {
 800f03c:	2c00      	cmp	r4, #0
 800f03e:	d1a0      	bne.n	800ef82 <ip_reass_free_complete_datagram+0x2e>
  if (reassdatagrams == ipr) {
 800f040:	4b0d      	ldr	r3, [pc, #52]	@ (800f078 <ip_reass_free_complete_datagram+0x124>)
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	4296      	cmp	r6, r2
 800f046:	d1c2      	bne.n	800efce <ip_reass_free_complete_datagram+0x7a>
    reassdatagrams = ipr->next;
 800f048:	6832      	ldr	r2, [r6, #0]
 800f04a:	601a      	str	r2, [r3, #0]
 800f04c:	e7c3      	b.n	800efd6 <ip_reass_free_complete_datagram+0x82>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f04e:	4b07      	ldr	r3, [pc, #28]	@ (800f06c <ip_reass_free_complete_datagram+0x118>)
 800f050:	22ab      	movs	r2, #171	@ 0xab
 800f052:	490c      	ldr	r1, [pc, #48]	@ (800f084 <ip_reass_free_complete_datagram+0x130>)
 800f054:	4807      	ldr	r0, [pc, #28]	@ (800f074 <ip_reass_free_complete_datagram+0x120>)
 800f056:	f000 ff6d 	bl	800ff34 <iprintf>
 800f05a:	e781      	b.n	800ef60 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f05c:	4b03      	ldr	r3, [pc, #12]	@ (800f06c <ip_reass_free_complete_datagram+0x118>)
 800f05e:	f240 1245 	movw	r2, #325	@ 0x145
 800f062:	4909      	ldr	r1, [pc, #36]	@ (800f088 <ip_reass_free_complete_datagram+0x134>)
 800f064:	4803      	ldr	r0, [pc, #12]	@ (800f074 <ip_reass_free_complete_datagram+0x120>)
 800f066:	f000 ff65 	bl	800ff34 <iprintf>
 800f06a:	e7b2      	b.n	800efd2 <ip_reass_free_complete_datagram+0x7e>
 800f06c:	08014070 	.word	0x08014070
 800f070:	080140c4 	.word	0x080140c4
 800f074:	080110dc 	.word	0x080110dc
 800f078:	240208ac 	.word	0x240208ac
 800f07c:	240208aa 	.word	0x240208aa
 800f080:	08014114 	.word	0x08014114
 800f084:	080140b8 	.word	0x080140b8
 800f088:	080140f8 	.word	0x080140f8
 800f08c:	080140d8 	.word	0x080140d8

0800f090 <ip_reass_remove_oldest_datagram>:
{
 800f090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 800f094:	2700      	movs	r7, #0
 800f096:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 800f108 <ip_reass_remove_oldest_datagram+0x78>
{
 800f09a:	4605      	mov	r5, r0
 800f09c:	460e      	mov	r6, r1
    r = reassdatagrams;
 800f09e:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 800f0a2:	b1f3      	cbz	r3, 800f0e2 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 800f0a4:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f0a6:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 800f0aa:	4621      	mov	r1, r4
    prev = NULL;
 800f0ac:	46a4      	mov	ip, r4
    oldest = NULL;
 800f0ae:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f0b0:	695a      	ldr	r2, [r3, #20]
 800f0b2:	4572      	cmp	r2, lr
 800f0b4:	d018      	beq.n	800f0e8 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 800f0b6:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800f0b8:	b318      	cbz	r0, 800f102 <ip_reass_remove_oldest_datagram+0x72>
        } else if (r->timer <= oldest->timer) {
 800f0ba:	7fc2      	ldrb	r2, [r0, #31]
 800f0bc:	f893 901f 	ldrb.w	r9, [r3, #31]
 800f0c0:	4591      	cmp	r9, r2
 800f0c2:	bf9c      	itt	ls
 800f0c4:	4661      	movls	r1, ip
 800f0c6:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800f0c8:	681a      	ldr	r2, [r3, #0]
 800f0ca:	469c      	mov	ip, r3
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	2a00      	cmp	r2, #0
 800f0d0:	d1ee      	bne.n	800f0b0 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 800f0d2:	b110      	cbz	r0, 800f0da <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f0d4:	f7ff ff3e 	bl	800ef54 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800f0d8:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f0da:	42b7      	cmp	r7, r6
 800f0dc:	da01      	bge.n	800f0e2 <ip_reass_remove_oldest_datagram+0x52>
 800f0de:	2c01      	cmp	r4, #1
 800f0e0:	dcdd      	bgt.n	800f09e <ip_reass_remove_oldest_datagram+0xe>
}
 800f0e2:	4638      	mov	r0, r7
 800f0e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f0e8:	699a      	ldr	r2, [r3, #24]
 800f0ea:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f0ee:	454a      	cmp	r2, r9
 800f0f0:	d1e1      	bne.n	800f0b6 <ip_reass_remove_oldest_datagram+0x26>
 800f0f2:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800f0f6:	88aa      	ldrh	r2, [r5, #4]
 800f0f8:	4591      	cmp	r9, r2
 800f0fa:	d0e5      	beq.n	800f0c8 <ip_reass_remove_oldest_datagram+0x38>
        other_datagrams++;
 800f0fc:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800f0fe:	2800      	cmp	r0, #0
 800f100:	d1db      	bne.n	800f0ba <ip_reass_remove_oldest_datagram+0x2a>
 800f102:	4661      	mov	r1, ip
 800f104:	4618      	mov	r0, r3
 800f106:	e7df      	b.n	800f0c8 <ip_reass_remove_oldest_datagram+0x38>
 800f108:	240208ac 	.word	0x240208ac

0800f10c <ip_reass_tmr>:
{
 800f10c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800f10e:	4b0a      	ldr	r3, [pc, #40]	@ (800f138 <ip_reass_tmr+0x2c>)
 800f110:	681c      	ldr	r4, [r3, #0]
  while (r != NULL) {
 800f112:	b14c      	cbz	r4, 800f128 <ip_reass_tmr+0x1c>
  struct ip_reassdata *r, *prev = NULL;
 800f114:	2500      	movs	r5, #0
    if (r->timer > 0) {
 800f116:	7fe3      	ldrb	r3, [r4, #31]
 800f118:	4620      	mov	r0, r4
      r = r->next;
 800f11a:	6824      	ldr	r4, [r4, #0]
      r->timer--;
 800f11c:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 800f11e:	b123      	cbz	r3, 800f12a <ip_reass_tmr+0x1e>
 800f120:	4605      	mov	r5, r0
      r->timer--;
 800f122:	77c2      	strb	r2, [r0, #31]
  while (r != NULL) {
 800f124:	2c00      	cmp	r4, #0
 800f126:	d1f6      	bne.n	800f116 <ip_reass_tmr+0xa>
}
 800f128:	bd38      	pop	{r3, r4, r5, pc}
      ip_reass_free_complete_datagram(tmp, prev);
 800f12a:	4629      	mov	r1, r5
 800f12c:	f7ff ff12 	bl	800ef54 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f130:	2c00      	cmp	r4, #0
 800f132:	d1f0      	bne.n	800f116 <ip_reass_tmr+0xa>
 800f134:	e7f8      	b.n	800f128 <ip_reass_tmr+0x1c>
 800f136:	bf00      	nop
 800f138:	240208ac 	.word	0x240208ac

0800f13c <ip4_reass>:
{
 800f13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 800f140:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
 800f144:	b085      	sub	sp, #20
 800f146:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f148:	f899 3000 	ldrb.w	r3, [r9]
 800f14c:	f003 030f 	and.w	r3, r3, #15
 800f150:	2b05      	cmp	r3, #5
 800f152:	f040 8089 	bne.w	800f268 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f156:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800f15a:	f7f9 f981 	bl	8008460 <lwip_htons>
 800f15e:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f160:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 800f164:	f7f9 f97c 	bl	8008460 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800f168:	f899 3000 	ldrb.w	r3, [r9]
 800f16c:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800f170:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800f174:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800f178:	d376      	bcc.n	800f268 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 800f17a:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f17c:	f8df 8310 	ldr.w	r8, [pc, #784]	@ 800f490 <ip4_reass+0x354>
  clen = pbuf_clen(p);
 800f180:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 800f182:	b29b      	uxth	r3, r3
 800f184:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800f186:	f7fa f9d1 	bl	800952c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f18a:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 800f18e:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f190:	4403      	add	r3, r0
 800f192:	2b0a      	cmp	r3, #10
 800f194:	f300 80e7 	bgt.w	800f366 <ip4_reass+0x22a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f198:	f8df a2f8 	ldr.w	sl, [pc, #760]	@ 800f494 <ip4_reass+0x358>
 800f19c:	f8da 4000 	ldr.w	r4, [sl]
 800f1a0:	2c00      	cmp	r4, #0
 800f1a2:	f000 80ee 	beq.w	800f382 <ip4_reass+0x246>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f1a6:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800f1aa:	e003      	b.n	800f1b4 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f1ac:	6824      	ldr	r4, [r4, #0]
 800f1ae:	2c00      	cmp	r4, #0
 800f1b0:	f000 80e7 	beq.w	800f382 <ip4_reass+0x246>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f1b4:	6963      	ldr	r3, [r4, #20]
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d1f8      	bne.n	800f1ac <ip4_reass+0x70>
 800f1ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f1be:	69a1      	ldr	r1, [r4, #24]
 800f1c0:	4299      	cmp	r1, r3
 800f1c2:	d1f3      	bne.n	800f1ac <ip4_reass+0x70>
 800f1c4:	89a1      	ldrh	r1, [r4, #12]
 800f1c6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800f1ca:	4299      	cmp	r1, r3
 800f1cc:	d1ee      	bne.n	800f1ac <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f1ce:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800f1d2:	f7f9 f945 	bl	8008460 <lwip_htons>
 800f1d6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800f1da:	2800      	cmp	r0, #0
 800f1dc:	f000 80ab 	beq.w	800f336 <ip4_reass+0x1fa>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f1e0:	f8b9 3006 	ldrh.w	r3, [r9, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f1e4:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 800f1e8:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f1ec:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 800f1f0:	9302      	str	r3, [sp, #8]
 800f1f2:	d108      	bne.n	800f206 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 800f1f4:	9b01      	ldr	r3, [sp, #4]
 800f1f6:	18f3      	adds	r3, r6, r3
 800f1f8:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f1fa:	429e      	cmp	r6, r3
 800f1fc:	d812      	bhi.n	800f224 <ip4_reass+0xe8>
 800f1fe:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800f202:	4293      	cmp	r3, r2
 800f204:	d80e      	bhi.n	800f224 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f206:	f8d5 9004 	ldr.w	r9, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f20a:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 800f20e:	f7f9 f927 	bl	8008460 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800f212:	f899 3000 	ldrb.w	r3, [r9]
 800f216:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800f21a:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800f21e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800f222:	d229      	bcs.n	800f278 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 800f224:	6866      	ldr	r6, [r4, #4]
 800f226:	b9fe      	cbnz	r6, 800f268 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f228:	f8da 3000 	ldr.w	r3, [sl]
 800f22c:	42a3      	cmp	r3, r4
 800f22e:	d014      	beq.n	800f25a <ip4_reass+0x11e>
 800f230:	4b93      	ldr	r3, [pc, #588]	@ (800f480 <ip4_reass+0x344>)
 800f232:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800f236:	4993      	ldr	r1, [pc, #588]	@ (800f484 <ip4_reass+0x348>)
 800f238:	4893      	ldr	r0, [pc, #588]	@ (800f488 <ip4_reass+0x34c>)
 800f23a:	f000 fe7b 	bl	800ff34 <iprintf>
  if (reassdatagrams == ipr) {
 800f23e:	f8da 3000 	ldr.w	r3, [sl]
 800f242:	429c      	cmp	r4, r3
 800f244:	d009      	beq.n	800f25a <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f246:	4b8e      	ldr	r3, [pc, #568]	@ (800f480 <ip4_reass+0x344>)
 800f248:	f240 1245 	movw	r2, #325	@ 0x145
 800f24c:	498f      	ldr	r1, [pc, #572]	@ (800f48c <ip4_reass+0x350>)
 800f24e:	488e      	ldr	r0, [pc, #568]	@ (800f488 <ip4_reass+0x34c>)
 800f250:	f000 fe70 	bl	800ff34 <iprintf>
    prev->next = ipr->next;
 800f254:	6823      	ldr	r3, [r4, #0]
 800f256:	6033      	str	r3, [r6, #0]
 800f258:	deff      	udf	#255	@ 0xff
    reassdatagrams = ipr->next;
 800f25a:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 800f25c:	4621      	mov	r1, r4
 800f25e:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 800f260:	f8ca 3000 	str.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
 800f264:	f7f9 fce2 	bl	8008c2c <memp_free>
  pbuf_free(p);
 800f268:	4628      	mov	r0, r5
 800f26a:	f7f9 ffeb 	bl	8009244 <pbuf_free>
  return NULL;
 800f26e:	2600      	movs	r6, #0
}
 800f270:	4630      	mov	r0, r6
 800f272:	b005      	add	sp, #20
 800f274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 800f278:	1a83      	subs	r3, r0, r2
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f27a:	f8b9 0006 	ldrh.w	r0, [r9, #6]
  len = (u16_t)(len - hlen);
 800f27e:	fa1f f983 	uxth.w	r9, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f282:	f7f9 f8ed 	bl	8008460 <lwip_htons>
 800f286:	f3c0 020c 	ubfx	r2, r0, #0, #13
 800f28a:	00d2      	lsls	r2, r2, #3
  iprh->end = (u16_t)(offset + len);
 800f28c:	eb09 0302 	add.w	r3, r9, r2
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f290:	f8d5 9004 	ldr.w	r9, [r5, #4]
  iprh->end = (u16_t)(offset + len);
 800f294:	f8a9 3006 	strh.w	r3, [r9, #6]
 800f298:	b29b      	uxth	r3, r3
  iprh->start = offset;
 800f29a:	f8a9 2004 	strh.w	r2, [r9, #4]
  iprh->end = (u16_t)(offset + len);
 800f29e:	4619      	mov	r1, r3
 800f2a0:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 800f2a2:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 800f2a4:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 800f2a6:	f889 3000 	strb.w	r3, [r9]
 800f2aa:	f889 3001 	strb.w	r3, [r9, #1]
 800f2ae:	f889 3002 	strb.w	r3, [r9, #2]
 800f2b2:	f889 3003 	strb.w	r3, [r9, #3]
  if (iprh->end < offset) {
 800f2b6:	d8b5      	bhi.n	800f224 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 800f2b8:	6861      	ldr	r1, [r4, #4]
 800f2ba:	2900      	cmp	r1, #0
 800f2bc:	f000 80d4 	beq.w	800f468 <ip4_reass+0x32c>
  int valid = 1;
 800f2c0:	f04f 0b01 	mov.w	fp, #1
 800f2c4:	4694      	mov	ip, r2
 800f2c6:	e00e      	b.n	800f2e6 <ip4_reass+0x1aa>
    } else if (iprh->start == iprh_tmp->start) {
 800f2c8:	d0ce      	beq.n	800f268 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 800f2ca:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 800f2ce:	45f4      	cmp	ip, lr
 800f2d0:	d3ca      	bcc.n	800f268 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 800f2d2:	b122      	cbz	r2, 800f2de <ip4_reass+0x1a2>
        if (iprh_prev->end != iprh_tmp->start) {
 800f2d4:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 800f2d6:	4282      	cmp	r2, r0
 800f2d8:	bf18      	it	ne
 800f2da:	f04f 0b00 	movne.w	fp, #0
    q = iprh_tmp->next_pbuf;
 800f2de:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 800f2e0:	2900      	cmp	r1, #0
 800f2e2:	f000 80a6 	beq.w	800f432 <ip4_reass+0x2f6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800f2ea:	8898      	ldrh	r0, [r3, #4]
 800f2ec:	4584      	cmp	ip, r0
 800f2ee:	d2eb      	bcs.n	800f2c8 <ip4_reass+0x18c>
      iprh->next_pbuf = q;
 800f2f0:	4613      	mov	r3, r2
 800f2f2:	f8c9 1000 	str.w	r1, [r9]
 800f2f6:	4662      	mov	r2, ip
 800f2f8:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d064      	beq.n	800f3c8 <ip4_reass+0x28c>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f2fe:	88db      	ldrh	r3, [r3, #6]
 800f300:	429a      	cmp	r2, r3
 800f302:	d3b1      	bcc.n	800f268 <ip4_reass+0x12c>
 800f304:	9903      	ldr	r1, [sp, #12]
 800f306:	4281      	cmp	r1, r0
 800f308:	d8ae      	bhi.n	800f268 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 800f30a:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 800f30c:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 800f310:	d05f      	beq.n	800f3d2 <ip4_reass+0x296>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f312:	f8b8 2000 	ldrh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f316:	9902      	ldr	r1, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f318:	443a      	add	r2, r7
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f31a:	7fa3      	ldrb	r3, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f31c:	b292      	uxth	r2, r2
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f31e:	2900      	cmp	r1, #0
 800f320:	f000 80ab 	beq.w	800f47a <ip4_reass+0x33e>
 800f324:	07d9      	lsls	r1, r3, #31
 800f326:	f100 8122 	bmi.w	800f56e <ip4_reass+0x432>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f32a:	f8b8 3000 	ldrh.w	r3, [r8]
 800f32e:	443b      	add	r3, r7
 800f330:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 800f334:	e79b      	b.n	800f26e <ip4_reass+0x132>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f336:	89e0      	ldrh	r0, [r4, #14]
 800f338:	f7f9 f892 	bl	8008460 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f33c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800f340:	2800      	cmp	r0, #0
 800f342:	f43f af4d 	beq.w	800f1e0 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f346:	f8d9 3000 	ldr.w	r3, [r9]
 800f34a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800f34e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800f352:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800f356:	60a3      	str	r3, [r4, #8]
 800f358:	60e0      	str	r0, [r4, #12]
 800f35a:	6121      	str	r1, [r4, #16]
 800f35c:	6162      	str	r2, [r4, #20]
 800f35e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f362:	61a3      	str	r3, [r4, #24]
 800f364:	e73c      	b.n	800f1e0 <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f366:	4601      	mov	r1, r0
 800f368:	4648      	mov	r0, r9
 800f36a:	f7ff fe91 	bl	800f090 <ip_reass_remove_oldest_datagram>
 800f36e:	2800      	cmp	r0, #0
 800f370:	f43f af7a 	beq.w	800f268 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f374:	f8b8 3000 	ldrh.w	r3, [r8]
 800f378:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f37a:	2b0a      	cmp	r3, #10
 800f37c:	f77f af0c 	ble.w	800f198 <ip4_reass+0x5c>
 800f380:	e772      	b.n	800f268 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f382:	2004      	movs	r0, #4
 800f384:	f7f9 fc0c 	bl	8008ba0 <memp_malloc>
  if (ipr == NULL) {
 800f388:	4604      	mov	r4, r0
 800f38a:	b178      	cbz	r0, 800f3ac <ip4_reass+0x270>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f38c:	2300      	movs	r3, #0
 800f38e:	61e3      	str	r3, [r4, #28]
 800f390:	60a3      	str	r3, [r4, #8]
 800f392:	60e3      	str	r3, [r4, #12]
 800f394:	6123      	str	r3, [r4, #16]
 800f396:	6163      	str	r3, [r4, #20]
 800f398:	61a3      	str	r3, [r4, #24]
 800f39a:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 800f39c:	f8da 3000 	ldr.w	r3, [sl]
  reassdatagrams = ipr;
 800f3a0:	f8ca 4000 	str.w	r4, [sl]
  ipr->next = reassdatagrams;
 800f3a4:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 800f3a6:	230f      	movs	r3, #15
 800f3a8:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f3aa:	e7cc      	b.n	800f346 <ip4_reass+0x20a>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f3ac:	4639      	mov	r1, r7
 800f3ae:	4648      	mov	r0, r9
 800f3b0:	f7ff fe6e 	bl	800f090 <ip_reass_remove_oldest_datagram>
 800f3b4:	4287      	cmp	r7, r0
 800f3b6:	f73f af57 	bgt.w	800f268 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f3ba:	2004      	movs	r0, #4
 800f3bc:	f7f9 fbf0 	bl	8008ba0 <memp_malloc>
    if (ipr == NULL)
 800f3c0:	4604      	mov	r4, r0
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	d1e2      	bne.n	800f38c <ip4_reass+0x250>
 800f3c6:	e74f      	b.n	800f268 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 800f3c8:	9b03      	ldr	r3, [sp, #12]
 800f3ca:	4283      	cmp	r3, r0
 800f3cc:	f63f af4c 	bhi.w	800f268 <ip4_reass+0x12c>
        ipr->p = new_p;
 800f3d0:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f3d2:	9b02      	ldr	r3, [sp, #8]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d03b      	beq.n	800f450 <ip4_reass+0x314>
 800f3d8:	7fa3      	ldrb	r3, [r4, #30]
 800f3da:	07db      	lsls	r3, r3, #31
 800f3dc:	d5a5      	bpl.n	800f32a <ip4_reass+0x1ee>
    if (valid) {
 800f3de:	f1bb 0f00 	cmp.w	fp, #0
 800f3e2:	d0a2      	beq.n	800f32a <ip4_reass+0x1ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f3e4:	6862      	ldr	r2, [r4, #4]
 800f3e6:	2a00      	cmp	r2, #0
 800f3e8:	d09f      	beq.n	800f32a <ip4_reass+0x1ee>
 800f3ea:	6851      	ldr	r1, [r2, #4]
 800f3ec:	888b      	ldrh	r3, [r1, #4]
 800f3ee:	b97b      	cbnz	r3, 800f410 <ip4_reass+0x2d4>
        q = iprh->next_pbuf;
 800f3f0:	f8d9 3000 	ldr.w	r3, [r9]
        while (q != NULL) {
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	f000 80bd 	beq.w	800f574 <ip4_reass+0x438>
 800f3fa:	464a      	mov	r2, r9
 800f3fc:	e002      	b.n	800f404 <ip4_reass+0x2c8>
          q = iprh->next_pbuf;
 800f3fe:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 800f400:	2b00      	cmp	r3, #0
 800f402:	d049      	beq.n	800f498 <ip4_reass+0x35c>
          iprh = (struct ip_reass_helper *)q->payload;
 800f404:	4610      	mov	r0, r2
 800f406:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800f408:	88c0      	ldrh	r0, [r0, #6]
 800f40a:	8893      	ldrh	r3, [r2, #4]
 800f40c:	4298      	cmp	r0, r3
 800f40e:	d0f6      	beq.n	800f3fe <ip4_reass+0x2c2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f410:	f8b8 3000 	ldrh.w	r3, [r8]
 800f414:	443b      	add	r3, r7
 800f416:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 800f41a:	9b02      	ldr	r3, [sp, #8]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	f47f af26 	bne.w	800f26e <ip4_reass+0x132>
 800f422:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 800f424:	9a01      	ldr	r2, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f426:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 800f42a:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f42c:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800f42e:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f430:	e71d      	b.n	800f26e <ip4_reass+0x132>
      if (iprh_prev->end != iprh->start) {
 800f432:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 800f434:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f436:	d0cc      	beq.n	800f3d2 <ip4_reass+0x296>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f438:	f8b8 2000 	ldrh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f43c:	9902      	ldr	r1, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f43e:	443a      	add	r2, r7
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f440:	7fa3      	ldrb	r3, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f442:	b292      	uxth	r2, r2
 800f444:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f448:	2900      	cmp	r1, #0
 800f44a:	f47f af10 	bne.w	800f26e <ip4_reass+0x132>
 800f44e:	e7e9      	b.n	800f424 <ip4_reass+0x2e8>
    if (valid) {
 800f450:	f1bb 0f00 	cmp.w	fp, #0
 800f454:	d002      	beq.n	800f45c <ip4_reass+0x320>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f456:	6862      	ldr	r2, [r4, #4]
 800f458:	2a00      	cmp	r2, #0
 800f45a:	d1c6      	bne.n	800f3ea <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f45c:	f8b8 3000 	ldrh.w	r3, [r8]
 800f460:	443b      	add	r3, r7
 800f462:	f8a8 3000 	strh.w	r3, [r8]
 800f466:	e7dc      	b.n	800f422 <ip4_reass+0x2e6>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f468:	9b02      	ldr	r3, [sp, #8]
      ipr->p = new_p;
 800f46a:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f46c:	b11b      	cbz	r3, 800f476 <ip4_reass+0x33a>
 800f46e:	7fa3      	ldrb	r3, [r4, #30]
 800f470:	07da      	lsls	r2, r3, #31
 800f472:	f57f af5a 	bpl.w	800f32a <ip4_reass+0x1ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f476:	6862      	ldr	r2, [r4, #4]
 800f478:	e7b7      	b.n	800f3ea <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f47a:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last) {
 800f47e:	e7d1      	b.n	800f424 <ip4_reass+0x2e8>
 800f480:	08014070 	.word	0x08014070
 800f484:	08014188 	.word	0x08014188
 800f488:	080110dc 	.word	0x080110dc
 800f48c:	080140f8 	.word	0x080140f8
 800f490:	240208aa 	.word	0x240208aa
 800f494:	240208ac 	.word	0x240208ac
          LWIP_ASSERT("sanity check",
 800f498:	4291      	cmp	r1, r2
 800f49a:	4691      	mov	r9, r2
 800f49c:	d06c      	beq.n	800f578 <ip4_reass+0x43c>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f49e:	f8d9 3000 	ldr.w	r3, [r9]
 800f4a2:	b133      	cbz	r3, 800f4b2 <ip4_reass+0x376>
 800f4a4:	4b3d      	ldr	r3, [pc, #244]	@ (800f59c <ip4_reass+0x460>)
 800f4a6:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800f4aa:	493d      	ldr	r1, [pc, #244]	@ (800f5a0 <ip4_reass+0x464>)
 800f4ac:	483d      	ldr	r0, [pc, #244]	@ (800f5a4 <ip4_reass+0x468>)
 800f4ae:	f000 fd41 	bl	800ff34 <iprintf>
 800f4b2:	6862      	ldr	r2, [r4, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f4b4:	f8b8 3000 	ldrh.w	r3, [r8]
 800f4b8:	443b      	add	r3, r7
 800f4ba:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 800f4be:	9b02      	ldr	r3, [sp, #8]
 800f4c0:	b933      	cbnz	r3, 800f4d0 <ip4_reass+0x394>
    u16_t datagram_len = (u16_t)(offset + len);
 800f4c2:	9b01      	ldr	r3, [sp, #4]
 800f4c4:	441e      	add	r6, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f4c6:	7fa3      	ldrb	r3, [r4, #30]
 800f4c8:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 800f4cc:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f4ce:	77a3      	strb	r3, [r4, #30]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f4d0:	6856      	ldr	r6, [r2, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f4d2:	8ba0      	ldrh	r0, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f4d4:	68a3      	ldr	r3, [r4, #8]
 800f4d6:	68e5      	ldr	r5, [r4, #12]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f4d8:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f4da:	6921      	ldr	r1, [r4, #16]
 800f4dc:	6962      	ldr	r2, [r4, #20]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f4de:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f4e0:	6075      	str	r5, [r6, #4]
 800f4e2:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f4e4:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f4e6:	60f2      	str	r2, [r6, #12]
 800f4e8:	6033      	str	r3, [r6, #0]
 800f4ea:	69a3      	ldr	r3, [r4, #24]
 800f4ec:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f4ee:	f7f8 ffb7 	bl	8008460 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800f4f2:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f4f4:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f4f6:	71b3      	strb	r3, [r6, #6]
 800f4f8:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f4fa:	72b3      	strb	r3, [r6, #10]
 800f4fc:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 800f4fe:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 800f500:	b15d      	cbz	r5, 800f51a <ip4_reass+0x3de>
      iprh = (struct ip_reass_helper *)r->payload;
 800f502:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 800f504:	4628      	mov	r0, r5
 800f506:	2114      	movs	r1, #20
 800f508:	f7f9 fe3a 	bl	8009180 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f50c:	4629      	mov	r1, r5
 800f50e:	4630      	mov	r0, r6
 800f510:	f7fa f834 	bl	800957c <pbuf_cat>
      r = iprh->next_pbuf;
 800f514:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 800f516:	2d00      	cmp	r5, #0
 800f518:	d1f3      	bne.n	800f502 <ip4_reass+0x3c6>
    if (ipr == reassdatagrams) {
 800f51a:	f8da 5000 	ldr.w	r5, [sl]
 800f51e:	42a5      	cmp	r5, r4
 800f520:	d005      	beq.n	800f52e <ip4_reass+0x3f2>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f522:	b38d      	cbz	r5, 800f588 <ip4_reass+0x44c>
        if (ipr_prev->next == ipr) {
 800f524:	682b      	ldr	r3, [r5, #0]
 800f526:	42a3      	cmp	r3, r4
 800f528:	d014      	beq.n	800f554 <ip4_reass+0x418>
 800f52a:	461d      	mov	r5, r3
 800f52c:	e7f9      	b.n	800f522 <ip4_reass+0x3e6>
    reassdatagrams = ipr->next;
 800f52e:	6823      	ldr	r3, [r4, #0]
 800f530:	f8ca 3000 	str.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
 800f534:	4621      	mov	r1, r4
 800f536:	2004      	movs	r0, #4
 800f538:	f7f9 fb78 	bl	8008c2c <memp_free>
    clen = pbuf_clen(p);
 800f53c:	4630      	mov	r0, r6
 800f53e:	f7f9 fff5 	bl	800952c <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f542:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 800f546:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f548:	4283      	cmp	r3, r0
 800f54a:	d306      	bcc.n	800f55a <ip4_reass+0x41e>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f54c:	1b1b      	subs	r3, r3, r4
 800f54e:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 800f552:	e68d      	b.n	800f270 <ip4_reass+0x134>
    prev->next = ipr->next;
 800f554:	6823      	ldr	r3, [r4, #0]
 800f556:	602b      	str	r3, [r5, #0]
 800f558:	e7ec      	b.n	800f534 <ip4_reass+0x3f8>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f55a:	4b10      	ldr	r3, [pc, #64]	@ (800f59c <ip4_reass+0x460>)
 800f55c:	f240 229b 	movw	r2, #667	@ 0x29b
 800f560:	4911      	ldr	r1, [pc, #68]	@ (800f5a8 <ip4_reass+0x46c>)
 800f562:	4810      	ldr	r0, [pc, #64]	@ (800f5a4 <ip4_reass+0x468>)
 800f564:	f000 fce6 	bl	800ff34 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f568:	f8b8 3000 	ldrh.w	r3, [r8]
 800f56c:	e7ee      	b.n	800f54c <ip4_reass+0x410>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f56e:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last) {
 800f572:	e67c      	b.n	800f26e <ip4_reass+0x132>
          LWIP_ASSERT("sanity check",
 800f574:	4589      	cmp	r9, r1
 800f576:	d19d      	bne.n	800f4b4 <ip4_reass+0x378>
 800f578:	4b08      	ldr	r3, [pc, #32]	@ (800f59c <ip4_reass+0x460>)
 800f57a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f57e:	490b      	ldr	r1, [pc, #44]	@ (800f5ac <ip4_reass+0x470>)
 800f580:	4808      	ldr	r0, [pc, #32]	@ (800f5a4 <ip4_reass+0x468>)
 800f582:	f000 fcd7 	bl	800ff34 <iprintf>
 800f586:	e78a      	b.n	800f49e <ip4_reass+0x362>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f588:	4b04      	ldr	r3, [pc, #16]	@ (800f59c <ip4_reass+0x460>)
 800f58a:	f240 1245 	movw	r2, #325	@ 0x145
 800f58e:	4908      	ldr	r1, [pc, #32]	@ (800f5b0 <ip4_reass+0x474>)
 800f590:	4804      	ldr	r0, [pc, #16]	@ (800f5a4 <ip4_reass+0x468>)
 800f592:	f000 fccf 	bl	800ff34 <iprintf>
    prev->next = ipr->next;
 800f596:	6823      	ldr	r3, [r4, #0]
 800f598:	602b      	str	r3, [r5, #0]
 800f59a:	deff      	udf	#255	@ 0xff
 800f59c:	08014070 	.word	0x08014070
 800f5a0:	08014148 	.word	0x08014148
 800f5a4:	080110dc 	.word	0x080110dc
 800f5a8:	0801416c 	.word	0x0801416c
 800f5ac:	08014138 	.word	0x08014138
 800f5b0:	080140f8 	.word	0x080140f8

0800f5b4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f5b8:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
{
 800f5ba:	b08d      	sub	sp, #52	@ 0x34
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f5bc:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 800f5c0:	4681      	mov	r9, r0
 800f5c2:	9107      	str	r1, [sp, #28]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f5c4:	f1b3 0114 	subs.w	r1, r3, #20
{
 800f5c8:	920a      	str	r2, [sp, #40]	@ 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f5ca:	bf48      	it	mi
 800f5cc:	f1a3 010d 	submi.w	r1, r3, #13
 800f5d0:	f3c1 03cf 	ubfx	r3, r1, #3, #16
 800f5d4:	9306      	str	r3, [sp, #24]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f5d6:	f89a 3000 	ldrb.w	r3, [sl]
 800f5da:	f003 030f 	and.w	r3, r3, #15
 800f5de:	2b05      	cmp	r3, #5
 800f5e0:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800f5e4:	f040 80dd 	bne.w	800f7a2 <ip4_frag+0x1ee>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f5e8:	8943      	ldrh	r3, [r0, #10]
 800f5ea:	2b13      	cmp	r3, #19
 800f5ec:	f240 80d2 	bls.w	800f794 <ip4_frag+0x1e0>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f5f0:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800f5f4:	f7f8 ff34 	bl	8008460 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f5f8:	f8b9 c008 	ldrh.w	ip, [r9, #8]
  ofo = tmp & IP_OFFMASK;
 800f5fc:	f3c0 030c 	ubfx	r3, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 800f600:	f1ac 0c14 	sub.w	ip, ip, #20
  ofo = tmp & IP_OFFMASK;
 800f604:	9305      	str	r3, [sp, #20]
  mf_set = tmp & IP_MF;
 800f606:	f400 5300 	and.w	r3, r0, #8192	@ 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 800f60a:	fa1f fc8c 	uxth.w	ip, ip
 800f60e:	930b      	str	r3, [sp, #44]	@ 0x2c

  while (left) {
 800f610:	f1bc 0f00 	cmp.w	ip, #0
 800f614:	f000 80a1 	beq.w	800f75a <ip4_frag+0x1a6>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f618:	9b06      	ldr	r3, [sp, #24]
  u16_t newpbuflen = 0;
 800f61a:	2400      	movs	r4, #0

    left_to_copy = fragsize;
    while (left_to_copy) {
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f61c:	464d      	mov	r5, r9
 800f61e:	f8cd c010 	str.w	ip, [sp, #16]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f622:	00db      	lsls	r3, r3, #3
 800f624:	b29b      	uxth	r3, r3
 800f626:	9308      	str	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f628:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f62c:	2114      	movs	r1, #20
 800f62e:	200e      	movs	r0, #14
 800f630:	f7f9 fe78 	bl	8009324 <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f634:	9b08      	ldr	r3, [sp, #32]
 800f636:	9a04      	ldr	r2, [sp, #16]
    if (rambuf == NULL) {
 800f638:	4680      	mov	r8, r0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f63a:	4293      	cmp	r3, r2
 800f63c:	bf28      	it	cs
 800f63e:	4613      	movcs	r3, r2
 800f640:	4699      	mov	r9, r3
    if (rambuf == NULL) {
 800f642:	2800      	cmp	r0, #0
 800f644:	f000 8098 	beq.w	800f778 <ip4_frag+0x1c4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f648:	8943      	ldrh	r3, [r0, #10]
 800f64a:	2b13      	cmp	r3, #19
 800f64c:	f240 8097 	bls.w	800f77e <ip4_frag+0x1ca>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f650:	f8da 2000 	ldr.w	r2, [sl]
 800f654:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f658:	f8da 7004 	ldr.w	r7, [sl, #4]
 800f65c:	f8da 0008 	ldr.w	r0, [sl, #8]
 800f660:	f8da 100c 	ldr.w	r1, [sl, #12]
 800f664:	601a      	str	r2, [r3, #0]
 800f666:	605f      	str	r7, [r3, #4]
 800f668:	6098      	str	r0, [r3, #8]
 800f66a:	60d9      	str	r1, [r3, #12]
 800f66c:	f8da 2010 	ldr.w	r2, [sl, #16]
 800f670:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f672:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f676:	9309      	str	r3, [sp, #36]	@ 0x24
    while (left_to_copy) {
 800f678:	f1b9 0f00 	cmp.w	r9, #0
 800f67c:	d03c      	beq.n	800f6f8 <ip4_frag+0x144>
      u16_t plen = (u16_t)(p->len - poff);
 800f67e:	896b      	ldrh	r3, [r5, #10]
 800f680:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f682:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 800f684:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f686:	d206      	bcs.n	800f696 <ip4_frag+0xe2>
 800f688:	4b47      	ldr	r3, [pc, #284]	@ (800f7a8 <ip4_frag+0x1f4>)
 800f68a:	f240 322d 	movw	r2, #813	@ 0x32d
 800f68e:	4947      	ldr	r1, [pc, #284]	@ (800f7ac <ip4_frag+0x1f8>)
 800f690:	4847      	ldr	r0, [pc, #284]	@ (800f7b0 <ip4_frag+0x1fc>)
 800f692:	f000 fc4f 	bl	800ff34 <iprintf>
  u16_t newpbuflen = 0;
 800f696:	f8cd 9008 	str.w	r9, [sp, #8]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f69a:	9b02      	ldr	r3, [sp, #8]
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f69c:	2005      	movs	r0, #5
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f69e:	429c      	cmp	r4, r3
 800f6a0:	bf28      	it	cs
 800f6a2:	461c      	movcs	r4, r3
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f6a4:	2c00      	cmp	r4, #0
 800f6a6:	d05c      	beq.n	800f762 <ip4_frag+0x1ae>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f6a8:	f7f9 fa7a 	bl	8008ba0 <memp_malloc>
 800f6ac:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f6ae:	2241      	movs	r2, #65	@ 0x41
 800f6b0:	4621      	mov	r1, r4
 800f6b2:	2000      	movs	r0, #0
      if (pcr == NULL) {
 800f6b4:	f1bb 0f00 	cmp.w	fp, #0
 800f6b8:	d05b      	beq.n	800f772 <ip4_frag+0x1be>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f6ba:	9401      	str	r4, [sp, #4]
 800f6bc:	465b      	mov	r3, fp
 800f6be:	686f      	ldr	r7, [r5, #4]
 800f6c0:	eb07 0c06 	add.w	ip, r7, r6
 800f6c4:	f8cd c000 	str.w	ip, [sp]
 800f6c8:	f7f9 fd0a 	bl	80090e0 <pbuf_alloced_custom>
 800f6cc:	4601      	mov	r1, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800f6ce:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 800f6d0:	2900      	cmp	r1, #0
 800f6d2:	d04a      	beq.n	800f76a <ip4_frag+0x1b6>
 800f6d4:	9103      	str	r1, [sp, #12]
      pbuf_ref(p);
 800f6d6:	f7f9 ff33 	bl	8009540 <pbuf_ref>
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f6da:	4b36      	ldr	r3, [pc, #216]	@ (800f7b4 <ip4_frag+0x200>)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f6dc:	4640      	mov	r0, r8
 800f6de:	9903      	ldr	r1, [sp, #12]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f6e0:	f8cb 3010 	str.w	r3, [fp, #16]
      pcr->original = p;
 800f6e4:	f8cb 5014 	str.w	r5, [fp, #20]
      pbuf_cat(rambuf, newpbuf);
 800f6e8:	f7f9 ff48 	bl	800957c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f6ec:	9b02      	ldr	r3, [sp, #8]
 800f6ee:	1b1f      	subs	r7, r3, r4
 800f6f0:	b2bb      	uxth	r3, r7
 800f6f2:	9302      	str	r3, [sp, #8]
      if (left_to_copy) {
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d134      	bne.n	800f762 <ip4_frag+0x1ae>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f6f8:	9b07      	ldr	r3, [sp, #28]
    poff = (u16_t)(poff + newpbuflen);
 800f6fa:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f6fc:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 800f6fe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
    poff = (u16_t)(poff + newpbuflen);
 800f700:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 800f702:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 800f706:	9a04      	ldr	r2, [sp, #16]
    last = (left <= netif->mtu - IP_HLEN);
 800f708:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800f70a:	4293      	cmp	r3, r2
 800f70c:	dd3f      	ble.n	800f78e <ip4_frag+0x1da>
 800f70e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f710:	2b00      	cmp	r3, #0
 800f712:	d13c      	bne.n	800f78e <ip4_frag+0x1da>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f714:	f7f8 fea4 	bl	8008460 <lwip_htons>
 800f718:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800f71a:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f71c:	f109 0014 	add.w	r0, r9, #20
 800f720:	b280      	uxth	r0, r0
 800f722:	f7f8 fe9d 	bl	8008460 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800f726:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f728:	8078      	strh	r0, [r7, #2]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f72a:	4641      	mov	r1, r8
 800f72c:	9807      	ldr	r0, [sp, #28]
 800f72e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    IPH_CHKSUM_SET(iphdr, 0);
 800f730:	72bb      	strb	r3, [r7, #10]
 800f732:	72fb      	strb	r3, [r7, #11]
    netif->output(netif, rambuf, dest);
 800f734:	6943      	ldr	r3, [r0, #20]
 800f736:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f738:	4640      	mov	r0, r8
 800f73a:	f7f9 fd83 	bl	8009244 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f73e:	9b04      	ldr	r3, [sp, #16]
 800f740:	eba3 0909 	sub.w	r9, r3, r9
    ofo = (u16_t)(ofo + nfb);
 800f744:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800f748:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 800f74a:	fa1f f289 	uxth.w	r2, r9
    ofo = (u16_t)(ofo + nfb);
 800f74e:	b29b      	uxth	r3, r3
    left = (u16_t)(left - fragsize);
 800f750:	9204      	str	r2, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 800f752:	9305      	str	r3, [sp, #20]
  while (left) {
 800f754:	2a00      	cmp	r2, #0
 800f756:	f47f af67 	bne.w	800f628 <ip4_frag+0x74>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f75a:	2000      	movs	r0, #0
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800f75c:	b00d      	add	sp, #52	@ 0x34
 800f75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        p = p->next;
 800f762:	682d      	ldr	r5, [r5, #0]
      u16_t plen = (u16_t)(p->len - poff);
 800f764:	2600      	movs	r6, #0
 800f766:	896c      	ldrh	r4, [r5, #10]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f768:	e797      	b.n	800f69a <ip4_frag+0xe6>
  memp_free(MEMP_FRAG_PBUF, p);
 800f76a:	4659      	mov	r1, fp
 800f76c:	2005      	movs	r0, #5
 800f76e:	f7f9 fa5d 	bl	8008c2c <memp_free>
        pbuf_free(rambuf);
 800f772:	4640      	mov	r0, r8
 800f774:	f7f9 fd66 	bl	8009244 <pbuf_free>
  return ERR_MEM;
 800f778:	f04f 30ff 	mov.w	r0, #4294967295
 800f77c:	e7ee      	b.n	800f75c <ip4_frag+0x1a8>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f77e:	4b0a      	ldr	r3, [pc, #40]	@ (800f7a8 <ip4_frag+0x1f4>)
 800f780:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800f784:	490c      	ldr	r1, [pc, #48]	@ (800f7b8 <ip4_frag+0x204>)
 800f786:	480a      	ldr	r0, [pc, #40]	@ (800f7b0 <ip4_frag+0x1fc>)
 800f788:	f000 fbd4 	bl	800ff34 <iprintf>
 800f78c:	e760      	b.n	800f650 <ip4_frag+0x9c>
      tmp = tmp | IP_MF;
 800f78e:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 800f792:	e7bf      	b.n	800f714 <ip4_frag+0x160>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f794:	4b04      	ldr	r3, [pc, #16]	@ (800f7a8 <ip4_frag+0x1f4>)
 800f796:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800f79a:	4908      	ldr	r1, [pc, #32]	@ (800f7bc <ip4_frag+0x208>)
 800f79c:	4804      	ldr	r0, [pc, #16]	@ (800f7b0 <ip4_frag+0x1fc>)
 800f79e:	f000 fbc9 	bl	800ff34 <iprintf>
    return ERR_VAL;
 800f7a2:	f06f 0005 	mvn.w	r0, #5
 800f7a6:	e7d9      	b.n	800f75c <ip4_frag+0x1a8>
 800f7a8:	08014070 	.word	0x08014070
 800f7ac:	080141e4 	.word	0x080141e4
 800f7b0:	080110dc 	.word	0x080110dc
 800f7b4:	0800ef1d 	.word	0x0800ef1d
 800f7b8:	080141c4 	.word	0x080141c4
 800f7bc:	080141a8 	.word	0x080141a8

0800f7c0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f7c0:	b570      	push	{r4, r5, r6, lr}
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	460d      	mov	r5, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 800f7c6:	f7f4 fc83 	bl	80040d0 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 800f7ca:	8963      	ldrh	r3, [r4, #10]
 800f7cc:	2b0e      	cmp	r3, #14
 800f7ce:	d91a      	bls.n	800f806 <ethernet_input+0x46>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f7d0:	7be3      	ldrb	r3, [r4, #15]
 800f7d2:	b91b      	cbnz	r3, 800f7dc <ethernet_input+0x1c>
    p->if_idx = netif_get_index(netif);
 800f7d4:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800f7d8:	3301      	adds	r3, #1
 800f7da:	73e3      	strb	r3, [r4, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f7dc:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f7de:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800f7e0:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800f7e2:	07d9      	lsls	r1, r3, #31
 800f7e4:	d50a      	bpl.n	800f7fc <ethernet_input+0x3c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d030      	beq.n	800f84c <ethernet_input+0x8c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f7ea:	2206      	movs	r2, #6
 800f7ec:	491d      	ldr	r1, [pc, #116]	@ (800f864 <ethernet_input+0xa4>)
 800f7ee:	f000 fc2a 	bl	8010046 <memcmp>
 800f7f2:	b918      	cbnz	r0, 800f7fc <ethernet_input+0x3c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f7f4:	7b63      	ldrb	r3, [r4, #13]
 800f7f6:	f043 0308 	orr.w	r3, r3, #8
 800f7fa:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800f7fc:	2e08      	cmp	r6, #8
 800f7fe:	d016      	beq.n	800f82e <ethernet_input+0x6e>
 800f800:	f5b6 6fc1 	cmp.w	r6, #1544	@ 0x608
 800f804:	d004      	beq.n	800f810 <ethernet_input+0x50>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800f806:	4620      	mov	r0, r4
 800f808:	f7f9 fd1c 	bl	8009244 <pbuf_free>
  return ERR_OK;
}
 800f80c:	2000      	movs	r0, #0
 800f80e:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f810:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 800f814:	071b      	lsls	r3, r3, #28
 800f816:	d5f6      	bpl.n	800f806 <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f818:	210e      	movs	r1, #14
 800f81a:	4620      	mov	r0, r4
 800f81c:	f7f9 fcb0 	bl	8009180 <pbuf_remove_header>
 800f820:	2800      	cmp	r0, #0
 800f822:	d1f0      	bne.n	800f806 <ethernet_input+0x46>
        etharp_input(p, netif);
 800f824:	4629      	mov	r1, r5
 800f826:	4620      	mov	r0, r4
 800f828:	f7fe fe7c 	bl	800e524 <etharp_input>
      break;
 800f82c:	e7ee      	b.n	800f80c <ethernet_input+0x4c>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f82e:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 800f832:	071a      	lsls	r2, r3, #28
 800f834:	d5e7      	bpl.n	800f806 <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f836:	210e      	movs	r1, #14
 800f838:	4620      	mov	r0, r4
 800f83a:	f7f9 fca1 	bl	8009180 <pbuf_remove_header>
 800f83e:	2800      	cmp	r0, #0
 800f840:	d1e1      	bne.n	800f806 <ethernet_input+0x46>
        ip4_input(p, netif);
 800f842:	4629      	mov	r1, r5
 800f844:	4620      	mov	r0, r4
 800f846:	f7ff f9d5 	bl	800ebf4 <ip4_input>
      break;
 800f84a:	e7df      	b.n	800f80c <ethernet_input+0x4c>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f84c:	7843      	ldrb	r3, [r0, #1]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d1d4      	bne.n	800f7fc <ethernet_input+0x3c>
 800f852:	7883      	ldrb	r3, [r0, #2]
 800f854:	2b5e      	cmp	r3, #94	@ 0x5e
 800f856:	d1d1      	bne.n	800f7fc <ethernet_input+0x3c>
        p->flags |= PBUF_FLAG_LLMCAST;
 800f858:	7b63      	ldrb	r3, [r4, #13]
 800f85a:	f043 0310 	orr.w	r3, r3, #16
 800f85e:	7363      	strb	r3, [r4, #13]
 800f860:	e7cc      	b.n	800f7fc <ethernet_input+0x3c>
 800f862:	bf00      	nop
 800f864:	08014268 	.word	0x08014268

0800f868 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f86c:	460c      	mov	r4, r1
 800f86e:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f870:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800f874:	4616      	mov	r6, r2
 800f876:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800f878:	f7f8 fdf2 	bl	8008460 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f87c:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800f87e:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f880:	4620      	mov	r0, r4
 800f882:	f7f9 fc4d 	bl	8009120 <pbuf_add_header>
 800f886:	b9f0      	cbnz	r0, 800f8c6 <ethernet_output+0x5e>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 800f888:	f7f4 fc22 	bl	80040d0 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 800f88c:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800f88e:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	600b      	str	r3, [r1, #0]
 800f896:	88bb      	ldrh	r3, [r7, #4]
 800f898:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f89a:	6833      	ldr	r3, [r6, #0]
 800f89c:	f8c1 3006 	str.w	r3, [r1, #6]
 800f8a0:	88b3      	ldrh	r3, [r6, #4]
 800f8a2:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f8a4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800f8a8:	2b06      	cmp	r3, #6
 800f8aa:	d006      	beq.n	800f8ba <ethernet_output+0x52>
 800f8ac:	4b08      	ldr	r3, [pc, #32]	@ (800f8d0 <ethernet_output+0x68>)
 800f8ae:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800f8b2:	4908      	ldr	r1, [pc, #32]	@ (800f8d4 <ethernet_output+0x6c>)
 800f8b4:	4808      	ldr	r0, [pc, #32]	@ (800f8d8 <ethernet_output+0x70>)
 800f8b6:	f000 fb3d 	bl	800ff34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f8ba:	69ab      	ldr	r3, [r5, #24]
 800f8bc:	4621      	mov	r1, r4
 800f8be:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800f8c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800f8c4:	4718      	bx	r3
}
 800f8c6:	f06f 0001 	mvn.w	r0, #1
 800f8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ce:	bf00      	nop
 800f8d0:	080141f4 	.word	0x080141f4
 800f8d4:	0801422c 	.word	0x0801422c
 800f8d8:	080110dc 	.word	0x080110dc

0800f8dc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800f8dc:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800f8de:	2200      	movs	r2, #0
 800f8e0:	2104      	movs	r1, #4
{
 800f8e2:	b510      	push	{r4, lr}
 800f8e4:	4604      	mov	r4, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7f4 fe06 	bl	80044f8 <osMessageQueueNew>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800f8ec:	fab0 f380 	clz	r3, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800f8f0:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 800f8f2:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 800f8f4:	4258      	negs	r0, r3
 800f8f6:	bd10      	pop	{r4, pc}

0800f8f8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800f8f8:	b510      	push	{r4, lr}
 800f8fa:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 800f8fc:	6800      	ldr	r0, [r0, #0]
 800f8fe:	f7f4 fead 	bl	800465c <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 800f902:	6820      	ldr	r0, [r4, #0]
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800f904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageQueueDelete(*mbox);
 800f908:	f7f4 beb2 	b.w	8004670 <osMessageQueueDelete>

0800f90c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800f90c:	b500      	push	{lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800f90e:	2300      	movs	r3, #0
{
 800f910:	b083      	sub	sp, #12
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800f912:	6800      	ldr	r0, [r0, #0]
{
 800f914:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800f916:	461a      	mov	r2, r3
 800f918:	a901      	add	r1, sp, #4
 800f91a:	f7f4 fe29 	bl	8004570 <osMessageQueuePut>
 800f91e:	3800      	subs	r0, #0
 800f920:	bf18      	it	ne
 800f922:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800f924:	4240      	negs	r0, r0
 800f926:	b003      	add	sp, #12
 800f928:	f85d fb04 	ldr.w	pc, [sp], #4

0800f92c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800f92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f92e:	4615      	mov	r5, r2
 800f930:	4606      	mov	r6, r0
 800f932:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800f934:	f7f4 fc40 	bl	80041b8 <osKernelGetTickCount>
 800f938:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 800f93a:	b14d      	cbz	r5, 800f950 <sys_arch_mbox_fetch+0x24>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800f93c:	462b      	mov	r3, r5
 800f93e:	2200      	movs	r2, #0
 800f940:	4639      	mov	r1, r7
 800f942:	6830      	ldr	r0, [r6, #0]
 800f944:	f7f4 fe50 	bl	80045e8 <osMessageQueueGet>
    if (status == osOK)
 800f948:	b148      	cbz	r0, 800f95e <sys_arch_mbox_fetch+0x32>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800f94a:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800f94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800f950:	f04f 33ff 	mov.w	r3, #4294967295
 800f954:	462a      	mov	r2, r5
 800f956:	4639      	mov	r1, r7
 800f958:	6830      	ldr	r0, [r6, #0]
 800f95a:	f7f4 fe45 	bl	80045e8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 800f95e:	f7f4 fc2b 	bl	80041b8 <osKernelGetTickCount>
 800f962:	1b00      	subs	r0, r0, r4
}
 800f964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f966:	bf00      	nop

0800f968 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800f968:	b508      	push	{r3, lr}

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 800f96a:	2300      	movs	r3, #0
 800f96c:	6800      	ldr	r0, [r0, #0]
 800f96e:	461a      	mov	r2, r3
 800f970:	f7f4 fe3a 	bl	80045e8 <osMessageQueueGet>
 800f974:	3800      	subs	r0, #0
 800f976:	bf18      	it	ne
 800f978:	2001      	movne	r0, #1
  }
  else
  {
    return SYS_MBOX_EMPTY;
  }
}
 800f97a:	4240      	negs	r0, r0
 800f97c:	bd08      	pop	{r3, pc}
 800f97e:	bf00      	nop

0800f980 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
 800f980:	6800      	ldr	r0, [r0, #0]
 800f982:	3800      	subs	r0, #0
 800f984:	bf18      	it	ne
 800f986:	2001      	movne	r0, #1
 800f988:	4770      	bx	lr
 800f98a:	bf00      	nop

0800f98c <sys_mbox_set_invalid>:
    return 0;
  else
    return 1;
}
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
 800f98c:	2300      	movs	r3, #0
 800f98e:	6003      	str	r3, [r0, #0]
 800f990:	4770      	bx	lr
 800f992:	bf00      	nop

0800f994 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800f994:	b538      	push	{r3, r4, r5, lr}
 800f996:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 800f998:	2200      	movs	r2, #0
 800f99a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
{
 800f99e:	460c      	mov	r4, r1
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 800f9a0:	f7f4 fcee 	bl	8004380 <osSemaphoreNew>
 800f9a4:	6028      	str	r0, [r5, #0]
#endif

  if(*sem == NULL)
 800f9a6:	b130      	cbz	r0, 800f9b6 <sys_sem_new+0x22>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800f9a8:	b10c      	cbz	r4, 800f9ae <sys_sem_new+0x1a>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800f9aa:	2000      	movs	r0, #0
}
 800f9ac:	bd38      	pop	{r3, r4, r5, pc}
    osSemaphoreAcquire(*sem, 0);
 800f9ae:	4621      	mov	r1, r4
 800f9b0:	f7f4 fd32 	bl	8004418 <osSemaphoreAcquire>
 800f9b4:	e7f9      	b.n	800f9aa <sys_sem_new+0x16>
    return ERR_MEM;
 800f9b6:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f9ba:	bd38      	pop	{r3, r4, r5, pc}

0800f9bc <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800f9bc:	b570      	push	{r4, r5, r6, lr}
 800f9be:	460e      	mov	r6, r1
 800f9c0:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 800f9c2:	f7f4 fbf9 	bl	80041b8 <osKernelGetTickCount>
 800f9c6:	4605      	mov	r5, r0
#endif
  if(timeout != 0)
 800f9c8:	b956      	cbnz	r6, 800f9e0 <sys_arch_sem_wait+0x24>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 800f9ca:	f04f 31ff 	mov.w	r1, #4294967295
 800f9ce:	6820      	ldr	r0, [r4, #0]
 800f9d0:	f7f4 fd22 	bl	8004418 <osSemaphoreAcquire>
 800f9d4:	2800      	cmp	r0, #0
 800f9d6:	d1f8      	bne.n	800f9ca <sys_arch_sem_wait+0xe>
    return (osKernelGetTickCount() - starttime);
 800f9d8:	f7f4 fbee 	bl	80041b8 <osKernelGetTickCount>
 800f9dc:	1b40      	subs	r0, r0, r5
#endif
  }
}
 800f9de:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 800f9e0:	4631      	mov	r1, r6
 800f9e2:	6820      	ldr	r0, [r4, #0]
 800f9e4:	f7f4 fd18 	bl	8004418 <osSemaphoreAcquire>
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	d0f5      	beq.n	800f9d8 <sys_arch_sem_wait+0x1c>
      return SYS_ARCH_TIMEOUT;
 800f9ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f9f0:	bd70      	pop	{r4, r5, r6, pc}
 800f9f2:	bf00      	nop

0800f9f4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800f9f4:	6800      	ldr	r0, [r0, #0]
 800f9f6:	f7f4 bd41 	b.w	800447c <osSemaphoreRelease>
 800f9fa:	bf00      	nop

0800f9fc <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800f9fc:	6800      	ldr	r0, [r0, #0]
 800f9fe:	f7f4 bd67 	b.w	80044d0 <osSemaphoreDelete>
 800fa02:	bf00      	nop

0800fa04 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800fa04:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800fa06:	3800      	subs	r0, #0
 800fa08:	bf18      	it	ne
 800fa0a:	2001      	movne	r0, #1
 800fa0c:	4770      	bx	lr
 800fa0e:	bf00      	nop

0800fa10 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800fa10:	2300      	movs	r3, #0
 800fa12:	6003      	str	r3, [r0, #0]
}
 800fa14:	4770      	bx	lr
 800fa16:	bf00      	nop

0800fa18 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800fa18:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800fa1a:	2000      	movs	r0, #0
 800fa1c:	f7f4 fc28 	bl	8004270 <osMutexNew>
 800fa20:	4b01      	ldr	r3, [pc, #4]	@ (800fa28 <sys_init+0x10>)
 800fa22:	6018      	str	r0, [r3, #0]
#endif
}
 800fa24:	bd08      	pop	{r3, pc}
 800fa26:	bf00      	nop
 800fa28:	240208b0 	.word	0x240208b0

0800fa2c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800fa2c:	b510      	push	{r4, lr}
 800fa2e:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800fa30:	2000      	movs	r0, #0
 800fa32:	f7f4 fc1d 	bl	8004270 <osMutexNew>
#endif

  if(*mutex == NULL)
 800fa36:	fab0 f380 	clz	r3, r0
  *mutex = osMutexNew(NULL);
 800fa3a:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 800fa3c:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800fa3e:	4258      	negs	r0, r3
 800fa40:	bd10      	pop	{r4, pc}
 800fa42:	bf00      	nop

0800fa44 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800fa44:	f04f 31ff 	mov.w	r1, #4294967295
 800fa48:	6800      	ldr	r0, [r0, #0]
 800fa4a:	f7f4 bc53 	b.w	80042f4 <osMutexAcquire>
 800fa4e:	bf00      	nop

0800fa50 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800fa50:	6800      	ldr	r0, [r0, #0]
 800fa52:	f7f4 bc73 	b.w	800433c <osMutexRelease>
 800fa56:	bf00      	nop

0800fa58 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800fa58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa5a:	b08b      	sub	sp, #44	@ 0x2c
 800fa5c:	4617      	mov	r7, r2
 800fa5e:	460e      	mov	r6, r1
 800fa60:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800fa62:	2220      	movs	r2, #32
 800fa64:	2100      	movs	r1, #0
 800fa66:	a802      	add	r0, sp, #8
{
 800fa68:	461c      	mov	r4, r3
  const osThreadAttr_t attributes = {
 800fa6a:	f000 fb16 	bl	801009a <memset>
 800fa6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800fa70:	4639      	mov	r1, r7
 800fa72:	aa01      	add	r2, sp, #4
 800fa74:	4630      	mov	r0, r6
  const osThreadAttr_t attributes = {
 800fa76:	9501      	str	r5, [sp, #4]
 800fa78:	9406      	str	r4, [sp, #24]
 800fa7a:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 800fa7c:	f7f4 fba4 	bl	80041c8 <osThreadNew>
#endif
}
 800fa80:	b00b      	add	sp, #44	@ 0x2c
 800fa82:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa84 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800fa84:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800fa86:	4b04      	ldr	r3, [pc, #16]	@ (800fa98 <sys_arch_protect+0x14>)
 800fa88:	f04f 31ff 	mov.w	r1, #4294967295
 800fa8c:	6818      	ldr	r0, [r3, #0]
 800fa8e:	f7f4 fc31 	bl	80042f4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 800fa92:	2001      	movs	r0, #1
 800fa94:	bd08      	pop	{r3, pc}
 800fa96:	bf00      	nop
 800fa98:	240208b0 	.word	0x240208b0

0800fa9c <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800fa9c:	4b01      	ldr	r3, [pc, #4]	@ (800faa4 <sys_arch_unprotect+0x8>)
 800fa9e:	6818      	ldr	r0, [r3, #0]
 800faa0:	f7f4 bc4c 	b.w	800433c <osMutexRelease>
 800faa4:	240208b0 	.word	0x240208b0

0800faa8 <atoi>:
 800faa8:	220a      	movs	r2, #10
 800faaa:	2100      	movs	r1, #0
 800faac:	f000 b976 	b.w	800fd9c <strtol>

0800fab0 <malloc>:
 800fab0:	4b02      	ldr	r3, [pc, #8]	@ (800fabc <malloc+0xc>)
 800fab2:	4601      	mov	r1, r0
 800fab4:	6818      	ldr	r0, [r3, #0]
 800fab6:	f000 b82d 	b.w	800fb14 <_malloc_r>
 800faba:	bf00      	nop
 800fabc:	2400003c 	.word	0x2400003c

0800fac0 <free>:
 800fac0:	4b02      	ldr	r3, [pc, #8]	@ (800facc <free+0xc>)
 800fac2:	4601      	mov	r1, r0
 800fac4:	6818      	ldr	r0, [r3, #0]
 800fac6:	f000 bc1f 	b.w	8010308 <_free_r>
 800faca:	bf00      	nop
 800facc:	2400003c 	.word	0x2400003c

0800fad0 <sbrk_aligned>:
 800fad0:	b570      	push	{r4, r5, r6, lr}
 800fad2:	4e0f      	ldr	r6, [pc, #60]	@ (800fb10 <sbrk_aligned+0x40>)
 800fad4:	460c      	mov	r4, r1
 800fad6:	6831      	ldr	r1, [r6, #0]
 800fad8:	4605      	mov	r5, r0
 800fada:	b911      	cbnz	r1, 800fae2 <sbrk_aligned+0x12>
 800fadc:	f000 fb98 	bl	8010210 <_sbrk_r>
 800fae0:	6030      	str	r0, [r6, #0]
 800fae2:	4621      	mov	r1, r4
 800fae4:	4628      	mov	r0, r5
 800fae6:	f000 fb93 	bl	8010210 <_sbrk_r>
 800faea:	1c43      	adds	r3, r0, #1
 800faec:	d103      	bne.n	800faf6 <sbrk_aligned+0x26>
 800faee:	f04f 34ff 	mov.w	r4, #4294967295
 800faf2:	4620      	mov	r0, r4
 800faf4:	bd70      	pop	{r4, r5, r6, pc}
 800faf6:	1cc4      	adds	r4, r0, #3
 800faf8:	f024 0403 	bic.w	r4, r4, #3
 800fafc:	42a0      	cmp	r0, r4
 800fafe:	d0f8      	beq.n	800faf2 <sbrk_aligned+0x22>
 800fb00:	1a21      	subs	r1, r4, r0
 800fb02:	4628      	mov	r0, r5
 800fb04:	f000 fb84 	bl	8010210 <_sbrk_r>
 800fb08:	3001      	adds	r0, #1
 800fb0a:	d1f2      	bne.n	800faf2 <sbrk_aligned+0x22>
 800fb0c:	e7ef      	b.n	800faee <sbrk_aligned+0x1e>
 800fb0e:	bf00      	nop
 800fb10:	240208b4 	.word	0x240208b4

0800fb14 <_malloc_r>:
 800fb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb18:	1ccd      	adds	r5, r1, #3
 800fb1a:	f025 0503 	bic.w	r5, r5, #3
 800fb1e:	3508      	adds	r5, #8
 800fb20:	2d0c      	cmp	r5, #12
 800fb22:	bf38      	it	cc
 800fb24:	250c      	movcc	r5, #12
 800fb26:	2d00      	cmp	r5, #0
 800fb28:	4606      	mov	r6, r0
 800fb2a:	db01      	blt.n	800fb30 <_malloc_r+0x1c>
 800fb2c:	42a9      	cmp	r1, r5
 800fb2e:	d904      	bls.n	800fb3a <_malloc_r+0x26>
 800fb30:	230c      	movs	r3, #12
 800fb32:	6033      	str	r3, [r6, #0]
 800fb34:	2000      	movs	r0, #0
 800fb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fc10 <_malloc_r+0xfc>
 800fb3e:	f000 f869 	bl	800fc14 <__malloc_lock>
 800fb42:	f8d8 3000 	ldr.w	r3, [r8]
 800fb46:	461c      	mov	r4, r3
 800fb48:	bb44      	cbnz	r4, 800fb9c <_malloc_r+0x88>
 800fb4a:	4629      	mov	r1, r5
 800fb4c:	4630      	mov	r0, r6
 800fb4e:	f7ff ffbf 	bl	800fad0 <sbrk_aligned>
 800fb52:	1c43      	adds	r3, r0, #1
 800fb54:	4604      	mov	r4, r0
 800fb56:	d158      	bne.n	800fc0a <_malloc_r+0xf6>
 800fb58:	f8d8 4000 	ldr.w	r4, [r8]
 800fb5c:	4627      	mov	r7, r4
 800fb5e:	2f00      	cmp	r7, #0
 800fb60:	d143      	bne.n	800fbea <_malloc_r+0xd6>
 800fb62:	2c00      	cmp	r4, #0
 800fb64:	d04b      	beq.n	800fbfe <_malloc_r+0xea>
 800fb66:	6823      	ldr	r3, [r4, #0]
 800fb68:	4639      	mov	r1, r7
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	eb04 0903 	add.w	r9, r4, r3
 800fb70:	f000 fb4e 	bl	8010210 <_sbrk_r>
 800fb74:	4581      	cmp	r9, r0
 800fb76:	d142      	bne.n	800fbfe <_malloc_r+0xea>
 800fb78:	6821      	ldr	r1, [r4, #0]
 800fb7a:	1a6d      	subs	r5, r5, r1
 800fb7c:	4629      	mov	r1, r5
 800fb7e:	4630      	mov	r0, r6
 800fb80:	f7ff ffa6 	bl	800fad0 <sbrk_aligned>
 800fb84:	3001      	adds	r0, #1
 800fb86:	d03a      	beq.n	800fbfe <_malloc_r+0xea>
 800fb88:	6823      	ldr	r3, [r4, #0]
 800fb8a:	442b      	add	r3, r5
 800fb8c:	6023      	str	r3, [r4, #0]
 800fb8e:	f8d8 3000 	ldr.w	r3, [r8]
 800fb92:	685a      	ldr	r2, [r3, #4]
 800fb94:	bb62      	cbnz	r2, 800fbf0 <_malloc_r+0xdc>
 800fb96:	f8c8 7000 	str.w	r7, [r8]
 800fb9a:	e00f      	b.n	800fbbc <_malloc_r+0xa8>
 800fb9c:	6822      	ldr	r2, [r4, #0]
 800fb9e:	1b52      	subs	r2, r2, r5
 800fba0:	d420      	bmi.n	800fbe4 <_malloc_r+0xd0>
 800fba2:	2a0b      	cmp	r2, #11
 800fba4:	d917      	bls.n	800fbd6 <_malloc_r+0xc2>
 800fba6:	1961      	adds	r1, r4, r5
 800fba8:	42a3      	cmp	r3, r4
 800fbaa:	6025      	str	r5, [r4, #0]
 800fbac:	bf18      	it	ne
 800fbae:	6059      	strne	r1, [r3, #4]
 800fbb0:	6863      	ldr	r3, [r4, #4]
 800fbb2:	bf08      	it	eq
 800fbb4:	f8c8 1000 	streq.w	r1, [r8]
 800fbb8:	5162      	str	r2, [r4, r5]
 800fbba:	604b      	str	r3, [r1, #4]
 800fbbc:	4630      	mov	r0, r6
 800fbbe:	f000 f82f 	bl	800fc20 <__malloc_unlock>
 800fbc2:	f104 000b 	add.w	r0, r4, #11
 800fbc6:	1d23      	adds	r3, r4, #4
 800fbc8:	f020 0007 	bic.w	r0, r0, #7
 800fbcc:	1ac2      	subs	r2, r0, r3
 800fbce:	bf1c      	itt	ne
 800fbd0:	1a1b      	subne	r3, r3, r0
 800fbd2:	50a3      	strne	r3, [r4, r2]
 800fbd4:	e7af      	b.n	800fb36 <_malloc_r+0x22>
 800fbd6:	6862      	ldr	r2, [r4, #4]
 800fbd8:	42a3      	cmp	r3, r4
 800fbda:	bf0c      	ite	eq
 800fbdc:	f8c8 2000 	streq.w	r2, [r8]
 800fbe0:	605a      	strne	r2, [r3, #4]
 800fbe2:	e7eb      	b.n	800fbbc <_malloc_r+0xa8>
 800fbe4:	4623      	mov	r3, r4
 800fbe6:	6864      	ldr	r4, [r4, #4]
 800fbe8:	e7ae      	b.n	800fb48 <_malloc_r+0x34>
 800fbea:	463c      	mov	r4, r7
 800fbec:	687f      	ldr	r7, [r7, #4]
 800fbee:	e7b6      	b.n	800fb5e <_malloc_r+0x4a>
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	685b      	ldr	r3, [r3, #4]
 800fbf4:	42a3      	cmp	r3, r4
 800fbf6:	d1fb      	bne.n	800fbf0 <_malloc_r+0xdc>
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	6053      	str	r3, [r2, #4]
 800fbfc:	e7de      	b.n	800fbbc <_malloc_r+0xa8>
 800fbfe:	230c      	movs	r3, #12
 800fc00:	6033      	str	r3, [r6, #0]
 800fc02:	4630      	mov	r0, r6
 800fc04:	f000 f80c 	bl	800fc20 <__malloc_unlock>
 800fc08:	e794      	b.n	800fb34 <_malloc_r+0x20>
 800fc0a:	6005      	str	r5, [r0, #0]
 800fc0c:	e7d6      	b.n	800fbbc <_malloc_r+0xa8>
 800fc0e:	bf00      	nop
 800fc10:	240208b8 	.word	0x240208b8

0800fc14 <__malloc_lock>:
 800fc14:	4801      	ldr	r0, [pc, #4]	@ (800fc1c <__malloc_lock+0x8>)
 800fc16:	f000 bb48 	b.w	80102aa <__retarget_lock_acquire_recursive>
 800fc1a:	bf00      	nop
 800fc1c:	240209fc 	.word	0x240209fc

0800fc20 <__malloc_unlock>:
 800fc20:	4801      	ldr	r0, [pc, #4]	@ (800fc28 <__malloc_unlock+0x8>)
 800fc22:	f000 bb43 	b.w	80102ac <__retarget_lock_release_recursive>
 800fc26:	bf00      	nop
 800fc28:	240209fc 	.word	0x240209fc

0800fc2c <rand>:
 800fc2c:	4b16      	ldr	r3, [pc, #88]	@ (800fc88 <rand+0x5c>)
 800fc2e:	b510      	push	{r4, lr}
 800fc30:	681c      	ldr	r4, [r3, #0]
 800fc32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fc34:	b9b3      	cbnz	r3, 800fc64 <rand+0x38>
 800fc36:	2018      	movs	r0, #24
 800fc38:	f7ff ff3a 	bl	800fab0 <malloc>
 800fc3c:	4602      	mov	r2, r0
 800fc3e:	6320      	str	r0, [r4, #48]	@ 0x30
 800fc40:	b920      	cbnz	r0, 800fc4c <rand+0x20>
 800fc42:	4b12      	ldr	r3, [pc, #72]	@ (800fc8c <rand+0x60>)
 800fc44:	4812      	ldr	r0, [pc, #72]	@ (800fc90 <rand+0x64>)
 800fc46:	2152      	movs	r1, #82	@ 0x52
 800fc48:	f000 fb40 	bl	80102cc <__assert_func>
 800fc4c:	4911      	ldr	r1, [pc, #68]	@ (800fc94 <rand+0x68>)
 800fc4e:	4b12      	ldr	r3, [pc, #72]	@ (800fc98 <rand+0x6c>)
 800fc50:	e9c0 1300 	strd	r1, r3, [r0]
 800fc54:	4b11      	ldr	r3, [pc, #68]	@ (800fc9c <rand+0x70>)
 800fc56:	6083      	str	r3, [r0, #8]
 800fc58:	230b      	movs	r3, #11
 800fc5a:	8183      	strh	r3, [r0, #12]
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	2001      	movs	r0, #1
 800fc60:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fc64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fc66:	480e      	ldr	r0, [pc, #56]	@ (800fca0 <rand+0x74>)
 800fc68:	690b      	ldr	r3, [r1, #16]
 800fc6a:	694c      	ldr	r4, [r1, #20]
 800fc6c:	4a0d      	ldr	r2, [pc, #52]	@ (800fca4 <rand+0x78>)
 800fc6e:	4358      	muls	r0, r3
 800fc70:	fb02 0004 	mla	r0, r2, r4, r0
 800fc74:	fba3 3202 	umull	r3, r2, r3, r2
 800fc78:	3301      	adds	r3, #1
 800fc7a:	eb40 0002 	adc.w	r0, r0, r2
 800fc7e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800fc82:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800fc86:	bd10      	pop	{r4, pc}
 800fc88:	2400003c 	.word	0x2400003c
 800fc8c:	0801426e 	.word	0x0801426e
 800fc90:	08014285 	.word	0x08014285
 800fc94:	abcd330e 	.word	0xabcd330e
 800fc98:	e66d1234 	.word	0xe66d1234
 800fc9c:	0005deec 	.word	0x0005deec
 800fca0:	5851f42d 	.word	0x5851f42d
 800fca4:	4c957f2d 	.word	0x4c957f2d

0800fca8 <_strtol_l.constprop.0>:
 800fca8:	2b24      	cmp	r3, #36	@ 0x24
 800fcaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcae:	4686      	mov	lr, r0
 800fcb0:	4690      	mov	r8, r2
 800fcb2:	d801      	bhi.n	800fcb8 <_strtol_l.constprop.0+0x10>
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	d106      	bne.n	800fcc6 <_strtol_l.constprop.0+0x1e>
 800fcb8:	f000 facc 	bl	8010254 <__errno>
 800fcbc:	2316      	movs	r3, #22
 800fcbe:	6003      	str	r3, [r0, #0]
 800fcc0:	2000      	movs	r0, #0
 800fcc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcc6:	4834      	ldr	r0, [pc, #208]	@ (800fd98 <_strtol_l.constprop.0+0xf0>)
 800fcc8:	460d      	mov	r5, r1
 800fcca:	462a      	mov	r2, r5
 800fccc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fcd0:	5d06      	ldrb	r6, [r0, r4]
 800fcd2:	f016 0608 	ands.w	r6, r6, #8
 800fcd6:	d1f8      	bne.n	800fcca <_strtol_l.constprop.0+0x22>
 800fcd8:	2c2d      	cmp	r4, #45	@ 0x2d
 800fcda:	d12d      	bne.n	800fd38 <_strtol_l.constprop.0+0x90>
 800fcdc:	782c      	ldrb	r4, [r5, #0]
 800fcde:	2601      	movs	r6, #1
 800fce0:	1c95      	adds	r5, r2, #2
 800fce2:	f033 0210 	bics.w	r2, r3, #16
 800fce6:	d109      	bne.n	800fcfc <_strtol_l.constprop.0+0x54>
 800fce8:	2c30      	cmp	r4, #48	@ 0x30
 800fcea:	d12a      	bne.n	800fd42 <_strtol_l.constprop.0+0x9a>
 800fcec:	782a      	ldrb	r2, [r5, #0]
 800fcee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fcf2:	2a58      	cmp	r2, #88	@ 0x58
 800fcf4:	d125      	bne.n	800fd42 <_strtol_l.constprop.0+0x9a>
 800fcf6:	786c      	ldrb	r4, [r5, #1]
 800fcf8:	2310      	movs	r3, #16
 800fcfa:	3502      	adds	r5, #2
 800fcfc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fd00:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fd04:	2200      	movs	r2, #0
 800fd06:	fbbc f9f3 	udiv	r9, ip, r3
 800fd0a:	4610      	mov	r0, r2
 800fd0c:	fb03 ca19 	mls	sl, r3, r9, ip
 800fd10:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fd14:	2f09      	cmp	r7, #9
 800fd16:	d81b      	bhi.n	800fd50 <_strtol_l.constprop.0+0xa8>
 800fd18:	463c      	mov	r4, r7
 800fd1a:	42a3      	cmp	r3, r4
 800fd1c:	dd27      	ble.n	800fd6e <_strtol_l.constprop.0+0xc6>
 800fd1e:	1c57      	adds	r7, r2, #1
 800fd20:	d007      	beq.n	800fd32 <_strtol_l.constprop.0+0x8a>
 800fd22:	4581      	cmp	r9, r0
 800fd24:	d320      	bcc.n	800fd68 <_strtol_l.constprop.0+0xc0>
 800fd26:	d101      	bne.n	800fd2c <_strtol_l.constprop.0+0x84>
 800fd28:	45a2      	cmp	sl, r4
 800fd2a:	db1d      	blt.n	800fd68 <_strtol_l.constprop.0+0xc0>
 800fd2c:	fb00 4003 	mla	r0, r0, r3, r4
 800fd30:	2201      	movs	r2, #1
 800fd32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd36:	e7eb      	b.n	800fd10 <_strtol_l.constprop.0+0x68>
 800fd38:	2c2b      	cmp	r4, #43	@ 0x2b
 800fd3a:	bf04      	itt	eq
 800fd3c:	782c      	ldrbeq	r4, [r5, #0]
 800fd3e:	1c95      	addeq	r5, r2, #2
 800fd40:	e7cf      	b.n	800fce2 <_strtol_l.constprop.0+0x3a>
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d1da      	bne.n	800fcfc <_strtol_l.constprop.0+0x54>
 800fd46:	2c30      	cmp	r4, #48	@ 0x30
 800fd48:	bf0c      	ite	eq
 800fd4a:	2308      	moveq	r3, #8
 800fd4c:	230a      	movne	r3, #10
 800fd4e:	e7d5      	b.n	800fcfc <_strtol_l.constprop.0+0x54>
 800fd50:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fd54:	2f19      	cmp	r7, #25
 800fd56:	d801      	bhi.n	800fd5c <_strtol_l.constprop.0+0xb4>
 800fd58:	3c37      	subs	r4, #55	@ 0x37
 800fd5a:	e7de      	b.n	800fd1a <_strtol_l.constprop.0+0x72>
 800fd5c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fd60:	2f19      	cmp	r7, #25
 800fd62:	d804      	bhi.n	800fd6e <_strtol_l.constprop.0+0xc6>
 800fd64:	3c57      	subs	r4, #87	@ 0x57
 800fd66:	e7d8      	b.n	800fd1a <_strtol_l.constprop.0+0x72>
 800fd68:	f04f 32ff 	mov.w	r2, #4294967295
 800fd6c:	e7e1      	b.n	800fd32 <_strtol_l.constprop.0+0x8a>
 800fd6e:	1c53      	adds	r3, r2, #1
 800fd70:	d108      	bne.n	800fd84 <_strtol_l.constprop.0+0xdc>
 800fd72:	2322      	movs	r3, #34	@ 0x22
 800fd74:	f8ce 3000 	str.w	r3, [lr]
 800fd78:	4660      	mov	r0, ip
 800fd7a:	f1b8 0f00 	cmp.w	r8, #0
 800fd7e:	d0a0      	beq.n	800fcc2 <_strtol_l.constprop.0+0x1a>
 800fd80:	1e69      	subs	r1, r5, #1
 800fd82:	e006      	b.n	800fd92 <_strtol_l.constprop.0+0xea>
 800fd84:	b106      	cbz	r6, 800fd88 <_strtol_l.constprop.0+0xe0>
 800fd86:	4240      	negs	r0, r0
 800fd88:	f1b8 0f00 	cmp.w	r8, #0
 800fd8c:	d099      	beq.n	800fcc2 <_strtol_l.constprop.0+0x1a>
 800fd8e:	2a00      	cmp	r2, #0
 800fd90:	d1f6      	bne.n	800fd80 <_strtol_l.constprop.0+0xd8>
 800fd92:	f8c8 1000 	str.w	r1, [r8]
 800fd96:	e794      	b.n	800fcc2 <_strtol_l.constprop.0+0x1a>
 800fd98:	080142de 	.word	0x080142de

0800fd9c <strtol>:
 800fd9c:	4613      	mov	r3, r2
 800fd9e:	460a      	mov	r2, r1
 800fda0:	4601      	mov	r1, r0
 800fda2:	4802      	ldr	r0, [pc, #8]	@ (800fdac <strtol+0x10>)
 800fda4:	6800      	ldr	r0, [r0, #0]
 800fda6:	f7ff bf7f 	b.w	800fca8 <_strtol_l.constprop.0>
 800fdaa:	bf00      	nop
 800fdac:	2400003c 	.word	0x2400003c

0800fdb0 <std>:
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	b510      	push	{r4, lr}
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	e9c0 3300 	strd	r3, r3, [r0]
 800fdba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fdbe:	6083      	str	r3, [r0, #8]
 800fdc0:	8181      	strh	r1, [r0, #12]
 800fdc2:	6643      	str	r3, [r0, #100]	@ 0x64
 800fdc4:	81c2      	strh	r2, [r0, #14]
 800fdc6:	6183      	str	r3, [r0, #24]
 800fdc8:	4619      	mov	r1, r3
 800fdca:	2208      	movs	r2, #8
 800fdcc:	305c      	adds	r0, #92	@ 0x5c
 800fdce:	f000 f964 	bl	801009a <memset>
 800fdd2:	4b0d      	ldr	r3, [pc, #52]	@ (800fe08 <std+0x58>)
 800fdd4:	6263      	str	r3, [r4, #36]	@ 0x24
 800fdd6:	4b0d      	ldr	r3, [pc, #52]	@ (800fe0c <std+0x5c>)
 800fdd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fdda:	4b0d      	ldr	r3, [pc, #52]	@ (800fe10 <std+0x60>)
 800fddc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fdde:	4b0d      	ldr	r3, [pc, #52]	@ (800fe14 <std+0x64>)
 800fde0:	6323      	str	r3, [r4, #48]	@ 0x30
 800fde2:	4b0d      	ldr	r3, [pc, #52]	@ (800fe18 <std+0x68>)
 800fde4:	6224      	str	r4, [r4, #32]
 800fde6:	429c      	cmp	r4, r3
 800fde8:	d006      	beq.n	800fdf8 <std+0x48>
 800fdea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fdee:	4294      	cmp	r4, r2
 800fdf0:	d002      	beq.n	800fdf8 <std+0x48>
 800fdf2:	33d0      	adds	r3, #208	@ 0xd0
 800fdf4:	429c      	cmp	r4, r3
 800fdf6:	d105      	bne.n	800fe04 <std+0x54>
 800fdf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fdfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe00:	f000 ba52 	b.w	80102a8 <__retarget_lock_init_recursive>
 800fe04:	bd10      	pop	{r4, pc}
 800fe06:	bf00      	nop
 800fe08:	0800ffc1 	.word	0x0800ffc1
 800fe0c:	0800ffe3 	.word	0x0800ffe3
 800fe10:	0801001b 	.word	0x0801001b
 800fe14:	0801003f 	.word	0x0801003f
 800fe18:	240208bc 	.word	0x240208bc

0800fe1c <stdio_exit_handler>:
 800fe1c:	4a02      	ldr	r2, [pc, #8]	@ (800fe28 <stdio_exit_handler+0xc>)
 800fe1e:	4903      	ldr	r1, [pc, #12]	@ (800fe2c <stdio_exit_handler+0x10>)
 800fe20:	4803      	ldr	r0, [pc, #12]	@ (800fe30 <stdio_exit_handler+0x14>)
 800fe22:	f000 b869 	b.w	800fef8 <_fwalk_sglue>
 800fe26:	bf00      	nop
 800fe28:	24000030 	.word	0x24000030
 800fe2c:	08010cf5 	.word	0x08010cf5
 800fe30:	24000040 	.word	0x24000040

0800fe34 <cleanup_stdio>:
 800fe34:	6841      	ldr	r1, [r0, #4]
 800fe36:	4b0c      	ldr	r3, [pc, #48]	@ (800fe68 <cleanup_stdio+0x34>)
 800fe38:	4299      	cmp	r1, r3
 800fe3a:	b510      	push	{r4, lr}
 800fe3c:	4604      	mov	r4, r0
 800fe3e:	d001      	beq.n	800fe44 <cleanup_stdio+0x10>
 800fe40:	f000 ff58 	bl	8010cf4 <_fflush_r>
 800fe44:	68a1      	ldr	r1, [r4, #8]
 800fe46:	4b09      	ldr	r3, [pc, #36]	@ (800fe6c <cleanup_stdio+0x38>)
 800fe48:	4299      	cmp	r1, r3
 800fe4a:	d002      	beq.n	800fe52 <cleanup_stdio+0x1e>
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	f000 ff51 	bl	8010cf4 <_fflush_r>
 800fe52:	68e1      	ldr	r1, [r4, #12]
 800fe54:	4b06      	ldr	r3, [pc, #24]	@ (800fe70 <cleanup_stdio+0x3c>)
 800fe56:	4299      	cmp	r1, r3
 800fe58:	d004      	beq.n	800fe64 <cleanup_stdio+0x30>
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe60:	f000 bf48 	b.w	8010cf4 <_fflush_r>
 800fe64:	bd10      	pop	{r4, pc}
 800fe66:	bf00      	nop
 800fe68:	240208bc 	.word	0x240208bc
 800fe6c:	24020924 	.word	0x24020924
 800fe70:	2402098c 	.word	0x2402098c

0800fe74 <global_stdio_init.part.0>:
 800fe74:	b510      	push	{r4, lr}
 800fe76:	4b0b      	ldr	r3, [pc, #44]	@ (800fea4 <global_stdio_init.part.0+0x30>)
 800fe78:	4c0b      	ldr	r4, [pc, #44]	@ (800fea8 <global_stdio_init.part.0+0x34>)
 800fe7a:	4a0c      	ldr	r2, [pc, #48]	@ (800feac <global_stdio_init.part.0+0x38>)
 800fe7c:	601a      	str	r2, [r3, #0]
 800fe7e:	4620      	mov	r0, r4
 800fe80:	2200      	movs	r2, #0
 800fe82:	2104      	movs	r1, #4
 800fe84:	f7ff ff94 	bl	800fdb0 <std>
 800fe88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fe8c:	2201      	movs	r2, #1
 800fe8e:	2109      	movs	r1, #9
 800fe90:	f7ff ff8e 	bl	800fdb0 <std>
 800fe94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fe98:	2202      	movs	r2, #2
 800fe9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe9e:	2112      	movs	r1, #18
 800fea0:	f7ff bf86 	b.w	800fdb0 <std>
 800fea4:	240209f4 	.word	0x240209f4
 800fea8:	240208bc 	.word	0x240208bc
 800feac:	0800fe1d 	.word	0x0800fe1d

0800feb0 <__sfp_lock_acquire>:
 800feb0:	4801      	ldr	r0, [pc, #4]	@ (800feb8 <__sfp_lock_acquire+0x8>)
 800feb2:	f000 b9fa 	b.w	80102aa <__retarget_lock_acquire_recursive>
 800feb6:	bf00      	nop
 800feb8:	240209fd 	.word	0x240209fd

0800febc <__sfp_lock_release>:
 800febc:	4801      	ldr	r0, [pc, #4]	@ (800fec4 <__sfp_lock_release+0x8>)
 800febe:	f000 b9f5 	b.w	80102ac <__retarget_lock_release_recursive>
 800fec2:	bf00      	nop
 800fec4:	240209fd 	.word	0x240209fd

0800fec8 <__sinit>:
 800fec8:	b510      	push	{r4, lr}
 800feca:	4604      	mov	r4, r0
 800fecc:	f7ff fff0 	bl	800feb0 <__sfp_lock_acquire>
 800fed0:	6a23      	ldr	r3, [r4, #32]
 800fed2:	b11b      	cbz	r3, 800fedc <__sinit+0x14>
 800fed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fed8:	f7ff bff0 	b.w	800febc <__sfp_lock_release>
 800fedc:	4b04      	ldr	r3, [pc, #16]	@ (800fef0 <__sinit+0x28>)
 800fede:	6223      	str	r3, [r4, #32]
 800fee0:	4b04      	ldr	r3, [pc, #16]	@ (800fef4 <__sinit+0x2c>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d1f5      	bne.n	800fed4 <__sinit+0xc>
 800fee8:	f7ff ffc4 	bl	800fe74 <global_stdio_init.part.0>
 800feec:	e7f2      	b.n	800fed4 <__sinit+0xc>
 800feee:	bf00      	nop
 800fef0:	0800fe35 	.word	0x0800fe35
 800fef4:	240209f4 	.word	0x240209f4

0800fef8 <_fwalk_sglue>:
 800fef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fefc:	4607      	mov	r7, r0
 800fefe:	4688      	mov	r8, r1
 800ff00:	4614      	mov	r4, r2
 800ff02:	2600      	movs	r6, #0
 800ff04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff08:	f1b9 0901 	subs.w	r9, r9, #1
 800ff0c:	d505      	bpl.n	800ff1a <_fwalk_sglue+0x22>
 800ff0e:	6824      	ldr	r4, [r4, #0]
 800ff10:	2c00      	cmp	r4, #0
 800ff12:	d1f7      	bne.n	800ff04 <_fwalk_sglue+0xc>
 800ff14:	4630      	mov	r0, r6
 800ff16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff1a:	89ab      	ldrh	r3, [r5, #12]
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	d907      	bls.n	800ff30 <_fwalk_sglue+0x38>
 800ff20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff24:	3301      	adds	r3, #1
 800ff26:	d003      	beq.n	800ff30 <_fwalk_sglue+0x38>
 800ff28:	4629      	mov	r1, r5
 800ff2a:	4638      	mov	r0, r7
 800ff2c:	47c0      	blx	r8
 800ff2e:	4306      	orrs	r6, r0
 800ff30:	3568      	adds	r5, #104	@ 0x68
 800ff32:	e7e9      	b.n	800ff08 <_fwalk_sglue+0x10>

0800ff34 <iprintf>:
 800ff34:	b40f      	push	{r0, r1, r2, r3}
 800ff36:	b507      	push	{r0, r1, r2, lr}
 800ff38:	4906      	ldr	r1, [pc, #24]	@ (800ff54 <iprintf+0x20>)
 800ff3a:	ab04      	add	r3, sp, #16
 800ff3c:	6808      	ldr	r0, [r1, #0]
 800ff3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff42:	6881      	ldr	r1, [r0, #8]
 800ff44:	9301      	str	r3, [sp, #4]
 800ff46:	f000 fbab 	bl	80106a0 <_vfiprintf_r>
 800ff4a:	b003      	add	sp, #12
 800ff4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff50:	b004      	add	sp, #16
 800ff52:	4770      	bx	lr
 800ff54:	2400003c 	.word	0x2400003c

0800ff58 <sniprintf>:
 800ff58:	b40c      	push	{r2, r3}
 800ff5a:	b530      	push	{r4, r5, lr}
 800ff5c:	4b17      	ldr	r3, [pc, #92]	@ (800ffbc <sniprintf+0x64>)
 800ff5e:	1e0c      	subs	r4, r1, #0
 800ff60:	681d      	ldr	r5, [r3, #0]
 800ff62:	b09d      	sub	sp, #116	@ 0x74
 800ff64:	da08      	bge.n	800ff78 <sniprintf+0x20>
 800ff66:	238b      	movs	r3, #139	@ 0x8b
 800ff68:	602b      	str	r3, [r5, #0]
 800ff6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff6e:	b01d      	add	sp, #116	@ 0x74
 800ff70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff74:	b002      	add	sp, #8
 800ff76:	4770      	bx	lr
 800ff78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ff7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ff80:	bf14      	ite	ne
 800ff82:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ff86:	4623      	moveq	r3, r4
 800ff88:	9304      	str	r3, [sp, #16]
 800ff8a:	9307      	str	r3, [sp, #28]
 800ff8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ff90:	9002      	str	r0, [sp, #8]
 800ff92:	9006      	str	r0, [sp, #24]
 800ff94:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ff98:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ff9a:	ab21      	add	r3, sp, #132	@ 0x84
 800ff9c:	a902      	add	r1, sp, #8
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	9301      	str	r3, [sp, #4]
 800ffa2:	f000 fa57 	bl	8010454 <_svfiprintf_r>
 800ffa6:	1c43      	adds	r3, r0, #1
 800ffa8:	bfbc      	itt	lt
 800ffaa:	238b      	movlt	r3, #139	@ 0x8b
 800ffac:	602b      	strlt	r3, [r5, #0]
 800ffae:	2c00      	cmp	r4, #0
 800ffb0:	d0dd      	beq.n	800ff6e <sniprintf+0x16>
 800ffb2:	9b02      	ldr	r3, [sp, #8]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	701a      	strb	r2, [r3, #0]
 800ffb8:	e7d9      	b.n	800ff6e <sniprintf+0x16>
 800ffba:	bf00      	nop
 800ffbc:	2400003c 	.word	0x2400003c

0800ffc0 <__sread>:
 800ffc0:	b510      	push	{r4, lr}
 800ffc2:	460c      	mov	r4, r1
 800ffc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffc8:	f000 f910 	bl	80101ec <_read_r>
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	bfab      	itete	ge
 800ffd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ffd2:	89a3      	ldrhlt	r3, [r4, #12]
 800ffd4:	181b      	addge	r3, r3, r0
 800ffd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ffda:	bfac      	ite	ge
 800ffdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ffde:	81a3      	strhlt	r3, [r4, #12]
 800ffe0:	bd10      	pop	{r4, pc}

0800ffe2 <__swrite>:
 800ffe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe6:	461f      	mov	r7, r3
 800ffe8:	898b      	ldrh	r3, [r1, #12]
 800ffea:	05db      	lsls	r3, r3, #23
 800ffec:	4605      	mov	r5, r0
 800ffee:	460c      	mov	r4, r1
 800fff0:	4616      	mov	r6, r2
 800fff2:	d505      	bpl.n	8010000 <__swrite+0x1e>
 800fff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fff8:	2302      	movs	r3, #2
 800fffa:	2200      	movs	r2, #0
 800fffc:	f000 f8e4 	bl	80101c8 <_lseek_r>
 8010000:	89a3      	ldrh	r3, [r4, #12]
 8010002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010006:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801000a:	81a3      	strh	r3, [r4, #12]
 801000c:	4632      	mov	r2, r6
 801000e:	463b      	mov	r3, r7
 8010010:	4628      	mov	r0, r5
 8010012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010016:	f000 b90b 	b.w	8010230 <_write_r>

0801001a <__sseek>:
 801001a:	b510      	push	{r4, lr}
 801001c:	460c      	mov	r4, r1
 801001e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010022:	f000 f8d1 	bl	80101c8 <_lseek_r>
 8010026:	1c43      	adds	r3, r0, #1
 8010028:	89a3      	ldrh	r3, [r4, #12]
 801002a:	bf15      	itete	ne
 801002c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801002e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010032:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010036:	81a3      	strheq	r3, [r4, #12]
 8010038:	bf18      	it	ne
 801003a:	81a3      	strhne	r3, [r4, #12]
 801003c:	bd10      	pop	{r4, pc}

0801003e <__sclose>:
 801003e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010042:	f000 b85b 	b.w	80100fc <_close_r>

08010046 <memcmp>:
 8010046:	b510      	push	{r4, lr}
 8010048:	3901      	subs	r1, #1
 801004a:	4402      	add	r2, r0
 801004c:	4290      	cmp	r0, r2
 801004e:	d101      	bne.n	8010054 <memcmp+0xe>
 8010050:	2000      	movs	r0, #0
 8010052:	e005      	b.n	8010060 <memcmp+0x1a>
 8010054:	7803      	ldrb	r3, [r0, #0]
 8010056:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801005a:	42a3      	cmp	r3, r4
 801005c:	d001      	beq.n	8010062 <memcmp+0x1c>
 801005e:	1b18      	subs	r0, r3, r4
 8010060:	bd10      	pop	{r4, pc}
 8010062:	3001      	adds	r0, #1
 8010064:	e7f2      	b.n	801004c <memcmp+0x6>

08010066 <memmove>:
 8010066:	4288      	cmp	r0, r1
 8010068:	b510      	push	{r4, lr}
 801006a:	eb01 0402 	add.w	r4, r1, r2
 801006e:	d902      	bls.n	8010076 <memmove+0x10>
 8010070:	4284      	cmp	r4, r0
 8010072:	4623      	mov	r3, r4
 8010074:	d807      	bhi.n	8010086 <memmove+0x20>
 8010076:	1e43      	subs	r3, r0, #1
 8010078:	42a1      	cmp	r1, r4
 801007a:	d008      	beq.n	801008e <memmove+0x28>
 801007c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010080:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010084:	e7f8      	b.n	8010078 <memmove+0x12>
 8010086:	4402      	add	r2, r0
 8010088:	4601      	mov	r1, r0
 801008a:	428a      	cmp	r2, r1
 801008c:	d100      	bne.n	8010090 <memmove+0x2a>
 801008e:	bd10      	pop	{r4, pc}
 8010090:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010094:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010098:	e7f7      	b.n	801008a <memmove+0x24>

0801009a <memset>:
 801009a:	4402      	add	r2, r0
 801009c:	4603      	mov	r3, r0
 801009e:	4293      	cmp	r3, r2
 80100a0:	d100      	bne.n	80100a4 <memset+0xa>
 80100a2:	4770      	bx	lr
 80100a4:	f803 1b01 	strb.w	r1, [r3], #1
 80100a8:	e7f9      	b.n	801009e <memset+0x4>

080100aa <strncmp>:
 80100aa:	b510      	push	{r4, lr}
 80100ac:	b16a      	cbz	r2, 80100ca <strncmp+0x20>
 80100ae:	3901      	subs	r1, #1
 80100b0:	1884      	adds	r4, r0, r2
 80100b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d103      	bne.n	80100c6 <strncmp+0x1c>
 80100be:	42a0      	cmp	r0, r4
 80100c0:	d001      	beq.n	80100c6 <strncmp+0x1c>
 80100c2:	2a00      	cmp	r2, #0
 80100c4:	d1f5      	bne.n	80100b2 <strncmp+0x8>
 80100c6:	1ad0      	subs	r0, r2, r3
 80100c8:	bd10      	pop	{r4, pc}
 80100ca:	4610      	mov	r0, r2
 80100cc:	e7fc      	b.n	80100c8 <strncmp+0x1e>

080100ce <strstr>:
 80100ce:	780a      	ldrb	r2, [r1, #0]
 80100d0:	b570      	push	{r4, r5, r6, lr}
 80100d2:	b96a      	cbnz	r2, 80100f0 <strstr+0x22>
 80100d4:	bd70      	pop	{r4, r5, r6, pc}
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d109      	bne.n	80100ee <strstr+0x20>
 80100da:	460c      	mov	r4, r1
 80100dc:	4605      	mov	r5, r0
 80100de:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d0f6      	beq.n	80100d4 <strstr+0x6>
 80100e6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80100ea:	429e      	cmp	r6, r3
 80100ec:	d0f7      	beq.n	80100de <strstr+0x10>
 80100ee:	3001      	adds	r0, #1
 80100f0:	7803      	ldrb	r3, [r0, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d1ef      	bne.n	80100d6 <strstr+0x8>
 80100f6:	4618      	mov	r0, r3
 80100f8:	e7ec      	b.n	80100d4 <strstr+0x6>
	...

080100fc <_close_r>:
 80100fc:	b538      	push	{r3, r4, r5, lr}
 80100fe:	4d06      	ldr	r5, [pc, #24]	@ (8010118 <_close_r+0x1c>)
 8010100:	2300      	movs	r3, #0
 8010102:	4604      	mov	r4, r0
 8010104:	4608      	mov	r0, r1
 8010106:	602b      	str	r3, [r5, #0]
 8010108:	f7f1 f848 	bl	800119c <_close>
 801010c:	1c43      	adds	r3, r0, #1
 801010e:	d102      	bne.n	8010116 <_close_r+0x1a>
 8010110:	682b      	ldr	r3, [r5, #0]
 8010112:	b103      	cbz	r3, 8010116 <_close_r+0x1a>
 8010114:	6023      	str	r3, [r4, #0]
 8010116:	bd38      	pop	{r3, r4, r5, pc}
 8010118:	240209f8 	.word	0x240209f8

0801011c <_reclaim_reent>:
 801011c:	4b29      	ldr	r3, [pc, #164]	@ (80101c4 <_reclaim_reent+0xa8>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	4283      	cmp	r3, r0
 8010122:	b570      	push	{r4, r5, r6, lr}
 8010124:	4604      	mov	r4, r0
 8010126:	d04b      	beq.n	80101c0 <_reclaim_reent+0xa4>
 8010128:	69c3      	ldr	r3, [r0, #28]
 801012a:	b1ab      	cbz	r3, 8010158 <_reclaim_reent+0x3c>
 801012c:	68db      	ldr	r3, [r3, #12]
 801012e:	b16b      	cbz	r3, 801014c <_reclaim_reent+0x30>
 8010130:	2500      	movs	r5, #0
 8010132:	69e3      	ldr	r3, [r4, #28]
 8010134:	68db      	ldr	r3, [r3, #12]
 8010136:	5959      	ldr	r1, [r3, r5]
 8010138:	2900      	cmp	r1, #0
 801013a:	d13b      	bne.n	80101b4 <_reclaim_reent+0x98>
 801013c:	3504      	adds	r5, #4
 801013e:	2d80      	cmp	r5, #128	@ 0x80
 8010140:	d1f7      	bne.n	8010132 <_reclaim_reent+0x16>
 8010142:	69e3      	ldr	r3, [r4, #28]
 8010144:	4620      	mov	r0, r4
 8010146:	68d9      	ldr	r1, [r3, #12]
 8010148:	f000 f8de 	bl	8010308 <_free_r>
 801014c:	69e3      	ldr	r3, [r4, #28]
 801014e:	6819      	ldr	r1, [r3, #0]
 8010150:	b111      	cbz	r1, 8010158 <_reclaim_reent+0x3c>
 8010152:	4620      	mov	r0, r4
 8010154:	f000 f8d8 	bl	8010308 <_free_r>
 8010158:	6961      	ldr	r1, [r4, #20]
 801015a:	b111      	cbz	r1, 8010162 <_reclaim_reent+0x46>
 801015c:	4620      	mov	r0, r4
 801015e:	f000 f8d3 	bl	8010308 <_free_r>
 8010162:	69e1      	ldr	r1, [r4, #28]
 8010164:	b111      	cbz	r1, 801016c <_reclaim_reent+0x50>
 8010166:	4620      	mov	r0, r4
 8010168:	f000 f8ce 	bl	8010308 <_free_r>
 801016c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801016e:	b111      	cbz	r1, 8010176 <_reclaim_reent+0x5a>
 8010170:	4620      	mov	r0, r4
 8010172:	f000 f8c9 	bl	8010308 <_free_r>
 8010176:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010178:	b111      	cbz	r1, 8010180 <_reclaim_reent+0x64>
 801017a:	4620      	mov	r0, r4
 801017c:	f000 f8c4 	bl	8010308 <_free_r>
 8010180:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010182:	b111      	cbz	r1, 801018a <_reclaim_reent+0x6e>
 8010184:	4620      	mov	r0, r4
 8010186:	f000 f8bf 	bl	8010308 <_free_r>
 801018a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801018c:	b111      	cbz	r1, 8010194 <_reclaim_reent+0x78>
 801018e:	4620      	mov	r0, r4
 8010190:	f000 f8ba 	bl	8010308 <_free_r>
 8010194:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010196:	b111      	cbz	r1, 801019e <_reclaim_reent+0x82>
 8010198:	4620      	mov	r0, r4
 801019a:	f000 f8b5 	bl	8010308 <_free_r>
 801019e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80101a0:	b111      	cbz	r1, 80101a8 <_reclaim_reent+0x8c>
 80101a2:	4620      	mov	r0, r4
 80101a4:	f000 f8b0 	bl	8010308 <_free_r>
 80101a8:	6a23      	ldr	r3, [r4, #32]
 80101aa:	b14b      	cbz	r3, 80101c0 <_reclaim_reent+0xa4>
 80101ac:	4620      	mov	r0, r4
 80101ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101b2:	4718      	bx	r3
 80101b4:	680e      	ldr	r6, [r1, #0]
 80101b6:	4620      	mov	r0, r4
 80101b8:	f000 f8a6 	bl	8010308 <_free_r>
 80101bc:	4631      	mov	r1, r6
 80101be:	e7bb      	b.n	8010138 <_reclaim_reent+0x1c>
 80101c0:	bd70      	pop	{r4, r5, r6, pc}
 80101c2:	bf00      	nop
 80101c4:	2400003c 	.word	0x2400003c

080101c8 <_lseek_r>:
 80101c8:	b538      	push	{r3, r4, r5, lr}
 80101ca:	4d07      	ldr	r5, [pc, #28]	@ (80101e8 <_lseek_r+0x20>)
 80101cc:	4604      	mov	r4, r0
 80101ce:	4608      	mov	r0, r1
 80101d0:	4611      	mov	r1, r2
 80101d2:	2200      	movs	r2, #0
 80101d4:	602a      	str	r2, [r5, #0]
 80101d6:	461a      	mov	r2, r3
 80101d8:	f7f0 ffec 	bl	80011b4 <_lseek>
 80101dc:	1c43      	adds	r3, r0, #1
 80101de:	d102      	bne.n	80101e6 <_lseek_r+0x1e>
 80101e0:	682b      	ldr	r3, [r5, #0]
 80101e2:	b103      	cbz	r3, 80101e6 <_lseek_r+0x1e>
 80101e4:	6023      	str	r3, [r4, #0]
 80101e6:	bd38      	pop	{r3, r4, r5, pc}
 80101e8:	240209f8 	.word	0x240209f8

080101ec <_read_r>:
 80101ec:	b538      	push	{r3, r4, r5, lr}
 80101ee:	4d07      	ldr	r5, [pc, #28]	@ (801020c <_read_r+0x20>)
 80101f0:	4604      	mov	r4, r0
 80101f2:	4608      	mov	r0, r1
 80101f4:	4611      	mov	r1, r2
 80101f6:	2200      	movs	r2, #0
 80101f8:	602a      	str	r2, [r5, #0]
 80101fa:	461a      	mov	r2, r3
 80101fc:	f7f0 ffb2 	bl	8001164 <_read>
 8010200:	1c43      	adds	r3, r0, #1
 8010202:	d102      	bne.n	801020a <_read_r+0x1e>
 8010204:	682b      	ldr	r3, [r5, #0]
 8010206:	b103      	cbz	r3, 801020a <_read_r+0x1e>
 8010208:	6023      	str	r3, [r4, #0]
 801020a:	bd38      	pop	{r3, r4, r5, pc}
 801020c:	240209f8 	.word	0x240209f8

08010210 <_sbrk_r>:
 8010210:	b538      	push	{r3, r4, r5, lr}
 8010212:	4d06      	ldr	r5, [pc, #24]	@ (801022c <_sbrk_r+0x1c>)
 8010214:	2300      	movs	r3, #0
 8010216:	4604      	mov	r4, r0
 8010218:	4608      	mov	r0, r1
 801021a:	602b      	str	r3, [r5, #0]
 801021c:	f7f0 ffcc 	bl	80011b8 <_sbrk>
 8010220:	1c43      	adds	r3, r0, #1
 8010222:	d102      	bne.n	801022a <_sbrk_r+0x1a>
 8010224:	682b      	ldr	r3, [r5, #0]
 8010226:	b103      	cbz	r3, 801022a <_sbrk_r+0x1a>
 8010228:	6023      	str	r3, [r4, #0]
 801022a:	bd38      	pop	{r3, r4, r5, pc}
 801022c:	240209f8 	.word	0x240209f8

08010230 <_write_r>:
 8010230:	b538      	push	{r3, r4, r5, lr}
 8010232:	4d07      	ldr	r5, [pc, #28]	@ (8010250 <_write_r+0x20>)
 8010234:	4604      	mov	r4, r0
 8010236:	4608      	mov	r0, r1
 8010238:	4611      	mov	r1, r2
 801023a:	2200      	movs	r2, #0
 801023c:	602a      	str	r2, [r5, #0]
 801023e:	461a      	mov	r2, r3
 8010240:	f7f0 ff9e 	bl	8001180 <_write>
 8010244:	1c43      	adds	r3, r0, #1
 8010246:	d102      	bne.n	801024e <_write_r+0x1e>
 8010248:	682b      	ldr	r3, [r5, #0]
 801024a:	b103      	cbz	r3, 801024e <_write_r+0x1e>
 801024c:	6023      	str	r3, [r4, #0]
 801024e:	bd38      	pop	{r3, r4, r5, pc}
 8010250:	240209f8 	.word	0x240209f8

08010254 <__errno>:
 8010254:	4b01      	ldr	r3, [pc, #4]	@ (801025c <__errno+0x8>)
 8010256:	6818      	ldr	r0, [r3, #0]
 8010258:	4770      	bx	lr
 801025a:	bf00      	nop
 801025c:	2400003c 	.word	0x2400003c

08010260 <__libc_init_array>:
 8010260:	b570      	push	{r4, r5, r6, lr}
 8010262:	4d0d      	ldr	r5, [pc, #52]	@ (8010298 <__libc_init_array+0x38>)
 8010264:	4c0d      	ldr	r4, [pc, #52]	@ (801029c <__libc_init_array+0x3c>)
 8010266:	1b64      	subs	r4, r4, r5
 8010268:	10a4      	asrs	r4, r4, #2
 801026a:	2600      	movs	r6, #0
 801026c:	42a6      	cmp	r6, r4
 801026e:	d109      	bne.n	8010284 <__libc_init_array+0x24>
 8010270:	4d0b      	ldr	r5, [pc, #44]	@ (80102a0 <__libc_init_array+0x40>)
 8010272:	4c0c      	ldr	r4, [pc, #48]	@ (80102a4 <__libc_init_array+0x44>)
 8010274:	f000 ff12 	bl	801109c <_init>
 8010278:	1b64      	subs	r4, r4, r5
 801027a:	10a4      	asrs	r4, r4, #2
 801027c:	2600      	movs	r6, #0
 801027e:	42a6      	cmp	r6, r4
 8010280:	d105      	bne.n	801028e <__libc_init_array+0x2e>
 8010282:	bd70      	pop	{r4, r5, r6, pc}
 8010284:	f855 3b04 	ldr.w	r3, [r5], #4
 8010288:	4798      	blx	r3
 801028a:	3601      	adds	r6, #1
 801028c:	e7ee      	b.n	801026c <__libc_init_array+0xc>
 801028e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010292:	4798      	blx	r3
 8010294:	3601      	adds	r6, #1
 8010296:	e7f2      	b.n	801027e <__libc_init_array+0x1e>
 8010298:	08014458 	.word	0x08014458
 801029c:	08014458 	.word	0x08014458
 80102a0:	08014458 	.word	0x08014458
 80102a4:	0801445c 	.word	0x0801445c

080102a8 <__retarget_lock_init_recursive>:
 80102a8:	4770      	bx	lr

080102aa <__retarget_lock_acquire_recursive>:
 80102aa:	4770      	bx	lr

080102ac <__retarget_lock_release_recursive>:
 80102ac:	4770      	bx	lr

080102ae <memcpy>:
 80102ae:	440a      	add	r2, r1
 80102b0:	4291      	cmp	r1, r2
 80102b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80102b6:	d100      	bne.n	80102ba <memcpy+0xc>
 80102b8:	4770      	bx	lr
 80102ba:	b510      	push	{r4, lr}
 80102bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102c4:	4291      	cmp	r1, r2
 80102c6:	d1f9      	bne.n	80102bc <memcpy+0xe>
 80102c8:	bd10      	pop	{r4, pc}
	...

080102cc <__assert_func>:
 80102cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102ce:	4614      	mov	r4, r2
 80102d0:	461a      	mov	r2, r3
 80102d2:	4b09      	ldr	r3, [pc, #36]	@ (80102f8 <__assert_func+0x2c>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	4605      	mov	r5, r0
 80102d8:	68d8      	ldr	r0, [r3, #12]
 80102da:	b954      	cbnz	r4, 80102f2 <__assert_func+0x26>
 80102dc:	4b07      	ldr	r3, [pc, #28]	@ (80102fc <__assert_func+0x30>)
 80102de:	461c      	mov	r4, r3
 80102e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80102e4:	9100      	str	r1, [sp, #0]
 80102e6:	462b      	mov	r3, r5
 80102e8:	4905      	ldr	r1, [pc, #20]	@ (8010300 <__assert_func+0x34>)
 80102ea:	f000 fd2b 	bl	8010d44 <fiprintf>
 80102ee:	f000 fdcf 	bl	8010e90 <abort>
 80102f2:	4b04      	ldr	r3, [pc, #16]	@ (8010304 <__assert_func+0x38>)
 80102f4:	e7f4      	b.n	80102e0 <__assert_func+0x14>
 80102f6:	bf00      	nop
 80102f8:	2400003c 	.word	0x2400003c
 80102fc:	08014419 	.word	0x08014419
 8010300:	080143eb 	.word	0x080143eb
 8010304:	080143de 	.word	0x080143de

08010308 <_free_r>:
 8010308:	b538      	push	{r3, r4, r5, lr}
 801030a:	4605      	mov	r5, r0
 801030c:	2900      	cmp	r1, #0
 801030e:	d041      	beq.n	8010394 <_free_r+0x8c>
 8010310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010314:	1f0c      	subs	r4, r1, #4
 8010316:	2b00      	cmp	r3, #0
 8010318:	bfb8      	it	lt
 801031a:	18e4      	addlt	r4, r4, r3
 801031c:	f7ff fc7a 	bl	800fc14 <__malloc_lock>
 8010320:	4a1d      	ldr	r2, [pc, #116]	@ (8010398 <_free_r+0x90>)
 8010322:	6813      	ldr	r3, [r2, #0]
 8010324:	b933      	cbnz	r3, 8010334 <_free_r+0x2c>
 8010326:	6063      	str	r3, [r4, #4]
 8010328:	6014      	str	r4, [r2, #0]
 801032a:	4628      	mov	r0, r5
 801032c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010330:	f7ff bc76 	b.w	800fc20 <__malloc_unlock>
 8010334:	42a3      	cmp	r3, r4
 8010336:	d908      	bls.n	801034a <_free_r+0x42>
 8010338:	6820      	ldr	r0, [r4, #0]
 801033a:	1821      	adds	r1, r4, r0
 801033c:	428b      	cmp	r3, r1
 801033e:	bf01      	itttt	eq
 8010340:	6819      	ldreq	r1, [r3, #0]
 8010342:	685b      	ldreq	r3, [r3, #4]
 8010344:	1809      	addeq	r1, r1, r0
 8010346:	6021      	streq	r1, [r4, #0]
 8010348:	e7ed      	b.n	8010326 <_free_r+0x1e>
 801034a:	461a      	mov	r2, r3
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	b10b      	cbz	r3, 8010354 <_free_r+0x4c>
 8010350:	42a3      	cmp	r3, r4
 8010352:	d9fa      	bls.n	801034a <_free_r+0x42>
 8010354:	6811      	ldr	r1, [r2, #0]
 8010356:	1850      	adds	r0, r2, r1
 8010358:	42a0      	cmp	r0, r4
 801035a:	d10b      	bne.n	8010374 <_free_r+0x6c>
 801035c:	6820      	ldr	r0, [r4, #0]
 801035e:	4401      	add	r1, r0
 8010360:	1850      	adds	r0, r2, r1
 8010362:	4283      	cmp	r3, r0
 8010364:	6011      	str	r1, [r2, #0]
 8010366:	d1e0      	bne.n	801032a <_free_r+0x22>
 8010368:	6818      	ldr	r0, [r3, #0]
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	6053      	str	r3, [r2, #4]
 801036e:	4408      	add	r0, r1
 8010370:	6010      	str	r0, [r2, #0]
 8010372:	e7da      	b.n	801032a <_free_r+0x22>
 8010374:	d902      	bls.n	801037c <_free_r+0x74>
 8010376:	230c      	movs	r3, #12
 8010378:	602b      	str	r3, [r5, #0]
 801037a:	e7d6      	b.n	801032a <_free_r+0x22>
 801037c:	6820      	ldr	r0, [r4, #0]
 801037e:	1821      	adds	r1, r4, r0
 8010380:	428b      	cmp	r3, r1
 8010382:	bf04      	itt	eq
 8010384:	6819      	ldreq	r1, [r3, #0]
 8010386:	685b      	ldreq	r3, [r3, #4]
 8010388:	6063      	str	r3, [r4, #4]
 801038a:	bf04      	itt	eq
 801038c:	1809      	addeq	r1, r1, r0
 801038e:	6021      	streq	r1, [r4, #0]
 8010390:	6054      	str	r4, [r2, #4]
 8010392:	e7ca      	b.n	801032a <_free_r+0x22>
 8010394:	bd38      	pop	{r3, r4, r5, pc}
 8010396:	bf00      	nop
 8010398:	240208b8 	.word	0x240208b8

0801039c <__ssputs_r>:
 801039c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103a0:	688e      	ldr	r6, [r1, #8]
 80103a2:	461f      	mov	r7, r3
 80103a4:	42be      	cmp	r6, r7
 80103a6:	680b      	ldr	r3, [r1, #0]
 80103a8:	4682      	mov	sl, r0
 80103aa:	460c      	mov	r4, r1
 80103ac:	4690      	mov	r8, r2
 80103ae:	d82d      	bhi.n	801040c <__ssputs_r+0x70>
 80103b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80103b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80103b8:	d026      	beq.n	8010408 <__ssputs_r+0x6c>
 80103ba:	6965      	ldr	r5, [r4, #20]
 80103bc:	6909      	ldr	r1, [r1, #16]
 80103be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103c2:	eba3 0901 	sub.w	r9, r3, r1
 80103c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80103ca:	1c7b      	adds	r3, r7, #1
 80103cc:	444b      	add	r3, r9
 80103ce:	106d      	asrs	r5, r5, #1
 80103d0:	429d      	cmp	r5, r3
 80103d2:	bf38      	it	cc
 80103d4:	461d      	movcc	r5, r3
 80103d6:	0553      	lsls	r3, r2, #21
 80103d8:	d527      	bpl.n	801042a <__ssputs_r+0x8e>
 80103da:	4629      	mov	r1, r5
 80103dc:	f7ff fb9a 	bl	800fb14 <_malloc_r>
 80103e0:	4606      	mov	r6, r0
 80103e2:	b360      	cbz	r0, 801043e <__ssputs_r+0xa2>
 80103e4:	6921      	ldr	r1, [r4, #16]
 80103e6:	464a      	mov	r2, r9
 80103e8:	f7ff ff61 	bl	80102ae <memcpy>
 80103ec:	89a3      	ldrh	r3, [r4, #12]
 80103ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80103f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103f6:	81a3      	strh	r3, [r4, #12]
 80103f8:	6126      	str	r6, [r4, #16]
 80103fa:	6165      	str	r5, [r4, #20]
 80103fc:	444e      	add	r6, r9
 80103fe:	eba5 0509 	sub.w	r5, r5, r9
 8010402:	6026      	str	r6, [r4, #0]
 8010404:	60a5      	str	r5, [r4, #8]
 8010406:	463e      	mov	r6, r7
 8010408:	42be      	cmp	r6, r7
 801040a:	d900      	bls.n	801040e <__ssputs_r+0x72>
 801040c:	463e      	mov	r6, r7
 801040e:	6820      	ldr	r0, [r4, #0]
 8010410:	4632      	mov	r2, r6
 8010412:	4641      	mov	r1, r8
 8010414:	f7ff fe27 	bl	8010066 <memmove>
 8010418:	68a3      	ldr	r3, [r4, #8]
 801041a:	1b9b      	subs	r3, r3, r6
 801041c:	60a3      	str	r3, [r4, #8]
 801041e:	6823      	ldr	r3, [r4, #0]
 8010420:	4433      	add	r3, r6
 8010422:	6023      	str	r3, [r4, #0]
 8010424:	2000      	movs	r0, #0
 8010426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801042a:	462a      	mov	r2, r5
 801042c:	f000 fd37 	bl	8010e9e <_realloc_r>
 8010430:	4606      	mov	r6, r0
 8010432:	2800      	cmp	r0, #0
 8010434:	d1e0      	bne.n	80103f8 <__ssputs_r+0x5c>
 8010436:	6921      	ldr	r1, [r4, #16]
 8010438:	4650      	mov	r0, sl
 801043a:	f7ff ff65 	bl	8010308 <_free_r>
 801043e:	230c      	movs	r3, #12
 8010440:	f8ca 3000 	str.w	r3, [sl]
 8010444:	89a3      	ldrh	r3, [r4, #12]
 8010446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801044a:	81a3      	strh	r3, [r4, #12]
 801044c:	f04f 30ff 	mov.w	r0, #4294967295
 8010450:	e7e9      	b.n	8010426 <__ssputs_r+0x8a>
	...

08010454 <_svfiprintf_r>:
 8010454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010458:	4698      	mov	r8, r3
 801045a:	898b      	ldrh	r3, [r1, #12]
 801045c:	061b      	lsls	r3, r3, #24
 801045e:	b09d      	sub	sp, #116	@ 0x74
 8010460:	4607      	mov	r7, r0
 8010462:	460d      	mov	r5, r1
 8010464:	4614      	mov	r4, r2
 8010466:	d510      	bpl.n	801048a <_svfiprintf_r+0x36>
 8010468:	690b      	ldr	r3, [r1, #16]
 801046a:	b973      	cbnz	r3, 801048a <_svfiprintf_r+0x36>
 801046c:	2140      	movs	r1, #64	@ 0x40
 801046e:	f7ff fb51 	bl	800fb14 <_malloc_r>
 8010472:	6028      	str	r0, [r5, #0]
 8010474:	6128      	str	r0, [r5, #16]
 8010476:	b930      	cbnz	r0, 8010486 <_svfiprintf_r+0x32>
 8010478:	230c      	movs	r3, #12
 801047a:	603b      	str	r3, [r7, #0]
 801047c:	f04f 30ff 	mov.w	r0, #4294967295
 8010480:	b01d      	add	sp, #116	@ 0x74
 8010482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010486:	2340      	movs	r3, #64	@ 0x40
 8010488:	616b      	str	r3, [r5, #20]
 801048a:	2300      	movs	r3, #0
 801048c:	9309      	str	r3, [sp, #36]	@ 0x24
 801048e:	2320      	movs	r3, #32
 8010490:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010494:	f8cd 800c 	str.w	r8, [sp, #12]
 8010498:	2330      	movs	r3, #48	@ 0x30
 801049a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010638 <_svfiprintf_r+0x1e4>
 801049e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80104a2:	f04f 0901 	mov.w	r9, #1
 80104a6:	4623      	mov	r3, r4
 80104a8:	469a      	mov	sl, r3
 80104aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104ae:	b10a      	cbz	r2, 80104b4 <_svfiprintf_r+0x60>
 80104b0:	2a25      	cmp	r2, #37	@ 0x25
 80104b2:	d1f9      	bne.n	80104a8 <_svfiprintf_r+0x54>
 80104b4:	ebba 0b04 	subs.w	fp, sl, r4
 80104b8:	d00b      	beq.n	80104d2 <_svfiprintf_r+0x7e>
 80104ba:	465b      	mov	r3, fp
 80104bc:	4622      	mov	r2, r4
 80104be:	4629      	mov	r1, r5
 80104c0:	4638      	mov	r0, r7
 80104c2:	f7ff ff6b 	bl	801039c <__ssputs_r>
 80104c6:	3001      	adds	r0, #1
 80104c8:	f000 80a7 	beq.w	801061a <_svfiprintf_r+0x1c6>
 80104cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104ce:	445a      	add	r2, fp
 80104d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80104d2:	f89a 3000 	ldrb.w	r3, [sl]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	f000 809f 	beq.w	801061a <_svfiprintf_r+0x1c6>
 80104dc:	2300      	movs	r3, #0
 80104de:	f04f 32ff 	mov.w	r2, #4294967295
 80104e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104e6:	f10a 0a01 	add.w	sl, sl, #1
 80104ea:	9304      	str	r3, [sp, #16]
 80104ec:	9307      	str	r3, [sp, #28]
 80104ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80104f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80104f4:	4654      	mov	r4, sl
 80104f6:	2205      	movs	r2, #5
 80104f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104fc:	484e      	ldr	r0, [pc, #312]	@ (8010638 <_svfiprintf_r+0x1e4>)
 80104fe:	f7ef ff0f 	bl	8000320 <memchr>
 8010502:	9a04      	ldr	r2, [sp, #16]
 8010504:	b9d8      	cbnz	r0, 801053e <_svfiprintf_r+0xea>
 8010506:	06d0      	lsls	r0, r2, #27
 8010508:	bf44      	itt	mi
 801050a:	2320      	movmi	r3, #32
 801050c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010510:	0711      	lsls	r1, r2, #28
 8010512:	bf44      	itt	mi
 8010514:	232b      	movmi	r3, #43	@ 0x2b
 8010516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801051a:	f89a 3000 	ldrb.w	r3, [sl]
 801051e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010520:	d015      	beq.n	801054e <_svfiprintf_r+0xfa>
 8010522:	9a07      	ldr	r2, [sp, #28]
 8010524:	4654      	mov	r4, sl
 8010526:	2000      	movs	r0, #0
 8010528:	f04f 0c0a 	mov.w	ip, #10
 801052c:	4621      	mov	r1, r4
 801052e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010532:	3b30      	subs	r3, #48	@ 0x30
 8010534:	2b09      	cmp	r3, #9
 8010536:	d94b      	bls.n	80105d0 <_svfiprintf_r+0x17c>
 8010538:	b1b0      	cbz	r0, 8010568 <_svfiprintf_r+0x114>
 801053a:	9207      	str	r2, [sp, #28]
 801053c:	e014      	b.n	8010568 <_svfiprintf_r+0x114>
 801053e:	eba0 0308 	sub.w	r3, r0, r8
 8010542:	fa09 f303 	lsl.w	r3, r9, r3
 8010546:	4313      	orrs	r3, r2
 8010548:	9304      	str	r3, [sp, #16]
 801054a:	46a2      	mov	sl, r4
 801054c:	e7d2      	b.n	80104f4 <_svfiprintf_r+0xa0>
 801054e:	9b03      	ldr	r3, [sp, #12]
 8010550:	1d19      	adds	r1, r3, #4
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	9103      	str	r1, [sp, #12]
 8010556:	2b00      	cmp	r3, #0
 8010558:	bfbb      	ittet	lt
 801055a:	425b      	neglt	r3, r3
 801055c:	f042 0202 	orrlt.w	r2, r2, #2
 8010560:	9307      	strge	r3, [sp, #28]
 8010562:	9307      	strlt	r3, [sp, #28]
 8010564:	bfb8      	it	lt
 8010566:	9204      	strlt	r2, [sp, #16]
 8010568:	7823      	ldrb	r3, [r4, #0]
 801056a:	2b2e      	cmp	r3, #46	@ 0x2e
 801056c:	d10a      	bne.n	8010584 <_svfiprintf_r+0x130>
 801056e:	7863      	ldrb	r3, [r4, #1]
 8010570:	2b2a      	cmp	r3, #42	@ 0x2a
 8010572:	d132      	bne.n	80105da <_svfiprintf_r+0x186>
 8010574:	9b03      	ldr	r3, [sp, #12]
 8010576:	1d1a      	adds	r2, r3, #4
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	9203      	str	r2, [sp, #12]
 801057c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010580:	3402      	adds	r4, #2
 8010582:	9305      	str	r3, [sp, #20]
 8010584:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010648 <_svfiprintf_r+0x1f4>
 8010588:	7821      	ldrb	r1, [r4, #0]
 801058a:	2203      	movs	r2, #3
 801058c:	4650      	mov	r0, sl
 801058e:	f7ef fec7 	bl	8000320 <memchr>
 8010592:	b138      	cbz	r0, 80105a4 <_svfiprintf_r+0x150>
 8010594:	9b04      	ldr	r3, [sp, #16]
 8010596:	eba0 000a 	sub.w	r0, r0, sl
 801059a:	2240      	movs	r2, #64	@ 0x40
 801059c:	4082      	lsls	r2, r0
 801059e:	4313      	orrs	r3, r2
 80105a0:	3401      	adds	r4, #1
 80105a2:	9304      	str	r3, [sp, #16]
 80105a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105a8:	4824      	ldr	r0, [pc, #144]	@ (801063c <_svfiprintf_r+0x1e8>)
 80105aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80105ae:	2206      	movs	r2, #6
 80105b0:	f7ef feb6 	bl	8000320 <memchr>
 80105b4:	2800      	cmp	r0, #0
 80105b6:	d036      	beq.n	8010626 <_svfiprintf_r+0x1d2>
 80105b8:	4b21      	ldr	r3, [pc, #132]	@ (8010640 <_svfiprintf_r+0x1ec>)
 80105ba:	bb1b      	cbnz	r3, 8010604 <_svfiprintf_r+0x1b0>
 80105bc:	9b03      	ldr	r3, [sp, #12]
 80105be:	3307      	adds	r3, #7
 80105c0:	f023 0307 	bic.w	r3, r3, #7
 80105c4:	3308      	adds	r3, #8
 80105c6:	9303      	str	r3, [sp, #12]
 80105c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105ca:	4433      	add	r3, r6
 80105cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80105ce:	e76a      	b.n	80104a6 <_svfiprintf_r+0x52>
 80105d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80105d4:	460c      	mov	r4, r1
 80105d6:	2001      	movs	r0, #1
 80105d8:	e7a8      	b.n	801052c <_svfiprintf_r+0xd8>
 80105da:	2300      	movs	r3, #0
 80105dc:	3401      	adds	r4, #1
 80105de:	9305      	str	r3, [sp, #20]
 80105e0:	4619      	mov	r1, r3
 80105e2:	f04f 0c0a 	mov.w	ip, #10
 80105e6:	4620      	mov	r0, r4
 80105e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105ec:	3a30      	subs	r2, #48	@ 0x30
 80105ee:	2a09      	cmp	r2, #9
 80105f0:	d903      	bls.n	80105fa <_svfiprintf_r+0x1a6>
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d0c6      	beq.n	8010584 <_svfiprintf_r+0x130>
 80105f6:	9105      	str	r1, [sp, #20]
 80105f8:	e7c4      	b.n	8010584 <_svfiprintf_r+0x130>
 80105fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80105fe:	4604      	mov	r4, r0
 8010600:	2301      	movs	r3, #1
 8010602:	e7f0      	b.n	80105e6 <_svfiprintf_r+0x192>
 8010604:	ab03      	add	r3, sp, #12
 8010606:	9300      	str	r3, [sp, #0]
 8010608:	462a      	mov	r2, r5
 801060a:	4b0e      	ldr	r3, [pc, #56]	@ (8010644 <_svfiprintf_r+0x1f0>)
 801060c:	a904      	add	r1, sp, #16
 801060e:	4638      	mov	r0, r7
 8010610:	f3af 8000 	nop.w
 8010614:	1c42      	adds	r2, r0, #1
 8010616:	4606      	mov	r6, r0
 8010618:	d1d6      	bne.n	80105c8 <_svfiprintf_r+0x174>
 801061a:	89ab      	ldrh	r3, [r5, #12]
 801061c:	065b      	lsls	r3, r3, #25
 801061e:	f53f af2d 	bmi.w	801047c <_svfiprintf_r+0x28>
 8010622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010624:	e72c      	b.n	8010480 <_svfiprintf_r+0x2c>
 8010626:	ab03      	add	r3, sp, #12
 8010628:	9300      	str	r3, [sp, #0]
 801062a:	462a      	mov	r2, r5
 801062c:	4b05      	ldr	r3, [pc, #20]	@ (8010644 <_svfiprintf_r+0x1f0>)
 801062e:	a904      	add	r1, sp, #16
 8010630:	4638      	mov	r0, r7
 8010632:	f000 f9bb 	bl	80109ac <_printf_i>
 8010636:	e7ed      	b.n	8010614 <_svfiprintf_r+0x1c0>
 8010638:	0801441a 	.word	0x0801441a
 801063c:	08014424 	.word	0x08014424
 8010640:	00000000 	.word	0x00000000
 8010644:	0801039d 	.word	0x0801039d
 8010648:	08014420 	.word	0x08014420

0801064c <__sfputc_r>:
 801064c:	6893      	ldr	r3, [r2, #8]
 801064e:	3b01      	subs	r3, #1
 8010650:	2b00      	cmp	r3, #0
 8010652:	b410      	push	{r4}
 8010654:	6093      	str	r3, [r2, #8]
 8010656:	da08      	bge.n	801066a <__sfputc_r+0x1e>
 8010658:	6994      	ldr	r4, [r2, #24]
 801065a:	42a3      	cmp	r3, r4
 801065c:	db01      	blt.n	8010662 <__sfputc_r+0x16>
 801065e:	290a      	cmp	r1, #10
 8010660:	d103      	bne.n	801066a <__sfputc_r+0x1e>
 8010662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010666:	f000 bb7f 	b.w	8010d68 <__swbuf_r>
 801066a:	6813      	ldr	r3, [r2, #0]
 801066c:	1c58      	adds	r0, r3, #1
 801066e:	6010      	str	r0, [r2, #0]
 8010670:	7019      	strb	r1, [r3, #0]
 8010672:	4608      	mov	r0, r1
 8010674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010678:	4770      	bx	lr

0801067a <__sfputs_r>:
 801067a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801067c:	4606      	mov	r6, r0
 801067e:	460f      	mov	r7, r1
 8010680:	4614      	mov	r4, r2
 8010682:	18d5      	adds	r5, r2, r3
 8010684:	42ac      	cmp	r4, r5
 8010686:	d101      	bne.n	801068c <__sfputs_r+0x12>
 8010688:	2000      	movs	r0, #0
 801068a:	e007      	b.n	801069c <__sfputs_r+0x22>
 801068c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010690:	463a      	mov	r2, r7
 8010692:	4630      	mov	r0, r6
 8010694:	f7ff ffda 	bl	801064c <__sfputc_r>
 8010698:	1c43      	adds	r3, r0, #1
 801069a:	d1f3      	bne.n	8010684 <__sfputs_r+0xa>
 801069c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080106a0 <_vfiprintf_r>:
 80106a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106a4:	460d      	mov	r5, r1
 80106a6:	b09d      	sub	sp, #116	@ 0x74
 80106a8:	4614      	mov	r4, r2
 80106aa:	4698      	mov	r8, r3
 80106ac:	4606      	mov	r6, r0
 80106ae:	b118      	cbz	r0, 80106b8 <_vfiprintf_r+0x18>
 80106b0:	6a03      	ldr	r3, [r0, #32]
 80106b2:	b90b      	cbnz	r3, 80106b8 <_vfiprintf_r+0x18>
 80106b4:	f7ff fc08 	bl	800fec8 <__sinit>
 80106b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106ba:	07d9      	lsls	r1, r3, #31
 80106bc:	d405      	bmi.n	80106ca <_vfiprintf_r+0x2a>
 80106be:	89ab      	ldrh	r3, [r5, #12]
 80106c0:	059a      	lsls	r2, r3, #22
 80106c2:	d402      	bmi.n	80106ca <_vfiprintf_r+0x2a>
 80106c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106c6:	f7ff fdf0 	bl	80102aa <__retarget_lock_acquire_recursive>
 80106ca:	89ab      	ldrh	r3, [r5, #12]
 80106cc:	071b      	lsls	r3, r3, #28
 80106ce:	d501      	bpl.n	80106d4 <_vfiprintf_r+0x34>
 80106d0:	692b      	ldr	r3, [r5, #16]
 80106d2:	b99b      	cbnz	r3, 80106fc <_vfiprintf_r+0x5c>
 80106d4:	4629      	mov	r1, r5
 80106d6:	4630      	mov	r0, r6
 80106d8:	f000 fb84 	bl	8010de4 <__swsetup_r>
 80106dc:	b170      	cbz	r0, 80106fc <_vfiprintf_r+0x5c>
 80106de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80106e0:	07dc      	lsls	r4, r3, #31
 80106e2:	d504      	bpl.n	80106ee <_vfiprintf_r+0x4e>
 80106e4:	f04f 30ff 	mov.w	r0, #4294967295
 80106e8:	b01d      	add	sp, #116	@ 0x74
 80106ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ee:	89ab      	ldrh	r3, [r5, #12]
 80106f0:	0598      	lsls	r0, r3, #22
 80106f2:	d4f7      	bmi.n	80106e4 <_vfiprintf_r+0x44>
 80106f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80106f6:	f7ff fdd9 	bl	80102ac <__retarget_lock_release_recursive>
 80106fa:	e7f3      	b.n	80106e4 <_vfiprintf_r+0x44>
 80106fc:	2300      	movs	r3, #0
 80106fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8010700:	2320      	movs	r3, #32
 8010702:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010706:	f8cd 800c 	str.w	r8, [sp, #12]
 801070a:	2330      	movs	r3, #48	@ 0x30
 801070c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80108bc <_vfiprintf_r+0x21c>
 8010710:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010714:	f04f 0901 	mov.w	r9, #1
 8010718:	4623      	mov	r3, r4
 801071a:	469a      	mov	sl, r3
 801071c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010720:	b10a      	cbz	r2, 8010726 <_vfiprintf_r+0x86>
 8010722:	2a25      	cmp	r2, #37	@ 0x25
 8010724:	d1f9      	bne.n	801071a <_vfiprintf_r+0x7a>
 8010726:	ebba 0b04 	subs.w	fp, sl, r4
 801072a:	d00b      	beq.n	8010744 <_vfiprintf_r+0xa4>
 801072c:	465b      	mov	r3, fp
 801072e:	4622      	mov	r2, r4
 8010730:	4629      	mov	r1, r5
 8010732:	4630      	mov	r0, r6
 8010734:	f7ff ffa1 	bl	801067a <__sfputs_r>
 8010738:	3001      	adds	r0, #1
 801073a:	f000 80a7 	beq.w	801088c <_vfiprintf_r+0x1ec>
 801073e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010740:	445a      	add	r2, fp
 8010742:	9209      	str	r2, [sp, #36]	@ 0x24
 8010744:	f89a 3000 	ldrb.w	r3, [sl]
 8010748:	2b00      	cmp	r3, #0
 801074a:	f000 809f 	beq.w	801088c <_vfiprintf_r+0x1ec>
 801074e:	2300      	movs	r3, #0
 8010750:	f04f 32ff 	mov.w	r2, #4294967295
 8010754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010758:	f10a 0a01 	add.w	sl, sl, #1
 801075c:	9304      	str	r3, [sp, #16]
 801075e:	9307      	str	r3, [sp, #28]
 8010760:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010764:	931a      	str	r3, [sp, #104]	@ 0x68
 8010766:	4654      	mov	r4, sl
 8010768:	2205      	movs	r2, #5
 801076a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801076e:	4853      	ldr	r0, [pc, #332]	@ (80108bc <_vfiprintf_r+0x21c>)
 8010770:	f7ef fdd6 	bl	8000320 <memchr>
 8010774:	9a04      	ldr	r2, [sp, #16]
 8010776:	b9d8      	cbnz	r0, 80107b0 <_vfiprintf_r+0x110>
 8010778:	06d1      	lsls	r1, r2, #27
 801077a:	bf44      	itt	mi
 801077c:	2320      	movmi	r3, #32
 801077e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010782:	0713      	lsls	r3, r2, #28
 8010784:	bf44      	itt	mi
 8010786:	232b      	movmi	r3, #43	@ 0x2b
 8010788:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801078c:	f89a 3000 	ldrb.w	r3, [sl]
 8010790:	2b2a      	cmp	r3, #42	@ 0x2a
 8010792:	d015      	beq.n	80107c0 <_vfiprintf_r+0x120>
 8010794:	9a07      	ldr	r2, [sp, #28]
 8010796:	4654      	mov	r4, sl
 8010798:	2000      	movs	r0, #0
 801079a:	f04f 0c0a 	mov.w	ip, #10
 801079e:	4621      	mov	r1, r4
 80107a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107a4:	3b30      	subs	r3, #48	@ 0x30
 80107a6:	2b09      	cmp	r3, #9
 80107a8:	d94b      	bls.n	8010842 <_vfiprintf_r+0x1a2>
 80107aa:	b1b0      	cbz	r0, 80107da <_vfiprintf_r+0x13a>
 80107ac:	9207      	str	r2, [sp, #28]
 80107ae:	e014      	b.n	80107da <_vfiprintf_r+0x13a>
 80107b0:	eba0 0308 	sub.w	r3, r0, r8
 80107b4:	fa09 f303 	lsl.w	r3, r9, r3
 80107b8:	4313      	orrs	r3, r2
 80107ba:	9304      	str	r3, [sp, #16]
 80107bc:	46a2      	mov	sl, r4
 80107be:	e7d2      	b.n	8010766 <_vfiprintf_r+0xc6>
 80107c0:	9b03      	ldr	r3, [sp, #12]
 80107c2:	1d19      	adds	r1, r3, #4
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	9103      	str	r1, [sp, #12]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	bfbb      	ittet	lt
 80107cc:	425b      	neglt	r3, r3
 80107ce:	f042 0202 	orrlt.w	r2, r2, #2
 80107d2:	9307      	strge	r3, [sp, #28]
 80107d4:	9307      	strlt	r3, [sp, #28]
 80107d6:	bfb8      	it	lt
 80107d8:	9204      	strlt	r2, [sp, #16]
 80107da:	7823      	ldrb	r3, [r4, #0]
 80107dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80107de:	d10a      	bne.n	80107f6 <_vfiprintf_r+0x156>
 80107e0:	7863      	ldrb	r3, [r4, #1]
 80107e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80107e4:	d132      	bne.n	801084c <_vfiprintf_r+0x1ac>
 80107e6:	9b03      	ldr	r3, [sp, #12]
 80107e8:	1d1a      	adds	r2, r3, #4
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	9203      	str	r2, [sp, #12]
 80107ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80107f2:	3402      	adds	r4, #2
 80107f4:	9305      	str	r3, [sp, #20]
 80107f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80108cc <_vfiprintf_r+0x22c>
 80107fa:	7821      	ldrb	r1, [r4, #0]
 80107fc:	2203      	movs	r2, #3
 80107fe:	4650      	mov	r0, sl
 8010800:	f7ef fd8e 	bl	8000320 <memchr>
 8010804:	b138      	cbz	r0, 8010816 <_vfiprintf_r+0x176>
 8010806:	9b04      	ldr	r3, [sp, #16]
 8010808:	eba0 000a 	sub.w	r0, r0, sl
 801080c:	2240      	movs	r2, #64	@ 0x40
 801080e:	4082      	lsls	r2, r0
 8010810:	4313      	orrs	r3, r2
 8010812:	3401      	adds	r4, #1
 8010814:	9304      	str	r3, [sp, #16]
 8010816:	f814 1b01 	ldrb.w	r1, [r4], #1
 801081a:	4829      	ldr	r0, [pc, #164]	@ (80108c0 <_vfiprintf_r+0x220>)
 801081c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010820:	2206      	movs	r2, #6
 8010822:	f7ef fd7d 	bl	8000320 <memchr>
 8010826:	2800      	cmp	r0, #0
 8010828:	d03f      	beq.n	80108aa <_vfiprintf_r+0x20a>
 801082a:	4b26      	ldr	r3, [pc, #152]	@ (80108c4 <_vfiprintf_r+0x224>)
 801082c:	bb1b      	cbnz	r3, 8010876 <_vfiprintf_r+0x1d6>
 801082e:	9b03      	ldr	r3, [sp, #12]
 8010830:	3307      	adds	r3, #7
 8010832:	f023 0307 	bic.w	r3, r3, #7
 8010836:	3308      	adds	r3, #8
 8010838:	9303      	str	r3, [sp, #12]
 801083a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801083c:	443b      	add	r3, r7
 801083e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010840:	e76a      	b.n	8010718 <_vfiprintf_r+0x78>
 8010842:	fb0c 3202 	mla	r2, ip, r2, r3
 8010846:	460c      	mov	r4, r1
 8010848:	2001      	movs	r0, #1
 801084a:	e7a8      	b.n	801079e <_vfiprintf_r+0xfe>
 801084c:	2300      	movs	r3, #0
 801084e:	3401      	adds	r4, #1
 8010850:	9305      	str	r3, [sp, #20]
 8010852:	4619      	mov	r1, r3
 8010854:	f04f 0c0a 	mov.w	ip, #10
 8010858:	4620      	mov	r0, r4
 801085a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801085e:	3a30      	subs	r2, #48	@ 0x30
 8010860:	2a09      	cmp	r2, #9
 8010862:	d903      	bls.n	801086c <_vfiprintf_r+0x1cc>
 8010864:	2b00      	cmp	r3, #0
 8010866:	d0c6      	beq.n	80107f6 <_vfiprintf_r+0x156>
 8010868:	9105      	str	r1, [sp, #20]
 801086a:	e7c4      	b.n	80107f6 <_vfiprintf_r+0x156>
 801086c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010870:	4604      	mov	r4, r0
 8010872:	2301      	movs	r3, #1
 8010874:	e7f0      	b.n	8010858 <_vfiprintf_r+0x1b8>
 8010876:	ab03      	add	r3, sp, #12
 8010878:	9300      	str	r3, [sp, #0]
 801087a:	462a      	mov	r2, r5
 801087c:	4b12      	ldr	r3, [pc, #72]	@ (80108c8 <_vfiprintf_r+0x228>)
 801087e:	a904      	add	r1, sp, #16
 8010880:	4630      	mov	r0, r6
 8010882:	f3af 8000 	nop.w
 8010886:	4607      	mov	r7, r0
 8010888:	1c78      	adds	r0, r7, #1
 801088a:	d1d6      	bne.n	801083a <_vfiprintf_r+0x19a>
 801088c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801088e:	07d9      	lsls	r1, r3, #31
 8010890:	d405      	bmi.n	801089e <_vfiprintf_r+0x1fe>
 8010892:	89ab      	ldrh	r3, [r5, #12]
 8010894:	059a      	lsls	r2, r3, #22
 8010896:	d402      	bmi.n	801089e <_vfiprintf_r+0x1fe>
 8010898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801089a:	f7ff fd07 	bl	80102ac <__retarget_lock_release_recursive>
 801089e:	89ab      	ldrh	r3, [r5, #12]
 80108a0:	065b      	lsls	r3, r3, #25
 80108a2:	f53f af1f 	bmi.w	80106e4 <_vfiprintf_r+0x44>
 80108a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80108a8:	e71e      	b.n	80106e8 <_vfiprintf_r+0x48>
 80108aa:	ab03      	add	r3, sp, #12
 80108ac:	9300      	str	r3, [sp, #0]
 80108ae:	462a      	mov	r2, r5
 80108b0:	4b05      	ldr	r3, [pc, #20]	@ (80108c8 <_vfiprintf_r+0x228>)
 80108b2:	a904      	add	r1, sp, #16
 80108b4:	4630      	mov	r0, r6
 80108b6:	f000 f879 	bl	80109ac <_printf_i>
 80108ba:	e7e4      	b.n	8010886 <_vfiprintf_r+0x1e6>
 80108bc:	0801441a 	.word	0x0801441a
 80108c0:	08014424 	.word	0x08014424
 80108c4:	00000000 	.word	0x00000000
 80108c8:	0801067b 	.word	0x0801067b
 80108cc:	08014420 	.word	0x08014420

080108d0 <_printf_common>:
 80108d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108d4:	4616      	mov	r6, r2
 80108d6:	4698      	mov	r8, r3
 80108d8:	688a      	ldr	r2, [r1, #8]
 80108da:	690b      	ldr	r3, [r1, #16]
 80108dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80108e0:	4293      	cmp	r3, r2
 80108e2:	bfb8      	it	lt
 80108e4:	4613      	movlt	r3, r2
 80108e6:	6033      	str	r3, [r6, #0]
 80108e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80108ec:	4607      	mov	r7, r0
 80108ee:	460c      	mov	r4, r1
 80108f0:	b10a      	cbz	r2, 80108f6 <_printf_common+0x26>
 80108f2:	3301      	adds	r3, #1
 80108f4:	6033      	str	r3, [r6, #0]
 80108f6:	6823      	ldr	r3, [r4, #0]
 80108f8:	0699      	lsls	r1, r3, #26
 80108fa:	bf42      	ittt	mi
 80108fc:	6833      	ldrmi	r3, [r6, #0]
 80108fe:	3302      	addmi	r3, #2
 8010900:	6033      	strmi	r3, [r6, #0]
 8010902:	6825      	ldr	r5, [r4, #0]
 8010904:	f015 0506 	ands.w	r5, r5, #6
 8010908:	d106      	bne.n	8010918 <_printf_common+0x48>
 801090a:	f104 0a19 	add.w	sl, r4, #25
 801090e:	68e3      	ldr	r3, [r4, #12]
 8010910:	6832      	ldr	r2, [r6, #0]
 8010912:	1a9b      	subs	r3, r3, r2
 8010914:	42ab      	cmp	r3, r5
 8010916:	dc26      	bgt.n	8010966 <_printf_common+0x96>
 8010918:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801091c:	6822      	ldr	r2, [r4, #0]
 801091e:	3b00      	subs	r3, #0
 8010920:	bf18      	it	ne
 8010922:	2301      	movne	r3, #1
 8010924:	0692      	lsls	r2, r2, #26
 8010926:	d42b      	bmi.n	8010980 <_printf_common+0xb0>
 8010928:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801092c:	4641      	mov	r1, r8
 801092e:	4638      	mov	r0, r7
 8010930:	47c8      	blx	r9
 8010932:	3001      	adds	r0, #1
 8010934:	d01e      	beq.n	8010974 <_printf_common+0xa4>
 8010936:	6823      	ldr	r3, [r4, #0]
 8010938:	6922      	ldr	r2, [r4, #16]
 801093a:	f003 0306 	and.w	r3, r3, #6
 801093e:	2b04      	cmp	r3, #4
 8010940:	bf02      	ittt	eq
 8010942:	68e5      	ldreq	r5, [r4, #12]
 8010944:	6833      	ldreq	r3, [r6, #0]
 8010946:	1aed      	subeq	r5, r5, r3
 8010948:	68a3      	ldr	r3, [r4, #8]
 801094a:	bf0c      	ite	eq
 801094c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010950:	2500      	movne	r5, #0
 8010952:	4293      	cmp	r3, r2
 8010954:	bfc4      	itt	gt
 8010956:	1a9b      	subgt	r3, r3, r2
 8010958:	18ed      	addgt	r5, r5, r3
 801095a:	2600      	movs	r6, #0
 801095c:	341a      	adds	r4, #26
 801095e:	42b5      	cmp	r5, r6
 8010960:	d11a      	bne.n	8010998 <_printf_common+0xc8>
 8010962:	2000      	movs	r0, #0
 8010964:	e008      	b.n	8010978 <_printf_common+0xa8>
 8010966:	2301      	movs	r3, #1
 8010968:	4652      	mov	r2, sl
 801096a:	4641      	mov	r1, r8
 801096c:	4638      	mov	r0, r7
 801096e:	47c8      	blx	r9
 8010970:	3001      	adds	r0, #1
 8010972:	d103      	bne.n	801097c <_printf_common+0xac>
 8010974:	f04f 30ff 	mov.w	r0, #4294967295
 8010978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801097c:	3501      	adds	r5, #1
 801097e:	e7c6      	b.n	801090e <_printf_common+0x3e>
 8010980:	18e1      	adds	r1, r4, r3
 8010982:	1c5a      	adds	r2, r3, #1
 8010984:	2030      	movs	r0, #48	@ 0x30
 8010986:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801098a:	4422      	add	r2, r4
 801098c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010990:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010994:	3302      	adds	r3, #2
 8010996:	e7c7      	b.n	8010928 <_printf_common+0x58>
 8010998:	2301      	movs	r3, #1
 801099a:	4622      	mov	r2, r4
 801099c:	4641      	mov	r1, r8
 801099e:	4638      	mov	r0, r7
 80109a0:	47c8      	blx	r9
 80109a2:	3001      	adds	r0, #1
 80109a4:	d0e6      	beq.n	8010974 <_printf_common+0xa4>
 80109a6:	3601      	adds	r6, #1
 80109a8:	e7d9      	b.n	801095e <_printf_common+0x8e>
	...

080109ac <_printf_i>:
 80109ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109b0:	7e0f      	ldrb	r7, [r1, #24]
 80109b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80109b4:	2f78      	cmp	r7, #120	@ 0x78
 80109b6:	4691      	mov	r9, r2
 80109b8:	4680      	mov	r8, r0
 80109ba:	460c      	mov	r4, r1
 80109bc:	469a      	mov	sl, r3
 80109be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80109c2:	d807      	bhi.n	80109d4 <_printf_i+0x28>
 80109c4:	2f62      	cmp	r7, #98	@ 0x62
 80109c6:	d80a      	bhi.n	80109de <_printf_i+0x32>
 80109c8:	2f00      	cmp	r7, #0
 80109ca:	f000 80d2 	beq.w	8010b72 <_printf_i+0x1c6>
 80109ce:	2f58      	cmp	r7, #88	@ 0x58
 80109d0:	f000 80b9 	beq.w	8010b46 <_printf_i+0x19a>
 80109d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80109d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80109dc:	e03a      	b.n	8010a54 <_printf_i+0xa8>
 80109de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80109e2:	2b15      	cmp	r3, #21
 80109e4:	d8f6      	bhi.n	80109d4 <_printf_i+0x28>
 80109e6:	a101      	add	r1, pc, #4	@ (adr r1, 80109ec <_printf_i+0x40>)
 80109e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80109ec:	08010a45 	.word	0x08010a45
 80109f0:	08010a59 	.word	0x08010a59
 80109f4:	080109d5 	.word	0x080109d5
 80109f8:	080109d5 	.word	0x080109d5
 80109fc:	080109d5 	.word	0x080109d5
 8010a00:	080109d5 	.word	0x080109d5
 8010a04:	08010a59 	.word	0x08010a59
 8010a08:	080109d5 	.word	0x080109d5
 8010a0c:	080109d5 	.word	0x080109d5
 8010a10:	080109d5 	.word	0x080109d5
 8010a14:	080109d5 	.word	0x080109d5
 8010a18:	08010b59 	.word	0x08010b59
 8010a1c:	08010a83 	.word	0x08010a83
 8010a20:	08010b13 	.word	0x08010b13
 8010a24:	080109d5 	.word	0x080109d5
 8010a28:	080109d5 	.word	0x080109d5
 8010a2c:	08010b7b 	.word	0x08010b7b
 8010a30:	080109d5 	.word	0x080109d5
 8010a34:	08010a83 	.word	0x08010a83
 8010a38:	080109d5 	.word	0x080109d5
 8010a3c:	080109d5 	.word	0x080109d5
 8010a40:	08010b1b 	.word	0x08010b1b
 8010a44:	6833      	ldr	r3, [r6, #0]
 8010a46:	1d1a      	adds	r2, r3, #4
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	6032      	str	r2, [r6, #0]
 8010a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010a50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010a54:	2301      	movs	r3, #1
 8010a56:	e09d      	b.n	8010b94 <_printf_i+0x1e8>
 8010a58:	6833      	ldr	r3, [r6, #0]
 8010a5a:	6820      	ldr	r0, [r4, #0]
 8010a5c:	1d19      	adds	r1, r3, #4
 8010a5e:	6031      	str	r1, [r6, #0]
 8010a60:	0606      	lsls	r6, r0, #24
 8010a62:	d501      	bpl.n	8010a68 <_printf_i+0xbc>
 8010a64:	681d      	ldr	r5, [r3, #0]
 8010a66:	e003      	b.n	8010a70 <_printf_i+0xc4>
 8010a68:	0645      	lsls	r5, r0, #25
 8010a6a:	d5fb      	bpl.n	8010a64 <_printf_i+0xb8>
 8010a6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010a70:	2d00      	cmp	r5, #0
 8010a72:	da03      	bge.n	8010a7c <_printf_i+0xd0>
 8010a74:	232d      	movs	r3, #45	@ 0x2d
 8010a76:	426d      	negs	r5, r5
 8010a78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a7c:	4859      	ldr	r0, [pc, #356]	@ (8010be4 <_printf_i+0x238>)
 8010a7e:	230a      	movs	r3, #10
 8010a80:	e011      	b.n	8010aa6 <_printf_i+0xfa>
 8010a82:	6821      	ldr	r1, [r4, #0]
 8010a84:	6833      	ldr	r3, [r6, #0]
 8010a86:	0608      	lsls	r0, r1, #24
 8010a88:	f853 5b04 	ldr.w	r5, [r3], #4
 8010a8c:	d402      	bmi.n	8010a94 <_printf_i+0xe8>
 8010a8e:	0649      	lsls	r1, r1, #25
 8010a90:	bf48      	it	mi
 8010a92:	b2ad      	uxthmi	r5, r5
 8010a94:	2f6f      	cmp	r7, #111	@ 0x6f
 8010a96:	4853      	ldr	r0, [pc, #332]	@ (8010be4 <_printf_i+0x238>)
 8010a98:	6033      	str	r3, [r6, #0]
 8010a9a:	bf14      	ite	ne
 8010a9c:	230a      	movne	r3, #10
 8010a9e:	2308      	moveq	r3, #8
 8010aa0:	2100      	movs	r1, #0
 8010aa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010aa6:	6866      	ldr	r6, [r4, #4]
 8010aa8:	60a6      	str	r6, [r4, #8]
 8010aaa:	2e00      	cmp	r6, #0
 8010aac:	bfa2      	ittt	ge
 8010aae:	6821      	ldrge	r1, [r4, #0]
 8010ab0:	f021 0104 	bicge.w	r1, r1, #4
 8010ab4:	6021      	strge	r1, [r4, #0]
 8010ab6:	b90d      	cbnz	r5, 8010abc <_printf_i+0x110>
 8010ab8:	2e00      	cmp	r6, #0
 8010aba:	d04b      	beq.n	8010b54 <_printf_i+0x1a8>
 8010abc:	4616      	mov	r6, r2
 8010abe:	fbb5 f1f3 	udiv	r1, r5, r3
 8010ac2:	fb03 5711 	mls	r7, r3, r1, r5
 8010ac6:	5dc7      	ldrb	r7, [r0, r7]
 8010ac8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010acc:	462f      	mov	r7, r5
 8010ace:	42bb      	cmp	r3, r7
 8010ad0:	460d      	mov	r5, r1
 8010ad2:	d9f4      	bls.n	8010abe <_printf_i+0x112>
 8010ad4:	2b08      	cmp	r3, #8
 8010ad6:	d10b      	bne.n	8010af0 <_printf_i+0x144>
 8010ad8:	6823      	ldr	r3, [r4, #0]
 8010ada:	07df      	lsls	r7, r3, #31
 8010adc:	d508      	bpl.n	8010af0 <_printf_i+0x144>
 8010ade:	6923      	ldr	r3, [r4, #16]
 8010ae0:	6861      	ldr	r1, [r4, #4]
 8010ae2:	4299      	cmp	r1, r3
 8010ae4:	bfde      	ittt	le
 8010ae6:	2330      	movle	r3, #48	@ 0x30
 8010ae8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010aec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010af0:	1b92      	subs	r2, r2, r6
 8010af2:	6122      	str	r2, [r4, #16]
 8010af4:	f8cd a000 	str.w	sl, [sp]
 8010af8:	464b      	mov	r3, r9
 8010afa:	aa03      	add	r2, sp, #12
 8010afc:	4621      	mov	r1, r4
 8010afe:	4640      	mov	r0, r8
 8010b00:	f7ff fee6 	bl	80108d0 <_printf_common>
 8010b04:	3001      	adds	r0, #1
 8010b06:	d14a      	bne.n	8010b9e <_printf_i+0x1f2>
 8010b08:	f04f 30ff 	mov.w	r0, #4294967295
 8010b0c:	b004      	add	sp, #16
 8010b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b12:	6823      	ldr	r3, [r4, #0]
 8010b14:	f043 0320 	orr.w	r3, r3, #32
 8010b18:	6023      	str	r3, [r4, #0]
 8010b1a:	4833      	ldr	r0, [pc, #204]	@ (8010be8 <_printf_i+0x23c>)
 8010b1c:	2778      	movs	r7, #120	@ 0x78
 8010b1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010b22:	6823      	ldr	r3, [r4, #0]
 8010b24:	6831      	ldr	r1, [r6, #0]
 8010b26:	061f      	lsls	r7, r3, #24
 8010b28:	f851 5b04 	ldr.w	r5, [r1], #4
 8010b2c:	d402      	bmi.n	8010b34 <_printf_i+0x188>
 8010b2e:	065f      	lsls	r7, r3, #25
 8010b30:	bf48      	it	mi
 8010b32:	b2ad      	uxthmi	r5, r5
 8010b34:	6031      	str	r1, [r6, #0]
 8010b36:	07d9      	lsls	r1, r3, #31
 8010b38:	bf44      	itt	mi
 8010b3a:	f043 0320 	orrmi.w	r3, r3, #32
 8010b3e:	6023      	strmi	r3, [r4, #0]
 8010b40:	b11d      	cbz	r5, 8010b4a <_printf_i+0x19e>
 8010b42:	2310      	movs	r3, #16
 8010b44:	e7ac      	b.n	8010aa0 <_printf_i+0xf4>
 8010b46:	4827      	ldr	r0, [pc, #156]	@ (8010be4 <_printf_i+0x238>)
 8010b48:	e7e9      	b.n	8010b1e <_printf_i+0x172>
 8010b4a:	6823      	ldr	r3, [r4, #0]
 8010b4c:	f023 0320 	bic.w	r3, r3, #32
 8010b50:	6023      	str	r3, [r4, #0]
 8010b52:	e7f6      	b.n	8010b42 <_printf_i+0x196>
 8010b54:	4616      	mov	r6, r2
 8010b56:	e7bd      	b.n	8010ad4 <_printf_i+0x128>
 8010b58:	6833      	ldr	r3, [r6, #0]
 8010b5a:	6825      	ldr	r5, [r4, #0]
 8010b5c:	6961      	ldr	r1, [r4, #20]
 8010b5e:	1d18      	adds	r0, r3, #4
 8010b60:	6030      	str	r0, [r6, #0]
 8010b62:	062e      	lsls	r6, r5, #24
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	d501      	bpl.n	8010b6c <_printf_i+0x1c0>
 8010b68:	6019      	str	r1, [r3, #0]
 8010b6a:	e002      	b.n	8010b72 <_printf_i+0x1c6>
 8010b6c:	0668      	lsls	r0, r5, #25
 8010b6e:	d5fb      	bpl.n	8010b68 <_printf_i+0x1bc>
 8010b70:	8019      	strh	r1, [r3, #0]
 8010b72:	2300      	movs	r3, #0
 8010b74:	6123      	str	r3, [r4, #16]
 8010b76:	4616      	mov	r6, r2
 8010b78:	e7bc      	b.n	8010af4 <_printf_i+0x148>
 8010b7a:	6833      	ldr	r3, [r6, #0]
 8010b7c:	1d1a      	adds	r2, r3, #4
 8010b7e:	6032      	str	r2, [r6, #0]
 8010b80:	681e      	ldr	r6, [r3, #0]
 8010b82:	6862      	ldr	r2, [r4, #4]
 8010b84:	2100      	movs	r1, #0
 8010b86:	4630      	mov	r0, r6
 8010b88:	f7ef fbca 	bl	8000320 <memchr>
 8010b8c:	b108      	cbz	r0, 8010b92 <_printf_i+0x1e6>
 8010b8e:	1b80      	subs	r0, r0, r6
 8010b90:	6060      	str	r0, [r4, #4]
 8010b92:	6863      	ldr	r3, [r4, #4]
 8010b94:	6123      	str	r3, [r4, #16]
 8010b96:	2300      	movs	r3, #0
 8010b98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b9c:	e7aa      	b.n	8010af4 <_printf_i+0x148>
 8010b9e:	6923      	ldr	r3, [r4, #16]
 8010ba0:	4632      	mov	r2, r6
 8010ba2:	4649      	mov	r1, r9
 8010ba4:	4640      	mov	r0, r8
 8010ba6:	47d0      	blx	sl
 8010ba8:	3001      	adds	r0, #1
 8010baa:	d0ad      	beq.n	8010b08 <_printf_i+0x15c>
 8010bac:	6823      	ldr	r3, [r4, #0]
 8010bae:	079b      	lsls	r3, r3, #30
 8010bb0:	d413      	bmi.n	8010bda <_printf_i+0x22e>
 8010bb2:	68e0      	ldr	r0, [r4, #12]
 8010bb4:	9b03      	ldr	r3, [sp, #12]
 8010bb6:	4298      	cmp	r0, r3
 8010bb8:	bfb8      	it	lt
 8010bba:	4618      	movlt	r0, r3
 8010bbc:	e7a6      	b.n	8010b0c <_printf_i+0x160>
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	4632      	mov	r2, r6
 8010bc2:	4649      	mov	r1, r9
 8010bc4:	4640      	mov	r0, r8
 8010bc6:	47d0      	blx	sl
 8010bc8:	3001      	adds	r0, #1
 8010bca:	d09d      	beq.n	8010b08 <_printf_i+0x15c>
 8010bcc:	3501      	adds	r5, #1
 8010bce:	68e3      	ldr	r3, [r4, #12]
 8010bd0:	9903      	ldr	r1, [sp, #12]
 8010bd2:	1a5b      	subs	r3, r3, r1
 8010bd4:	42ab      	cmp	r3, r5
 8010bd6:	dcf2      	bgt.n	8010bbe <_printf_i+0x212>
 8010bd8:	e7eb      	b.n	8010bb2 <_printf_i+0x206>
 8010bda:	2500      	movs	r5, #0
 8010bdc:	f104 0619 	add.w	r6, r4, #25
 8010be0:	e7f5      	b.n	8010bce <_printf_i+0x222>
 8010be2:	bf00      	nop
 8010be4:	0801442b 	.word	0x0801442b
 8010be8:	0801443c 	.word	0x0801443c

08010bec <__sflush_r>:
 8010bec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bf4:	0716      	lsls	r6, r2, #28
 8010bf6:	4605      	mov	r5, r0
 8010bf8:	460c      	mov	r4, r1
 8010bfa:	d454      	bmi.n	8010ca6 <__sflush_r+0xba>
 8010bfc:	684b      	ldr	r3, [r1, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	dc02      	bgt.n	8010c08 <__sflush_r+0x1c>
 8010c02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	dd48      	ble.n	8010c9a <__sflush_r+0xae>
 8010c08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c0a:	2e00      	cmp	r6, #0
 8010c0c:	d045      	beq.n	8010c9a <__sflush_r+0xae>
 8010c0e:	2300      	movs	r3, #0
 8010c10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010c14:	682f      	ldr	r7, [r5, #0]
 8010c16:	6a21      	ldr	r1, [r4, #32]
 8010c18:	602b      	str	r3, [r5, #0]
 8010c1a:	d030      	beq.n	8010c7e <__sflush_r+0x92>
 8010c1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010c1e:	89a3      	ldrh	r3, [r4, #12]
 8010c20:	0759      	lsls	r1, r3, #29
 8010c22:	d505      	bpl.n	8010c30 <__sflush_r+0x44>
 8010c24:	6863      	ldr	r3, [r4, #4]
 8010c26:	1ad2      	subs	r2, r2, r3
 8010c28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010c2a:	b10b      	cbz	r3, 8010c30 <__sflush_r+0x44>
 8010c2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010c2e:	1ad2      	subs	r2, r2, r3
 8010c30:	2300      	movs	r3, #0
 8010c32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c34:	6a21      	ldr	r1, [r4, #32]
 8010c36:	4628      	mov	r0, r5
 8010c38:	47b0      	blx	r6
 8010c3a:	1c43      	adds	r3, r0, #1
 8010c3c:	89a3      	ldrh	r3, [r4, #12]
 8010c3e:	d106      	bne.n	8010c4e <__sflush_r+0x62>
 8010c40:	6829      	ldr	r1, [r5, #0]
 8010c42:	291d      	cmp	r1, #29
 8010c44:	d82b      	bhi.n	8010c9e <__sflush_r+0xb2>
 8010c46:	4a2a      	ldr	r2, [pc, #168]	@ (8010cf0 <__sflush_r+0x104>)
 8010c48:	410a      	asrs	r2, r1
 8010c4a:	07d6      	lsls	r6, r2, #31
 8010c4c:	d427      	bmi.n	8010c9e <__sflush_r+0xb2>
 8010c4e:	2200      	movs	r2, #0
 8010c50:	6062      	str	r2, [r4, #4]
 8010c52:	04d9      	lsls	r1, r3, #19
 8010c54:	6922      	ldr	r2, [r4, #16]
 8010c56:	6022      	str	r2, [r4, #0]
 8010c58:	d504      	bpl.n	8010c64 <__sflush_r+0x78>
 8010c5a:	1c42      	adds	r2, r0, #1
 8010c5c:	d101      	bne.n	8010c62 <__sflush_r+0x76>
 8010c5e:	682b      	ldr	r3, [r5, #0]
 8010c60:	b903      	cbnz	r3, 8010c64 <__sflush_r+0x78>
 8010c62:	6560      	str	r0, [r4, #84]	@ 0x54
 8010c64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c66:	602f      	str	r7, [r5, #0]
 8010c68:	b1b9      	cbz	r1, 8010c9a <__sflush_r+0xae>
 8010c6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c6e:	4299      	cmp	r1, r3
 8010c70:	d002      	beq.n	8010c78 <__sflush_r+0x8c>
 8010c72:	4628      	mov	r0, r5
 8010c74:	f7ff fb48 	bl	8010308 <_free_r>
 8010c78:	2300      	movs	r3, #0
 8010c7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c7c:	e00d      	b.n	8010c9a <__sflush_r+0xae>
 8010c7e:	2301      	movs	r3, #1
 8010c80:	4628      	mov	r0, r5
 8010c82:	47b0      	blx	r6
 8010c84:	4602      	mov	r2, r0
 8010c86:	1c50      	adds	r0, r2, #1
 8010c88:	d1c9      	bne.n	8010c1e <__sflush_r+0x32>
 8010c8a:	682b      	ldr	r3, [r5, #0]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d0c6      	beq.n	8010c1e <__sflush_r+0x32>
 8010c90:	2b1d      	cmp	r3, #29
 8010c92:	d001      	beq.n	8010c98 <__sflush_r+0xac>
 8010c94:	2b16      	cmp	r3, #22
 8010c96:	d11e      	bne.n	8010cd6 <__sflush_r+0xea>
 8010c98:	602f      	str	r7, [r5, #0]
 8010c9a:	2000      	movs	r0, #0
 8010c9c:	e022      	b.n	8010ce4 <__sflush_r+0xf8>
 8010c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ca2:	b21b      	sxth	r3, r3
 8010ca4:	e01b      	b.n	8010cde <__sflush_r+0xf2>
 8010ca6:	690f      	ldr	r7, [r1, #16]
 8010ca8:	2f00      	cmp	r7, #0
 8010caa:	d0f6      	beq.n	8010c9a <__sflush_r+0xae>
 8010cac:	0793      	lsls	r3, r2, #30
 8010cae:	680e      	ldr	r6, [r1, #0]
 8010cb0:	bf08      	it	eq
 8010cb2:	694b      	ldreq	r3, [r1, #20]
 8010cb4:	600f      	str	r7, [r1, #0]
 8010cb6:	bf18      	it	ne
 8010cb8:	2300      	movne	r3, #0
 8010cba:	eba6 0807 	sub.w	r8, r6, r7
 8010cbe:	608b      	str	r3, [r1, #8]
 8010cc0:	f1b8 0f00 	cmp.w	r8, #0
 8010cc4:	dde9      	ble.n	8010c9a <__sflush_r+0xae>
 8010cc6:	6a21      	ldr	r1, [r4, #32]
 8010cc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010cca:	4643      	mov	r3, r8
 8010ccc:	463a      	mov	r2, r7
 8010cce:	4628      	mov	r0, r5
 8010cd0:	47b0      	blx	r6
 8010cd2:	2800      	cmp	r0, #0
 8010cd4:	dc08      	bgt.n	8010ce8 <__sflush_r+0xfc>
 8010cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cde:	81a3      	strh	r3, [r4, #12]
 8010ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ce8:	4407      	add	r7, r0
 8010cea:	eba8 0800 	sub.w	r8, r8, r0
 8010cee:	e7e7      	b.n	8010cc0 <__sflush_r+0xd4>
 8010cf0:	dfbffffe 	.word	0xdfbffffe

08010cf4 <_fflush_r>:
 8010cf4:	b538      	push	{r3, r4, r5, lr}
 8010cf6:	690b      	ldr	r3, [r1, #16]
 8010cf8:	4605      	mov	r5, r0
 8010cfa:	460c      	mov	r4, r1
 8010cfc:	b913      	cbnz	r3, 8010d04 <_fflush_r+0x10>
 8010cfe:	2500      	movs	r5, #0
 8010d00:	4628      	mov	r0, r5
 8010d02:	bd38      	pop	{r3, r4, r5, pc}
 8010d04:	b118      	cbz	r0, 8010d0e <_fflush_r+0x1a>
 8010d06:	6a03      	ldr	r3, [r0, #32]
 8010d08:	b90b      	cbnz	r3, 8010d0e <_fflush_r+0x1a>
 8010d0a:	f7ff f8dd 	bl	800fec8 <__sinit>
 8010d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d0f3      	beq.n	8010cfe <_fflush_r+0xa>
 8010d16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010d18:	07d0      	lsls	r0, r2, #31
 8010d1a:	d404      	bmi.n	8010d26 <_fflush_r+0x32>
 8010d1c:	0599      	lsls	r1, r3, #22
 8010d1e:	d402      	bmi.n	8010d26 <_fflush_r+0x32>
 8010d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d22:	f7ff fac2 	bl	80102aa <__retarget_lock_acquire_recursive>
 8010d26:	4628      	mov	r0, r5
 8010d28:	4621      	mov	r1, r4
 8010d2a:	f7ff ff5f 	bl	8010bec <__sflush_r>
 8010d2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d30:	07da      	lsls	r2, r3, #31
 8010d32:	4605      	mov	r5, r0
 8010d34:	d4e4      	bmi.n	8010d00 <_fflush_r+0xc>
 8010d36:	89a3      	ldrh	r3, [r4, #12]
 8010d38:	059b      	lsls	r3, r3, #22
 8010d3a:	d4e1      	bmi.n	8010d00 <_fflush_r+0xc>
 8010d3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d3e:	f7ff fab5 	bl	80102ac <__retarget_lock_release_recursive>
 8010d42:	e7dd      	b.n	8010d00 <_fflush_r+0xc>

08010d44 <fiprintf>:
 8010d44:	b40e      	push	{r1, r2, r3}
 8010d46:	b503      	push	{r0, r1, lr}
 8010d48:	4601      	mov	r1, r0
 8010d4a:	ab03      	add	r3, sp, #12
 8010d4c:	4805      	ldr	r0, [pc, #20]	@ (8010d64 <fiprintf+0x20>)
 8010d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d52:	6800      	ldr	r0, [r0, #0]
 8010d54:	9301      	str	r3, [sp, #4]
 8010d56:	f7ff fca3 	bl	80106a0 <_vfiprintf_r>
 8010d5a:	b002      	add	sp, #8
 8010d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d60:	b003      	add	sp, #12
 8010d62:	4770      	bx	lr
 8010d64:	2400003c 	.word	0x2400003c

08010d68 <__swbuf_r>:
 8010d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d6a:	460e      	mov	r6, r1
 8010d6c:	4614      	mov	r4, r2
 8010d6e:	4605      	mov	r5, r0
 8010d70:	b118      	cbz	r0, 8010d7a <__swbuf_r+0x12>
 8010d72:	6a03      	ldr	r3, [r0, #32]
 8010d74:	b90b      	cbnz	r3, 8010d7a <__swbuf_r+0x12>
 8010d76:	f7ff f8a7 	bl	800fec8 <__sinit>
 8010d7a:	69a3      	ldr	r3, [r4, #24]
 8010d7c:	60a3      	str	r3, [r4, #8]
 8010d7e:	89a3      	ldrh	r3, [r4, #12]
 8010d80:	071a      	lsls	r2, r3, #28
 8010d82:	d501      	bpl.n	8010d88 <__swbuf_r+0x20>
 8010d84:	6923      	ldr	r3, [r4, #16]
 8010d86:	b943      	cbnz	r3, 8010d9a <__swbuf_r+0x32>
 8010d88:	4621      	mov	r1, r4
 8010d8a:	4628      	mov	r0, r5
 8010d8c:	f000 f82a 	bl	8010de4 <__swsetup_r>
 8010d90:	b118      	cbz	r0, 8010d9a <__swbuf_r+0x32>
 8010d92:	f04f 37ff 	mov.w	r7, #4294967295
 8010d96:	4638      	mov	r0, r7
 8010d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d9a:	6823      	ldr	r3, [r4, #0]
 8010d9c:	6922      	ldr	r2, [r4, #16]
 8010d9e:	1a98      	subs	r0, r3, r2
 8010da0:	6963      	ldr	r3, [r4, #20]
 8010da2:	b2f6      	uxtb	r6, r6
 8010da4:	4283      	cmp	r3, r0
 8010da6:	4637      	mov	r7, r6
 8010da8:	dc05      	bgt.n	8010db6 <__swbuf_r+0x4e>
 8010daa:	4621      	mov	r1, r4
 8010dac:	4628      	mov	r0, r5
 8010dae:	f7ff ffa1 	bl	8010cf4 <_fflush_r>
 8010db2:	2800      	cmp	r0, #0
 8010db4:	d1ed      	bne.n	8010d92 <__swbuf_r+0x2a>
 8010db6:	68a3      	ldr	r3, [r4, #8]
 8010db8:	3b01      	subs	r3, #1
 8010dba:	60a3      	str	r3, [r4, #8]
 8010dbc:	6823      	ldr	r3, [r4, #0]
 8010dbe:	1c5a      	adds	r2, r3, #1
 8010dc0:	6022      	str	r2, [r4, #0]
 8010dc2:	701e      	strb	r6, [r3, #0]
 8010dc4:	6962      	ldr	r2, [r4, #20]
 8010dc6:	1c43      	adds	r3, r0, #1
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d004      	beq.n	8010dd6 <__swbuf_r+0x6e>
 8010dcc:	89a3      	ldrh	r3, [r4, #12]
 8010dce:	07db      	lsls	r3, r3, #31
 8010dd0:	d5e1      	bpl.n	8010d96 <__swbuf_r+0x2e>
 8010dd2:	2e0a      	cmp	r6, #10
 8010dd4:	d1df      	bne.n	8010d96 <__swbuf_r+0x2e>
 8010dd6:	4621      	mov	r1, r4
 8010dd8:	4628      	mov	r0, r5
 8010dda:	f7ff ff8b 	bl	8010cf4 <_fflush_r>
 8010dde:	2800      	cmp	r0, #0
 8010de0:	d0d9      	beq.n	8010d96 <__swbuf_r+0x2e>
 8010de2:	e7d6      	b.n	8010d92 <__swbuf_r+0x2a>

08010de4 <__swsetup_r>:
 8010de4:	b538      	push	{r3, r4, r5, lr}
 8010de6:	4b29      	ldr	r3, [pc, #164]	@ (8010e8c <__swsetup_r+0xa8>)
 8010de8:	4605      	mov	r5, r0
 8010dea:	6818      	ldr	r0, [r3, #0]
 8010dec:	460c      	mov	r4, r1
 8010dee:	b118      	cbz	r0, 8010df8 <__swsetup_r+0x14>
 8010df0:	6a03      	ldr	r3, [r0, #32]
 8010df2:	b90b      	cbnz	r3, 8010df8 <__swsetup_r+0x14>
 8010df4:	f7ff f868 	bl	800fec8 <__sinit>
 8010df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dfc:	0719      	lsls	r1, r3, #28
 8010dfe:	d422      	bmi.n	8010e46 <__swsetup_r+0x62>
 8010e00:	06da      	lsls	r2, r3, #27
 8010e02:	d407      	bmi.n	8010e14 <__swsetup_r+0x30>
 8010e04:	2209      	movs	r2, #9
 8010e06:	602a      	str	r2, [r5, #0]
 8010e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e0c:	81a3      	strh	r3, [r4, #12]
 8010e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e12:	e033      	b.n	8010e7c <__swsetup_r+0x98>
 8010e14:	0758      	lsls	r0, r3, #29
 8010e16:	d512      	bpl.n	8010e3e <__swsetup_r+0x5a>
 8010e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e1a:	b141      	cbz	r1, 8010e2e <__swsetup_r+0x4a>
 8010e1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010e20:	4299      	cmp	r1, r3
 8010e22:	d002      	beq.n	8010e2a <__swsetup_r+0x46>
 8010e24:	4628      	mov	r0, r5
 8010e26:	f7ff fa6f 	bl	8010308 <_free_r>
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010e2e:	89a3      	ldrh	r3, [r4, #12]
 8010e30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010e34:	81a3      	strh	r3, [r4, #12]
 8010e36:	2300      	movs	r3, #0
 8010e38:	6063      	str	r3, [r4, #4]
 8010e3a:	6923      	ldr	r3, [r4, #16]
 8010e3c:	6023      	str	r3, [r4, #0]
 8010e3e:	89a3      	ldrh	r3, [r4, #12]
 8010e40:	f043 0308 	orr.w	r3, r3, #8
 8010e44:	81a3      	strh	r3, [r4, #12]
 8010e46:	6923      	ldr	r3, [r4, #16]
 8010e48:	b94b      	cbnz	r3, 8010e5e <__swsetup_r+0x7a>
 8010e4a:	89a3      	ldrh	r3, [r4, #12]
 8010e4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e54:	d003      	beq.n	8010e5e <__swsetup_r+0x7a>
 8010e56:	4621      	mov	r1, r4
 8010e58:	4628      	mov	r0, r5
 8010e5a:	f000 f874 	bl	8010f46 <__smakebuf_r>
 8010e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e62:	f013 0201 	ands.w	r2, r3, #1
 8010e66:	d00a      	beq.n	8010e7e <__swsetup_r+0x9a>
 8010e68:	2200      	movs	r2, #0
 8010e6a:	60a2      	str	r2, [r4, #8]
 8010e6c:	6962      	ldr	r2, [r4, #20]
 8010e6e:	4252      	negs	r2, r2
 8010e70:	61a2      	str	r2, [r4, #24]
 8010e72:	6922      	ldr	r2, [r4, #16]
 8010e74:	b942      	cbnz	r2, 8010e88 <__swsetup_r+0xa4>
 8010e76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010e7a:	d1c5      	bne.n	8010e08 <__swsetup_r+0x24>
 8010e7c:	bd38      	pop	{r3, r4, r5, pc}
 8010e7e:	0799      	lsls	r1, r3, #30
 8010e80:	bf58      	it	pl
 8010e82:	6962      	ldrpl	r2, [r4, #20]
 8010e84:	60a2      	str	r2, [r4, #8]
 8010e86:	e7f4      	b.n	8010e72 <__swsetup_r+0x8e>
 8010e88:	2000      	movs	r0, #0
 8010e8a:	e7f7      	b.n	8010e7c <__swsetup_r+0x98>
 8010e8c:	2400003c 	.word	0x2400003c

08010e90 <abort>:
 8010e90:	b508      	push	{r3, lr}
 8010e92:	2006      	movs	r0, #6
 8010e94:	f000 f8bc 	bl	8011010 <raise>
 8010e98:	2001      	movs	r0, #1
 8010e9a:	f7f0 f95d 	bl	8001158 <_exit>

08010e9e <_realloc_r>:
 8010e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea2:	4680      	mov	r8, r0
 8010ea4:	4615      	mov	r5, r2
 8010ea6:	460c      	mov	r4, r1
 8010ea8:	b921      	cbnz	r1, 8010eb4 <_realloc_r+0x16>
 8010eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010eae:	4611      	mov	r1, r2
 8010eb0:	f7fe be30 	b.w	800fb14 <_malloc_r>
 8010eb4:	b92a      	cbnz	r2, 8010ec2 <_realloc_r+0x24>
 8010eb6:	f7ff fa27 	bl	8010308 <_free_r>
 8010eba:	2400      	movs	r4, #0
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ec2:	f000 f8e3 	bl	801108c <_malloc_usable_size_r>
 8010ec6:	4285      	cmp	r5, r0
 8010ec8:	4606      	mov	r6, r0
 8010eca:	d802      	bhi.n	8010ed2 <_realloc_r+0x34>
 8010ecc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010ed0:	d8f4      	bhi.n	8010ebc <_realloc_r+0x1e>
 8010ed2:	4629      	mov	r1, r5
 8010ed4:	4640      	mov	r0, r8
 8010ed6:	f7fe fe1d 	bl	800fb14 <_malloc_r>
 8010eda:	4607      	mov	r7, r0
 8010edc:	2800      	cmp	r0, #0
 8010ede:	d0ec      	beq.n	8010eba <_realloc_r+0x1c>
 8010ee0:	42b5      	cmp	r5, r6
 8010ee2:	462a      	mov	r2, r5
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	bf28      	it	cs
 8010ee8:	4632      	movcs	r2, r6
 8010eea:	f7ff f9e0 	bl	80102ae <memcpy>
 8010eee:	4621      	mov	r1, r4
 8010ef0:	4640      	mov	r0, r8
 8010ef2:	f7ff fa09 	bl	8010308 <_free_r>
 8010ef6:	463c      	mov	r4, r7
 8010ef8:	e7e0      	b.n	8010ebc <_realloc_r+0x1e>

08010efa <__swhatbuf_r>:
 8010efa:	b570      	push	{r4, r5, r6, lr}
 8010efc:	460c      	mov	r4, r1
 8010efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f02:	2900      	cmp	r1, #0
 8010f04:	b096      	sub	sp, #88	@ 0x58
 8010f06:	4615      	mov	r5, r2
 8010f08:	461e      	mov	r6, r3
 8010f0a:	da0d      	bge.n	8010f28 <__swhatbuf_r+0x2e>
 8010f0c:	89a3      	ldrh	r3, [r4, #12]
 8010f0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010f12:	f04f 0100 	mov.w	r1, #0
 8010f16:	bf14      	ite	ne
 8010f18:	2340      	movne	r3, #64	@ 0x40
 8010f1a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010f1e:	2000      	movs	r0, #0
 8010f20:	6031      	str	r1, [r6, #0]
 8010f22:	602b      	str	r3, [r5, #0]
 8010f24:	b016      	add	sp, #88	@ 0x58
 8010f26:	bd70      	pop	{r4, r5, r6, pc}
 8010f28:	466a      	mov	r2, sp
 8010f2a:	f000 f879 	bl	8011020 <_fstat_r>
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	dbec      	blt.n	8010f0c <__swhatbuf_r+0x12>
 8010f32:	9901      	ldr	r1, [sp, #4]
 8010f34:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010f38:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010f3c:	4259      	negs	r1, r3
 8010f3e:	4159      	adcs	r1, r3
 8010f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f44:	e7eb      	b.n	8010f1e <__swhatbuf_r+0x24>

08010f46 <__smakebuf_r>:
 8010f46:	898b      	ldrh	r3, [r1, #12]
 8010f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f4a:	079d      	lsls	r5, r3, #30
 8010f4c:	4606      	mov	r6, r0
 8010f4e:	460c      	mov	r4, r1
 8010f50:	d507      	bpl.n	8010f62 <__smakebuf_r+0x1c>
 8010f52:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010f56:	6023      	str	r3, [r4, #0]
 8010f58:	6123      	str	r3, [r4, #16]
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	6163      	str	r3, [r4, #20]
 8010f5e:	b003      	add	sp, #12
 8010f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f62:	ab01      	add	r3, sp, #4
 8010f64:	466a      	mov	r2, sp
 8010f66:	f7ff ffc8 	bl	8010efa <__swhatbuf_r>
 8010f6a:	9f00      	ldr	r7, [sp, #0]
 8010f6c:	4605      	mov	r5, r0
 8010f6e:	4639      	mov	r1, r7
 8010f70:	4630      	mov	r0, r6
 8010f72:	f7fe fdcf 	bl	800fb14 <_malloc_r>
 8010f76:	b948      	cbnz	r0, 8010f8c <__smakebuf_r+0x46>
 8010f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f7c:	059a      	lsls	r2, r3, #22
 8010f7e:	d4ee      	bmi.n	8010f5e <__smakebuf_r+0x18>
 8010f80:	f023 0303 	bic.w	r3, r3, #3
 8010f84:	f043 0302 	orr.w	r3, r3, #2
 8010f88:	81a3      	strh	r3, [r4, #12]
 8010f8a:	e7e2      	b.n	8010f52 <__smakebuf_r+0xc>
 8010f8c:	89a3      	ldrh	r3, [r4, #12]
 8010f8e:	6020      	str	r0, [r4, #0]
 8010f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f94:	81a3      	strh	r3, [r4, #12]
 8010f96:	9b01      	ldr	r3, [sp, #4]
 8010f98:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010f9c:	b15b      	cbz	r3, 8010fb6 <__smakebuf_r+0x70>
 8010f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fa2:	4630      	mov	r0, r6
 8010fa4:	f000 f84e 	bl	8011044 <_isatty_r>
 8010fa8:	b128      	cbz	r0, 8010fb6 <__smakebuf_r+0x70>
 8010faa:	89a3      	ldrh	r3, [r4, #12]
 8010fac:	f023 0303 	bic.w	r3, r3, #3
 8010fb0:	f043 0301 	orr.w	r3, r3, #1
 8010fb4:	81a3      	strh	r3, [r4, #12]
 8010fb6:	89a3      	ldrh	r3, [r4, #12]
 8010fb8:	431d      	orrs	r5, r3
 8010fba:	81a5      	strh	r5, [r4, #12]
 8010fbc:	e7cf      	b.n	8010f5e <__smakebuf_r+0x18>

08010fbe <_raise_r>:
 8010fbe:	291f      	cmp	r1, #31
 8010fc0:	b538      	push	{r3, r4, r5, lr}
 8010fc2:	4605      	mov	r5, r0
 8010fc4:	460c      	mov	r4, r1
 8010fc6:	d904      	bls.n	8010fd2 <_raise_r+0x14>
 8010fc8:	2316      	movs	r3, #22
 8010fca:	6003      	str	r3, [r0, #0]
 8010fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8010fd0:	bd38      	pop	{r3, r4, r5, pc}
 8010fd2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010fd4:	b112      	cbz	r2, 8010fdc <_raise_r+0x1e>
 8010fd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010fda:	b94b      	cbnz	r3, 8010ff0 <_raise_r+0x32>
 8010fdc:	4628      	mov	r0, r5
 8010fde:	f000 f853 	bl	8011088 <_getpid_r>
 8010fe2:	4622      	mov	r2, r4
 8010fe4:	4601      	mov	r1, r0
 8010fe6:	4628      	mov	r0, r5
 8010fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fec:	f000 b83a 	b.w	8011064 <_kill_r>
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d00a      	beq.n	801100a <_raise_r+0x4c>
 8010ff4:	1c59      	adds	r1, r3, #1
 8010ff6:	d103      	bne.n	8011000 <_raise_r+0x42>
 8010ff8:	2316      	movs	r3, #22
 8010ffa:	6003      	str	r3, [r0, #0]
 8010ffc:	2001      	movs	r0, #1
 8010ffe:	e7e7      	b.n	8010fd0 <_raise_r+0x12>
 8011000:	2100      	movs	r1, #0
 8011002:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011006:	4620      	mov	r0, r4
 8011008:	4798      	blx	r3
 801100a:	2000      	movs	r0, #0
 801100c:	e7e0      	b.n	8010fd0 <_raise_r+0x12>
	...

08011010 <raise>:
 8011010:	4b02      	ldr	r3, [pc, #8]	@ (801101c <raise+0xc>)
 8011012:	4601      	mov	r1, r0
 8011014:	6818      	ldr	r0, [r3, #0]
 8011016:	f7ff bfd2 	b.w	8010fbe <_raise_r>
 801101a:	bf00      	nop
 801101c:	2400003c 	.word	0x2400003c

08011020 <_fstat_r>:
 8011020:	b538      	push	{r3, r4, r5, lr}
 8011022:	4d07      	ldr	r5, [pc, #28]	@ (8011040 <_fstat_r+0x20>)
 8011024:	2300      	movs	r3, #0
 8011026:	4604      	mov	r4, r0
 8011028:	4608      	mov	r0, r1
 801102a:	4611      	mov	r1, r2
 801102c:	602b      	str	r3, [r5, #0]
 801102e:	f7f0 f8b9 	bl	80011a4 <_fstat>
 8011032:	1c43      	adds	r3, r0, #1
 8011034:	d102      	bne.n	801103c <_fstat_r+0x1c>
 8011036:	682b      	ldr	r3, [r5, #0]
 8011038:	b103      	cbz	r3, 801103c <_fstat_r+0x1c>
 801103a:	6023      	str	r3, [r4, #0]
 801103c:	bd38      	pop	{r3, r4, r5, pc}
 801103e:	bf00      	nop
 8011040:	240209f8 	.word	0x240209f8

08011044 <_isatty_r>:
 8011044:	b538      	push	{r3, r4, r5, lr}
 8011046:	4d06      	ldr	r5, [pc, #24]	@ (8011060 <_isatty_r+0x1c>)
 8011048:	2300      	movs	r3, #0
 801104a:	4604      	mov	r4, r0
 801104c:	4608      	mov	r0, r1
 801104e:	602b      	str	r3, [r5, #0]
 8011050:	f7f0 f8ae 	bl	80011b0 <_isatty>
 8011054:	1c43      	adds	r3, r0, #1
 8011056:	d102      	bne.n	801105e <_isatty_r+0x1a>
 8011058:	682b      	ldr	r3, [r5, #0]
 801105a:	b103      	cbz	r3, 801105e <_isatty_r+0x1a>
 801105c:	6023      	str	r3, [r4, #0]
 801105e:	bd38      	pop	{r3, r4, r5, pc}
 8011060:	240209f8 	.word	0x240209f8

08011064 <_kill_r>:
 8011064:	b538      	push	{r3, r4, r5, lr}
 8011066:	4d07      	ldr	r5, [pc, #28]	@ (8011084 <_kill_r+0x20>)
 8011068:	2300      	movs	r3, #0
 801106a:	4604      	mov	r4, r0
 801106c:	4608      	mov	r0, r1
 801106e:	4611      	mov	r1, r2
 8011070:	602b      	str	r3, [r5, #0]
 8011072:	f7f0 f869 	bl	8001148 <_kill>
 8011076:	1c43      	adds	r3, r0, #1
 8011078:	d102      	bne.n	8011080 <_kill_r+0x1c>
 801107a:	682b      	ldr	r3, [r5, #0]
 801107c:	b103      	cbz	r3, 8011080 <_kill_r+0x1c>
 801107e:	6023      	str	r3, [r4, #0]
 8011080:	bd38      	pop	{r3, r4, r5, pc}
 8011082:	bf00      	nop
 8011084:	240209f8 	.word	0x240209f8

08011088 <_getpid_r>:
 8011088:	f7f0 b85c 	b.w	8001144 <_getpid>

0801108c <_malloc_usable_size_r>:
 801108c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011090:	1f18      	subs	r0, r3, #4
 8011092:	2b00      	cmp	r3, #0
 8011094:	bfbc      	itt	lt
 8011096:	580b      	ldrlt	r3, [r1, r0]
 8011098:	18c0      	addlt	r0, r0, r3
 801109a:	4770      	bx	lr

0801109c <_init>:
 801109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801109e:	bf00      	nop
 80110a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110a2:	bc08      	pop	{r3}
 80110a4:	469e      	mov	lr, r3
 80110a6:	4770      	bx	lr

080110a8 <_fini>:
 80110a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110aa:	bf00      	nop
 80110ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110ae:	bc08      	pop	{r3}
 80110b0:	469e      	mov	lr, r3
 80110b2:	4770      	bx	lr
